     __kernel void fwsim(__global const float *semus,
                          __global const float *fluxes,
                          __global float *mds_out)
        {
          const int gid = get_group_id(0) + get_group_id(1);
          const int idx = get_local_id(0);
          const int idy = get_local_id(1);

          //printf("\n group_id=%d idx=%d idy=%d glob_x=%d glob_y=%d \n",gid,idx,idy,get_global_id(0),get_global_id(1));

          // Here we store the sizes of the given matrices in a step
          int mAm = 0;
          int mAn = 0;
          int mBm = 0;
          int mBn = 0;
          int mXm = 0;
          int mXn = 0;
          int mYm = 0;
          int mYn = 0;


        

__local float mA[22201]; 
__local float mA_L[22201]; 
__local float mB[1274]; 
__local float mX[298]; 
__local float mY[48]; 
__local float mBY[298]; 


//Required EMRs: 39  Required Fluxes: 90  Target MDs: 80 
int offset_emrs   = 0; 
int offset_fluxes = gid * 90; 
int offset_target = gid * 80; 
//-----Init EMRs-------------------------------------------------------------------------------------
float mr_CO2_unlabeled_1_M_0 = semus[offset_emrs + 0];
float mr_CO2_unlabeled_1_M_1 = semus[offset_emrs + 1];
float mr_Gluc_ext_1_M_0 = semus[offset_emrs + 2];
float mr_Gluc_ext_1_M_1 = semus[offset_emrs + 3];
float mr_Gluc_ext_2_M_0 = semus[offset_emrs + 4];
float mr_Gluc_ext_2_M_1 = semus[offset_emrs + 5];
float mr_Gluc_ext_3_M_0 = semus[offset_emrs + 6];
float mr_Gluc_ext_3_M_1 = semus[offset_emrs + 7];
float mr_Gluc_ext_4_M_0 = semus[offset_emrs + 8];
float mr_Gluc_ext_4_M_1 = semus[offset_emrs + 9];
float mr_Gluc_ext_5_M_0 = semus[offset_emrs + 10];
float mr_Gluc_ext_5_M_1 = semus[offset_emrs + 11];
float mr_Gluc_ext_6_M_0 = semus[offset_emrs + 12];
float mr_Gluc_ext_6_M_1 = semus[offset_emrs + 13];
float mr_Gluc_ext_1_2_M_0 = semus[offset_emrs + 14];
float mr_Gluc_ext_1_2_M_1 = semus[offset_emrs + 15];
float mr_Gluc_ext_1_2_M_2 = semus[offset_emrs + 16];
float mr_Gluc_ext_2_3_M_0 = semus[offset_emrs + 17];
float mr_Gluc_ext_2_3_M_1 = semus[offset_emrs + 18];
float mr_Gluc_ext_2_3_M_2 = semus[offset_emrs + 19];
float mr_Gluc_ext_4_5_M_0 = semus[offset_emrs + 20];
float mr_Gluc_ext_4_5_M_1 = semus[offset_emrs + 21];
float mr_Gluc_ext_4_5_M_2 = semus[offset_emrs + 22];
float mr_Gluc_ext_5_6_M_0 = semus[offset_emrs + 23];
float mr_Gluc_ext_5_6_M_1 = semus[offset_emrs + 24];
float mr_Gluc_ext_5_6_M_2 = semus[offset_emrs + 25];
float mr_Gluc_ext_1_2_3_M_0 = semus[offset_emrs + 26];
float mr_Gluc_ext_1_2_3_M_1 = semus[offset_emrs + 27];
float mr_Gluc_ext_1_2_3_M_2 = semus[offset_emrs + 28];
float mr_Gluc_ext_1_2_3_M_3 = semus[offset_emrs + 29];
float mr_Gluc_ext_4_5_6_M_0 = semus[offset_emrs + 30];
float mr_Gluc_ext_4_5_6_M_1 = semus[offset_emrs + 31];
float mr_Gluc_ext_4_5_6_M_2 = semus[offset_emrs + 32];
float mr_Gluc_ext_4_5_6_M_3 = semus[offset_emrs + 33];
float mr_Gluc_ext_3_4_5_6_M_0 = semus[offset_emrs + 34];
float mr_Gluc_ext_3_4_5_6_M_1 = semus[offset_emrs + 35];
float mr_Gluc_ext_3_4_5_6_M_2 = semus[offset_emrs + 36];
float mr_Gluc_ext_3_4_5_6_M_3 = semus[offset_emrs + 37];
float mr_Gluc_ext_3_4_5_6_M_4 = semus[offset_emrs + 38];
//-----Init Fluxes-----------------------------------------------------------------------------------
float v_v01_SX_Gluc_In_b = fluxes[ offset_fluxes + 1];
float v_v02_glyc_bw = fluxes[ offset_fluxes + 3];
float v_v02_glyc_fw = fluxes[ offset_fluxes + 2];
float v_v03_glyc_fw = fluxes[ offset_fluxes + 4];
float v_v04_glyc_bw = fluxes[ offset_fluxes + 6];
float v_v04_glyc_fw = fluxes[ offset_fluxes + 5];
float v_v05_glyc_bw = fluxes[ offset_fluxes + 8];
float v_v05_glyc_fw = fluxes[ offset_fluxes + 7];
float v_v06_glyc_bw = fluxes[ offset_fluxes + 10];
float v_v06_glyc_fw = fluxes[ offset_fluxes + 9];
float v_v07_glyc_bw = fluxes[ offset_fluxes + 12];
float v_v07_glyc_fw = fluxes[ offset_fluxes + 11];
float v_v08_glyc_fw = fluxes[ offset_fluxes + 13];
float v_v09_ppp_fw = fluxes[ offset_fluxes + 14];
float v_v10_ppp_fw = fluxes[ offset_fluxes + 15];
float v_v11_ppp_bw = fluxes[ offset_fluxes + 17];
float v_v11_ppp_fw = fluxes[ offset_fluxes + 16];
float v_v12_ppp_bw = fluxes[ offset_fluxes + 19];
float v_v12_ppp_fw = fluxes[ offset_fluxes + 18];
float v_v13_ppp_bw = fluxes[ offset_fluxes + 21];
float v_v13_ppp_fw = fluxes[ offset_fluxes + 20];
float v_v14_ppp_bw = fluxes[ offset_fluxes + 23];
float v_v14_ppp_fw = fluxes[ offset_fluxes + 22];
float v_v15_ppp_bw = fluxes[ offset_fluxes + 25];
float v_v15_ppp_fw = fluxes[ offset_fluxes + 24];
float v_v16_ppp_bw = fluxes[ offset_fluxes + 27];
float v_v16_ppp_fw = fluxes[ offset_fluxes + 26];
float v_v17_ppp_bw = fluxes[ offset_fluxes + 29];
float v_v17_ppp_fw = fluxes[ offset_fluxes + 28];
float v_v18_ed_fw = fluxes[ offset_fluxes + 30];
float v_v19_ed_fw = fluxes[ offset_fluxes + 31];
float v_v20_tca_fw = fluxes[ offset_fluxes + 32];
float v_v21_tca_fw = fluxes[ offset_fluxes + 33];
float v_v22_tca_bw = fluxes[ offset_fluxes + 35];
float v_v22_tca_fw = fluxes[ offset_fluxes + 34];
float v_v23_tca_bw = fluxes[ offset_fluxes + 37];
float v_v23_tca_fw = fluxes[ offset_fluxes + 36];
float v_v24_tca_fw = fluxes[ offset_fluxes + 38];
float v_v25_tca_bw_a = fluxes[ offset_fluxes + 41];
float v_v25_tca_bw_b = fluxes[ offset_fluxes + 42];
float v_v25_tca_fw_a = fluxes[ offset_fluxes + 39];
float v_v25_tca_fw_b = fluxes[ offset_fluxes + 40];
float v_v26_tca_bw_a = fluxes[ offset_fluxes + 45];
float v_v26_tca_bw_b = fluxes[ offset_fluxes + 46];
float v_v26_tca_fw_a = fluxes[ offset_fluxes + 43];
float v_v26_tca_fw_b = fluxes[ offset_fluxes + 44];
float v_v27_tca_bw_a = fluxes[ offset_fluxes + 49];
float v_v27_tca_bw_b = fluxes[ offset_fluxes + 50];
float v_v27_tca_fw_a = fluxes[ offset_fluxes + 47];
float v_v27_tca_fw_b = fluxes[ offset_fluxes + 48];
float v_v28_tca_bw = fluxes[ offset_fluxes + 52];
float v_v28_tca_fw = fluxes[ offset_fluxes + 51];
float v_v29_glyox_fw_a = fluxes[ offset_fluxes + 53];
float v_v29_glyox_fw_b = fluxes[ offset_fluxes + 54];
float v_v30_glyox_fw = fluxes[ offset_fluxes + 55];
float v_v31_amphi_fw = fluxes[ offset_fluxes + 56];
float v_v32_amphi_fw = fluxes[ offset_fluxes + 57];
float v_v33_amphi_fw = fluxes[ offset_fluxes + 58];
float v_v34_amphi_fw = fluxes[ offset_fluxes + 59];
float v_v35_acet_bw = fluxes[ offset_fluxes + 61];
float v_v35_acet_fw = fluxes[ offset_fluxes + 60];
float v_v36_aa_fw = fluxes[ offset_fluxes + 62];
float v_v37_aa_fw = fluxes[ offset_fluxes + 63];
float v_v39_aa_fw = fluxes[ offset_fluxes + 65];
float v_v40_aa_fw = fluxes[ offset_fluxes + 66];
float v_v42_aa_fw = fluxes[ offset_fluxes + 68];
float v_v43_aa_fw = fluxes[ offset_fluxes + 69];
float v_v44_aa_bw = fluxes[ offset_fluxes + 71];
float v_v44_aa_fw = fluxes[ offset_fluxes + 70];
float v_v45_aa_bw = fluxes[ offset_fluxes + 73];
float v_v45_aa_fw = fluxes[ offset_fluxes + 72];
float v_v46_aa_fw = fluxes[ offset_fluxes + 74];
float v_v47_aa_fw = fluxes[ offset_fluxes + 75];
float v_v48_aa_fw_a = fluxes[ offset_fluxes + 76];
float v_v48_aa_fw_b = fluxes[ offset_fluxes + 77];
float v_v48_aa_fw_c = fluxes[ offset_fluxes + 78];
float v_v48_aa_fw_d = fluxes[ offset_fluxes + 79];
float v_v49_aa_fw_a = fluxes[ offset_fluxes + 80];
float v_v49_aa_fw_b = fluxes[ offset_fluxes + 81];
float v_v50_aa_fw = fluxes[ offset_fluxes + 82];
float v_v51_aa_fw_a = fluxes[ offset_fluxes + 83];
float v_v51_aa_fw_b = fluxes[ offset_fluxes + 84];
float v_v52_aa_fw = fluxes[ offset_fluxes + 85];
float v_v53_aa_fw = fluxes[ offset_fluxes + 86];
float v_v54_aa_fw = fluxes[ offset_fluxes + 87];
float v_v55_aa_fw = fluxes[ offset_fluxes + 88];
float v_v56_aa_fw = fluxes[ offset_fluxes + 89];
float v_v57_aa_fw = fluxes[ offset_fluxes + 90];
float v_v58_aa_fw = fluxes[ offset_fluxes + 91];
float v_v71_CO2Exch_b = fluxes[ offset_fluxes + 139];
//---------------------------------------------------------------------------------------------------
//------Declare All Temporary EMR Float values--------------------------------------------------------------
float mr_Fum_1_2_M_1;
float mr_Mal_1_2_M_1;
float mr_E4P_1_M_0;
float mr_Ru5P_4_M_0;
float mr_DHAP_1_2_3_M_1;
float mr_R5P_1_2_M_1;
float mr_OAC_1_2_3_4_M_0;
float mr_KDPG_1_2_3_M_2;
float mr_ICit_2_3_4_5_M_1;
float mr_G6P_1_2_3_M_0;
float mr_Val_1_2_3_4_5_M_4;
float mr_KDPG_2_3_M_1;
float mr_LLDAP_1_M_0;
float mr_X6PG_4_5_6_M_3;
float mr_Glyox_1_M_1;
float mr_FBP_2_3_M_0;
float mr_AKG_3_M_1;
float mr_AKG_2_3_M_1;
float mr_F6P_2_3_M_0;
float mr_TAC3_2_3_M_1;
float mr_E4P_2_3_M_0;
float mr_SucCoA_2_3_4_M_0;
float mr_Glu_3_M_1;
float mr_R5P_2_M_0;
float mr_GAP_3_M_0;
float mr_PEP_3_M_0;
float mr_TAC3_1_2_3_M_3;
float mr_TAC3_1_M_0;
float mr_Gln_3_M_1;
float mr_ICit_4_M_0;
float mr_Phe_2_3_4_5_6_7_8_9_M_2;
float mr_Gln_3_4_5_M_2;
float mr_ICit_2_M_1;
float mr_Mal_2_3_4_M_3;
float mr_Glu_3_4_5_M_2;
float mr_Suc_1_2_3_M_1;
float mr_Thr_1_M_1;
float mr_Fum_4_M_1;
float mr_SucCoA_3_M_0;
float mr_Cit_1_2_M_1;
float mr_X6PG_2_3_M_1;
float mr_Pyr_1_2_3_M_0;
float mr_Asp_1_2_M_1;
float mr_AKG_3_4_5_M_2;
float mr_Cit_3_4_5_6_M_3;
float mr_G6P_3_4_5_6_M_3;
float mr_S7P_1_2_M_1;
float mr_Ru5P_2_M_1;
float mr_AKG_3_4_M_1;
float mr_AKG_2_3_4_5_M_2;
float mr_E4P_3_4_M_1;
float mr_Gln_3_4_M_1;
float mr_Glu_3_4_M_1;
float mr_AKG_2_3_4_M_1;
float mr_Asp_4_M_1;
float mr_Val_2_3_4_5_M_1;
float mr_Fum_1_2_3_4_M_4;
float mr_Mal_1_2_3_4_M_4;
float mr_R5P_3_4_5_M_1;
float mr_X6PG_1_2_3_M_2;
float mr_E4P_1_2_3_4_M_4;
float mr_R5P_2_3_4_5_M_3;
float mr_OAC_1_M_0;
float mr_AKG_3_4_5_M_3;
float mr_Cit_3_4_5_6_M_2;
float mr_AKG_2_3_4_5_M_3;
float mr_G6P_3_4_5_6_M_2;
float mr_AKG_4_5_M_0;
float mr_Gln_4_5_M_0;
float mr_Glu_4_5_M_0;
float mr_Ru5P_1_2_M_0;
float mr_Gln_3_4_5_M_3;
float mr_Mal_2_3_4_M_2;
float mr_Glu_3_4_5_M_3;
float mr_Thr_3_4_M_1;
float mr_S7P_1_2_3_M_1;
float mr_TKC2_1_2_M_2;
float mr_S7P_5_M_1;
float mr_SucCoA_3_4_M_0;
float mr_R5P_2_3_4_5_M_2;
float mr_Ac_1_2_M_0;
float mr_Gln_1_2_M_2;
float mr_ICit_3_4_5_6_M_1;
float mr_SucCoA_1_2_3_4_M_4;
float mr_X6PG_1_2_3_M_3;
float mr_ICit_1_2_3_4_5_M_0;
float mr_Cit_1_2_3_4_5_M_5;
float mr_Glu_1_2_M_2;
float mr_R5P_4_M_0;
float mr_Cit_5_M_1;
float mr_Ser_1_2_M_1;
float mr_Cit_3_4_6_M_0;
float mr_KDPG_1_2_3_M_3;
float mr_Fum_2_M_1;
float mr_FBP_3_M_0;
float mr_X6PG_1_M_0;
float mr_X6PG_4_5_6_M_2;
float mr_SucCoA_2_3_M_0;
float mr_AcCoA_1_M_1;
float mr_PEP_2_3_M_0;
float mr_Phe_2_3_4_5_6_7_8_9_M_6;
float mr_Cit_2_3_4_5_M_1;
float mr_X5P_2_3_4_5_M_1;
float mr_Cys_3_M_1;
float mr_G6P_1_2_M_1;
float mr_Phe_1_2_M_2;
float mr_Ser_2_M_0;
float mr_Cys_1_2_3_M_0;
float mr_F6P_3_M_0;
float mr_Ala_2_3_M_0;
float mr_ICit_6_M_1;
float mr_TAC3_1_2_3_M_2;
float mr_Asp_2_M_1;
float mr_Glu_5_M_0;
float mr_X5P_1_2_M_2;
float mr_G6P_5_M_1;
float mr_Gln_5_M_0;
float mr_Ru5P_2_3_4_5_M_1;
float mr_GAP_2_3_M_0;
float mr_Phe_2_3_4_5_6_7_8_9_M_3;
float mr_ICit_1_2_M_0;
float mr_Suc_1_2_M_0;
float mr_AKG_5_M_0;
float mr_Suc_1_2_3_4_M_4;
float mr_KDPG_1_M_0;
float mr_Mal_1_2_3_M_0;
float mr_X3PG_1_2_M_2;
float mr_AKG_5_M_1;
float mr_Suc_2_3_4_M_3;
float mr_Mal_1_2_3_M_1;
float mr_KDPG_1_M_1;
float mr_Glu_5_M_1;
float mr_Asp_2_M_0;
float mr_ICit_6_M_0;
float mr_Ala_2_3_M_1;
float mr_ICit_1_2_M_1;
float mr_Suc_1_2_M_1;
float mr_GAP_2_3_M_1;
float mr_Ru5P_2_3_4_5_M_0;
float mr_Gln_5_M_1;
float mr_G6P_5_M_0;
float mr_Cys_3_M_0;
float mr_Cit_2_3_4_5_M_0;
float mr_X5P_2_3_4_5_M_0;
float mr_Glu_1_2_3_4_5_M_3;
float mr_PEP_2_3_M_1;
float mr_AcCoA_1_M_0;
float mr_SucCoA_2_3_M_1;
float mr_F6P_3_M_1;
float mr_Ser_2_M_1;
float mr_Cys_1_2_3_M_1;
float mr_G6P_1_2_M_0;
float mr_Cit_3_4_6_M_1;
float mr_Ser_1_2_M_0;
float mr_X6PG_1_M_1;
float mr_Leu_2_3_4_5_6_M_5;
float mr_FBP_3_M_1;
float mr_Fum_2_M_0;
float mr_Gln_1_2_3_4_5_M_3;
float mr_ICit_3_4_5_6_M_0;
float mr_OAC_2_3_4_M_3;
float mr_Cit_5_M_0;
float mr_R5P_4_M_1;
float mr_ICit_1_2_3_4_5_M_1;
float mr_ICit_3_4_5_M_2;
float mr_S7P_1_2_3_M_0;
float mr_Ac_1_2_M_1;
float mr_SucCoA_3_4_M_1;
float mr_S7P_5_M_0;
float mr_S7P_4_5_6_7_M_3;
float mr_G6P_4_5_6_M_3;
float mr_Ru5P_3_4_5_M_3;
float mr_Ru5P_1_2_M_1;
float mr_Thr_3_4_M_0;
float mr_KDPG_4_5_6_M_2;
float mr_Cit_2_3_4_M_2;
float mr_AKG_1_2_3_4_5_M_5;
float mr_OAC_1_M_1;
float mr_AKG_4_5_M_1;
float mr_Gln_4_5_M_1;
float mr_Glu_4_5_M_1;
float mr_ICit_3_4_5_M_3;
float mr_Val_2_3_4_5_M_0;
float mr_Asp_4_M_0;
float mr_OAC_2_3_4_M_2;
float mr_R5P_3_4_5_M_0;
float mr_X6PG_2_3_M_0;
float mr_Cit_1_2_M_0;
float mr_SucCoA_3_M_1;
float mr_Fum_4_M_0;
float mr_Thr_1_M_0;
float mr_AKG_2_3_4_M_0;
float mr_E4P_3_4_M_0;
float mr_Gln_3_4_M_0;
float mr_AKG_3_4_M_0;
float mr_Ru5P_2_M_0;
float mr_Glu_3_4_M_0;
float mr_S7P_1_2_M_0;
float mr_Asp_1_2_M_0;
float mr_Pyr_1_2_3_M_1;
float mr_G6P_4_5_6_M_2;
float mr_S7P_4_5_6_7_M_2;
float mr_Ru5P_3_4_5_M_2;
float mr_ICit_2_M_0;
float mr_KDPG_4_5_6_M_3;
float mr_Cit_2_3_4_M_3;
float mr_Suc_1_2_3_M_0;
float mr_TAC3_1_M_1;
float mr_PEP_3_M_1;
float mr_GAP_3_M_1;
float mr_R5P_2_M_1;
float mr_Glu_3_M_0;
float mr_ICit_4_M_1;
float mr_Gln_3_M_0;
float mr_AKG_2_3_M_0;
float mr_TAC3_2_3_M_0;
float mr_AKG_3_M_0;
float mr_F6P_2_3_M_1;
float mr_FBP_2_3_M_1;
float mr_SucCoA_2_3_4_M_1;
float mr_Suc_2_3_4_M_2;
float mr_E4P_2_3_M_1;
float mr_Ile_2_3_4_5_6_M_5;
float mr_G6P_1_2_3_M_1;
float mr_R5P_1_2_M_0;
float mr_DHAP_1_2_3_M_0;
float mr_ICit_2_3_4_5_M_0;
float mr_Ru5P_4_M_1;
float mr_OAC_1_2_3_4_M_1;
float mr_E4P_1_M_1;
float mr_Glyox_1_M_0;
float mr_LLDAP_1_M_1;
float mr_KDPG_2_3_M_0;
float mr_Gln_1_2_3_4_5_M_2;
float mr_Mal_1_2_M_0;
float mr_Fum_1_2_M_0;
float mr_Glu_1_2_3_4_5_M_2;
float mr_Asp_1_2_3_4_M_4;
float mr_Glu_3_4_5_M_0;
float mr_CO2_1_M_1;
float mr_Asp_1_M_1;
float mr_Gln_3_4_5_M_0;
float mr_Ru5P_3_4_5_M_1;
float mr_S7P_4_5_6_7_M_1;
float mr_G6P_4_5_6_M_1;
float mr_AKG_2_3_4_5_M_0;
float mr_AKG_3_4_5_M_0;
float mr_ICit_1_M_0;
float mr_Pyr_1_2_3_M_2;
float mr_Suc_3_M_0;
float mr_DHAP_2_M_0;
float mr_X6PG_1_2_3_M_0;
float mr_ICit_1_2_3_4_5_M_3;
float mr_OAC_2_3_4_M_1;
float mr_FBP_4_M_0;
float mr_F6P_4_M_0;
float mr_AKG_1_2_3_4_5_M_4;
float mr_SucCoA_2_M_1;
float mr_MEETHF_1_M_0;
float mr_Cys_1_2_3_M_3;
float mr_SucCoA_4_M_1;
float mr_Mal_3_M_0;
float mr_F6P_2_M_1;
float mr_S7P_3_M_1;
float mr_KDPG_5_M_0;
float mr_Glu_1_2_3_4_5_M_1;
float mr_FBP_2_M_1;
float mr_Gln_1_2_3_4_5_M_1;
float mr_PEP_2_M_1;
float mr_OAC_1_2_3_4_M_2;
float mr_Cit_3_4_6_M_3;
float mr_Cit_3_M_1;
float mr_G6P_1_2_3_M_2;
float mr_KDPG_1_2_3_M_0;
float mr_X6PG_5_M_1;
float mr_GAP_2_M_1;
float mr_Mal_1_2_3_M_3;
float mr_SucCoA_2_3_4_M_2;
float mr_E4P_2_3_M_2;
float mr_F6P_2_3_M_2;
float mr_Suc_2_3_4_M_1;
float mr_FBP_2_3_M_2;
float mr_Gly_2_M_0;
float mr_Ru5P_1_M_0;
float mr_Fum_1_M_1;
float mr_G6P_3_M_0;
float mr_Phe_2_3_4_5_6_7_8_9_M_0;
float mr_Leu_2_3_4_5_6_M_4;
float mr_X6PG_4_5_6_M_0;
float mr_S7P_7_M_0;
float mr_OAC_1_2_3_4_M_3;
float mr_Cit_3_4_6_M_2;
float mr_G6P_1_2_3_M_3;
float mr_Phe_1_2_M_0;
float mr_Cys_1_2_3_M_2;
float mr_X3PG_1_M_1;
float mr_Ile_2_3_4_5_6_M_4;
float mr_X3PG_2_M_0;
float mr_SucCoA_2_3_M_2;
float mr_PEP_2_3_M_2;
float mr_R5P_1_M_0;
float mr_ICit_1_2_M_2;
float mr_Suc_1_2_M_2;
float mr_Ser_1_M_0;
float mr_GAP_2_3_M_2;
float mr_TAC3_1_2_3_M_0;
float mr_Ala_2_3_M_2;
float mr_TKC2_1_M_1;
float mr_X5P_1_2_M_0;
float mr_OAC_3_M_1;
float mr_Mal_1_2_3_M_2;
float mr_SucCoA_2_3_4_M_3;
float mr_X3PG_1_2_M_0;
float mr_Pyr_3_M_0;
float mr_AKG_2_M_1;
float mr_AKG_4_M_1;
float mr_G6P_3_4_5_6_M_0;
float mr_Pyr_1_2_3_M_3;
float mr_Cit_3_4_5_6_M_0;
float mr_AKG_4_5_M_2;
float mr_Gln_4_5_M_2;
float mr_Glu_4_5_M_2;
float mr_X5P_3_M_1;
float mr_Glu_4_M_1;
float mr_Cit_2_3_4_M_1;
float mr_KDPG_4_5_6_M_1;
float mr_X5P_5_M_0;
float mr_Gln_4_M_1;
float mr_Mal_2_3_4_M_0;
float mr_Ru5P_1_2_M_2;
float mr_LLDAP_7_M_1;
float mr_SucCoA_3_4_M_2;
float mr_R5P_2_3_4_5_M_0;
float mr_F6P_6_M_1;
float mr_Gln_1_2_M_0;
float mr_Ac_1_2_M_2;
float mr_TKC2_1_2_M_0;
float mr_ICit_3_4_5_M_1;
float mr_Phe_2_3_4_5_6_7_8_9_M_7;
float mr_FBP_6_M_1;
float mr_Glu_1_2_M_0;
float mr_ICit_1_2_3_4_5_M_2;
float mr_TKC2_2_M_0;
float mr_Glu_1_2_M_1;
float mr_FBP_6_M_0;
float mr_R5P_3_4_5_M_3;
float mr_Val_2_3_4_5_M_3;
float mr_TKC2_2_M_1;
float mr_ICit_3_4_5_6_M_2;
float mr_Gln_1_2_M_1;
float mr_F6P_6_M_0;
float mr_R5P_2_3_4_5_M_1;
float mr_ICit_3_4_5_M_0;
float mr_TKC2_1_2_M_1;
float mr_S7P_1_2_3_M_2;
float mr_Thr_3_4_M_2;
float mr_KDPG_4_5_6_M_0;
float mr_Suc_1_2_3_M_3;
float mr_Cit_2_3_4_M_0;
float mr_Glu_4_M_0;
float mr_LLDAP_7_M_0;
float mr_Gln_4_M_0;
float mr_X5P_5_M_1;
float mr_Mal_2_3_4_M_1;
float mr_AKG_2_3_4_M_3;
float mr_Cit_3_4_5_6_M_1;
float mr_F6P_3_4_5_6_M_4;
float mr_G6P_3_4_5_6_M_1;
float mr_AKG_4_M_0;
float mr_X6PG_3_4_5_6_M_4;
float mr_X5P_3_M_0;
float mr_X3PG_1_2_M_1;
float mr_OAC_3_M_0;
float mr_AKG_2_M_0;
float mr_Pyr_3_M_1;
float mr_Val_1_2_3_4_5_M_5;
float mr_Ser_1_M_1;
float mr_Ru5P_2_3_4_5_M_2;
float mr_X5P_1_2_M_1;
float mr_TKC2_1_M_0;
float mr_TAC3_1_2_3_M_1;
float mr_X3PG_1_M_0;
float mr_G6P_1_2_M_2;
float mr_Phe_1_2_M_1;
float mr_R5P_1_M_1;
float mr_X3PG_2_M_1;
float mr_Cit_2_3_4_5_M_2;
float mr_X5P_2_3_4_5_M_2;
float mr_X6PG_4_5_6_M_1;
float mr_Ser_1_2_M_2;
float mr_ICit_2_3_4_5_M_3;
float mr_S7P_7_M_1;
float mr_DHAP_1_2_3_M_3;
float mr_Phe_2_3_4_5_6_7_8_9_M_1;
float mr_G6P_3_M_1;
float mr_Fum_1_M_0;
float mr_Ru5P_1_M_1;
float mr_Gly_2_M_1;
float mr_Ru5P_2_3_4_5_M_3;
float mr_Glu_2_3_4_5_M_4;
float mr_GAP_2_M_0;
float mr_Gln_2_3_4_5_M_4;
float mr_Suc_2_3_4_M_0;
float mr_AKG_2_3_M_2;
float mr_TAC3_2_3_M_2;
float mr_Gln_1_2_3_4_5_M_0;
float mr_KDPG_2_3_M_2;
float mr_FBP_2_M_0;
float mr_X6PG_5_M_0;
float mr_KDPG_1_2_3_M_1;
float mr_Cit_3_M_0;
float mr_DHAP_1_2_3_M_2;
float mr_R5P_1_2_M_2;
float mr_ICit_2_3_4_5_M_2;
float mr_PEP_2_M_0;
float mr_KDPG_5_M_1;
float mr_S7P_3_M_0;
float mr_F6P_2_M_0;
float mr_SucCoA_4_M_0;
float mr_Mal_3_M_1;
float mr_Mal_1_2_M_2;
float mr_Fum_1_2_M_2;
float mr_Glu_1_2_3_4_5_M_0;
float mr_Cit_2_3_4_5_M_3;
float mr_X5P_2_3_4_5_M_3;
float mr_F6P_4_M_1;
float mr_MEETHF_1_M_1;
float mr_SucCoA_2_M_0;
float mr_S7P_1_2_3_M_3;
float mr_X6PG_1_2_3_M_1;
float mr_R5P_3_4_5_M_2;
float mr_DHAP_2_M_1;
float mr_FBP_4_M_1;
float mr_Val_2_3_4_5_M_2;
float mr_OAC_2_3_4_M_0;
float mr_ICit_3_4_5_6_M_3;
float mr_E4P_3_4_M_2;
float mr_Gln_3_4_M_2;
float mr_AKG_3_4_M_2;
float mr_Glu_3_4_M_2;
float mr_AKG_2_3_4_M_2;
float mr_ICit_1_M_1;
float mr_Asp_1_2_M_2;
float mr_AKG_3_4_5_M_1;
float mr_S7P_1_2_M_2;
float mr_AKG_2_3_4_5_M_1;
float mr_X6PG_2_3_M_2;
float mr_Cit_1_2_M_2;
float mr_Suc_3_M_1;
float mr_Asp_1_M_0;
float mr_CO2_1_M_0;
float mr_Glu_3_4_5_M_1;
float mr_Suc_1_2_3_M_2;
float mr_G6P_4_5_6_M_0;
float mr_S7P_4_5_6_7_M_0;
float mr_Cit_1_2_3_4_5_M_4;
float mr_Ru5P_3_4_5_M_0;
float mr_Gln_3_4_5_M_1;
float mr_Leu_2_3_4_5_6_M_0;
float mr_OAC_1_2_M_1;
float mr_Glu_2_3_4_5_M_1;
float mr_OAC_1_2_3_M_1;
float mr_Suc_2_M_1;
float mr_Gln_2_3_4_M_2;
float mr_FBP_1_M_0;
float mr_Phe_2_3_4_5_6_7_8_9_M_4;
float mr_ICit_5_M_1;
float mr_Thr_2_3_4_M_1;
float mr_F6P_1_M_0;
float mr_Glu_2_3_4_M_2;
float mr_Gly_1_2_M_1;
float mr_Suc_1_2_3_4_M_3;
float mr_Pyr_2_M_0;
float mr_Cit_2_3_M_1;
float mr_Pyr_2_3_M_1;
float mr_Gln_2_3_4_5_M_1;
float mr_S7P_2_3_M_1;
float mr_Asp_2_3_M_1;
float mr_DHAP_1_2_M_1;
float mr_ICit_2_3_M_0;
float mr_G6P_2_M_1;
float mr_Val_1_2_3_4_5_M_2;
float mr_Ru5P_5_M_1;
float mr_Fum_2_3_M_0;
float mr_Mal_2_3_M_0;
float mr_F6P_4_5_6_M_3;
float mr_X3PG_1_2_3_M_3;
float mr_X6PG_4_5_M_2;
float mr_E4P_1_2_3_4_M_2;
float mr_Fum_2_3_4_M_3;
float mr_G6P_4_5_M_2;
float mr_AKG_1_2_3_4_5_M_0;
float mr_Cit_3_6_M_2;
float mr_G6P_4_M_0;
float mr_SucCoA_1_2_3_4_M_3;
float mr_Mal_4_M_1;
float mr_Glyox_1_2_M_1;
float mr_Mal_1_2_3_4_M_2;
float mr_Fum_1_2_3_4_M_2;
float mr_SucCoA_1_M_1;
float mr_ICit_3_4_M_1;
float mr_FBP_4_5_6_M_3;
float mr_S7P_4_M_1;
float mr_Thr_3_M_0;
float mr_DHAP_2_3_M_2;
float mr_AKG_2_3_4_5_M_4;
float mr_Ac_2_M_1;
float mr_Gln_2_3_M_2;
float mr_GAP_1_M_0;
float mr_Cit_1_2_3_4_5_M_1;
float mr_PEP_1_M_0;
float mr_OAC_2_3_M_2;
float mr_SucCoA_1_2_3_M_2;
float mr_Suc_4_M_0;
float mr_R5P_5_M_0;
float mr_Cit_4_M_1;
float mr_Glu_2_3_M_2;
float mr_ICit_3_6_M_0;
float mr_DHAP_1_M_0;
float mr_SucCoA_1_2_3_4_M_2;
float mr_Mal_1_2_3_4_M_3;
float mr_Fum_1_2_3_4_M_3;
float mr_X6PG_3_M_0;
float mr_X5P_4_5_M_0;
float mr_FBP_4_5_6_M_2;
float mr_PEP_1_2_M_0;
float mr_F6P_4_5_6_M_2;
float mr_X3PG_1_2_3_M_2;
float mr_Fum_2_3_4_M_2;
float mr_E4P_1_2_3_4_M_3;
float mr_Ser_3_M_1;
float mr_Cys_1_M_1;
float mr_R5P_2_3_4_5_M_4;
float mr_Cys_2_M_0;
float mr_Ru5P_3_4_M_1;
float mr_S7P_3_4_M_1;
float mr_Asp_3_4_M_1;
float mr_Cit_3_4_M_1;
float mr_X5P_3_4_M_1;
float mr_Gln_2_M_0;
float mr_Asp_1_2_3_M_1;
float mr_E4P_2_3_4_M_1;
float mr_Mal_3_4_M_0;
float mr_R5P_3_M_1;
float mr_Fum_3_4_M_0;
float mr_SucCoA_1_2_3_M_3;
float mr_Suc_2_3_M_0;
float mr_GAP_1_2_M_0;
float mr_X6PG_3_4_5_6_M_1;
float mr_Glu_2_M_0;
float mr_G6P_3_4_5_6_M_4;
float mr_F6P_3_4_5_6_M_1;
float mr_Ser_2_3_M_2;
float mr_Cit_3_4_5_6_M_4;
float mr_KDPG_3_M_0;
float mr_Cys_2_3_M_2;
float mr_KDPG_5_6_M_2;
float mr_X3PG_2_3_M_2;
float mr_Thr_1_2_M_1;
float mr_Glu_2_3_4_M_3;
float mr_AcCoA_1_2_M_1;
float mr_FBP_4_5_M_2;
float mr_ICit_4_5_M_2;
float mr_Suc_1_2_3_4_M_2;
float mr_F6P_4_5_M_2;
float mr_Ru5P_4_5_M_2;
float mr_Mal_2_M_1;
float mr_E4P_3_M_0;
float mr_S7P_5_6_7_M_1;
float mr_SucCoA_1_2_M_1;
float mr_Gln_2_3_4_M_3;
float mr_Suc_3_4_M_1;
float mr_Gly_1_M_0;
float mr_FBP_1_2_M_0;
float mr_AKG_1_M_1;
float mr_G6P_5_6_M_0;
float mr_R5P_3_4_M_2;
float mr_S7P_2_M_1;
float mr_S7P_5_6_M_0;
float mr_Ile_2_3_4_5_6_M_0;
float mr_AKG_1_2_M_1;
float mr_TAC3_1_2_M_1;
float mr_OAC_3_4_M_2;
float mr_X5P_4_M_1;
float mr_F6P_1_2_M_0;
float mr_G6P_2_3_M_0;
float mr_Cit_2_M_1;
float mr_Glu_1_M_1;
float mr_Val_1_2_3_4_5_M_3;
float mr_TAC3_3_M_0;
float mr_Tyr_1_2_M_0;
float mr_Gln_1_M_1;
float mr_X5P_3_4_5_M_0;
float mr_Fum_1_2_3_M_0;
float mr_Tyr_1_2_M_1;
float mr_TAC3_3_M_1;
float mr_Glu_1_M_0;
float mr_Cit_2_M_0;
float mr_Fum_1_2_3_M_1;
float mr_X5P_3_4_5_M_1;
float mr_Gln_1_M_0;
float mr_AKG_1_2_M_0;
float mr_TAC3_1_2_M_0;
float mr_S7P_2_M_0;
float mr_S7P_5_6_M_1;
float mr_G6P_5_6_M_1;
float mr_AKG_1_M_0;
float mr_FBP_1_2_M_1;
float mr_Asp_1_2_3_4_M_3;
float mr_Ile_2_3_4_5_6_M_1;
float mr_F6P_1_2_M_1;
float mr_G6P_2_3_M_1;
float mr_X5P_4_M_0;
float mr_ICit_2_3_4_M_2;
float mr_S7P_5_6_7_M_0;
float mr_Cit_3_4_5_M_2;
float mr_E4P_3_M_1;
float mr_Gly_1_M_1;
float mr_Suc_3_4_M_0;
float mr_FBP_1_2_3_M_2;
float mr_SucCoA_1_2_M_0;
float mr_F6P_1_2_3_M_2;
float mr_AcCoA_1_2_M_0;
float mr_Thr_1_2_M_0;
float mr_Mal_2_M_0;
float mr_X6PG_3_4_5_6_M_0;
float mr_KDPG_3_M_1;
float mr_GAP_1_2_3_M_3;
float mr_F6P_3_4_5_6_M_0;
float mr_Glu_2_M_1;
float mr_Ala_1_2_3_M_3;
float mr_E4P_2_3_4_M_0;
float mr_Asp_1_2_3_M_0;
float mr_Ser_1_2_3_M_2;
float mr_Gln_2_M_1;
float mr_GAP_1_2_M_1;
float mr_Suc_2_3_M_1;
float mr_Fum_3_4_M_1;
float mr_R5P_3_M_0;
float mr_Mal_3_4_M_1;
float mr_Cys_1_M_0;
float mr_Ser_3_M_0;
float mr_PEP_1_2_M_1;
float mr_X6PG_5_6_M_2;
float mr_Asp_3_4_M_0;
float mr_Cit_3_4_M_0;
float mr_Ru5P_3_4_M_0;
float mr_S7P_3_4_M_0;
float mr_Cys_2_M_1;
float mr_X5P_3_4_M_0;
float mr_ICit_3_4_6_M_3;
float mr_DHAP_1_M_1;
float mr_PEP_1_2_3_M_3;
float mr_ICit_3_6_M_1;
float mr_X5P_4_5_M_1;
float mr_X6PG_3_M_1;
float mr_S7P_6_7_M_2;
float mr_Asp_2_3_4_M_2;
float mr_S7P_4_5_6_7_M_4;
float mr_PEP_1_M_1;
float mr_Ala_1_2_3_M_2;
float mr_Cit_1_2_3_4_5_M_0;
float mr_ICit_1_2_3_4_5_M_5;
float mr_GAP_1_M_1;
float mr_Ser_1_2_3_M_3;
float mr_Cit_4_M_0;
float mr_R5P_5_M_1;
float mr_Suc_4_M_1;
float mr_Thr_3_M_1;
float mr_S7P_4_M_0;
float mr_Ac_2_M_0;
float mr_GAP_1_2_3_M_2;
float mr_Mal_4_M_0;
float mr_PEP_1_2_3_M_2;
float mr_G6P_4_M_1;
float mr_ICit_3_4_M_0;
float mr_SucCoA_1_M_0;
float mr_Asp_2_3_4_M_3;
float mr_Glyox_1_2_M_0;
float mr_AKG_1_2_3_4_5_M_1;
float mr_ICit_3_4_6_M_2;
float mr_Cit_4_5_M_2;
float mr_Mal_2_3_M_1;
float mr_R5P_4_5_M_2;
float mr_Asp_1_2_3_4_M_2;
float mr_Glu_1_2_3_4_5_M_4;
float mr_Fum_2_3_M_1;
float mr_ICit_2_3_4_M_3;
float mr_G6P_2_M_0;
float mr_ICit_2_3_M_1;
float mr_KDPG_4_5_M_2;
float mr_Ru5P_5_M_0;
float mr_Gln_1_2_3_4_5_M_4;
float mr_Cit_2_3_M_0;
float mr_Pyr_2_M_1;
float mr_Pyr_2_3_M_0;
float mr_F6P_1_2_3_M_3;
float mr_Gln_2_3_4_5_M_0;
float mr_Gly_1_2_M_0;
float mr_F6P_1_M_1;
float mr_F6P_5_6_M_2;
float mr_FBP_5_6_M_2;
float mr_Asp_2_3_M_0;
float mr_DHAP_1_2_M_0;
float mr_S7P_2_3_M_0;
float mr_OAC_1_2_M_0;
float mr_Glu_2_3_4_5_M_0;
float mr_Cit_3_4_5_M_3;
float mr_Leu_2_3_4_5_6_M_1;
float mr_Thr_2_3_4_M_0;
float mr_ICit_5_M_0;
float mr_FBP_1_M_1;
float mr_Suc_2_M_0;
float mr_OAC_1_2_3_M_0;
float mr_FBP_1_2_3_M_3;
float mr_ICit_3_4_6_M_1;
float mr_S7P_1_M_1;
float mr_AKG_1_2_3_4_5_M_2;
float mr_G6P_4_5_M_0;
float mr_Cit_3_6_M_0;
float mr_F6P_5_M_1;
float mr_KDPG_6_M_1;
float mr_X6PG_4_5_M_0;
float mr_E4P_1_2_3_4_M_0;
float mr_Fum_1_2_3_4_M_0;
float mr_Mal_1_2_3_4_M_0;
float mr_PEP_1_2_3_M_1;
float mr_Cit_1_M_1;
float mr_KDPG_2_M_0;
float mr_FBP_5_M_1;
float mr_GAP_1_2_3_M_1;
float mr_Gln_2_3_M_0;
float mr_DHAP_2_3_M_0;
float mr_Thr_2_M_1;
float mr_Ru5P_3_M_0;
float mr_SucCoA_1_2_3_M_0;
float mr_E4P_4_M_0;
float mr_OAC_2_3_M_0;
float mr_Glu_2_3_M_0;
float mr_X6PG_6_M_1;
float mr_OAC_2_M_0;
float mr_Ala_1_2_3_M_1;
float mr_Gln_2_3_4_M_0;
float mr_E4P_2_M_1;
float mr_Asp_3_M_1;
float mr_Fum_3_M_0;
float mr_Thr_4_M_0;
float mr_G6P_1_M_1;
float mr_Leu_2_3_4_5_6_M_2;
float mr_F6P_5_6_M_1;
float mr_FBP_5_6_M_1;
float mr_Suc_1_M_0;
float mr_Glu_2_3_4_M_0;
float mr_KDPG_4_5_M_1;
float mr_X5P_3_4_5_M_3;
float mr_Fum_1_2_3_M_3;
float mr_X6PG_2_M_0;
float mr_TAC3_2_M_0;
float mr_ICit_2_3_M_2;
float mr_OAC_1_2_3_4_M_4;
float mr_Val_1_2_3_4_5_M_0;
float mr_Mal_1_M_1;
float mr_Asp_1_2_3_4_M_1;
float mr_Cit_4_5_M_1;
float mr_R5P_4_5_M_1;
float mr_Mal_2_3_M_2;
float mr_Fum_2_3_M_2;
float mr_Ile_2_3_4_5_6_M_3;
float mr_Ac_1_M_0;
float mr_Glu_1_2_3_4_5_M_5;
float mr_X5P_1_M_1;
float mr_F6P_4_5_M_0;
float mr_Ru5P_4_5_M_0;
float mr_F6P_1_2_3_M_1;
float mr_FBP_4_5_M_0;
float mr_ICit_4_5_M_0;
float mr_Suc_1_2_3_4_M_0;
float mr_FBP_1_2_3_M_1;
float mr_X5P_2_M_0;
float mr_KDPG_4_M_0;
float mr_Gln_1_2_3_4_5_M_5;
float mr_Cit_3_4_5_M_1;
float mr_Leu_2_3_4_5_6_M_3;
float mr_ICit_2_3_4_M_1;
float mr_OAC_4_M_0;
float mr_F6P_1_2_M_2;
float mr_G6P_2_3_M_2;
float mr_S7P_5_6_M_2;
float mr_OAC_3_4_M_0;
float mr_FBP_1_2_M_2;
float mr_R5P_3_4_M_0;
float mr_G6P_5_6_M_2;
float mr_Ile_2_3_4_5_6_M_2;
float mr_AcCoA_2_M_1;
float mr_X5P_3_4_5_M_2;
float mr_Phe_2_3_4_5_6_7_8_9_M_8;
float mr_G6P_6_M_0;
float mr_DHAP_3_M_1;
float mr_Fum_1_2_3_M_2;
float mr_Tyr_1_2_M_2;
float mr_S7P_6_7_M_1;
float mr_Asp_2_3_4_M_1;
float mr_X5P_4_5_M_2;
float mr_ICit_1_2_3_4_5_M_4;
float mr_FBP_4_5_6_M_0;
float mr_ICit_3_6_M_2;
float mr_SucCoA_1_2_3_4_M_0;
float mr_X3PG_3_M_1;
float mr_X6PG_5_6_M_1;
float mr_AKG_1_2_3_4_5_M_3;
float mr_F6P_4_5_6_M_0;
float mr_PEP_1_2_M_2;
float mr_X3PG_1_2_3_M_0;
float mr_ICit_3_M_0;
float mr_Fum_2_3_4_M_0;
float mr_Fum_3_4_M_2;
float mr_Cit_6_M_0;
float mr_Mal_3_4_M_2;
float mr_GAP_1_2_M_2;
float mr_Suc_2_3_M_2;
float mr_Ser_1_2_3_M_1;
float mr_X6PG_4_M_0;
float mr_Ser_2_3_M_0;
float mr_Cys_2_3_M_0;
float mr_KDPG_5_6_M_0;
float mr_Pyr_1_M_0;
float mr_X3PG_2_3_M_0;
float mr_S7P_6_M_0;
float mr_Glyox_2_M_1;
float mr_S7P_6_M_1;
float mr_X3PG_2_3_M_1;
float mr_Pyr_1_M_1;
float mr_Cys_2_3_M_1;
float mr_KDPG_5_6_M_1;
float mr_Ser_2_3_M_1;
float mr_F6P_3_4_5_6_M_2;
float mr_X6PG_3_4_5_6_M_2;
float mr_Glyox_2_M_0;
float mr_Cit_6_M_1;
float mr_Cit_1_2_3_4_5_M_3;
float mr_X6PG_4_M_1;
float mr_Ser_1_2_3_M_0;
float mr_Asp_1_2_3_M_2;
float mr_E4P_2_3_4_M_2;
float mr_Asp_3_4_M_2;
float mr_Cit_3_4_M_2;
float mr_Ru5P_3_4_M_2;
float mr_S7P_3_4_M_2;
float mr_X5P_3_4_M_2;
float mr_X6PG_5_6_M_0;
float mr_X3PG_3_M_0;
float mr_Fum_2_3_4_M_1;
float mr_ICit_3_M_1;
float mr_F6P_4_5_6_M_1;
float mr_X3PG_1_2_3_M_1;
float mr_FBP_4_5_6_M_1;
float mr_S7P_6_7_M_0;
float mr_Asp_2_3_4_M_0;
float mr_SucCoA_1_2_3_4_M_1;
float mr_ICit_3_4_5_6_M_4;
float mr_DHAP_3_M_0;
float mr_G6P_6_M_1;
float mr_Phe_2_3_4_5_6_7_8_9_M_5;
float mr_OAC_4_M_1;
float mr_ICit_2_3_4_M_0;
float mr_AcCoA_2_M_0;
float mr_R5P_3_4_M_1;
float mr_Cit_2_3_4_5_M_4;
float mr_X5P_2_3_4_5_M_4;
float mr_OAC_3_4_M_1;
float mr_AKG_1_2_M_2;
float mr_TAC3_1_2_M_2;
float mr_X5P_2_M_1;
float mr_Suc_3_4_M_2;
float mr_Thr_2_3_4_M_3;
float mr_SucCoA_1_2_M_2;
float mr_Ru5P_2_3_4_5_M_4;
float mr_FBP_1_2_3_M_0;
float mr_OAC_1_2_3_M_3;
float mr_Cit_3_4_5_M_0;
float mr_S7P_5_6_7_M_2;
float mr_Glu_2_3_4_5_M_3;
float mr_KDPG_4_M_1;
float mr_F6P_4_5_M_1;
float mr_Ru5P_4_5_M_1;
float mr_X5P_1_M_0;
float mr_Suc_1_2_3_4_M_1;
float mr_FBP_4_5_M_1;
float mr_ICit_4_5_M_1;
float mr_Gln_2_3_4_5_M_3;
float mr_F6P_1_2_3_M_0;
float mr_AcCoA_1_2_M_2;
float mr_Thr_1_2_M_2;
float mr_Mal_1_M_0;
float mr_Ac_1_M_1;
float mr_Cit_4_5_M_0;
float mr_R5P_4_5_M_0;
float mr_Asp_1_2_3_4_M_0;
float mr_X6PG_2_M_1;
float mr_KDPG_4_5_M_0;
float mr_Val_1_2_3_4_5_M_1;
float mr_ICit_2_3_4_5_M_4;
float mr_TAC3_2_M_1;
float mr_F6P_5_6_M_0;
float mr_FBP_5_6_M_0;
float mr_Asp_2_3_M_2;
float mr_DHAP_1_2_M_2;
float mr_S7P_2_3_M_2;
float mr_Cit_2_3_M_2;
float mr_Pyr_2_3_M_2;
float mr_Gln_2_3_4_5_M_2;
float mr_Glu_2_3_4_M_1;
float mr_Gly_1_2_M_2;
float mr_Suc_1_M_1;
float mr_G6P_1_M_0;
float mr_Thr_4_M_1;
float mr_Thr_2_3_4_M_2;
float mr_Fum_3_M_1;
float mr_Asp_3_M_0;
float mr_E4P_2_M_0;
float mr_Gln_2_3_4_M_1;
float mr_OAC_1_2_3_M_2;
float mr_OAC_1_2_M_2;
float mr_Glu_2_3_4_5_M_2;
float mr_S7P_5_6_7_M_3;
float mr_X6PG_6_M_0;
float mr_Glu_2_3_M_1;
float mr_E4P_4_M_1;
float mr_OAC_2_3_M_1;
float mr_Ru5P_3_M_1;
float mr_Ala_1_2_3_M_0;
float mr_SucCoA_1_2_3_M_1;
float mr_OAC_2_M_1;
float mr_Cit_1_2_3_4_5_M_2;
float mr_Asp_1_2_3_M_3;
float mr_E4P_2_3_4_M_3;
float mr_Gln_2_3_M_1;
float mr_GAP_1_2_3_M_0;
float mr_F6P_3_4_5_6_M_3;
float mr_Thr_2_M_0;
float mr_X6PG_3_4_5_6_M_3;
float mr_DHAP_2_3_M_1;
float mr_ICit_3_4_M_2;
float mr_Mal_1_2_3_4_M_1;
float mr_Glyox_1_2_M_2;
float mr_Fum_1_2_3_4_M_1;
float mr_Val_2_3_4_5_M_4;
float mr_FBP_5_M_0;
float mr_KDPG_2_M_1;
float mr_Cit_1_M_0;
float mr_PEP_1_2_3_M_0;
float mr_Cit_3_6_M_1;
float mr_G6P_4_5_M_1;
float mr_S7P_1_M_0;
float mr_ICit_3_4_6_M_0;
float mr_E4P_1_2_3_4_M_1;
float mr_X6PG_4_5_M_1;
float mr_KDPG_6_M_0;
float mr_F6P_5_M_0;
//---------------------------------------------------------------------------------------------------
//----Init A---------------------------------------------------------------------------------
if(idx==0 && idy==0){
mA[0] = ( (  -1.0f  * v_v42_aa_fw   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v55_aa_fw   )  +(  -1.0f  * v_v53_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v40_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v52_aa_fw   )  +(  -1.0f  * v_v23_tca_fw   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v54_aa_fw   )  +(  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v56_aa_fw   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_c   )   ) ; 
mA[1] = 0.0f; 
mA[2] = 0.0f; 
mA[3] = 0.0f; 
mA[4] = 0.0f; 
mA[5] = 0.0f; 
mA[6] = 0.0f; 
mA[7] = 0.0f; 
mA[8] = 0.0f; 
mA[9] = 0.0f; 
mA[10] = 0.0f; 
mA[11] = 0.0f; 
mA[12] = 0.0f; 
mA[13] =  v_v24_tca_fw ; 
mA[14] = 0.0f; 
mA[15] = 0.0f; 
mA[16] = 0.0f; 
mA[17] = 0.0f; 
mA[18] = 0.0f; 
mA[19] = 0.0f; 
mA[20] = 0.0f; 
mA[21] = 0.0f; 
mA[22] = 0.0f; 
mA[23] = 0.0f; 
mA[24] = 0.0f; 
mA[25] = 0.0f; 
mA[26] = 0.0f; 
mA[27] = 0.0f; 
mA[28] = 0.0f; 
mA[29] = 0.0f; 
mA[30] = 0.0f; 
mA[31] = 0.0f; 
mA[32] = 0.0f; 
mA[33] = 0.0f; 
mA[34] = 0.0f; 
mA[35] = 0.0f; 
mA[36] = 0.0f; 
mA[37] = 0.0f; 
mA[38] = 0.0f; 
mA[39] = 0.0f; 
mA[40] = 0.0f; 
mA[41] = 0.0f; 
mA[42] = 0.0f; 
mA[43] = 0.0f; 
mA[44] = 0.0f; 
mA[45] = 0.0f; 
mA[46] = 0.0f; 
mA[47] = 0.0f; 
mA[48] = 0.0f; 
mA[49] = 0.0f; 
mA[50] = 0.0f; 
mA[51] = 0.0f; 
mA[52] = 0.0f; 
mA[53] = 0.0f; 
mA[54] = 0.0f; 
mA[55] = 0.0f; 
mA[56] = 0.0f; 
mA[57] = 0.0f; 
mA[58] = 0.0f; 
mA[59] = 0.0f; 
mA[60] =  v_v36_aa_fw ; 
mA[61] = 0.0f; 
mA[62] = 0.0f; 
mA[63] = 0.0f; 
mA[64] = 0.0f; 
mA[65] = 0.0f; 
mA[66] = 0.0f; 
mA[67] = 0.0f; 
mA[68] = 0.0f; 
mA[69] =  v_v23_tca_bw ; 
mA[70] = 0.0f; 
mA[71] = 0.0f; 
mA[72] = 0.0f; 
mA[73] = 0.0f; 
mA[74] = 0.0f; 
mA[75] = 0.0f; 
mA[76] = 0.0f; 
mA[77] = 0.0f; 
mA[78] = 0.0f; 
mA[79] = 0.0f; 
mA[80] = 0.0f; 
mA[81] = 0.0f; 
mA[82] = 0.0f; 
mA[83] = 0.0f; 
mA[84] = 0.0f; 
mA[85] = 0.0f; 
mA[86] = 0.0f; 
mA[87] = 0.0f; 
mA[88] = 0.0f; 
mA[89] = 0.0f; 
mA[90] = 0.0f; 
mA[91] = 0.0f; 
mA[92] = 0.0f; 
mA[93] = 0.0f; 
mA[94] = 0.0f; 
mA[95] = 0.0f; 
mA[96] = 0.0f; 
mA[97] = 0.0f; 
mA[98] = 0.0f; 
mA[99] = 0.0f; 
mA[100] = 0.0f; 
mA[101] = 0.0f; 
mA[102] = 0.0f; 
mA[103] = 0.0f; 
mA[104] = 0.0f; 
mA[105] = 0.0f; 
mA[106] = 0.0f; 
mA[107] = 0.0f; 
mA[108] = 0.0f; 
mA[109] = 0.0f; 
mA[110] = 0.0f; 
mA[111] = 0.0f; 
mA[112] = 0.0f; 
mA[113] = 0.0f; 
mA[114] = 0.0f; 
mA[115] = 0.0f; 
mA[116] = 0.0f; 
mA[117] = 0.0f; 
mA[118] = 0.0f; 
mA[119] = 0.0f; 
mA[120] = 0.0f; 
mA[121] = 0.0f; 
mA[122] = 0.0f; 
mA[123] = 0.0f; 
mA[124] = 0.0f; 
mA[125] = 0.0f; 
mA[126] = 0.0f; 
mA[127] = 0.0f; 
mA[128] = 0.0f; 
mA[129] = 0.0f; 
mA[130] = 0.0f; 
mA[131] = 0.0f; 
mA[132] = 0.0f; 
mA[133] = 0.0f; 
mA[134] = 0.0f; 
mA[135] = 0.0f; 
mA[136] = 0.0f; 
mA[137] = 0.0f; 
mA[138] = 0.0f; 
mA[139] = 0.0f; 
mA[140] = 0.0f; 
mA[141] = 0.0f; 
mA[142] = 0.0f; 
mA[143] = 0.0f; 
mA[144] = 0.0f; 
mA[145] = 0.0f; 
mA[146] = 0.0f; 
mA[147] = 0.0f; 
mA[148] = 0.0f; 
mA[149] = 0.0f; 
mA[150] = ( (  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v40_aa_fw   )  +(  -1.0f  * v_v42_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v54_aa_fw   )  +(  -1.0f  * v_v55_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v56_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v53_aa_fw   )  +(  -1.0f  * v_v52_aa_fw   )  +(  -1.0f  * v_v23_tca_fw   )   ) ; 
mA[151] = 0.0f; 
mA[152] = 0.0f; 
mA[153] = 0.0f; 
mA[154] = 0.0f; 
mA[155] = 0.0f; 
mA[156] = 0.0f; 
mA[157] = 0.0f; 
mA[158] = 0.0f; 
mA[159] = 0.0f; 
mA[160] = 0.0f; 
mA[161] = 0.0f; 
mA[162] = 0.0f; 
mA[163] = 0.0f; 
mA[164] = 0.0f; 
mA[165] = 0.0f; 
mA[166] = 0.0f; 
mA[167] = 0.0f; 
mA[168] = 0.0f; 
mA[169] = 0.0f; 
mA[170] = 0.0f; 
mA[171] = 0.0f; 
mA[172] = 0.0f; 
mA[173] = 0.0f; 
mA[174] = 0.0f; 
mA[175] = 0.0f; 
mA[176] = 0.0f; 
mA[177] = 0.0f; 
mA[178] = 0.0f; 
mA[179] = 0.0f; 
mA[180] = 0.0f; 
mA[181] = 0.0f; 
mA[182] = 0.0f; 
mA[183] = 0.0f; 
mA[184] = 0.0f; 
mA[185] = 0.0f; 
mA[186] = 0.0f; 
mA[187] = 0.0f; 
mA[188] = 0.0f; 
mA[189] = 0.0f; 
mA[190] = 0.0f; 
mA[191] = 0.0f; 
mA[192] = 0.0f; 
mA[193] = 0.0f; 
mA[194] = 0.0f; 
mA[195] = 0.0f; 
mA[196] = 0.0f; 
mA[197] = 0.0f; 
mA[198] = 0.0f; 
mA[199] = 0.0f; 
mA[200] = 0.0f; 
mA[201] = 0.0f; 
mA[202] = 0.0f; 
mA[203] = 0.0f; 
mA[204] = 0.0f; 
mA[205] = 0.0f; 
mA[206] = 0.0f; 
mA[207] = 0.0f; 
mA[208] = 0.0f; 
mA[209] = 0.0f; 
mA[210] =  v_v36_aa_fw ; 
mA[211] = 0.0f; 
mA[212] = 0.0f; 
mA[213] = 0.0f; 
mA[214] = 0.0f; 
mA[215] = 0.0f; 
mA[216] = 0.0f; 
mA[217] = 0.0f; 
mA[218] = 0.0f; 
mA[219] =  v_v23_tca_bw ; 
mA[220] = 0.0f; 
mA[221] = 0.0f; 
mA[222] = 0.0f; 
mA[223] = 0.0f; 
mA[224] = 0.0f; 
mA[225] = 0.0f; 
mA[226] = 0.0f; 
mA[227] = 0.0f; 
mA[228] = 0.0f; 
mA[229] = 0.0f; 
mA[230] = 0.0f; 
mA[231] = 0.0f; 
mA[232] = 0.0f; 
mA[233] = 0.0f; 
mA[234] = 0.0f; 
mA[235] = 0.0f; 
mA[236] = 0.0f; 
mA[237] = 0.0f; 
mA[238] = 0.0f; 
mA[239] = 0.0f; 
mA[240] = 0.0f; 
mA[241] = 0.0f; 
mA[242] = 0.0f; 
mA[243] = 0.0f; 
mA[244] = 0.0f; 
mA[245] = 0.0f; 
mA[246] = 0.0f; 
mA[247] = 0.0f; 
mA[248] = 0.0f; 
mA[249] = 0.0f; 
mA[250] = 0.0f; 
mA[251] = 0.0f; 
mA[252] = 0.0f; 
mA[253] = 0.0f; 
mA[254] = 0.0f; 
mA[255] = 0.0f; 
mA[256] = 0.0f; 
mA[257] = 0.0f; 
mA[258] = 0.0f; 
mA[259] = 0.0f; 
mA[260] = 0.0f; 
mA[261] = 0.0f; 
mA[262] = 0.0f; 
mA[263] = 0.0f; 
mA[264] = 0.0f; 
mA[265] = 0.0f; 
mA[266] = 0.0f; 
mA[267] = 0.0f; 
mA[268] = 0.0f; 
mA[269] = 0.0f; 
mA[270] = 0.0f; 
mA[271] =  v_v24_tca_fw ; 
mA[272] = 0.0f; 
mA[273] = 0.0f; 
mA[274] = 0.0f; 
mA[275] = 0.0f; 
mA[276] = 0.0f; 
mA[277] = 0.0f; 
mA[278] = 0.0f; 
mA[279] = 0.0f; 
mA[280] = 0.0f; 
mA[281] = 0.0f; 
mA[282] = 0.0f; 
mA[283] = 0.0f; 
mA[284] = 0.0f; 
mA[285] = 0.0f; 
mA[286] = 0.0f; 
mA[287] = 0.0f; 
mA[288] = 0.0f; 
mA[289] = 0.0f; 
mA[290] = 0.0f; 
mA[291] = 0.0f; 
mA[292] = 0.0f; 
mA[293] = 0.0f; 
mA[294] = 0.0f; 
mA[295] = 0.0f; 
mA[296] = 0.0f; 
mA[297] = 0.0f; 
mA[298] = 0.0f; 
mA[299] = 0.0f; 
mA[300] = ( (  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v56_aa_fw   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v52_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v23_tca_fw   )  +(  -1.0f  * v_v54_aa_fw   )  +(  -1.0f  * v_v40_aa_fw   )  +(  -1.0f  * v_v53_aa_fw   )  +(  -1.0f  * v_v42_aa_fw   )  +(  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v55_aa_fw   )   ) ; 
mA[301] = 0.0f; 
mA[302] = 0.0f; 
mA[303] = 0.0f; 
mA[304] = 0.0f; 
mA[305] = 0.0f; 
mA[306] = 0.0f; 
mA[307] = 0.0f; 
mA[308] = 0.0f; 
mA[309] = 0.0f; 
mA[310] = 0.0f; 
mA[311] = 0.0f; 
mA[312] = 0.0f; 
mA[313] = 0.0f; 
mA[314] = 0.0f; 
mA[315] = 0.0f; 
mA[316] = 0.0f; 
mA[317] = 0.0f; 
mA[318] = 0.0f; 
mA[319] = 0.0f; 
mA[320] = 0.0f; 
mA[321] = 0.0f; 
mA[322] = 0.0f; 
mA[323] = 0.0f; 
mA[324] = 0.0f; 
mA[325] = 0.0f; 
mA[326] = 0.0f; 
mA[327] = 0.0f; 
mA[328] = 0.0f; 
mA[329] = 0.0f; 
mA[330] = 0.0f; 
mA[331] = 0.0f; 
mA[332] = 0.0f; 
mA[333] = 0.0f; 
mA[334] = 0.0f; 
mA[335] = 0.0f; 
mA[336] = 0.0f; 
mA[337] = 0.0f; 
mA[338] = 0.0f; 
mA[339] = 0.0f; 
mA[340] = 0.0f; 
mA[341] = 0.0f; 
mA[342] = 0.0f; 
mA[343] = 0.0f; 
mA[344] = 0.0f; 
mA[345] = 0.0f; 
mA[346] = 0.0f; 
mA[347] = 0.0f; 
mA[348] = 0.0f; 
mA[349] = 0.0f; 
mA[350] = 0.0f; 
mA[351] = 0.0f; 
mA[352] = 0.0f; 
mA[353] = 0.0f; 
mA[354] = 0.0f; 
mA[355] = 0.0f; 
mA[356] = 0.0f; 
mA[357] = 0.0f; 
mA[358] = 0.0f; 
mA[359] = 0.0f; 
mA[360] =  v_v36_aa_fw ; 
mA[361] = 0.0f; 
mA[362] = 0.0f; 
mA[363] = 0.0f; 
mA[364] = 0.0f; 
mA[365] = 0.0f; 
mA[366] = 0.0f; 
mA[367] = 0.0f; 
mA[368] = 0.0f; 
mA[369] =  v_v23_tca_bw ; 
mA[370] = 0.0f; 
mA[371] = 0.0f; 
mA[372] = 0.0f; 
mA[373] = 0.0f; 
mA[374] = 0.0f; 
mA[375] = 0.0f; 
mA[376] = 0.0f; 
mA[377] = 0.0f; 
mA[378] = 0.0f; 
mA[379] = 0.0f; 
mA[380] = 0.0f; 
mA[381] = 0.0f; 
mA[382] = 0.0f; 
mA[383] = 0.0f; 
mA[384] = 0.0f; 
mA[385] = 0.0f; 
mA[386] = 0.0f; 
mA[387] = 0.0f; 
mA[388] = 0.0f; 
mA[389] = 0.0f; 
mA[390] = 0.0f; 
mA[391] = 0.0f; 
mA[392] = 0.0f; 
mA[393] = 0.0f; 
mA[394] = 0.0f; 
mA[395] = 0.0f; 
mA[396] = 0.0f; 
mA[397] = 0.0f; 
mA[398] = 0.0f; 
mA[399] = 0.0f; 
mA[400] = 0.0f; 
mA[401] = 0.0f; 
mA[402] = 0.0f; 
mA[403] = 0.0f; 
mA[404] = 0.0f; 
mA[405] = 0.0f; 
mA[406] = 0.0f; 
mA[407] = 0.0f; 
mA[408] = 0.0f; 
mA[409] = 0.0f; 
mA[410] = 0.0f; 
mA[411] = 0.0f; 
mA[412] = 0.0f; 
mA[413] = 0.0f; 
mA[414] = 0.0f; 
mA[415] = 0.0f; 
mA[416] = 0.0f; 
mA[417] = 0.0f; 
mA[418] = 0.0f; 
mA[419] = 0.0f; 
mA[420] = 0.0f; 
mA[421] =  v_v24_tca_fw ; 
mA[422] = 0.0f; 
mA[423] = 0.0f; 
mA[424] = 0.0f; 
mA[425] = 0.0f; 
mA[426] = 0.0f; 
mA[427] = 0.0f; 
mA[428] = 0.0f; 
mA[429] = 0.0f; 
mA[430] = 0.0f; 
mA[431] = 0.0f; 
mA[432] = 0.0f; 
mA[433] = 0.0f; 
mA[434] = 0.0f; 
mA[435] = 0.0f; 
mA[436] = 0.0f; 
mA[437] = 0.0f; 
mA[438] = 0.0f; 
mA[439] = 0.0f; 
mA[440] = 0.0f; 
mA[441] = 0.0f; 
mA[442] = 0.0f; 
mA[443] = 0.0f; 
mA[444] = 0.0f; 
mA[445] = 0.0f; 
mA[446] = 0.0f; 
mA[447] = 0.0f; 
mA[448] = 0.0f; 
mA[449] = 0.0f; 
mA[450] = ( (  -1.0f  * v_v53_aa_fw   )  +(  -1.0f  * v_v54_aa_fw   )  +(  -1.0f  * v_v52_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v56_aa_fw   )  +(  -1.0f  * v_v23_tca_fw   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v55_aa_fw   )  +(  -1.0f  * v_v42_aa_fw   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v40_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_b   )   ) ; 
mA[451] = 0.0f; 
mA[452] = 0.0f; 
mA[453] = 0.0f; 
mA[454] = 0.0f; 
mA[455] = 0.0f; 
mA[456] = 0.0f; 
mA[457] = 0.0f; 
mA[458] = 0.0f; 
mA[459] = 0.0f; 
mA[460] = 0.0f; 
mA[461] = 0.0f; 
mA[462] = 0.0f; 
mA[463] = 0.0f; 
mA[464] = 0.0f; 
mA[465] = 0.0f; 
mA[466] = 0.0f; 
mA[467] = 0.0f; 
mA[468] = 0.0f; 
mA[469] = 0.0f; 
mA[470] = 0.0f; 
mA[471] = 0.0f; 
mA[472] = 0.0f; 
mA[473] = 0.0f; 
mA[474] = 0.0f; 
mA[475] = 0.0f; 
mA[476] = 0.0f; 
mA[477] = 0.0f; 
mA[478] = 0.0f; 
mA[479] = 0.0f; 
mA[480] = 0.0f; 
mA[481] = 0.0f; 
mA[482] = 0.0f; 
mA[483] = 0.0f; 
mA[484] = 0.0f; 
mA[485] = 0.0f; 
mA[486] = 0.0f; 
mA[487] = 0.0f; 
mA[488] = 0.0f; 
mA[489] = 0.0f; 
mA[490] = 0.0f; 
mA[491] = 0.0f; 
mA[492] = 0.0f; 
mA[493] = 0.0f; 
mA[494] = 0.0f; 
mA[495] = 0.0f; 
mA[496] = 0.0f; 
mA[497] = 0.0f; 
mA[498] = 0.0f; 
mA[499] = 0.0f; 
mA[500] = 0.0f; 
mA[501] = 0.0f; 
mA[502] = 0.0f; 
mA[503] = 0.0f; 
mA[504] = 0.0f; 
mA[505] = 0.0f; 
mA[506] = 0.0f; 
mA[507] = 0.0f; 
mA[508] = 0.0f; 
mA[509] = 0.0f; 
mA[510] =  v_v36_aa_fw ; 
mA[511] = 0.0f; 
mA[512] = 0.0f; 
mA[513] = 0.0f; 
mA[514] = 0.0f; 
mA[515] = 0.0f; 
mA[516] = 0.0f; 
mA[517] = 0.0f; 
mA[518] = 0.0f; 
mA[519] =  v_v23_tca_bw ; 
mA[520] = 0.0f; 
mA[521] = 0.0f; 
mA[522] = 0.0f; 
mA[523] = 0.0f; 
mA[524] = 0.0f; 
mA[525] = 0.0f; 
mA[526] = 0.0f; 
mA[527] = 0.0f; 
mA[528] = 0.0f; 
mA[529] = 0.0f; 
mA[530] = 0.0f; 
mA[531] = 0.0f; 
mA[532] = 0.0f; 
mA[533] = 0.0f; 
mA[534] = 0.0f; 
mA[535] = 0.0f; 
mA[536] = 0.0f; 
mA[537] = 0.0f; 
mA[538] = 0.0f; 
mA[539] = 0.0f; 
mA[540] = 0.0f; 
mA[541] = 0.0f; 
mA[542] = 0.0f; 
mA[543] = 0.0f; 
mA[544] = 0.0f; 
mA[545] = 0.0f; 
mA[546] = 0.0f; 
mA[547] = 0.0f; 
mA[548] = 0.0f; 
mA[549] = 0.0f; 
mA[550] = 0.0f; 
mA[551] = 0.0f; 
mA[552] = 0.0f; 
mA[553] = 0.0f; 
mA[554] = 0.0f; 
mA[555] = 0.0f; 
mA[556] = 0.0f; 
mA[557] = 0.0f; 
mA[558] = 0.0f; 
mA[559] = 0.0f; 
mA[560] = 0.0f; 
mA[561] = 0.0f; 
mA[562] = 0.0f; 
mA[563] = 0.0f; 
mA[564] = 0.0f; 
mA[565] = 0.0f; 
mA[566] = 0.0f; 
mA[567] = 0.0f; 
mA[568] = 0.0f; 
mA[569] = 0.0f; 
mA[570] = 0.0f; 
mA[571] =  v_v24_tca_fw ; 
mA[572] = 0.0f; 
mA[573] = 0.0f; 
mA[574] = 0.0f; 
mA[575] = 0.0f; 
mA[576] = 0.0f; 
mA[577] = 0.0f; 
mA[578] = 0.0f; 
mA[579] = 0.0f; 
mA[580] = 0.0f; 
mA[581] = 0.0f; 
mA[582] = 0.0f; 
mA[583] = 0.0f; 
mA[584] = 0.0f; 
mA[585] = 0.0f; 
mA[586] = 0.0f; 
mA[587] = 0.0f; 
mA[588] = 0.0f; 
mA[589] = 0.0f; 
mA[590] = 0.0f; 
mA[591] = 0.0f; 
mA[592] = 0.0f; 
mA[593] = 0.0f; 
mA[594] = 0.0f; 
mA[595] = 0.0f; 
mA[596] = 0.0f; 
mA[597] = 0.0f; 
mA[598] = 0.0f; 
mA[599] = 0.0f; 
mA[600] = ( (  -1.0f  * v_v56_aa_fw   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v55_aa_fw   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v42_aa_fw   )  +(  -1.0f  * v_v54_aa_fw   )  +(  -1.0f  * v_v23_tca_fw   )  +(  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v52_aa_fw   )  +(  -1.0f  * v_v53_aa_fw   )  +(  -1.0f  * v_v40_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_b   )   ) ; 
mA[601] = 0.0f; 
mA[602] = 0.0f; 
mA[603] = 0.0f; 
mA[604] = 0.0f; 
mA[605] = 0.0f; 
mA[606] = 0.0f; 
mA[607] = 0.0f; 
mA[608] = 0.0f; 
mA[609] = 0.0f; 
mA[610] = 0.0f; 
mA[611] = 0.0f; 
mA[612] = 0.0f; 
mA[613] = 0.0f; 
mA[614] = 0.0f; 
mA[615] = 0.0f; 
mA[616] = 0.0f; 
mA[617] = 0.0f; 
mA[618] = 0.0f; 
mA[619] = 0.0f; 
mA[620] = 0.0f; 
mA[621] = 0.0f; 
mA[622] = 0.0f; 
mA[623] = 0.0f; 
mA[624] = 0.0f; 
mA[625] = 0.0f; 
mA[626] = 0.0f; 
mA[627] = 0.0f; 
mA[628] = 0.0f; 
mA[629] = 0.0f; 
mA[630] = 0.0f; 
mA[631] = 0.0f; 
mA[632] = 0.0f; 
mA[633] = 0.0f; 
mA[634] = 0.0f; 
mA[635] = 0.0f; 
mA[636] = 0.0f; 
mA[637] = 0.0f; 
mA[638] = 0.0f; 
mA[639] = 0.0f; 
mA[640] = 0.0f; 
mA[641] = 0.0f; 
mA[642] = 0.0f; 
mA[643] = 0.0f; 
mA[644] = 0.0f; 
mA[645] = 0.0f; 
mA[646] = 0.0f; 
mA[647] = 0.0f; 
mA[648] = 0.0f; 
mA[649] = 0.0f; 
mA[650] = 0.0f; 
mA[651] = 0.0f; 
mA[652] = 0.0f; 
mA[653] = 0.0f; 
mA[654] = 0.0f; 
mA[655] = 0.0f; 
mA[656] = 0.0f; 
mA[657] = 0.0f; 
mA[658] = 0.0f; 
mA[659] = 0.0f; 
mA[660] =  v_v36_aa_fw ; 
mA[661] = 0.0f; 
mA[662] = 0.0f; 
mA[663] = 0.0f; 
mA[664] = 0.0f; 
mA[665] = 0.0f; 
mA[666] = 0.0f; 
mA[667] = 0.0f; 
mA[668] = 0.0f; 
mA[669] =  v_v23_tca_bw ; 
mA[670] = 0.0f; 
mA[671] = 0.0f; 
mA[672] = 0.0f; 
mA[673] = 0.0f; 
mA[674] = 0.0f; 
mA[675] = 0.0f; 
mA[676] = 0.0f; 
mA[677] = 0.0f; 
mA[678] = 0.0f; 
mA[679] = 0.0f; 
mA[680] = 0.0f; 
mA[681] = 0.0f; 
mA[682] = 0.0f; 
mA[683] = 0.0f; 
mA[684] = 0.0f; 
mA[685] = 0.0f; 
mA[686] = 0.0f; 
mA[687] = 0.0f; 
mA[688] = 0.0f; 
mA[689] = 0.0f; 
mA[690] = 0.0f; 
mA[691] = 0.0f; 
mA[692] = 0.0f; 
mA[693] = 0.0f; 
mA[694] = 0.0f; 
mA[695] = 0.0f; 
mA[696] = 0.0f; 
mA[697] = 0.0f; 
mA[698] = 0.0f; 
mA[699] = 0.0f; 
mA[700] = 0.0f; 
mA[701] = 0.0f; 
mA[702] = 0.0f; 
mA[703] = 0.0f; 
mA[704] = 0.0f; 
mA[705] = 0.0f; 
mA[706] = 0.0f; 
mA[707] = 0.0f; 
mA[708] = 0.0f; 
mA[709] = 0.0f; 
mA[710] = 0.0f; 
mA[711] = 0.0f; 
mA[712] = 0.0f; 
mA[713] = 0.0f; 
mA[714] = 0.0f; 
mA[715] = 0.0f; 
mA[716] = 0.0f; 
mA[717] = 0.0f; 
mA[718] = 0.0f; 
mA[719] = 0.0f; 
mA[720] = 0.0f; 
mA[721] =  v_v24_tca_fw ; 
mA[722] = 0.0f; 
mA[723] = 0.0f; 
mA[724] = 0.0f; 
mA[725] = 0.0f; 
mA[726] = 0.0f; 
mA[727] = 0.0f; 
mA[728] = 0.0f; 
mA[729] = 0.0f; 
mA[730] = 0.0f; 
mA[731] = 0.0f; 
mA[732] = 0.0f; 
mA[733] = 0.0f; 
mA[734] = 0.0f; 
mA[735] = 0.0f; 
mA[736] = 0.0f; 
mA[737] = 0.0f; 
mA[738] = 0.0f; 
mA[739] = 0.0f; 
mA[740] = 0.0f; 
mA[741] = 0.0f; 
mA[742] = 0.0f; 
mA[743] = 0.0f; 
mA[744] = 0.0f; 
mA[745] = 0.0f; 
mA[746] = 0.0f; 
mA[747] = 0.0f; 
mA[748] = 0.0f; 
mA[749] = 0.0f; 
mA[750] = ( (  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v47_aa_fw   )  +(  -1.0f  * v_v35_acet_fw   )   ) ; 
mA[751] = 0.0f; 
mA[752] =  v_v35_acet_bw ; 
mA[753] = 0.0f; 
mA[754] = 0.0f; 
mA[755] = 0.0f; 
mA[756] = 0.0f; 
mA[757] = 0.0f; 
mA[758] = 0.0f; 
mA[759] = 0.0f; 
mA[760] = 0.0f; 
mA[761] = 0.0f; 
mA[762] = 0.0f; 
mA[763] = 0.0f; 
mA[764] = 0.0f; 
mA[765] = 0.0f; 
mA[766] = 0.0f; 
mA[767] = 0.0f; 
mA[768] = 0.0f; 
mA[769] = 0.0f; 
mA[770] = 0.0f; 
mA[771] = 0.0f; 
mA[772] = 0.0f; 
mA[773] = 0.0f; 
mA[774] = 0.0f; 
mA[775] = 0.0f; 
mA[776] = 0.0f; 
mA[777] = 0.0f; 
mA[778] = 0.0f; 
mA[779] = 0.0f; 
mA[780] = 0.0f; 
mA[781] = 0.0f; 
mA[782] = 0.0f; 
mA[783] = 0.0f; 
mA[784] = 0.0f; 
mA[785] = 0.0f; 
mA[786] = 0.0f; 
mA[787] = 0.0f; 
mA[788] = 0.0f; 
mA[789] = 0.0f; 
mA[790] = 0.0f; 
mA[791] = 0.0f; 
mA[792] = 0.0f; 
mA[793] = 0.0f; 
mA[794] = 0.0f; 
mA[795] = 0.0f; 
mA[796] = 0.0f; 
mA[797] = 0.0f; 
mA[798] = 0.0f; 
mA[799] = 0.0f; 
mA[800] = 0.0f; 
mA[801] = 0.0f; 
mA[802] = 0.0f; 
mA[803] = 0.0f; 
mA[804] = 0.0f; 
mA[805] = 0.0f; 
mA[806] = 0.0f; 
mA[807] = 0.0f; 
mA[808] = 0.0f; 
mA[809] = 0.0f; 
mA[810] = 0.0f; 
mA[811] = 0.0f; 
mA[812] = 0.0f; 
mA[813] = 0.0f; 
mA[814] = 0.0f; 
mA[815] = 0.0f; 
mA[816] = 0.0f; 
mA[817] = 0.0f; 
mA[818] = 0.0f; 
mA[819] = 0.0f; 
mA[820] = 0.0f; 
mA[821] = 0.0f; 
mA[822] = 0.0f; 
mA[823] = 0.0f; 
mA[824] = 0.0f; 
mA[825] = 0.0f; 
mA[826] = 0.0f; 
mA[827] = 0.0f; 
mA[828] = 0.0f; 
mA[829] = 0.0f; 
mA[830] = 0.0f; 
mA[831] = 0.0f; 
mA[832] = 0.0f; 
mA[833] = 0.0f; 
mA[834] = 0.0f; 
mA[835] = 0.0f; 
mA[836] = 0.0f; 
mA[837] = 0.0f; 
mA[838] = 0.0f; 
mA[839] = 0.0f; 
mA[840] = 0.0f; 
mA[841] = 0.0f; 
mA[842] = 0.0f; 
mA[843] = 0.0f; 
mA[844] = 0.0f; 
mA[845] = 0.0f; 
mA[846] = 0.0f; 
mA[847] = 0.0f; 
mA[848] = 0.0f; 
mA[849] = 0.0f; 
mA[850] = 0.0f; 
mA[851] = 0.0f; 
mA[852] = 0.0f; 
mA[853] = 0.0f; 
mA[854] = 0.0f; 
mA[855] = 0.0f; 
mA[856] = 0.0f; 
mA[857] = 0.0f; 
mA[858] = 0.0f; 
mA[859] = 0.0f; 
mA[860] = 0.0f; 
mA[861] = 0.0f; 
mA[862] = 0.0f; 
mA[863] = 0.0f; 
mA[864] = 0.0f; 
mA[865] = 0.0f; 
mA[866] = 0.0f; 
mA[867] = 0.0f; 
mA[868] = 0.0f; 
mA[869] = 0.0f; 
mA[870] = 0.0f; 
mA[871] = 0.0f; 
mA[872] = 0.0f; 
mA[873] = 0.0f; 
mA[874] = 0.0f; 
mA[875] = 0.0f; 
mA[876] = 0.0f; 
mA[877] = 0.0f; 
mA[878] = 0.0f; 
mA[879] = 0.0f; 
mA[880] = 0.0f; 
mA[881] = 0.0f; 
mA[882] = 0.0f; 
mA[883] = 0.0f; 
mA[884] = 0.0f; 
mA[885] = 0.0f; 
mA[886] = 0.0f; 
mA[887] = 0.0f; 
mA[888] = 0.0f; 
mA[889] = 0.0f; 
mA[890] = 0.0f; 
mA[891] = 0.0f; 
mA[892] = 0.0f; 
mA[893] = 0.0f; 
mA[894] = 0.0f; 
mA[895] = 0.0f; 
mA[896] = 0.0f; 
mA[897] = 0.0f; 
mA[898] = 0.0f; 
mA[899] = 0.0f; 
mA[900] = ( (  -1.0f  * v_v35_acet_fw   )  +(  -1.0f  * v_v47_aa_fw   )  +(  -1.0f  * v_v39_aa_fw   )   ) ; 
mA[901] = 0.0f; 
mA[902] =  v_v35_acet_bw ; 
mA[903] = 0.0f; 
mA[904] = 0.0f; 
mA[905] = 0.0f; 
mA[906] = 0.0f; 
mA[907] = 0.0f; 
mA[908] = 0.0f; 
mA[909] = 0.0f; 
mA[910] = 0.0f; 
mA[911] = 0.0f; 
mA[912] = 0.0f; 
mA[913] = 0.0f; 
mA[914] = 0.0f; 
mA[915] = 0.0f; 
mA[916] = 0.0f; 
mA[917] = 0.0f; 
mA[918] = 0.0f; 
mA[919] = 0.0f; 
mA[920] = 0.0f; 
mA[921] = 0.0f; 
mA[922] = 0.0f; 
mA[923] = 0.0f; 
mA[924] = 0.0f; 
mA[925] = 0.0f; 
mA[926] = 0.0f; 
mA[927] = 0.0f; 
mA[928] = 0.0f; 
mA[929] = 0.0f; 
mA[930] = 0.0f; 
mA[931] = 0.0f; 
mA[932] = 0.0f; 
mA[933] = 0.0f; 
mA[934] = 0.0f; 
mA[935] = 0.0f; 
mA[936] = 0.0f; 
mA[937] = 0.0f; 
mA[938] = 0.0f; 
mA[939] = 0.0f; 
mA[940] = 0.0f; 
mA[941] = 0.0f; 
mA[942] = 0.0f; 
mA[943] = 0.0f; 
mA[944] = 0.0f; 
mA[945] = 0.0f; 
mA[946] = 0.0f; 
mA[947] = 0.0f; 
mA[948] = 0.0f; 
mA[949] = 0.0f; 
mA[950] = 0.0f; 
mA[951] = 0.0f; 
mA[952] = 0.0f; 
mA[953] = 0.0f; 
mA[954] = 0.0f; 
mA[955] = 0.0f; 
mA[956] = 0.0f; 
mA[957] = 0.0f; 
mA[958] = 0.0f; 
mA[959] = 0.0f; 
mA[960] = 0.0f; 
mA[961] = 0.0f; 
mA[962] = 0.0f; 
mA[963] = 0.0f; 
mA[964] = 0.0f; 
mA[965] = 0.0f; 
mA[966] = 0.0f; 
mA[967] = 0.0f; 
mA[968] = 0.0f; 
mA[969] = 0.0f; 
mA[970] = 0.0f; 
mA[971] = 0.0f; 
mA[972] = 0.0f; 
mA[973] = 0.0f; 
mA[974] = 0.0f; 
mA[975] = 0.0f; 
mA[976] = 0.0f; 
mA[977] = 0.0f; 
mA[978] = 0.0f; 
mA[979] = 0.0f; 
mA[980] = 0.0f; 
mA[981] = 0.0f; 
mA[982] = 0.0f; 
mA[983] = 0.0f; 
mA[984] = 0.0f; 
mA[985] = 0.0f; 
mA[986] = 0.0f; 
mA[987] = 0.0f; 
mA[988] = 0.0f; 
mA[989] = 0.0f; 
mA[990] = 0.0f; 
mA[991] = 0.0f; 
mA[992] = 0.0f; 
mA[993] = 0.0f; 
mA[994] = 0.0f; 
mA[995] = 0.0f; 
mA[996] = 0.0f; 
mA[997] = 0.0f; 
mA[998] = 0.0f; 
mA[999] = 0.0f; 
mA[1000] = 0.0f; 
mA[1001] = 0.0f; 
mA[1002] = 0.0f; 
mA[1003] = 0.0f; 
mA[1004] = 0.0f; 
mA[1005] = 0.0f; 
mA[1006] = 0.0f; 
mA[1007] = 0.0f; 
mA[1008] = 0.0f; 
mA[1009] = 0.0f; 
mA[1010] = 0.0f; 
mA[1011] = 0.0f; 
mA[1012] = 0.0f; 
mA[1013] = 0.0f; 
mA[1014] = 0.0f; 
mA[1015] = 0.0f; 
mA[1016] = 0.0f; 
mA[1017] = 0.0f; 
mA[1018] = 0.0f; 
mA[1019] = 0.0f; 
mA[1020] = 0.0f; 
mA[1021] = 0.0f; 
mA[1022] = 0.0f; 
mA[1023] = 0.0f; 
mA[1024] = 0.0f; 
mA[1025] = 0.0f; 
mA[1026] = 0.0f; 
mA[1027] = 0.0f; 
mA[1028] = 0.0f; 
mA[1029] = 0.0f; 
mA[1030] = 0.0f; 
mA[1031] = 0.0f; 
mA[1032] = 0.0f; 
mA[1033] = 0.0f; 
mA[1034] = 0.0f; 
mA[1035] = 0.0f; 
mA[1036] = 0.0f; 
mA[1037] = 0.0f; 
mA[1038] = 0.0f; 
mA[1039] = 0.0f; 
mA[1040] = 0.0f; 
mA[1041] = 0.0f; 
mA[1042] = 0.0f; 
mA[1043] = 0.0f; 
mA[1044] = 0.0f; 
mA[1045] = 0.0f; 
mA[1046] = 0.0f; 
mA[1047] = 0.0f; 
mA[1048] = (  v_v39_aa_fw  + v_v47_aa_fw  + v_v35_acet_fw   ) ; 
mA[1049] = 0.0f; 
mA[1050] = ( (  -1.0f  * v_v46_aa_fw   )  +(  -1.0f  * v_v20_tca_fw   )  +(  -1.0f  * v_v35_acet_bw   )   ) ; 
mA[1051] = 0.0f; 
mA[1052] = 0.0f; 
mA[1053] = 0.0f; 
mA[1054] = 0.0f; 
mA[1055] = 0.0f; 
mA[1056] = 0.0f; 
mA[1057] = 0.0f; 
mA[1058] = 0.0f; 
mA[1059] = 0.0f; 
mA[1060] = 0.0f; 
mA[1061] =  v_v21_tca_fw ; 
mA[1062] = 0.0f; 
mA[1063] = 0.0f; 
mA[1064] = 0.0f; 
mA[1065] = 0.0f; 
mA[1066] = 0.0f; 
mA[1067] = 0.0f; 
mA[1068] = 0.0f; 
mA[1069] = 0.0f; 
mA[1070] = 0.0f; 
mA[1071] = 0.0f; 
mA[1072] = 0.0f; 
mA[1073] = 0.0f; 
mA[1074] = 0.0f; 
mA[1075] = 0.0f; 
mA[1076] = 0.0f; 
mA[1077] = 0.0f; 
mA[1078] = 0.0f; 
mA[1079] = 0.0f; 
mA[1080] = 0.0f; 
mA[1081] = 0.0f; 
mA[1082] = 0.0f; 
mA[1083] = 0.0f; 
mA[1084] = 0.0f; 
mA[1085] = 0.0f; 
mA[1086] = 0.0f; 
mA[1087] = 0.0f; 
mA[1088] = 0.0f; 
mA[1089] = 0.0f; 
mA[1090] = 0.0f; 
mA[1091] = 0.0f; 
mA[1092] = 0.0f; 
mA[1093] = 0.0f; 
mA[1094] = 0.0f; 
mA[1095] = 0.0f; 
mA[1096] = 0.0f; 
mA[1097] = 0.0f; 
mA[1098] = 0.0f; 
mA[1099] = 0.0f; 
mA[1100] = 0.0f; 
mA[1101] = 0.0f; 
mA[1102] = 0.0f; 
mA[1103] = 0.0f; 
mA[1104] = 0.0f; 
mA[1105] = 0.0f; 
mA[1106] = 0.0f; 
mA[1107] = 0.0f; 
mA[1108] = 0.0f; 
mA[1109] = 0.0f; 
mA[1110] = 0.0f; 
mA[1111] = 0.0f; 
mA[1112] = 0.0f; 
mA[1113] = 0.0f; 
mA[1114] = 0.0f; 
mA[1115] = 0.0f; 
mA[1116] = 0.0f; 
mA[1117] = 0.0f; 
mA[1118] = 0.0f; 
mA[1119] = 0.0f; 
mA[1120] = 0.0f; 
mA[1121] = 0.0f; 
mA[1122] = 0.0f; 
mA[1123] = 0.0f; 
mA[1124] = 0.0f; 
mA[1125] = 0.0f; 
mA[1126] = 0.0f; 
mA[1127] = 0.0f; 
mA[1128] = 0.0f; 
mA[1129] = 0.0f; 
mA[1130] =  v_v30_glyox_fw ; 
mA[1131] = 0.0f; 
mA[1132] = 0.0f; 
mA[1133] = 0.0f; 
mA[1134] = 0.0f; 
mA[1135] = 0.0f; 
mA[1136] = 0.0f; 
mA[1137] = 0.0f; 
mA[1138] = 0.0f; 
mA[1139] = 0.0f; 
mA[1140] = 0.0f; 
mA[1141] = 0.0f; 
mA[1142] = 0.0f; 
mA[1143] = 0.0f; 
mA[1144] = 0.0f; 
mA[1145] = 0.0f; 
mA[1146] = 0.0f; 
mA[1147] = 0.0f; 
mA[1148] = 0.0f; 
mA[1149] = 0.0f; 
mA[1150] = 0.0f; 
mA[1151] = 0.0f; 
mA[1152] = 0.0f; 
mA[1153] = 0.0f; 
mA[1154] = 0.0f; 
mA[1155] = 0.0f; 
mA[1156] = 0.0f; 
mA[1157] = 0.0f; 
mA[1158] = 0.0f; 
mA[1159] = 0.0f; 
mA[1160] = 0.0f; 
mA[1161] = 0.0f; 
mA[1162] = 0.0f; 
mA[1163] = 0.0f; 
mA[1164] = 0.0f; 
mA[1165] = 0.0f; 
mA[1166] = 0.0f; 
mA[1167] = 0.0f; 
mA[1168] = 0.0f; 
mA[1169] = 0.0f; 
mA[1170] = 0.0f; 
mA[1171] = 0.0f; 
mA[1172] = 0.0f; 
mA[1173] = 0.0f; 
mA[1174] = 0.0f; 
mA[1175] = 0.0f; 
mA[1176] = 0.0f; 
mA[1177] = 0.0f; 
mA[1178] = 0.0f; 
mA[1179] = 0.0f; 
mA[1180] = 0.0f; 
mA[1181] = 0.0f; 
mA[1182] = 0.0f; 
mA[1183] = 0.0f; 
mA[1184] = 0.0f; 
mA[1185] = 0.0f; 
mA[1186] = 0.0f; 
mA[1187] = 0.0f; 
mA[1188] = 0.0f; 
mA[1189] = 0.0f; 
mA[1190] = 0.0f; 
mA[1191] = 0.0f; 
mA[1192] = 0.0f; 
mA[1193] = 0.0f; 
mA[1194] = 0.0f; 
mA[1195] = 0.0f; 
mA[1196] = 0.0f; 
mA[1197] = 0.0f; 
mA[1198] = (  v_v35_acet_fw  + v_v47_aa_fw  + v_v39_aa_fw   ) ; 
mA[1199] = 0.0f; 
mA[1200] = ( (  -1.0f  * v_v20_tca_fw   )  +(  -1.0f  * v_v46_aa_fw   )  +(  -1.0f  * v_v35_acet_bw   )   ) ; 
mA[1201] = 0.0f; 
mA[1202] = 0.0f; 
mA[1203] = 0.0f; 
mA[1204] = 0.0f; 
mA[1205] = 0.0f; 
mA[1206] = 0.0f; 
mA[1207] = 0.0f; 
mA[1208] = 0.0f; 
mA[1209] =  v_v21_tca_fw ; 
mA[1210] = 0.0f; 
mA[1211] = 0.0f; 
mA[1212] = 0.0f; 
mA[1213] = 0.0f; 
mA[1214] = 0.0f; 
mA[1215] = 0.0f; 
mA[1216] = 0.0f; 
mA[1217] = 0.0f; 
mA[1218] = 0.0f; 
mA[1219] = 0.0f; 
mA[1220] = 0.0f; 
mA[1221] = 0.0f; 
mA[1222] = 0.0f; 
mA[1223] = 0.0f; 
mA[1224] = 0.0f; 
mA[1225] = 0.0f; 
mA[1226] = 0.0f; 
mA[1227] = 0.0f; 
mA[1228] = 0.0f; 
mA[1229] = 0.0f; 
mA[1230] = 0.0f; 
mA[1231] = 0.0f; 
mA[1232] = 0.0f; 
mA[1233] = 0.0f; 
mA[1234] = 0.0f; 
mA[1235] = 0.0f; 
mA[1236] = 0.0f; 
mA[1237] = 0.0f; 
mA[1238] = 0.0f; 
mA[1239] = 0.0f; 
mA[1240] = 0.0f; 
mA[1241] = 0.0f; 
mA[1242] = 0.0f; 
mA[1243] = 0.0f; 
mA[1244] = 0.0f; 
mA[1245] = 0.0f; 
mA[1246] = 0.0f; 
mA[1247] = 0.0f; 
mA[1248] = 0.0f; 
mA[1249] = 0.0f; 
mA[1250] = 0.0f; 
mA[1251] = 0.0f; 
mA[1252] = 0.0f; 
mA[1253] = 0.0f; 
mA[1254] = 0.0f; 
mA[1255] = 0.0f; 
mA[1256] = 0.0f; 
mA[1257] = 0.0f; 
mA[1258] = 0.0f; 
mA[1259] = 0.0f; 
mA[1260] = 0.0f; 
mA[1261] = 0.0f; 
mA[1262] = 0.0f; 
mA[1263] = 0.0f; 
mA[1264] = 0.0f; 
mA[1265] = 0.0f; 
mA[1266] = 0.0f; 
mA[1267] = 0.0f; 
mA[1268] = 0.0f; 
mA[1269] = 0.0f; 
mA[1270] = 0.0f; 
mA[1271] = 0.0f; 
mA[1272] = 0.0f; 
mA[1273] = 0.0f; 
mA[1274] = 0.0f; 
mA[1275] = 0.0f; 
mA[1276] = 0.0f; 
mA[1277] = 0.0f; 
mA[1278] =  v_v30_glyox_fw ; 
mA[1279] = 0.0f; 
mA[1280] = 0.0f; 
mA[1281] = 0.0f; 
mA[1282] = 0.0f; 
mA[1283] = 0.0f; 
mA[1284] = 0.0f; 
mA[1285] = 0.0f; 
mA[1286] = 0.0f; 
mA[1287] = 0.0f; 
mA[1288] = 0.0f; 
mA[1289] = 0.0f; 
mA[1290] = 0.0f; 
mA[1291] = 0.0f; 
mA[1292] = 0.0f; 
mA[1293] = 0.0f; 
mA[1294] = 0.0f; 
mA[1295] = 0.0f; 
mA[1296] = 0.0f; 
mA[1297] = 0.0f; 
mA[1298] = 0.0f; 
mA[1299] = 0.0f; 
mA[1300] = 0.0f; 
mA[1301] = 0.0f; 
mA[1302] = 0.0f; 
mA[1303] = 0.0f; 
mA[1304] = 0.0f; 
mA[1305] = 0.0f; 
mA[1306] = 0.0f; 
mA[1307] = 0.0f; 
mA[1308] = 0.0f; 
mA[1309] = 0.0f; 
mA[1310] = 0.0f; 
mA[1311] = 0.0f; 
mA[1312] = 0.0f; 
mA[1313] = 0.0f; 
mA[1314] = 0.0f; 
mA[1315] = 0.0f; 
mA[1316] = 0.0f; 
mA[1317] = 0.0f; 
mA[1318] = 0.0f; 
mA[1319] = 0.0f; 
mA[1320] = 0.0f; 
mA[1321] = 0.0f; 
mA[1322] = 0.0f; 
mA[1323] = 0.0f; 
mA[1324] = 0.0f; 
mA[1325] = 0.0f; 
mA[1326] = 0.0f; 
mA[1327] = 0.0f; 
mA[1328] = 0.0f; 
mA[1329] = 0.0f; 
mA[1330] = 0.0f; 
mA[1331] = 0.0f; 
mA[1332] = 0.0f; 
mA[1333] = 0.0f; 
mA[1334] = 0.0f; 
mA[1335] = 0.0f; 
mA[1336] = 0.0f; 
mA[1337] = 0.0f; 
mA[1338] = 0.0f; 
mA[1339] = 0.0f; 
mA[1340] = 0.0f; 
mA[1341] = 0.0f; 
mA[1342] = 0.0f; 
mA[1343] = 0.0f; 
mA[1344] = 0.0f; 
mA[1345] = 0.0f; 
mA[1346] = 0.0f; 
mA[1347] = 0.0f; 
mA[1348] = 0.0f; 
mA[1349] = 0.0f; 
mA[1350] = ( (  -1.0f  * v_v40_aa_fw   )   ) ; 
mA[1351] = 0.0f; 
mA[1352] = 0.0f; 
mA[1353] = 0.0f; 
mA[1354] = 0.0f; 
mA[1355] = 0.0f; 
mA[1356] = 0.0f; 
mA[1357] = 0.0f; 
mA[1358] = 0.0f; 
mA[1359] = 0.0f; 
mA[1360] = 0.0f; 
mA[1361] = 0.0f; 
mA[1362] = 0.0f; 
mA[1363] = 0.0f; 
mA[1364] = 0.0f; 
mA[1365] = 0.0f; 
mA[1366] = 0.0f; 
mA[1367] = 0.0f; 
mA[1368] = 0.0f; 
mA[1369] = 0.0f; 
mA[1370] = 0.0f; 
mA[1371] = 0.0f; 
mA[1372] = 0.0f; 
mA[1373] = 0.0f; 
mA[1374] = 0.0f; 
mA[1375] = 0.0f; 
mA[1376] = 0.0f; 
mA[1377] = 0.0f; 
mA[1378] = 0.0f; 
mA[1379] = 0.0f; 
mA[1380] = 0.0f; 
mA[1381] = 0.0f; 
mA[1382] = 0.0f; 
mA[1383] = (  v_v39_aa_fw  + v_v58_aa_fw   ) ; 
mA[1384] = 0.0f; 
mA[1385] = 0.0f; 
mA[1386] = 0.0f; 
mA[1387] = 0.0f; 
mA[1388] = 0.0f; 
mA[1389] = 0.0f; 
mA[1390] = 0.0f; 
mA[1391] = 0.0f; 
mA[1392] = 0.0f; 
mA[1393] = 0.0f; 
mA[1394] = 0.0f; 
mA[1395] = 0.0f; 
mA[1396] = 0.0f; 
mA[1397] = 0.0f; 
mA[1398] = 0.0f; 
mA[1399] = 0.0f; 
mA[1400] = 0.0f; 
mA[1401] = 0.0f; 
mA[1402] = 0.0f; 
mA[1403] = 0.0f; 
mA[1404] = 0.0f; 
mA[1405] = 0.0f; 
mA[1406] = 0.0f; 
mA[1407] = 0.0f; 
mA[1408] = 0.0f; 
mA[1409] = 0.0f; 
mA[1410] = 0.0f; 
mA[1411] = 0.0f; 
mA[1412] = 0.0f; 
mA[1413] = 0.0f; 
mA[1414] = 0.0f; 
mA[1415] = 0.0f; 
mA[1416] = 0.0f; 
mA[1417] = 0.0f; 
mA[1418] = 0.0f; 
mA[1419] = 0.0f; 
mA[1420] = 0.0f; 
mA[1421] = 0.0f; 
mA[1422] = (  v_v48_aa_fw_a  + v_v48_aa_fw_b   ) ; 
mA[1423] = (  v_v48_aa_fw_c  + v_v48_aa_fw_d   ) ; 
mA[1424] = 0.0f; 
mA[1425] = 0.0f; 
mA[1426] = 0.0f; 
mA[1427] = 0.0f; 
mA[1428] = 0.0f; 
mA[1429] = 0.0f; 
mA[1430] = 0.0f; 
mA[1431] = 0.0f; 
mA[1432] = 0.0f; 
mA[1433] = 0.0f; 
mA[1434] = 0.0f; 
mA[1435] = 0.0f; 
mA[1436] = 0.0f; 
mA[1437] = 0.0f; 
mA[1438] = 0.0f; 
mA[1439] = 0.0f; 
mA[1440] = 0.0f; 
mA[1441] = 0.0f; 
mA[1442] = 0.0f; 
mA[1443] = 0.0f; 
mA[1444] = 0.0f; 
mA[1445] = 0.0f; 
mA[1446] = 0.0f; 
mA[1447] = 0.0f; 
mA[1448] = 0.0f; 
mA[1449] = 0.0f; 
mA[1450] = 0.0f; 
mA[1451] = 0.0f; 
mA[1452] = 0.0f; 
mA[1453] = 0.0f; 
mA[1454] = 0.0f; 
mA[1455] = 0.0f; 
mA[1456] = 0.0f; 
mA[1457] = 0.0f; 
mA[1458] = 0.0f; 
mA[1459] = 0.0f; 
mA[1460] = 0.0f; 
mA[1461] = 0.0f; 
mA[1462] = 0.0f; 
mA[1463] = 0.0f; 
mA[1464] = 0.0f; 
mA[1465] = 0.0f; 
mA[1466] = 0.0f; 
mA[1467] = 0.0f; 
mA[1468] = 0.0f; 
mA[1469] = 0.0f; 
mA[1470] = 0.0f; 
mA[1471] = 0.0f; 
mA[1472] =  v_v50_aa_fw ; 
mA[1473] = 0.0f; 
mA[1474] = 0.0f; 
mA[1475] = 0.0f; 
mA[1476] = 0.0f; 
mA[1477] = 0.0f; 
mA[1478] = 0.0f; 
mA[1479] = 0.0f; 
mA[1480] = 0.0f; 
mA[1481] = 0.0f; 
mA[1482] = 0.0f; 
mA[1483] = 0.0f; 
mA[1484] = 0.0f; 
mA[1485] = 0.0f; 
mA[1486] = 0.0f; 
mA[1487] = 0.0f; 
mA[1488] = 0.0f; 
mA[1489] = 0.0f; 
mA[1490] = 0.0f; 
mA[1491] = 0.0f; 
mA[1492] = 0.0f; 
mA[1493] = 0.0f; 
mA[1494] = 0.0f; 
mA[1495] = 0.0f; 
mA[1496] = 0.0f; 
mA[1497] = 0.0f; 
mA[1498] = 0.0f; 
mA[1499] = 0.0f; 
mA[1500] = ( (  -1.0f  * v_v40_aa_fw   )   ) ; 
mA[1501] = 0.0f; 
mA[1502] = 0.0f; 
mA[1503] = 0.0f; 
mA[1504] = 0.0f; 
mA[1505] = 0.0f; 
mA[1506] = 0.0f; 
mA[1507] = 0.0f; 
mA[1508] = 0.0f; 
mA[1509] = 0.0f; 
mA[1510] = 0.0f; 
mA[1511] = 0.0f; 
mA[1512] = 0.0f; 
mA[1513] = 0.0f; 
mA[1514] = 0.0f; 
mA[1515] = 0.0f; 
mA[1516] = 0.0f; 
mA[1517] = 0.0f; 
mA[1518] = 0.0f; 
mA[1519] = 0.0f; 
mA[1520] = 0.0f; 
mA[1521] = 0.0f; 
mA[1522] = 0.0f; 
mA[1523] = 0.0f; 
mA[1524] = 0.0f; 
mA[1525] = 0.0f; 
mA[1526] = 0.0f; 
mA[1527] = 0.0f; 
mA[1528] = 0.0f; 
mA[1529] = 0.0f; 
mA[1530] = 0.0f; 
mA[1531] = 0.0f; 
mA[1532] = 0.0f; 
mA[1533] = (  v_v58_aa_fw  + v_v39_aa_fw   ) ; 
mA[1534] = 0.0f; 
mA[1535] = 0.0f; 
mA[1536] = 0.0f; 
mA[1537] = 0.0f; 
mA[1538] = 0.0f; 
mA[1539] = 0.0f; 
mA[1540] = 0.0f; 
mA[1541] = 0.0f; 
mA[1542] = 0.0f; 
mA[1543] = 0.0f; 
mA[1544] = 0.0f; 
mA[1545] = 0.0f; 
mA[1546] = 0.0f; 
mA[1547] = 0.0f; 
mA[1548] = 0.0f; 
mA[1549] = 0.0f; 
mA[1550] = 0.0f; 
mA[1551] = 0.0f; 
mA[1552] = 0.0f; 
mA[1553] = 0.0f; 
mA[1554] = 0.0f; 
mA[1555] = 0.0f; 
mA[1556] = 0.0f; 
mA[1557] = 0.0f; 
mA[1558] = 0.0f; 
mA[1559] = 0.0f; 
mA[1560] = 0.0f; 
mA[1561] = 0.0f; 
mA[1562] = 0.0f; 
mA[1563] = 0.0f; 
mA[1564] = 0.0f; 
mA[1565] = 0.0f; 
mA[1566] = 0.0f; 
mA[1567] = 0.0f; 
mA[1568] = 0.0f; 
mA[1569] = 0.0f; 
mA[1570] = 0.0f; 
mA[1571] = 0.0f; 
mA[1572] = 0.0f; 
mA[1573] = 0.0f; 
mA[1574] = 0.0f; 
mA[1575] = 0.0f; 
mA[1576] = 0.0f; 
mA[1577] = 0.0f; 
mA[1578] = 0.0f; 
mA[1579] = 0.0f; 
mA[1580] = 0.0f; 
mA[1581] = 0.0f; 
mA[1582] = 0.0f; 
mA[1583] = 0.0f; 
mA[1584] = 0.0f; 
mA[1585] = 0.0f; 
mA[1586] = 0.0f; 
mA[1587] = 0.0f; 
mA[1588] = 0.0f; 
mA[1589] = 0.0f; 
mA[1590] = 0.0f; 
mA[1591] = 0.0f; 
mA[1592] = 0.0f; 
mA[1593] = 0.0f; 
mA[1594] = 0.0f; 
mA[1595] = 0.0f; 
mA[1596] = 0.0f; 
mA[1597] = 0.0f; 
mA[1598] = 0.0f; 
mA[1599] = 0.0f; 
mA[1600] = 0.0f; 
mA[1601] = 0.0f; 
mA[1602] = 0.0f; 
mA[1603] = 0.0f; 
mA[1604] = 0.0f; 
mA[1605] = 0.0f; 
mA[1606] = 0.0f; 
mA[1607] = 0.0f; 
mA[1608] = 0.0f; 
mA[1609] = 0.0f; 
mA[1610] = 0.0f; 
mA[1611] = 0.0f; 
mA[1612] = 0.0f; 
mA[1613] = 0.0f; 
mA[1614] = 0.0f; 
mA[1615] = 0.0f; 
mA[1616] = 0.0f; 
mA[1617] = 0.0f; 
mA[1618] = 0.0f; 
mA[1619] = 0.0f; 
mA[1620] = 0.0f; 
mA[1621] = 0.0f; 
mA[1622] =  v_v50_aa_fw ; 
mA[1623] = 0.0f; 
mA[1624] = 0.0f; 
mA[1625] = 0.0f; 
mA[1626] = 0.0f; 
mA[1627] = 0.0f; 
mA[1628] = 0.0f; 
mA[1629] = 0.0f; 
mA[1630] = 0.0f; 
mA[1631] = 0.0f; 
mA[1632] = 0.0f; 
mA[1633] = 0.0f; 
mA[1634] = 0.0f; 
mA[1635] = 0.0f; 
mA[1636] = 0.0f; 
mA[1637] = 0.0f; 
mA[1638] = 0.0f; 
mA[1639] = 0.0f; 
mA[1640] = 0.0f; 
mA[1641] = 0.0f; 
mA[1642] = 0.0f; 
mA[1643] = 0.0f; 
mA[1644] = 0.0f; 
mA[1645] = 0.0f; 
mA[1646] = 0.0f; 
mA[1647] = 0.0f; 
mA[1648] = 0.0f; 
mA[1649] = 0.0f; 
mA[1650] = ( (  -1.0f  * v_v40_aa_fw   )   ) ; 
mA[1651] = 0.0f; 
mA[1652] = 0.0f; 
mA[1653] = 0.0f; 
mA[1654] = 0.0f; 
mA[1655] = 0.0f; 
mA[1656] = 0.0f; 
mA[1657] = 0.0f; 
mA[1658] = 0.0f; 
mA[1659] = 0.0f; 
mA[1660] = 0.0f; 
mA[1661] = 0.0f; 
mA[1662] = 0.0f; 
mA[1663] = 0.0f; 
mA[1664] = 0.0f; 
mA[1665] = 0.0f; 
mA[1666] = 0.0f; 
mA[1667] = 0.0f; 
mA[1668] = 0.0f; 
mA[1669] = 0.0f; 
mA[1670] = 0.0f; 
mA[1671] = 0.0f; 
mA[1672] = 0.0f; 
mA[1673] = 0.0f; 
mA[1674] = 0.0f; 
mA[1675] = 0.0f; 
mA[1676] = 0.0f; 
mA[1677] = 0.0f; 
mA[1678] = 0.0f; 
mA[1679] = 0.0f; 
mA[1680] = 0.0f; 
mA[1681] = 0.0f; 
mA[1682] = 0.0f; 
mA[1683] = (  v_v39_aa_fw  + v_v58_aa_fw   ) ; 
mA[1684] = 0.0f; 
mA[1685] = 0.0f; 
mA[1686] = 0.0f; 
mA[1687] = 0.0f; 
mA[1688] = 0.0f; 
mA[1689] = 0.0f; 
mA[1690] = 0.0f; 
mA[1691] = 0.0f; 
mA[1692] = 0.0f; 
mA[1693] = 0.0f; 
mA[1694] = 0.0f; 
mA[1695] = 0.0f; 
mA[1696] = 0.0f; 
mA[1697] = 0.0f; 
mA[1698] = 0.0f; 
mA[1699] = 0.0f; 
mA[1700] = 0.0f; 
mA[1701] = 0.0f; 
mA[1702] = 0.0f; 
mA[1703] = 0.0f; 
mA[1704] = 0.0f; 
mA[1705] = 0.0f; 
mA[1706] = 0.0f; 
mA[1707] = 0.0f; 
mA[1708] = 0.0f; 
mA[1709] = 0.0f; 
mA[1710] = 0.0f; 
mA[1711] = 0.0f; 
mA[1712] = 0.0f; 
mA[1713] = 0.0f; 
mA[1714] = 0.0f; 
mA[1715] = 0.0f; 
mA[1716] = 0.0f; 
mA[1717] = 0.0f; 
mA[1718] = 0.0f; 
mA[1719] = 0.0f; 
mA[1720] = 0.0f; 
mA[1721] = 0.0f; 
mA[1722] = 0.0f; 
mA[1723] = 0.0f; 
mA[1724] = 0.0f; 
mA[1725] = 0.0f; 
mA[1726] = 0.0f; 
mA[1727] = 0.0f; 
mA[1728] = 0.0f; 
mA[1729] = 0.0f; 
mA[1730] = 0.0f; 
mA[1731] = 0.0f; 
mA[1732] = 0.0f; 
mA[1733] = 0.0f; 
mA[1734] = 0.0f; 
mA[1735] = 0.0f; 
mA[1736] = 0.0f; 
mA[1737] = 0.0f; 
mA[1738] = 0.0f; 
mA[1739] = 0.0f; 
mA[1740] = 0.0f; 
mA[1741] = 0.0f; 
mA[1742] = 0.0f; 
mA[1743] = 0.0f; 
mA[1744] = 0.0f; 
mA[1745] = 0.0f; 
mA[1746] = 0.0f; 
mA[1747] = 0.0f; 
mA[1748] = 0.0f; 
mA[1749] = 0.0f; 
mA[1750] = 0.0f; 
mA[1751] = 0.0f; 
mA[1752] = 0.0f; 
mA[1753] = 0.0f; 
mA[1754] = 0.0f; 
mA[1755] = 0.0f; 
mA[1756] = 0.0f; 
mA[1757] = 0.0f; 
mA[1758] = 0.0f; 
mA[1759] = 0.0f; 
mA[1760] = 0.0f; 
mA[1761] = 0.0f; 
mA[1762] = 0.0f; 
mA[1763] = 0.0f; 
mA[1764] = 0.0f; 
mA[1765] = 0.0f; 
mA[1766] = 0.0f; 
mA[1767] = 0.0f; 
mA[1768] = 0.0f; 
mA[1769] = 0.0f; 
mA[1770] = 0.0f; 
mA[1771] = 0.0f; 
mA[1772] =  v_v50_aa_fw ; 
mA[1773] = 0.0f; 
mA[1774] = 0.0f; 
mA[1775] = 0.0f; 
mA[1776] = 0.0f; 
mA[1777] = 0.0f; 
mA[1778] = 0.0f; 
mA[1779] = 0.0f; 
mA[1780] = 0.0f; 
mA[1781] = 0.0f; 
mA[1782] = 0.0f; 
mA[1783] = 0.0f; 
mA[1784] = 0.0f; 
mA[1785] = 0.0f; 
mA[1786] = 0.0f; 
mA[1787] = 0.0f; 
mA[1788] = 0.0f; 
mA[1789] = 0.0f; 
mA[1790] = 0.0f; 
mA[1791] = 0.0f; 
mA[1792] = 0.0f; 
mA[1793] = 0.0f; 
mA[1794] = 0.0f; 
mA[1795] = 0.0f; 
mA[1796] = 0.0f; 
mA[1797] = 0.0f; 
mA[1798] = 0.0f; 
mA[1799] = 0.0f; 
mA[1800] = ( (  -1.0f  * v_v40_aa_fw   )   ) ; 
mA[1801] = 0.0f; 
mA[1802] = 0.0f; 
mA[1803] = 0.0f; 
mA[1804] = 0.0f; 
mA[1805] = 0.0f; 
mA[1806] = 0.0f; 
mA[1807] = 0.0f; 
mA[1808] = 0.0f; 
mA[1809] = 0.0f; 
mA[1810] = 0.0f; 
mA[1811] = 0.0f; 
mA[1812] = 0.0f; 
mA[1813] = 0.0f; 
mA[1814] = 0.0f; 
mA[1815] = 0.0f; 
mA[1816] = 0.0f; 
mA[1817] = 0.0f; 
mA[1818] = 0.0f; 
mA[1819] = 0.0f; 
mA[1820] = 0.0f; 
mA[1821] = 0.0f; 
mA[1822] = 0.0f; 
mA[1823] = 0.0f; 
mA[1824] = 0.0f; 
mA[1825] = 0.0f; 
mA[1826] = 0.0f; 
mA[1827] = 0.0f; 
mA[1828] = 0.0f; 
mA[1829] = 0.0f; 
mA[1830] = 0.0f; 
mA[1831] = 0.0f; 
mA[1832] = 0.0f; 
mA[1833] = (  v_v58_aa_fw  + v_v39_aa_fw   ) ; 
mA[1834] = 0.0f; 
mA[1835] = 0.0f; 
mA[1836] = 0.0f; 
mA[1837] = 0.0f; 
mA[1838] = 0.0f; 
mA[1839] = 0.0f; 
mA[1840] = 0.0f; 
mA[1841] = 0.0f; 
mA[1842] = 0.0f; 
mA[1843] = 0.0f; 
mA[1844] = 0.0f; 
mA[1845] = 0.0f; 
mA[1846] = 0.0f; 
mA[1847] = 0.0f; 
mA[1848] = 0.0f; 
mA[1849] = 0.0f; 
mA[1850] = 0.0f; 
mA[1851] = 0.0f; 
mA[1852] = 0.0f; 
mA[1853] = 0.0f; 
mA[1854] = 0.0f; 
mA[1855] = 0.0f; 
mA[1856] = 0.0f; 
mA[1857] = 0.0f; 
mA[1858] = 0.0f; 
mA[1859] = 0.0f; 
mA[1860] = 0.0f; 
mA[1861] = 0.0f; 
mA[1862] = 0.0f; 
mA[1863] = 0.0f; 
mA[1864] = 0.0f; 
mA[1865] = 0.0f; 
mA[1866] = 0.0f; 
mA[1867] = 0.0f; 
mA[1868] = 0.0f; 
mA[1869] = 0.0f; 
mA[1870] = 0.0f; 
mA[1871] = 0.0f; 
mA[1872] = 0.0f; 
mA[1873] = 0.0f; 
mA[1874] = 0.0f; 
mA[1875] = 0.0f; 
mA[1876] = 0.0f; 
mA[1877] = 0.0f; 
mA[1878] = 0.0f; 
mA[1879] = 0.0f; 
mA[1880] = 0.0f; 
mA[1881] = 0.0f; 
mA[1882] = 0.0f; 
mA[1883] = 0.0f; 
mA[1884] = 0.0f; 
mA[1885] = 0.0f; 
mA[1886] = 0.0f; 
mA[1887] = 0.0f; 
mA[1888] = 0.0f; 
mA[1889] = 0.0f; 
mA[1890] = 0.0f; 
mA[1891] = 0.0f; 
mA[1892] = 0.0f; 
mA[1893] = 0.0f; 
mA[1894] = 0.0f; 
mA[1895] = 0.0f; 
mA[1896] = 0.0f; 
mA[1897] = 0.0f; 
mA[1898] = 0.0f; 
mA[1899] = 0.0f; 
mA[1900] = 0.0f; 
mA[1901] = 0.0f; 
mA[1902] = 0.0f; 
mA[1903] = 0.0f; 
mA[1904] = 0.0f; 
mA[1905] = 0.0f; 
mA[1906] = 0.0f; 
mA[1907] = 0.0f; 
mA[1908] = 0.0f; 
mA[1909] = 0.0f; 
mA[1910] = 0.0f; 
mA[1911] = 0.0f; 
mA[1912] = 0.0f; 
mA[1913] = 0.0f; 
mA[1914] = 0.0f; 
mA[1915] = 0.0f; 
mA[1916] = 0.0f; 
mA[1917] = 0.0f; 
mA[1918] = 0.0f; 
mA[1919] = 0.0f; 
mA[1920] = 0.0f; 
mA[1921] = 0.0f; 
mA[1922] =  v_v50_aa_fw ; 
mA[1923] = 0.0f; 
mA[1924] = 0.0f; 
mA[1925] = 0.0f; 
mA[1926] = 0.0f; 
mA[1927] = 0.0f; 
mA[1928] = 0.0f; 
mA[1929] = 0.0f; 
mA[1930] = 0.0f; 
mA[1931] = 0.0f; 
mA[1932] = 0.0f; 
mA[1933] = 0.0f; 
mA[1934] = 0.0f; 
mA[1935] = 0.0f; 
mA[1936] = 0.0f; 
mA[1937] = 0.0f; 
mA[1938] = 0.0f; 
mA[1939] = 0.0f; 
mA[1940] = 0.0f; 
mA[1941] = 0.0f; 
mA[1942] = 0.0f; 
mA[1943] = 0.0f; 
mA[1944] = 0.0f; 
mA[1945] = 0.0f; 
mA[1946] = 0.0f; 
mA[1947] = 0.0f; 
mA[1948] = 0.0f; 
mA[1949] = 0.0f; 
mA[1950] = ( (  -1.0f  * v_v57_aa_fw   )  +(  -1.0f  * v_v10_ppp_fw   )  +(  -1.0f  * v_v20_tca_fw   )  +(  -1.0f  * v_v23_tca_fw   )  +(  -1.0f  * v_v31_amphi_fw   )  +(  -1.0f  * v_v34_amphi_fw   )  +(  -1.0f  * v_v53_aa_fw   )  +(  -1.0f  * v_v56_aa_fw   )  +(  -1.0f  * v_v55_aa_fw   )  +(  -1.0f  * v_v54_aa_fw   )  +(  -1.0f  * v_v45_aa_fw   )  +(  -1.0f  * v_v71_CO2Exch_b   )  +(  -1.0f  * v_v53_aa_fw   )  +(  -1.0f  * v_v52_aa_fw   )  +(  -1.0f  * v_v32_amphi_fw   )  +(  -1.0f  * v_v24_tca_fw   )  +(  -1.0f  * v_v49_aa_fw_a   )  +(  -1.0f  * v_v49_aa_fw_b   )   ) ; 
mA[1951] = 0.0f; 
mA[1952] = 0.0f; 
mA[1953] = 0.0f; 
mA[1954] = 0.0f; 
mA[1955] = 0.0f; 
mA[1956] = 0.0f; 
mA[1957] = 0.0f; 
mA[1958] = 0.0f; 
mA[1959] = 0.0f; 
mA[1960] = 0.0f; 
mA[1961] = 0.0f; 
mA[1962] = 0.0f; 
mA[1963] = 0.0f; 
mA[1964] = 0.0f; 
mA[1965] = 0.0f; 
mA[1966] = 0.0f; 
mA[1967] = 0.0f; 
mA[1968] = 0.0f; 
mA[1969] = 0.0f; 
mA[1970] = 0.0f; 
mA[1971] = 0.0f; 
mA[1972] = 0.0f; 
mA[1973] = 0.0f; 
mA[1974] = 0.0f; 
mA[1975] = 0.0f; 
mA[1976] = 0.0f; 
mA[1977] = 0.0f; 
mA[1978] = 0.0f; 
mA[1979] = 0.0f; 
mA[1980] = 0.0f; 
mA[1981] = 0.0f; 
mA[1982] = 0.0f; 
mA[1983] = 0.0f; 
mA[1984] = 0.0f; 
mA[1985] = 0.0f; 
mA[1986] = 0.0f; 
mA[1987] = 0.0f; 
mA[1988] = 0.0f; 
mA[1989] = 0.0f; 
mA[1990] = 0.0f; 
mA[1991] = 0.0f; 
mA[1992] = 0.0f; 
mA[1993] = 0.0f; 
mA[1994] = 0.0f; 
mA[1995] = 0.0f; 
mA[1996] = 0.0f; 
mA[1997] = 0.0f; 
mA[1998] = 0.0f; 
mA[1999] = 0.0f; 
mA[2000] = 0.0f; 
mA[2001] = 0.0f; 
mA[2002] =  v_v45_aa_bw ; 
mA[2003] = 0.0f; 
mA[2004] = 0.0f; 
mA[2005] = 0.0f; 
mA[2006] = 0.0f; 
mA[2007] = 0.0f; 
mA[2008] = 0.0f; 
mA[2009] = 0.0f; 
mA[2010] = 0.0f; 
mA[2011] =  v_v23_tca_bw ; 
mA[2012] = 0.0f; 
mA[2013] = 0.0f; 
mA[2014] = 0.0f; 
mA[2015] = 0.0f; 
mA[2016] = 0.0f; 
mA[2017] = 0.0f; 
mA[2018] = 0.0f; 
mA[2019] = 0.0f; 
mA[2020] = 0.0f; 
mA[2021] = 0.0f; 
mA[2022] = 0.0f; 
mA[2023] = 0.0f; 
mA[2024] = 0.0f; 
mA[2025] = 0.0f; 
mA[2026] = 0.0f; 
mA[2027] = 0.0f; 
mA[2028] =  v_v33_amphi_fw ; 
mA[2029] = 0.0f; 
mA[2030] = 0.0f; 
mA[2031] = 0.0f; 
mA[2032] = 0.0f; 
mA[2033] = 0.0f; 
mA[2034] = 0.0f; 
mA[2035] = 0.0f; 
mA[2036] = 0.0f; 
mA[2037] = 0.0f; 
mA[2038] = 0.0f; 
mA[2039] = 0.0f; 
mA[2040] = 0.0f; 
mA[2041] = 0.0f; 
mA[2042] = 0.0f; 
mA[2043] = 0.0f; 
mA[2044] = 0.0f; 
mA[2045] = 0.0f; 
mA[2046] = 0.0f; 
mA[2047] = 0.0f; 
mA[2048] = 0.0f; 
mA[2049] = 0.0f; 
mA[2050] = 0.0f; 
mA[2051] = 0.0f; 
mA[2052] = 0.0f; 
mA[2053] = 0.0f; 
mA[2054] = 0.0f; 
mA[2055] = 0.0f; 
mA[2056] = 0.0f; 
mA[2057] = 0.0f; 
mA[2058] = 0.0f; 
mA[2059] = 0.0f; 
mA[2060] = 0.0f; 
mA[2061] = 0.0f; 
mA[2062] = 0.0f; 
mA[2063] = 0.0f; 
mA[2064] = 0.0f; 
mA[2065] = 0.0f; 
mA[2066] = 0.0f; 
mA[2067] = 0.0f; 
mA[2068] = 0.0f; 
mA[2069] = 0.0f; 
mA[2070] = 0.0f; 
mA[2071] = 0.0f; 
mA[2072] = 0.0f; 
mA[2073] = 0.0f; 
mA[2074] = 0.0f; 
mA[2075] = 0.0f; 
mA[2076] = 0.0f; 
mA[2077] = 0.0f; 
mA[2078] = 0.0f; 
mA[2079] = 0.0f; 
mA[2080] = 0.0f; 
mA[2081] = 0.0f; 
mA[2082] = 0.0f; 
mA[2083] = 0.0f; 
mA[2084] = 0.0f; 
mA[2085] = 0.0f; 
mA[2086] = 0.0f; 
mA[2087] = 0.0f; 
mA[2088] = 0.0f; 
mA[2089] = 0.0f; 
mA[2090] = 0.0f; 
mA[2091] = 0.0f; 
mA[2092] = 0.0f; 
mA[2093] = 0.0f; 
mA[2094] = 0.0f; 
mA[2095] = 0.0f; 
mA[2096] = 0.0f; 
mA[2097] = 0.0f; 
mA[2098] = 0.0f; 
mA[2099] = 0.0f; 
mA[2100] = ( (  -1.0f  * v_v21_tca_fw   )  +(  -1.0f  * v_v22_tca_bw   )   ) ; 
mA[2101] = 0.0f; 
mA[2102] = 0.0f; 
mA[2103] = 0.0f; 
mA[2104] = 0.0f; 
mA[2105] = 0.0f; 
mA[2106] = 0.0f; 
mA[2107] = 0.0f; 
mA[2108] = 0.0f; 
mA[2109] = 0.0f; 
mA[2110] = 0.0f; 
mA[2111] = 0.0f; 
mA[2112] = 0.0f; 
mA[2113] = 0.0f; 
mA[2114] = 0.0f; 
mA[2115] = 0.0f; 
mA[2116] = 0.0f; 
mA[2117] = 0.0f; 
mA[2118] = 0.0f; 
mA[2119] = 0.0f; 
mA[2120] = 0.0f; 
mA[2121] = 0.0f; 
mA[2122] = 0.0f; 
mA[2123] = 0.0f; 
mA[2124] = 0.0f; 
mA[2125] = 0.0f; 
mA[2126] = 0.0f; 
mA[2127] = 0.0f; 
mA[2128] = 0.0f; 
mA[2129] = 0.0f; 
mA[2130] = 0.0f; 
mA[2131] = 0.0f; 
mA[2132] = 0.0f; 
mA[2133] = 0.0f; 
mA[2134] = 0.0f; 
mA[2135] = 0.0f; 
mA[2136] = 0.0f; 
mA[2137] = 0.0f; 
mA[2138] = 0.0f; 
mA[2139] = 0.0f; 
mA[2140] = 0.0f; 
mA[2141] = 0.0f; 
mA[2142] = 0.0f; 
mA[2143] = 0.0f; 
mA[2144] = 0.0f; 
mA[2145] = 0.0f; 
mA[2146] = 0.0f; 
mA[2147] = 0.0f; 
mA[2148] = 0.0f; 
mA[2149] = 0.0f; 
mA[2150] = 0.0f; 
mA[2151] = 0.0f; 
mA[2152] = 0.0f; 
mA[2153] = 0.0f; 
mA[2154] = 0.0f; 
mA[2155] =  v_v22_tca_fw ; 
mA[2156] = 0.0f; 
mA[2157] = 0.0f; 
mA[2158] = 0.0f; 
mA[2159] = 0.0f; 
mA[2160] = 0.0f; 
mA[2161] = 0.0f; 
mA[2162] = 0.0f; 
mA[2163] = 0.0f; 
mA[2164] = 0.0f; 
mA[2165] = 0.0f; 
mA[2166] = 0.0f; 
mA[2167] = 0.0f; 
mA[2168] = 0.0f; 
mA[2169] = 0.0f; 
mA[2170] = 0.0f; 
mA[2171] = 0.0f; 
mA[2172] = 0.0f; 
mA[2173] = 0.0f; 
mA[2174] = 0.0f; 
mA[2175] = 0.0f; 
mA[2176] = 0.0f; 
mA[2177] = 0.0f; 
mA[2178] = 0.0f; 
mA[2179] = 0.0f; 
mA[2180] = 0.0f; 
mA[2181] = 0.0f; 
mA[2182] = 0.0f; 
mA[2183] = 0.0f; 
mA[2184] = 0.0f; 
mA[2185] = 0.0f; 
mA[2186] = 0.0f; 
mA[2187] = 0.0f; 
mA[2188] = 0.0f; 
mA[2189] = 0.0f; 
mA[2190] = 0.0f; 
mA[2191] = 0.0f; 
mA[2192] = 0.0f; 
mA[2193] = 0.0f; 
mA[2194] = 0.0f; 
mA[2195] = 0.0f; 
mA[2196] = 0.0f; 
mA[2197] = 0.0f; 
mA[2198] = 0.0f; 
mA[2199] = 0.0f; 
mA[2200] = 0.0f; 
mA[2201] = 0.0f; 
mA[2202] = 0.0f; 
mA[2203] = 0.0f; 
mA[2204] = 0.0f; 
mA[2205] = 0.0f; 
mA[2206] = 0.0f; 
mA[2207] = 0.0f; 
mA[2208] = 0.0f; 
mA[2209] = 0.0f; 
mA[2210] = 0.0f; 
mA[2211] = 0.0f; 
mA[2212] = 0.0f; 
mA[2213] = 0.0f; 
mA[2214] = 0.0f; 
mA[2215] = 0.0f; 
mA[2216] = 0.0f; 
mA[2217] = 0.0f; 
mA[2218] = 0.0f; 
mA[2219] = 0.0f; 
mA[2220] = 0.0f; 
mA[2221] = 0.0f; 
mA[2222] = 0.0f; 
mA[2223] = 0.0f; 
mA[2224] = 0.0f; 
mA[2225] = 0.0f; 
mA[2226] = 0.0f; 
mA[2227] = 0.0f; 
mA[2228] = 0.0f; 
mA[2229] = 0.0f; 
mA[2230] = 0.0f; 
mA[2231] = 0.0f; 
mA[2232] = 0.0f; 
mA[2233] = 0.0f; 
mA[2234] = 0.0f; 
mA[2235] = 0.0f; 
mA[2236] = 0.0f; 
mA[2237] = 0.0f; 
mA[2238] = 0.0f; 
mA[2239] = 0.0f; 
mA[2240] = 0.0f; 
mA[2241] = 0.0f; 
mA[2242] = 0.0f; 
mA[2243] = 0.0f; 
mA[2244] = 0.0f; 
mA[2245] = 0.0f; 
mA[2246] = 0.0f; 
mA[2247] = 0.0f; 
mA[2248] = 0.0f; 
mA[2249] = 0.0f; 
mA[2250] = ( (  -1.0f  * v_v21_tca_fw   )  +(  -1.0f  * v_v22_tca_bw   )   ) ; 
mA[2251] = 0.0f; 
mA[2252] = 0.0f; 
mA[2253] = 0.0f; 
mA[2254] = 0.0f; 
mA[2255] = 0.0f; 
mA[2256] = 0.0f; 
mA[2257] = 0.0f; 
mA[2258] = 0.0f; 
mA[2259] = 0.0f; 
mA[2260] = 0.0f; 
mA[2261] = 0.0f; 
mA[2262] = 0.0f; 
mA[2263] = 0.0f; 
mA[2264] = 0.0f; 
mA[2265] = 0.0f; 
mA[2266] = 0.0f; 
mA[2267] = 0.0f; 
mA[2268] = 0.0f; 
mA[2269] = 0.0f; 
mA[2270] = 0.0f; 
mA[2271] = 0.0f; 
mA[2272] = 0.0f; 
mA[2273] = 0.0f; 
mA[2274] = 0.0f; 
mA[2275] = 0.0f; 
mA[2276] = 0.0f; 
mA[2277] = 0.0f; 
mA[2278] = 0.0f; 
mA[2279] = 0.0f; 
mA[2280] = 0.0f; 
mA[2281] = 0.0f; 
mA[2282] = 0.0f; 
mA[2283] = 0.0f; 
mA[2284] = 0.0f; 
mA[2285] = 0.0f; 
mA[2286] = 0.0f; 
mA[2287] = 0.0f; 
mA[2288] = 0.0f; 
mA[2289] = 0.0f; 
mA[2290] = 0.0f; 
mA[2291] = 0.0f; 
mA[2292] = 0.0f; 
mA[2293] = 0.0f; 
mA[2294] = 0.0f; 
mA[2295] = 0.0f; 
mA[2296] = 0.0f; 
mA[2297] = 0.0f; 
mA[2298] = 0.0f; 
mA[2299] = 0.0f; 
mA[2300] = 0.0f; 
mA[2301] = 0.0f; 
mA[2302] = 0.0f; 
mA[2303] = 0.0f; 
mA[2304] = 0.0f; 
mA[2305] =  v_v22_tca_fw ; 
mA[2306] = 0.0f; 
mA[2307] = 0.0f; 
mA[2308] = 0.0f; 
mA[2309] = 0.0f; 
mA[2310] = 0.0f; 
mA[2311] = 0.0f; 
mA[2312] = 0.0f; 
mA[2313] = 0.0f; 
mA[2314] = 0.0f; 
mA[2315] = 0.0f; 
mA[2316] = 0.0f; 
mA[2317] = 0.0f; 
mA[2318] = 0.0f; 
mA[2319] = 0.0f; 
mA[2320] = 0.0f; 
mA[2321] = 0.0f; 
mA[2322] = 0.0f; 
mA[2323] = 0.0f; 
mA[2324] = 0.0f; 
mA[2325] = 0.0f; 
mA[2326] = 0.0f; 
mA[2327] = 0.0f; 
mA[2328] = 0.0f; 
mA[2329] = 0.0f; 
mA[2330] = 0.0f; 
mA[2331] = 0.0f; 
mA[2332] = 0.0f; 
mA[2333] = 0.0f; 
mA[2334] = 0.0f; 
mA[2335] = 0.0f; 
mA[2336] = 0.0f; 
mA[2337] = 0.0f; 
mA[2338] = 0.0f; 
mA[2339] = 0.0f; 
mA[2340] = 0.0f; 
mA[2341] = 0.0f; 
mA[2342] = 0.0f; 
mA[2343] = 0.0f; 
mA[2344] = 0.0f; 
mA[2345] = 0.0f; 
mA[2346] = 0.0f; 
mA[2347] = 0.0f; 
mA[2348] = 0.0f; 
mA[2349] = 0.0f; 
mA[2350] = 0.0f; 
mA[2351] = 0.0f; 
mA[2352] = 0.0f; 
mA[2353] = 0.0f; 
mA[2354] = 0.0f; 
mA[2355] = 0.0f; 
mA[2356] = 0.0f; 
mA[2357] = 0.0f; 
mA[2358] = 0.0f; 
mA[2359] = 0.0f; 
mA[2360] = 0.0f; 
mA[2361] = 0.0f; 
mA[2362] = 0.0f; 
mA[2363] = 0.0f; 
mA[2364] = 0.0f; 
mA[2365] = 0.0f; 
mA[2366] = 0.0f; 
mA[2367] = 0.0f; 
mA[2368] = 0.0f; 
mA[2369] = 0.0f; 
mA[2370] = 0.0f; 
mA[2371] = 0.0f; 
mA[2372] = 0.0f; 
mA[2373] = 0.0f; 
mA[2374] = 0.0f; 
mA[2375] = 0.0f; 
mA[2376] = 0.0f; 
mA[2377] = 0.0f; 
mA[2378] = 0.0f; 
mA[2379] = 0.0f; 
mA[2380] = 0.0f; 
mA[2381] = 0.0f; 
mA[2382] = 0.0f; 
mA[2383] = 0.0f; 
mA[2384] = 0.0f; 
mA[2385] = 0.0f; 
mA[2386] = 0.0f; 
mA[2387] = 0.0f; 
mA[2388] = 0.0f; 
mA[2389] = 0.0f; 
mA[2390] = 0.0f; 
mA[2391] = 0.0f; 
mA[2392] = 0.0f; 
mA[2393] = 0.0f; 
mA[2394] = 0.0f; 
mA[2395] = 0.0f; 
mA[2396] = 0.0f; 
mA[2397] = 0.0f; 
mA[2398] = 0.0f; 
mA[2399] = 0.0f; 
mA[2400] = ( (  -1.0f  * v_v21_tca_fw   )  +(  -1.0f  * v_v22_tca_bw   )   ) ; 
mA[2401] = 0.0f; 
mA[2402] = 0.0f; 
mA[2403] = 0.0f; 
mA[2404] = 0.0f; 
mA[2405] = 0.0f; 
mA[2406] = 0.0f; 
mA[2407] = 0.0f; 
mA[2408] = 0.0f; 
mA[2409] = 0.0f; 
mA[2410] = 0.0f; 
mA[2411] = 0.0f; 
mA[2412] = 0.0f; 
mA[2413] = 0.0f; 
mA[2414] = 0.0f; 
mA[2415] = 0.0f; 
mA[2416] = 0.0f; 
mA[2417] = 0.0f; 
mA[2418] = 0.0f; 
mA[2419] = 0.0f; 
mA[2420] = 0.0f; 
mA[2421] = 0.0f; 
mA[2422] = 0.0f; 
mA[2423] = 0.0f; 
mA[2424] = 0.0f; 
mA[2425] = 0.0f; 
mA[2426] = 0.0f; 
mA[2427] = 0.0f; 
mA[2428] = 0.0f; 
mA[2429] = 0.0f; 
mA[2430] = 0.0f; 
mA[2431] = 0.0f; 
mA[2432] = 0.0f; 
mA[2433] = 0.0f; 
mA[2434] = 0.0f; 
mA[2435] = 0.0f; 
mA[2436] = 0.0f; 
mA[2437] = 0.0f; 
mA[2438] = 0.0f; 
mA[2439] = 0.0f; 
mA[2440] = 0.0f; 
mA[2441] = 0.0f; 
mA[2442] = 0.0f; 
mA[2443] = 0.0f; 
mA[2444] = 0.0f; 
mA[2445] = 0.0f; 
mA[2446] = 0.0f; 
mA[2447] = 0.0f; 
mA[2448] = 0.0f; 
mA[2449] = 0.0f; 
mA[2450] = 0.0f; 
mA[2451] = 0.0f; 
mA[2452] = 0.0f; 
mA[2453] = 0.0f; 
mA[2454] = 0.0f; 
mA[2455] =  v_v22_tca_fw ; 
mA[2456] = 0.0f; 
mA[2457] = 0.0f; 
mA[2458] = 0.0f; 
mA[2459] = 0.0f; 
mA[2460] = 0.0f; 
mA[2461] = 0.0f; 
mA[2462] = 0.0f; 
mA[2463] = 0.0f; 
mA[2464] = 0.0f; 
mA[2465] = 0.0f; 
mA[2466] = 0.0f; 
mA[2467] = 0.0f; 
mA[2468] = 0.0f; 
mA[2469] = 0.0f; 
mA[2470] = 0.0f; 
mA[2471] = 0.0f; 
mA[2472] = 0.0f; 
mA[2473] = 0.0f; 
mA[2474] = 0.0f; 
mA[2475] = 0.0f; 
mA[2476] = 0.0f; 
mA[2477] = 0.0f; 
mA[2478] = 0.0f; 
mA[2479] = 0.0f; 
mA[2480] = 0.0f; 
mA[2481] = 0.0f; 
mA[2482] = 0.0f; 
mA[2483] = 0.0f; 
mA[2484] = 0.0f; 
mA[2485] = 0.0f; 
mA[2486] = 0.0f; 
mA[2487] = 0.0f; 
mA[2488] = 0.0f; 
mA[2489] = 0.0f; 
mA[2490] = 0.0f; 
mA[2491] = 0.0f; 
mA[2492] = 0.0f; 
mA[2493] = 0.0f; 
mA[2494] = 0.0f; 
mA[2495] = 0.0f; 
mA[2496] = 0.0f; 
mA[2497] = 0.0f; 
mA[2498] = 0.0f; 
mA[2499] = 0.0f; 
mA[2500] = 0.0f; 
mA[2501] = 0.0f; 
mA[2502] = 0.0f; 
mA[2503] = 0.0f; 
mA[2504] = 0.0f; 
mA[2505] = 0.0f; 
mA[2506] = 0.0f; 
mA[2507] = 0.0f; 
mA[2508] = 0.0f; 
mA[2509] = 0.0f; 
mA[2510] = 0.0f; 
mA[2511] = 0.0f; 
mA[2512] = 0.0f; 
mA[2513] = 0.0f; 
mA[2514] = 0.0f; 
mA[2515] = 0.0f; 
mA[2516] = 0.0f; 
mA[2517] = 0.0f; 
mA[2518] = 0.0f; 
mA[2519] = 0.0f; 
mA[2520] = 0.0f; 
mA[2521] = 0.0f; 
mA[2522] = 0.0f; 
mA[2523] = 0.0f; 
mA[2524] = 0.0f; 
mA[2525] = 0.0f; 
mA[2526] = 0.0f; 
mA[2527] = 0.0f; 
mA[2528] = 0.0f; 
mA[2529] = 0.0f; 
mA[2530] = 0.0f; 
mA[2531] = 0.0f; 
mA[2532] = 0.0f; 
mA[2533] = 0.0f; 
mA[2534] = 0.0f; 
mA[2535] = 0.0f; 
mA[2536] = 0.0f; 
mA[2537] = 0.0f; 
mA[2538] = 0.0f; 
mA[2539] = 0.0f; 
mA[2540] = 0.0f; 
mA[2541] = 0.0f; 
mA[2542] = 0.0f; 
mA[2543] = 0.0f; 
mA[2544] = 0.0f; 
mA[2545] = 0.0f; 
mA[2546] = 0.0f; 
mA[2547] = 0.0f; 
mA[2548] = 0.0f; 
mA[2549] = 0.0f; 
mA[2550] = ( (  -1.0f  * v_v22_tca_bw   )  +(  -1.0f  * v_v21_tca_fw   )   ) ; 
mA[2551] = 0.0f; 
mA[2552] = 0.0f; 
mA[2553] = 0.0f; 
mA[2554] = 0.0f; 
mA[2555] = 0.0f; 
mA[2556] = 0.0f; 
mA[2557] = 0.0f; 
mA[2558] = 0.0f; 
mA[2559] = 0.0f; 
mA[2560] = 0.0f; 
mA[2561] = 0.0f; 
mA[2562] = 0.0f; 
mA[2563] = 0.0f; 
mA[2564] = 0.0f; 
mA[2565] = 0.0f; 
mA[2566] = 0.0f; 
mA[2567] = 0.0f; 
mA[2568] = 0.0f; 
mA[2569] = 0.0f; 
mA[2570] = 0.0f; 
mA[2571] = 0.0f; 
mA[2572] = 0.0f; 
mA[2573] = 0.0f; 
mA[2574] = 0.0f; 
mA[2575] = 0.0f; 
mA[2576] = 0.0f; 
mA[2577] = 0.0f; 
mA[2578] = 0.0f; 
mA[2579] = 0.0f; 
mA[2580] = 0.0f; 
mA[2581] = 0.0f; 
mA[2582] = 0.0f; 
mA[2583] = 0.0f; 
mA[2584] = 0.0f; 
mA[2585] = 0.0f; 
mA[2586] = 0.0f; 
mA[2587] = 0.0f; 
mA[2588] = 0.0f; 
mA[2589] = 0.0f; 
mA[2590] = 0.0f; 
mA[2591] = 0.0f; 
mA[2592] = 0.0f; 
mA[2593] = 0.0f; 
mA[2594] = 0.0f; 
mA[2595] = 0.0f; 
mA[2596] = 0.0f; 
mA[2597] = 0.0f; 
mA[2598] = 0.0f; 
mA[2599] = 0.0f; 
mA[2600] = 0.0f; 
mA[2601] = 0.0f; 
mA[2602] = 0.0f; 
mA[2603] = 0.0f; 
mA[2604] = 0.0f; 
mA[2605] =  v_v22_tca_fw ; 
mA[2606] = 0.0f; 
mA[2607] = 0.0f; 
mA[2608] = 0.0f; 
mA[2609] = 0.0f; 
mA[2610] = 0.0f; 
mA[2611] = 0.0f; 
mA[2612] = 0.0f; 
mA[2613] = 0.0f; 
mA[2614] = 0.0f; 
mA[2615] = 0.0f; 
mA[2616] = 0.0f; 
mA[2617] = 0.0f; 
mA[2618] = 0.0f; 
mA[2619] = 0.0f; 
mA[2620] = 0.0f; 
mA[2621] = 0.0f; 
mA[2622] = 0.0f; 
mA[2623] = 0.0f; 
mA[2624] = 0.0f; 
mA[2625] = 0.0f; 
mA[2626] = 0.0f; 
mA[2627] = 0.0f; 
mA[2628] = 0.0f; 
mA[2629] = 0.0f; 
mA[2630] = 0.0f; 
mA[2631] = 0.0f; 
mA[2632] = 0.0f; 
mA[2633] = 0.0f; 
mA[2634] = 0.0f; 
mA[2635] = 0.0f; 
mA[2636] = 0.0f; 
mA[2637] = 0.0f; 
mA[2638] = 0.0f; 
mA[2639] = 0.0f; 
mA[2640] = 0.0f; 
mA[2641] = 0.0f; 
mA[2642] = 0.0f; 
mA[2643] = 0.0f; 
mA[2644] = 0.0f; 
mA[2645] = 0.0f; 
mA[2646] = 0.0f; 
mA[2647] = 0.0f; 
mA[2648] = 0.0f; 
mA[2649] = 0.0f; 
mA[2650] = 0.0f; 
mA[2651] = 0.0f; 
mA[2652] = 0.0f; 
mA[2653] = 0.0f; 
mA[2654] = 0.0f; 
mA[2655] = 0.0f; 
mA[2656] = 0.0f; 
mA[2657] = 0.0f; 
mA[2658] = 0.0f; 
mA[2659] = 0.0f; 
mA[2660] = 0.0f; 
mA[2661] = 0.0f; 
mA[2662] = 0.0f; 
mA[2663] = 0.0f; 
mA[2664] = 0.0f; 
mA[2665] = 0.0f; 
mA[2666] = 0.0f; 
mA[2667] = 0.0f; 
mA[2668] = 0.0f; 
mA[2669] = 0.0f; 
mA[2670] = 0.0f; 
mA[2671] = 0.0f; 
mA[2672] = 0.0f; 
mA[2673] = 0.0f; 
mA[2674] = 0.0f; 
mA[2675] = 0.0f; 
mA[2676] = 0.0f; 
mA[2677] = 0.0f; 
mA[2678] = 0.0f; 
mA[2679] = 0.0f; 
mA[2680] = 0.0f; 
mA[2681] = 0.0f; 
mA[2682] = 0.0f; 
mA[2683] = 0.0f; 
mA[2684] = 0.0f; 
mA[2685] = 0.0f; 
mA[2686] = 0.0f; 
mA[2687] = 0.0f; 
mA[2688] = 0.0f; 
mA[2689] = 0.0f; 
mA[2690] = 0.0f; 
mA[2691] = 0.0f; 
mA[2692] = 0.0f; 
mA[2693] = 0.0f; 
mA[2694] = 0.0f; 
mA[2695] = 0.0f; 
mA[2696] = 0.0f; 
mA[2697] = 0.0f; 
mA[2698] = 0.0f; 
mA[2699] = 0.0f; 
mA[2700] = ( (  -1.0f  * v_v21_tca_fw   )  +(  -1.0f  * v_v22_tca_bw   )   ) ; 
mA[2701] = 0.0f; 
mA[2702] = 0.0f; 
mA[2703] = 0.0f; 
mA[2704] = 0.0f; 
mA[2705] = 0.0f; 
mA[2706] = 0.0f; 
mA[2707] = 0.0f; 
mA[2708] = 0.0f; 
mA[2709] = 0.0f; 
mA[2710] = 0.0f; 
mA[2711] = 0.0f; 
mA[2712] = 0.0f; 
mA[2713] = 0.0f; 
mA[2714] = 0.0f; 
mA[2715] = 0.0f; 
mA[2716] = 0.0f; 
mA[2717] = 0.0f; 
mA[2718] = 0.0f; 
mA[2719] = 0.0f; 
mA[2720] = 0.0f; 
mA[2721] = 0.0f; 
mA[2722] = 0.0f; 
mA[2723] = 0.0f; 
mA[2724] = 0.0f; 
mA[2725] = 0.0f; 
mA[2726] = 0.0f; 
mA[2727] = 0.0f; 
mA[2728] = 0.0f; 
mA[2729] = 0.0f; 
mA[2730] = 0.0f; 
mA[2731] = 0.0f; 
mA[2732] = 0.0f; 
mA[2733] = 0.0f; 
mA[2734] = 0.0f; 
mA[2735] = 0.0f; 
mA[2736] = 0.0f; 
mA[2737] = 0.0f; 
mA[2738] = 0.0f; 
mA[2739] = 0.0f; 
mA[2740] = 0.0f; 
mA[2741] = 0.0f; 
mA[2742] = 0.0f; 
mA[2743] = 0.0f; 
mA[2744] = 0.0f; 
mA[2745] = 0.0f; 
mA[2746] = 0.0f; 
mA[2747] = 0.0f; 
mA[2748] = 0.0f; 
mA[2749] = 0.0f; 
mA[2750] = 0.0f; 
mA[2751] = 0.0f; 
mA[2752] = 0.0f; 
mA[2753] = 0.0f; 
mA[2754] = 0.0f; 
mA[2755] =  v_v22_tca_fw ; 
mA[2756] = 0.0f; 
mA[2757] = 0.0f; 
mA[2758] = 0.0f; 
mA[2759] = 0.0f; 
mA[2760] = 0.0f; 
mA[2761] = 0.0f; 
mA[2762] = 0.0f; 
mA[2763] = 0.0f; 
mA[2764] = 0.0f; 
mA[2765] = 0.0f; 
mA[2766] = 0.0f; 
mA[2767] = 0.0f; 
mA[2768] = 0.0f; 
mA[2769] = 0.0f; 
mA[2770] = 0.0f; 
mA[2771] = 0.0f; 
mA[2772] = 0.0f; 
mA[2773] = 0.0f; 
mA[2774] = 0.0f; 
mA[2775] = 0.0f; 
mA[2776] = 0.0f; 
mA[2777] = 0.0f; 
mA[2778] = 0.0f; 
mA[2779] = 0.0f; 
mA[2780] = 0.0f; 
mA[2781] = 0.0f; 
mA[2782] = 0.0f; 
mA[2783] = 0.0f; 
mA[2784] = 0.0f; 
mA[2785] = 0.0f; 
mA[2786] = 0.0f; 
mA[2787] = 0.0f; 
mA[2788] = 0.0f; 
mA[2789] = 0.0f; 
mA[2790] = 0.0f; 
mA[2791] = 0.0f; 
mA[2792] = 0.0f; 
mA[2793] = 0.0f; 
mA[2794] = 0.0f; 
mA[2795] = 0.0f; 
mA[2796] = 0.0f; 
mA[2797] = 0.0f; 
mA[2798] = 0.0f; 
mA[2799] = 0.0f; 
mA[2800] = 0.0f; 
mA[2801] = 0.0f; 
mA[2802] = 0.0f; 
mA[2803] = 0.0f; 
mA[2804] = 0.0f; 
mA[2805] = 0.0f; 
mA[2806] = 0.0f; 
mA[2807] = 0.0f; 
mA[2808] = 0.0f; 
mA[2809] = 0.0f; 
mA[2810] = 0.0f; 
mA[2811] = 0.0f; 
mA[2812] = 0.0f; 
mA[2813] = 0.0f; 
mA[2814] = 0.0f; 
mA[2815] = 0.0f; 
mA[2816] = 0.0f; 
mA[2817] = 0.0f; 
mA[2818] = 0.0f; 
mA[2819] = 0.0f; 
mA[2820] = 0.0f; 
mA[2821] = 0.0f; 
mA[2822] = 0.0f; 
mA[2823] = 0.0f; 
mA[2824] = 0.0f; 
mA[2825] = 0.0f; 
mA[2826] = 0.0f; 
mA[2827] = 0.0f; 
mA[2828] = 0.0f; 
mA[2829] = 0.0f; 
mA[2830] = 0.0f; 
mA[2831] = 0.0f; 
mA[2832] = 0.0f; 
mA[2833] = 0.0f; 
mA[2834] = 0.0f; 
mA[2835] = 0.0f; 
mA[2836] = 0.0f; 
mA[2837] = 0.0f; 
mA[2838] = 0.0f; 
mA[2839] = 0.0f; 
mA[2840] = 0.0f; 
mA[2841] = 0.0f; 
mA[2842] = 0.0f; 
mA[2843] = 0.0f; 
mA[2844] = 0.0f; 
mA[2845] = 0.0f; 
mA[2846] = 0.0f; 
mA[2847] = 0.0f; 
mA[2848] = 0.0f; 
mA[2849] = 0.0f; 
mA[2850] = ( (  -1.0f  * v_v22_tca_bw   )  +(  -1.0f  * v_v21_tca_fw   )   ) ; 
mA[2851] = 0.0f; 
mA[2852] = 0.0f; 
mA[2853] = 0.0f; 
mA[2854] = 0.0f; 
mA[2855] = 0.0f; 
mA[2856] = 0.0f; 
mA[2857] = 0.0f; 
mA[2858] = 0.0f; 
mA[2859] = 0.0f; 
mA[2860] = 0.0f; 
mA[2861] = 0.0f; 
mA[2862] = 0.0f; 
mA[2863] = 0.0f; 
mA[2864] = 0.0f; 
mA[2865] = 0.0f; 
mA[2866] = 0.0f; 
mA[2867] = 0.0f; 
mA[2868] = 0.0f; 
mA[2869] = 0.0f; 
mA[2870] = 0.0f; 
mA[2871] = 0.0f; 
mA[2872] = 0.0f; 
mA[2873] = 0.0f; 
mA[2874] = 0.0f; 
mA[2875] = 0.0f; 
mA[2876] = 0.0f; 
mA[2877] = 0.0f; 
mA[2878] = 0.0f; 
mA[2879] = 0.0f; 
mA[2880] = 0.0f; 
mA[2881] = 0.0f; 
mA[2882] = 0.0f; 
mA[2883] = 0.0f; 
mA[2884] = 0.0f; 
mA[2885] = 0.0f; 
mA[2886] = 0.0f; 
mA[2887] = 0.0f; 
mA[2888] = 0.0f; 
mA[2889] = 0.0f; 
mA[2890] = 0.0f; 
mA[2891] = 0.0f; 
mA[2892] = 0.0f; 
mA[2893] = 0.0f; 
mA[2894] = 0.0f; 
mA[2895] = 0.0f; 
mA[2896] = 0.0f; 
mA[2897] = 0.0f; 
mA[2898] = 0.0f; 
mA[2899] = 0.0f; 
mA[2900] = 0.0f; 
mA[2901] = 0.0f; 
mA[2902] = 0.0f; 
mA[2903] = 0.0f; 
mA[2904] = 0.0f; 
mA[2905] =  v_v22_tca_fw ; 
mA[2906] = 0.0f; 
mA[2907] = 0.0f; 
mA[2908] = 0.0f; 
mA[2909] = 0.0f; 
mA[2910] = 0.0f; 
mA[2911] = 0.0f; 
mA[2912] = 0.0f; 
mA[2913] = 0.0f; 
mA[2914] = 0.0f; 
mA[2915] = 0.0f; 
mA[2916] = 0.0f; 
mA[2917] = 0.0f; 
mA[2918] = 0.0f; 
mA[2919] = 0.0f; 
mA[2920] = 0.0f; 
mA[2921] = 0.0f; 
mA[2922] = 0.0f; 
mA[2923] = 0.0f; 
mA[2924] = 0.0f; 
mA[2925] = 0.0f; 
mA[2926] = 0.0f; 
mA[2927] = 0.0f; 
mA[2928] = 0.0f; 
mA[2929] = 0.0f; 
mA[2930] = 0.0f; 
mA[2931] = 0.0f; 
mA[2932] = 0.0f; 
mA[2933] = 0.0f; 
mA[2934] = 0.0f; 
mA[2935] = 0.0f; 
mA[2936] = 0.0f; 
mA[2937] = 0.0f; 
mA[2938] = 0.0f; 
mA[2939] = 0.0f; 
mA[2940] = 0.0f; 
mA[2941] = 0.0f; 
mA[2942] = 0.0f; 
mA[2943] = 0.0f; 
mA[2944] = 0.0f; 
mA[2945] = 0.0f; 
mA[2946] = 0.0f; 
mA[2947] = 0.0f; 
mA[2948] = 0.0f; 
mA[2949] = 0.0f; 
mA[2950] = 0.0f; 
mA[2951] = 0.0f; 
mA[2952] = 0.0f; 
mA[2953] = 0.0f; 
mA[2954] = 0.0f; 
mA[2955] = 0.0f; 
mA[2956] = 0.0f; 
mA[2957] = 0.0f; 
mA[2958] = 0.0f; 
mA[2959] = 0.0f; 
mA[2960] = 0.0f; 
mA[2961] = 0.0f; 
mA[2962] = 0.0f; 
mA[2963] = 0.0f; 
mA[2964] = 0.0f; 
mA[2965] = 0.0f; 
mA[2966] = 0.0f; 
mA[2967] = 0.0f; 
mA[2968] = 0.0f; 
mA[2969] = 0.0f; 
mA[2970] = 0.0f; 
mA[2971] = 0.0f; 
mA[2972] = 0.0f; 
mA[2973] = 0.0f; 
mA[2974] = 0.0f; 
mA[2975] = 0.0f; 
mA[2976] = 0.0f; 
mA[2977] = 0.0f; 
mA[2978] = 0.0f; 
mA[2979] = 0.0f; 
mA[2980] = 0.0f; 
mA[2981] = 0.0f; 
mA[2982] = 0.0f; 
mA[2983] = 0.0f; 
mA[2984] = 0.0f; 
mA[2985] = 0.0f; 
mA[2986] = 0.0f; 
mA[2987] = 0.0f; 
mA[2988] = 0.0f; 
mA[2989] = 0.0f; 
mA[2990] = 0.0f; 
mA[2991] = 0.0f; 
mA[2992] = 0.0f; 
mA[2993] = 0.0f; 
mA[2994] = 0.0f; 
mA[2995] = 0.0f; 
mA[2996] = 0.0f; 
mA[2997] = 0.0f; 
mA[2998] = 0.0f; 
mA[2999] = 0.0f; 
mA[3000] = ( (  -1.0f  * v_v47_aa_fw   )   ) ; 
mA[3001] = 0.0f; 
mA[3002] = 0.0f; 
mA[3003] = 0.0f; 
mA[3004] = 0.0f; 
mA[3005] = 0.0f; 
mA[3006] = 0.0f; 
mA[3007] = 0.0f; 
mA[3008] = 0.0f; 
mA[3009] = 0.0f; 
mA[3010] = 0.0f; 
mA[3011] = 0.0f; 
mA[3012] = 0.0f; 
mA[3013] = 0.0f; 
mA[3014] = 0.0f; 
mA[3015] = 0.0f; 
mA[3016] = 0.0f; 
mA[3017] = 0.0f; 
mA[3018] = 0.0f; 
mA[3019] = 0.0f; 
mA[3020] = 0.0f; 
mA[3021] = 0.0f; 
mA[3022] = 0.0f; 
mA[3023] = 0.0f; 
mA[3024] = 0.0f; 
mA[3025] = 0.0f; 
mA[3026] = 0.0f; 
mA[3027] = 0.0f; 
mA[3028] = 0.0f; 
mA[3029] = 0.0f; 
mA[3030] = 0.0f; 
mA[3031] = 0.0f; 
mA[3032] = 0.0f; 
mA[3033] = 0.0f; 
mA[3034] = 0.0f; 
mA[3035] = 0.0f; 
mA[3036] = 0.0f; 
mA[3037] = 0.0f; 
mA[3038] = 0.0f; 
mA[3039] = 0.0f; 
mA[3040] = 0.0f; 
mA[3041] = 0.0f; 
mA[3042] = 0.0f; 
mA[3043] = 0.0f; 
mA[3044] = 0.0f; 
mA[3045] = 0.0f; 
mA[3046] = 0.0f; 
mA[3047] = 0.0f; 
mA[3048] = 0.0f; 
mA[3049] = 0.0f; 
mA[3050] = 0.0f; 
mA[3051] = 0.0f; 
mA[3052] = 0.0f; 
mA[3053] = 0.0f; 
mA[3054] = 0.0f; 
mA[3055] = 0.0f; 
mA[3056] = 0.0f; 
mA[3057] = 0.0f; 
mA[3058] = 0.0f; 
mA[3059] = 0.0f; 
mA[3060] = 0.0f; 
mA[3061] = 0.0f; 
mA[3062] = 0.0f; 
mA[3063] = 0.0f; 
mA[3064] = 0.0f; 
mA[3065] = 0.0f; 
mA[3066] = 0.0f; 
mA[3067] = 0.0f; 
mA[3068] = 0.0f; 
mA[3069] = 0.0f; 
mA[3070] = 0.0f; 
mA[3071] = 0.0f; 
mA[3072] = 0.0f; 
mA[3073] = 0.0f; 
mA[3074] = 0.0f; 
mA[3075] = (  v_v51_aa_fw_a  + v_v51_aa_fw_b   ) ; 
mA[3076] = 0.0f; 
mA[3077] = 0.0f; 
mA[3078] = 0.0f; 
mA[3079] = 0.0f; 
mA[3080] = 0.0f; 
mA[3081] = 0.0f; 
mA[3082] = 0.0f; 
mA[3083] = 0.0f; 
mA[3084] = 0.0f; 
mA[3085] = 0.0f; 
mA[3086] = 0.0f; 
mA[3087] = 0.0f; 
mA[3088] = 0.0f; 
mA[3089] = 0.0f; 
mA[3090] = 0.0f; 
mA[3091] = 0.0f; 
mA[3092] = 0.0f; 
mA[3093] = 0.0f; 
mA[3094] = 0.0f; 
mA[3095] = 0.0f; 
mA[3096] = 0.0f; 
mA[3097] = 0.0f; 
mA[3098] = 0.0f; 
mA[3099] = 0.0f; 
mA[3100] = 0.0f; 
mA[3101] = 0.0f; 
mA[3102] = 0.0f; 
mA[3103] = 0.0f; 
mA[3104] = 0.0f; 
mA[3105] = 0.0f; 
mA[3106] = 0.0f; 
mA[3107] = 0.0f; 
mA[3108] = 0.0f; 
mA[3109] = 0.0f; 
mA[3110] = 0.0f; 
mA[3111] = 0.0f; 
mA[3112] = 0.0f; 
mA[3113] = 0.0f; 
mA[3114] = 0.0f; 
mA[3115] = 0.0f; 
mA[3116] = 0.0f; 
mA[3117] = 0.0f; 
mA[3118] = 0.0f; 
mA[3119] = 0.0f; 
mA[3120] = 0.0f; 
mA[3121] = 0.0f; 
mA[3122] = 0.0f; 
mA[3123] = 0.0f; 
mA[3124] = 0.0f; 
mA[3125] = 0.0f; 
mA[3126] = 0.0f; 
mA[3127] = 0.0f; 
mA[3128] = 0.0f; 
mA[3129] = 0.0f; 
mA[3130] = 0.0f; 
mA[3131] = 0.0f; 
mA[3132] = 0.0f; 
mA[3133] = 0.0f; 
mA[3134] = 0.0f; 
mA[3135] = 0.0f; 
mA[3136] = 0.0f; 
mA[3137] = 0.0f; 
mA[3138] = 0.0f; 
mA[3139] = 0.0f; 
mA[3140] = 0.0f; 
mA[3141] = 0.0f; 
mA[3142] = 0.0f; 
mA[3143] = 0.0f; 
mA[3144] = 0.0f; 
mA[3145] = 0.0f; 
mA[3146] = 0.0f; 
mA[3147] = 0.0f; 
mA[3148] = 0.0f; 
mA[3149] = 0.0f; 
mA[3150] = ( (  -1.0f  * v_v47_aa_fw   )   ) ; 
mA[3151] = 0.0f; 
mA[3152] = 0.0f; 
mA[3153] = 0.0f; 
mA[3154] = 0.0f; 
mA[3155] = 0.0f; 
mA[3156] = 0.0f; 
mA[3157] = 0.0f; 
mA[3158] = 0.0f; 
mA[3159] = 0.0f; 
mA[3160] = 0.0f; 
mA[3161] = 0.0f; 
mA[3162] = 0.0f; 
mA[3163] = 0.0f; 
mA[3164] = 0.0f; 
mA[3165] = 0.0f; 
mA[3166] = 0.0f; 
mA[3167] = 0.0f; 
mA[3168] = 0.0f; 
mA[3169] = 0.0f; 
mA[3170] = 0.0f; 
mA[3171] = 0.0f; 
mA[3172] = 0.0f; 
mA[3173] = 0.0f; 
mA[3174] = 0.0f; 
mA[3175] = 0.0f; 
mA[3176] = 0.0f; 
mA[3177] = 0.0f; 
mA[3178] = 0.0f; 
mA[3179] = 0.0f; 
mA[3180] = 0.0f; 
mA[3181] = 0.0f; 
mA[3182] = 0.0f; 
mA[3183] = 0.0f; 
mA[3184] = 0.0f; 
mA[3185] = 0.0f; 
mA[3186] = 0.0f; 
mA[3187] = 0.0f; 
mA[3188] = 0.0f; 
mA[3189] = 0.0f; 
mA[3190] = 0.0f; 
mA[3191] = 0.0f; 
mA[3192] = 0.0f; 
mA[3193] = 0.0f; 
mA[3194] = 0.0f; 
mA[3195] = 0.0f; 
mA[3196] = 0.0f; 
mA[3197] = 0.0f; 
mA[3198] = 0.0f; 
mA[3199] = 0.0f; 
mA[3200] = 0.0f; 
mA[3201] = 0.0f; 
mA[3202] = 0.0f; 
mA[3203] = 0.0f; 
mA[3204] = 0.0f; 
mA[3205] = 0.0f; 
mA[3206] = 0.0f; 
mA[3207] = 0.0f; 
mA[3208] = 0.0f; 
mA[3209] = 0.0f; 
mA[3210] = 0.0f; 
mA[3211] = 0.0f; 
mA[3212] = 0.0f; 
mA[3213] = 0.0f; 
mA[3214] = 0.0f; 
mA[3215] = 0.0f; 
mA[3216] = 0.0f; 
mA[3217] = 0.0f; 
mA[3218] = 0.0f; 
mA[3219] = 0.0f; 
mA[3220] = 0.0f; 
mA[3221] = 0.0f; 
mA[3222] = 0.0f; 
mA[3223] = 0.0f; 
mA[3224] = 0.0f; 
mA[3225] = (  v_v51_aa_fw_b  + v_v51_aa_fw_a   ) ; 
mA[3226] = 0.0f; 
mA[3227] = 0.0f; 
mA[3228] = 0.0f; 
mA[3229] = 0.0f; 
mA[3230] = 0.0f; 
mA[3231] = 0.0f; 
mA[3232] = 0.0f; 
mA[3233] = 0.0f; 
mA[3234] = 0.0f; 
mA[3235] = 0.0f; 
mA[3236] = 0.0f; 
mA[3237] = 0.0f; 
mA[3238] = 0.0f; 
mA[3239] = 0.0f; 
mA[3240] = 0.0f; 
mA[3241] = 0.0f; 
mA[3242] = 0.0f; 
mA[3243] = 0.0f; 
mA[3244] = 0.0f; 
mA[3245] = 0.0f; 
mA[3246] = 0.0f; 
mA[3247] = 0.0f; 
mA[3248] = 0.0f; 
mA[3249] = 0.0f; 
mA[3250] = 0.0f; 
mA[3251] = 0.0f; 
mA[3252] = 0.0f; 
mA[3253] = 0.0f; 
mA[3254] = 0.0f; 
mA[3255] = 0.0f; 
mA[3256] = 0.0f; 
mA[3257] = 0.0f; 
mA[3258] = 0.0f; 
mA[3259] = 0.0f; 
mA[3260] = 0.0f; 
mA[3261] = 0.0f; 
mA[3262] = 0.0f; 
mA[3263] = 0.0f; 
mA[3264] = 0.0f; 
mA[3265] = 0.0f; 
mA[3266] = 0.0f; 
mA[3267] = 0.0f; 
mA[3268] = 0.0f; 
mA[3269] = 0.0f; 
mA[3270] = 0.0f; 
mA[3271] = 0.0f; 
mA[3272] = 0.0f; 
mA[3273] = 0.0f; 
mA[3274] = 0.0f; 
mA[3275] = 0.0f; 
mA[3276] = 0.0f; 
mA[3277] = 0.0f; 
mA[3278] = 0.0f; 
mA[3279] = 0.0f; 
mA[3280] = 0.0f; 
mA[3281] = 0.0f; 
mA[3282] = 0.0f; 
mA[3283] = 0.0f; 
mA[3284] = 0.0f; 
mA[3285] = 0.0f; 
mA[3286] = 0.0f; 
mA[3287] = 0.0f; 
mA[3288] = 0.0f; 
mA[3289] = 0.0f; 
mA[3290] = 0.0f; 
mA[3291] = 0.0f; 
mA[3292] = 0.0f; 
mA[3293] = 0.0f; 
mA[3294] = 0.0f; 
mA[3295] = 0.0f; 
mA[3296] = 0.0f; 
mA[3297] = 0.0f; 
mA[3298] = 0.0f; 
mA[3299] = 0.0f; 
mA[3300] = ( (  -1.0f  * v_v47_aa_fw   )   ) ; 
mA[3301] = 0.0f; 
mA[3302] = 0.0f; 
mA[3303] = 0.0f; 
mA[3304] = 0.0f; 
mA[3305] = 0.0f; 
mA[3306] = 0.0f; 
mA[3307] = 0.0f; 
mA[3308] = 0.0f; 
mA[3309] = 0.0f; 
mA[3310] = 0.0f; 
mA[3311] = 0.0f; 
mA[3312] = 0.0f; 
mA[3313] = 0.0f; 
mA[3314] = 0.0f; 
mA[3315] = 0.0f; 
mA[3316] = 0.0f; 
mA[3317] = 0.0f; 
mA[3318] = 0.0f; 
mA[3319] = 0.0f; 
mA[3320] = 0.0f; 
mA[3321] = 0.0f; 
mA[3322] = 0.0f; 
mA[3323] = 0.0f; 
mA[3324] = 0.0f; 
mA[3325] = 0.0f; 
mA[3326] = 0.0f; 
mA[3327] = 0.0f; 
mA[3328] = 0.0f; 
mA[3329] = 0.0f; 
mA[3330] = 0.0f; 
mA[3331] = 0.0f; 
mA[3332] = 0.0f; 
mA[3333] = 0.0f; 
mA[3334] = 0.0f; 
mA[3335] = 0.0f; 
mA[3336] = 0.0f; 
mA[3337] = 0.0f; 
mA[3338] = 0.0f; 
mA[3339] = 0.0f; 
mA[3340] = 0.0f; 
mA[3341] = 0.0f; 
mA[3342] = 0.0f; 
mA[3343] = 0.0f; 
mA[3344] = 0.0f; 
mA[3345] = 0.0f; 
mA[3346] = 0.0f; 
mA[3347] = 0.0f; 
mA[3348] = 0.0f; 
mA[3349] = 0.0f; 
mA[3350] = 0.0f; 
mA[3351] = 0.0f; 
mA[3352] = 0.0f; 
mA[3353] = 0.0f; 
mA[3354] = 0.0f; 
mA[3355] = 0.0f; 
mA[3356] = 0.0f; 
mA[3357] = 0.0f; 
mA[3358] = 0.0f; 
mA[3359] = 0.0f; 
mA[3360] = 0.0f; 
mA[3361] = 0.0f; 
mA[3362] = 0.0f; 
mA[3363] = 0.0f; 
mA[3364] = 0.0f; 
mA[3365] = 0.0f; 
mA[3366] = 0.0f; 
mA[3367] = 0.0f; 
mA[3368] = 0.0f; 
mA[3369] = 0.0f; 
mA[3370] = 0.0f; 
mA[3371] = 0.0f; 
mA[3372] = 0.0f; 
mA[3373] = 0.0f; 
mA[3374] = 0.0f; 
mA[3375] = (  v_v51_aa_fw_a  + v_v51_aa_fw_b   ) ; 
mA[3376] = 0.0f; 
mA[3377] = 0.0f; 
mA[3378] = 0.0f; 
mA[3379] = 0.0f; 
mA[3380] = 0.0f; 
mA[3381] = 0.0f; 
mA[3382] = 0.0f; 
mA[3383] = 0.0f; 
mA[3384] = 0.0f; 
mA[3385] = 0.0f; 
mA[3386] = 0.0f; 
mA[3387] = 0.0f; 
mA[3388] = 0.0f; 
mA[3389] = 0.0f; 
mA[3390] = 0.0f; 
mA[3391] = 0.0f; 
mA[3392] = 0.0f; 
mA[3393] = 0.0f; 
mA[3394] = 0.0f; 
mA[3395] = 0.0f; 
mA[3396] = 0.0f; 
mA[3397] = 0.0f; 
mA[3398] = 0.0f; 
mA[3399] = 0.0f; 
mA[3400] = 0.0f; 
mA[3401] = 0.0f; 
mA[3402] = 0.0f; 
mA[3403] = 0.0f; 
mA[3404] = 0.0f; 
mA[3405] = 0.0f; 
mA[3406] = 0.0f; 
mA[3407] = 0.0f; 
mA[3408] = 0.0f; 
mA[3409] = 0.0f; 
mA[3410] = 0.0f; 
mA[3411] = 0.0f; 
mA[3412] = 0.0f; 
mA[3413] = 0.0f; 
mA[3414] = 0.0f; 
mA[3415] = 0.0f; 
mA[3416] = 0.0f; 
mA[3417] = 0.0f; 
mA[3418] = 0.0f; 
mA[3419] = 0.0f; 
mA[3420] = 0.0f; 
mA[3421] = 0.0f; 
mA[3422] = 0.0f; 
mA[3423] = 0.0f; 
mA[3424] = 0.0f; 
mA[3425] = 0.0f; 
mA[3426] = 0.0f; 
mA[3427] = 0.0f; 
mA[3428] = 0.0f; 
mA[3429] = 0.0f; 
mA[3430] = 0.0f; 
mA[3431] = 0.0f; 
mA[3432] = 0.0f; 
mA[3433] = 0.0f; 
mA[3434] = 0.0f; 
mA[3435] = 0.0f; 
mA[3436] = 0.0f; 
mA[3437] = 0.0f; 
mA[3438] = 0.0f; 
mA[3439] = 0.0f; 
mA[3440] = 0.0f; 
mA[3441] = 0.0f; 
mA[3442] = 0.0f; 
mA[3443] = 0.0f; 
mA[3444] = 0.0f; 
mA[3445] = 0.0f; 
mA[3446] = 0.0f; 
mA[3447] = 0.0f; 
mA[3448] = 0.0f; 
mA[3449] = 0.0f; 
mA[3450] = ( (  -1.0f  * v_v04_glyc_fw   )  +(  -1.0f  * v_v05_glyc_bw   )   ) ; 
mA[3451] = 0.0f; 
mA[3452] = 0.0f; 
mA[3453] = 0.0f; 
mA[3454] = 0.0f; 
mA[3455] = 0.0f; 
mA[3456] = 0.0f; 
mA[3457] = 0.0f; 
mA[3458] = 0.0f; 
mA[3459] = 0.0f; 
mA[3460] = 0.0f; 
mA[3461] = 0.0f; 
mA[3462] = 0.0f; 
mA[3463] = 0.0f; 
mA[3464] = 0.0f; 
mA[3465] =  v_v04_glyc_bw ; 
mA[3466] = 0.0f; 
mA[3467] = 0.0f; 
mA[3468] = 0.0f; 
mA[3469] = 0.0f; 
mA[3470] = 0.0f; 
mA[3471] = 0.0f; 
mA[3472] = 0.0f; 
mA[3473] = 0.0f; 
mA[3474] = 0.0f; 
mA[3475] = 0.0f; 
mA[3476] = 0.0f; 
mA[3477] = 0.0f; 
mA[3478] = 0.0f; 
mA[3479] =  v_v05_glyc_fw ; 
mA[3480] = 0.0f; 
mA[3481] = 0.0f; 
mA[3482] = 0.0f; 
mA[3483] = 0.0f; 
mA[3484] = 0.0f; 
mA[3485] = 0.0f; 
mA[3486] = 0.0f; 
mA[3487] = 0.0f; 
mA[3488] = 0.0f; 
mA[3489] = 0.0f; 
mA[3490] = 0.0f; 
mA[3491] = 0.0f; 
mA[3492] = 0.0f; 
mA[3493] = 0.0f; 
mA[3494] = 0.0f; 
mA[3495] = 0.0f; 
mA[3496] = 0.0f; 
mA[3497] = 0.0f; 
mA[3498] = 0.0f; 
mA[3499] = 0.0f; 
mA[3500] = 0.0f; 
mA[3501] = 0.0f; 
mA[3502] = 0.0f; 
mA[3503] = 0.0f; 
mA[3504] = 0.0f; 
mA[3505] = 0.0f; 
mA[3506] = 0.0f; 
mA[3507] = 0.0f; 
mA[3508] = 0.0f; 
mA[3509] = 0.0f; 
mA[3510] = 0.0f; 
mA[3511] = 0.0f; 
mA[3512] = 0.0f; 
mA[3513] = 0.0f; 
mA[3514] = 0.0f; 
mA[3515] = 0.0f; 
mA[3516] = 0.0f; 
mA[3517] = 0.0f; 
mA[3518] = 0.0f; 
mA[3519] = 0.0f; 
mA[3520] = 0.0f; 
mA[3521] = 0.0f; 
mA[3522] = 0.0f; 
mA[3523] = 0.0f; 
mA[3524] = 0.0f; 
mA[3525] = 0.0f; 
mA[3526] = 0.0f; 
mA[3527] = 0.0f; 
mA[3528] = 0.0f; 
mA[3529] = 0.0f; 
mA[3530] = 0.0f; 
mA[3531] = 0.0f; 
mA[3532] = 0.0f; 
mA[3533] = 0.0f; 
mA[3534] = 0.0f; 
mA[3535] = 0.0f; 
mA[3536] = 0.0f; 
mA[3537] = 0.0f; 
mA[3538] = 0.0f; 
mA[3539] = 0.0f; 
mA[3540] = 0.0f; 
mA[3541] = 0.0f; 
mA[3542] = 0.0f; 
mA[3543] = 0.0f; 
mA[3544] = 0.0f; 
mA[3545] = 0.0f; 
mA[3546] = 0.0f; 
mA[3547] = 0.0f; 
mA[3548] = 0.0f; 
mA[3549] = 0.0f; 
mA[3550] = 0.0f; 
mA[3551] = 0.0f; 
mA[3552] = 0.0f; 
mA[3553] = 0.0f; 
mA[3554] = 0.0f; 
mA[3555] = 0.0f; 
mA[3556] = 0.0f; 
mA[3557] = 0.0f; 
mA[3558] = 0.0f; 
mA[3559] = 0.0f; 
mA[3560] = 0.0f; 
mA[3561] = 0.0f; 
mA[3562] = 0.0f; 
mA[3563] = 0.0f; 
mA[3564] = 0.0f; 
mA[3565] = 0.0f; 
mA[3566] = 0.0f; 
mA[3567] = 0.0f; 
mA[3568] = 0.0f; 
mA[3569] = 0.0f; 
mA[3570] = 0.0f; 
mA[3571] = 0.0f; 
mA[3572] = 0.0f; 
mA[3573] = 0.0f; 
mA[3574] = 0.0f; 
mA[3575] = 0.0f; 
mA[3576] = 0.0f; 
mA[3577] = 0.0f; 
mA[3578] = 0.0f; 
mA[3579] = 0.0f; 
mA[3580] = 0.0f; 
mA[3581] = 0.0f; 
mA[3582] = 0.0f; 
mA[3583] = 0.0f; 
mA[3584] = 0.0f; 
mA[3585] = 0.0f; 
mA[3586] = 0.0f; 
mA[3587] = 0.0f; 
mA[3588] = 0.0f; 
mA[3589] = 0.0f; 
mA[3590] = 0.0f; 
mA[3591] = 0.0f; 
mA[3592] = 0.0f; 
mA[3593] = 0.0f; 
mA[3594] = 0.0f; 
mA[3595] = 0.0f; 
mA[3596] = 0.0f; 
mA[3597] = 0.0f; 
mA[3598] = 0.0f; 
mA[3599] = 0.0f; 
mA[3600] = ( (  -1.0f  * v_v04_glyc_fw   )  +(  -1.0f  * v_v05_glyc_bw   )   ) ; 
mA[3601] = 0.0f; 
mA[3602] = 0.0f; 
mA[3603] = 0.0f; 
mA[3604] = 0.0f; 
mA[3605] = 0.0f; 
mA[3606] = 0.0f; 
mA[3607] = 0.0f; 
mA[3608] = 0.0f; 
mA[3609] = 0.0f; 
mA[3610] = 0.0f; 
mA[3611] = 0.0f; 
mA[3612] = 0.0f; 
mA[3613] =  v_v04_glyc_bw ; 
mA[3614] = 0.0f; 
mA[3615] = 0.0f; 
mA[3616] = 0.0f; 
mA[3617] = 0.0f; 
mA[3618] = 0.0f; 
mA[3619] = 0.0f; 
mA[3620] = 0.0f; 
mA[3621] = 0.0f; 
mA[3622] = 0.0f; 
mA[3623] = 0.0f; 
mA[3624] = 0.0f; 
mA[3625] = 0.0f; 
mA[3626] = 0.0f; 
mA[3627] = 0.0f; 
mA[3628] = 0.0f; 
mA[3629] =  v_v05_glyc_fw ; 
mA[3630] = 0.0f; 
mA[3631] = 0.0f; 
mA[3632] = 0.0f; 
mA[3633] = 0.0f; 
mA[3634] = 0.0f; 
mA[3635] = 0.0f; 
mA[3636] = 0.0f; 
mA[3637] = 0.0f; 
mA[3638] = 0.0f; 
mA[3639] = 0.0f; 
mA[3640] = 0.0f; 
mA[3641] = 0.0f; 
mA[3642] = 0.0f; 
mA[3643] = 0.0f; 
mA[3644] = 0.0f; 
mA[3645] = 0.0f; 
mA[3646] = 0.0f; 
mA[3647] = 0.0f; 
mA[3648] = 0.0f; 
mA[3649] = 0.0f; 
mA[3650] = 0.0f; 
mA[3651] = 0.0f; 
mA[3652] = 0.0f; 
mA[3653] = 0.0f; 
mA[3654] = 0.0f; 
mA[3655] = 0.0f; 
mA[3656] = 0.0f; 
mA[3657] = 0.0f; 
mA[3658] = 0.0f; 
mA[3659] = 0.0f; 
mA[3660] = 0.0f; 
mA[3661] = 0.0f; 
mA[3662] = 0.0f; 
mA[3663] = 0.0f; 
mA[3664] = 0.0f; 
mA[3665] = 0.0f; 
mA[3666] = 0.0f; 
mA[3667] = 0.0f; 
mA[3668] = 0.0f; 
mA[3669] = 0.0f; 
mA[3670] = 0.0f; 
mA[3671] = 0.0f; 
mA[3672] = 0.0f; 
mA[3673] = 0.0f; 
mA[3674] = 0.0f; 
mA[3675] = 0.0f; 
mA[3676] = 0.0f; 
mA[3677] = 0.0f; 
mA[3678] = 0.0f; 
mA[3679] = 0.0f; 
mA[3680] = 0.0f; 
mA[3681] = 0.0f; 
mA[3682] = 0.0f; 
mA[3683] = 0.0f; 
mA[3684] = 0.0f; 
mA[3685] = 0.0f; 
mA[3686] = 0.0f; 
mA[3687] = 0.0f; 
mA[3688] = 0.0f; 
mA[3689] = 0.0f; 
mA[3690] = 0.0f; 
mA[3691] = 0.0f; 
mA[3692] = 0.0f; 
mA[3693] = 0.0f; 
mA[3694] = 0.0f; 
mA[3695] = 0.0f; 
mA[3696] = 0.0f; 
mA[3697] = 0.0f; 
mA[3698] = 0.0f; 
mA[3699] = 0.0f; 
mA[3700] = 0.0f; 
mA[3701] = 0.0f; 
mA[3702] = 0.0f; 
mA[3703] = 0.0f; 
mA[3704] = 0.0f; 
mA[3705] = 0.0f; 
mA[3706] = 0.0f; 
mA[3707] = 0.0f; 
mA[3708] = 0.0f; 
mA[3709] = 0.0f; 
mA[3710] = 0.0f; 
mA[3711] = 0.0f; 
mA[3712] = 0.0f; 
mA[3713] = 0.0f; 
mA[3714] = 0.0f; 
mA[3715] = 0.0f; 
mA[3716] = 0.0f; 
mA[3717] = 0.0f; 
mA[3718] = 0.0f; 
mA[3719] = 0.0f; 
mA[3720] = 0.0f; 
mA[3721] = 0.0f; 
mA[3722] = 0.0f; 
mA[3723] = 0.0f; 
mA[3724] = 0.0f; 
mA[3725] = 0.0f; 
mA[3726] = 0.0f; 
mA[3727] = 0.0f; 
mA[3728] = 0.0f; 
mA[3729] = 0.0f; 
mA[3730] = 0.0f; 
mA[3731] = 0.0f; 
mA[3732] = 0.0f; 
mA[3733] = 0.0f; 
mA[3734] = 0.0f; 
mA[3735] = 0.0f; 
mA[3736] = 0.0f; 
mA[3737] = 0.0f; 
mA[3738] = 0.0f; 
mA[3739] = 0.0f; 
mA[3740] = 0.0f; 
mA[3741] = 0.0f; 
mA[3742] = 0.0f; 
mA[3743] = 0.0f; 
mA[3744] = 0.0f; 
mA[3745] = 0.0f; 
mA[3746] = 0.0f; 
mA[3747] = 0.0f; 
mA[3748] = 0.0f; 
mA[3749] = 0.0f; 
mA[3750] = ( (  -1.0f  * v_v04_glyc_fw   )  +(  -1.0f  * v_v05_glyc_bw   )   ) ; 
mA[3751] = 0.0f; 
mA[3752] = 0.0f; 
mA[3753] = 0.0f; 
mA[3754] = 0.0f; 
mA[3755] = 0.0f; 
mA[3756] = 0.0f; 
mA[3757] = 0.0f; 
mA[3758] = 0.0f; 
mA[3759] = 0.0f; 
mA[3760] = 0.0f; 
mA[3761] =  v_v04_glyc_bw ; 
mA[3762] = 0.0f; 
mA[3763] = 0.0f; 
mA[3764] = 0.0f; 
mA[3765] = 0.0f; 
mA[3766] = 0.0f; 
mA[3767] = 0.0f; 
mA[3768] = 0.0f; 
mA[3769] = 0.0f; 
mA[3770] = 0.0f; 
mA[3771] = 0.0f; 
mA[3772] = 0.0f; 
mA[3773] = 0.0f; 
mA[3774] = 0.0f; 
mA[3775] = 0.0f; 
mA[3776] = 0.0f; 
mA[3777] = 0.0f; 
mA[3778] = 0.0f; 
mA[3779] =  v_v05_glyc_fw ; 
mA[3780] = 0.0f; 
mA[3781] = 0.0f; 
mA[3782] = 0.0f; 
mA[3783] = 0.0f; 
mA[3784] = 0.0f; 
mA[3785] = 0.0f; 
mA[3786] = 0.0f; 
mA[3787] = 0.0f; 
mA[3788] = 0.0f; 
mA[3789] = 0.0f; 
mA[3790] = 0.0f; 
mA[3791] = 0.0f; 
mA[3792] = 0.0f; 
mA[3793] = 0.0f; 
mA[3794] = 0.0f; 
mA[3795] = 0.0f; 
mA[3796] = 0.0f; 
mA[3797] = 0.0f; 
mA[3798] = 0.0f; 
mA[3799] = 0.0f; 
mA[3800] = 0.0f; 
mA[3801] = 0.0f; 
mA[3802] = 0.0f; 
mA[3803] = 0.0f; 
mA[3804] = 0.0f; 
mA[3805] = 0.0f; 
mA[3806] = 0.0f; 
mA[3807] = 0.0f; 
mA[3808] = 0.0f; 
mA[3809] = 0.0f; 
mA[3810] = 0.0f; 
mA[3811] = 0.0f; 
mA[3812] = 0.0f; 
mA[3813] = 0.0f; 
mA[3814] = 0.0f; 
mA[3815] = 0.0f; 
mA[3816] = 0.0f; 
mA[3817] = 0.0f; 
mA[3818] = 0.0f; 
mA[3819] = 0.0f; 
mA[3820] = 0.0f; 
mA[3821] = 0.0f; 
mA[3822] = 0.0f; 
mA[3823] = 0.0f; 
mA[3824] = 0.0f; 
mA[3825] = 0.0f; 
mA[3826] = 0.0f; 
mA[3827] = 0.0f; 
mA[3828] = 0.0f; 
mA[3829] = 0.0f; 
mA[3830] = 0.0f; 
mA[3831] = 0.0f; 
mA[3832] = 0.0f; 
mA[3833] = 0.0f; 
mA[3834] = 0.0f; 
mA[3835] = 0.0f; 
mA[3836] = 0.0f; 
mA[3837] = 0.0f; 
mA[3838] = 0.0f; 
mA[3839] = 0.0f; 
mA[3840] = 0.0f; 
mA[3841] = 0.0f; 
mA[3842] = 0.0f; 
mA[3843] = 0.0f; 
mA[3844] = 0.0f; 
mA[3845] = 0.0f; 
mA[3846] = 0.0f; 
mA[3847] = 0.0f; 
mA[3848] = 0.0f; 
mA[3849] = 0.0f; 
mA[3850] = 0.0f; 
mA[3851] = 0.0f; 
mA[3852] = 0.0f; 
mA[3853] = 0.0f; 
mA[3854] = 0.0f; 
mA[3855] = 0.0f; 
mA[3856] = 0.0f; 
mA[3857] = 0.0f; 
mA[3858] = 0.0f; 
mA[3859] = 0.0f; 
mA[3860] = 0.0f; 
mA[3861] = 0.0f; 
mA[3862] = 0.0f; 
mA[3863] = 0.0f; 
mA[3864] = 0.0f; 
mA[3865] = 0.0f; 
mA[3866] = 0.0f; 
mA[3867] = 0.0f; 
mA[3868] = 0.0f; 
mA[3869] = 0.0f; 
mA[3870] = 0.0f; 
mA[3871] = 0.0f; 
mA[3872] = 0.0f; 
mA[3873] = 0.0f; 
mA[3874] = 0.0f; 
mA[3875] = 0.0f; 
mA[3876] = 0.0f; 
mA[3877] = 0.0f; 
mA[3878] = 0.0f; 
mA[3879] = 0.0f; 
mA[3880] = 0.0f; 
mA[3881] = 0.0f; 
mA[3882] = 0.0f; 
mA[3883] = 0.0f; 
mA[3884] = 0.0f; 
mA[3885] = 0.0f; 
mA[3886] = 0.0f; 
mA[3887] = 0.0f; 
mA[3888] = 0.0f; 
mA[3889] = 0.0f; 
mA[3890] = 0.0f; 
mA[3891] = 0.0f; 
mA[3892] = 0.0f; 
mA[3893] = 0.0f; 
mA[3894] = 0.0f; 
mA[3895] = 0.0f; 
mA[3896] = 0.0f; 
mA[3897] = 0.0f; 
mA[3898] = 0.0f; 
mA[3899] = 0.0f; 
mA[3900] = ( (  -1.0f  * v_v14_ppp_fw   )  +(  -1.0f  * v_v17_ppp_fw   )   ) ; 
mA[3901] = 0.0f; 
mA[3902] = 0.0f; 
mA[3903] = 0.0f; 
mA[3904] = 0.0f; 
mA[3905] = 0.0f; 
mA[3906] =  v_v14_ppp_bw ; 
mA[3907] = 0.0f; 
mA[3908] = 0.0f; 
mA[3909] = 0.0f; 
mA[3910] = 0.0f; 
mA[3911] = 0.0f; 
mA[3912] = 0.0f; 
mA[3913] = 0.0f; 
mA[3914] = 0.0f; 
mA[3915] = 0.0f; 
mA[3916] = 0.0f; 
mA[3917] = 0.0f; 
mA[3918] = 0.0f; 
mA[3919] = 0.0f; 
mA[3920] = 0.0f; 
mA[3921] = 0.0f; 
mA[3922] = 0.0f; 
mA[3923] = 0.0f; 
mA[3924] = 0.0f; 
mA[3925] = 0.0f; 
mA[3926] = 0.0f; 
mA[3927] = 0.0f; 
mA[3928] = 0.0f; 
mA[3929] = 0.0f; 
mA[3930] = 0.0f; 
mA[3931] = 0.0f; 
mA[3932] = 0.0f; 
mA[3933] = 0.0f; 
mA[3934] = 0.0f; 
mA[3935] = 0.0f; 
mA[3936] = 0.0f; 
mA[3937] = 0.0f; 
mA[3938] = 0.0f; 
mA[3939] = 0.0f; 
mA[3940] = 0.0f; 
mA[3941] = 0.0f; 
mA[3942] = 0.0f; 
mA[3943] = 0.0f; 
mA[3944] = 0.0f; 
mA[3945] = 0.0f; 
mA[3946] = 0.0f; 
mA[3947] = 0.0f; 
mA[3948] = 0.0f; 
mA[3949] = 0.0f; 
mA[3950] = 0.0f; 
mA[3951] = 0.0f; 
mA[3952] = 0.0f; 
mA[3953] = 0.0f; 
mA[3954] = 0.0f; 
mA[3955] = 0.0f; 
mA[3956] = 0.0f; 
mA[3957] = 0.0f; 
mA[3958] = 0.0f; 
mA[3959] = 0.0f; 
mA[3960] = 0.0f; 
mA[3961] = 0.0f; 
mA[3962] = 0.0f; 
mA[3963] = 0.0f; 
mA[3964] = 0.0f; 
mA[3965] = 0.0f; 
mA[3966] = 0.0f; 
mA[3967] = 0.0f; 
mA[3968] = 0.0f; 
mA[3969] = 0.0f; 
mA[3970] = 0.0f; 
mA[3971] = 0.0f; 
mA[3972] = 0.0f; 
mA[3973] = 0.0f; 
mA[3974] = 0.0f; 
mA[3975] = 0.0f; 
mA[3976] = 0.0f; 
mA[3977] = 0.0f; 
mA[3978] = 0.0f; 
mA[3979] = 0.0f; 
mA[3980] = 0.0f; 
mA[3981] = 0.0f; 
mA[3982] = 0.0f; 
mA[3983] = 0.0f; 
mA[3984] = 0.0f; 
mA[3985] =  v_v17_ppp_bw ; 
mA[3986] = 0.0f; 
mA[3987] = 0.0f; 
mA[3988] = 0.0f; 
mA[3989] = 0.0f; 
mA[3990] = 0.0f; 
mA[3991] = 0.0f; 
mA[3992] = 0.0f; 
mA[3993] = 0.0f; 
mA[3994] = 0.0f; 
mA[3995] = 0.0f; 
mA[3996] = 0.0f; 
mA[3997] = 0.0f; 
mA[3998] = 0.0f; 
mA[3999] = 0.0f; 
mA[4000] = 0.0f; 
mA[4001] = 0.0f; 
mA[4002] = 0.0f; 
mA[4003] = 0.0f; 
mA[4004] = 0.0f; 
mA[4005] = 0.0f; 
mA[4006] = 0.0f; 
mA[4007] = 0.0f; 
mA[4008] = 0.0f; 
mA[4009] = 0.0f; 
mA[4010] = 0.0f; 
mA[4011] = 0.0f; 
mA[4012] = 0.0f; 
mA[4013] = 0.0f; 
mA[4014] = 0.0f; 
mA[4015] = 0.0f; 
mA[4016] = 0.0f; 
mA[4017] = 0.0f; 
mA[4018] = 0.0f; 
mA[4019] = 0.0f; 
mA[4020] = 0.0f; 
mA[4021] = 0.0f; 
mA[4022] = 0.0f; 
mA[4023] = 0.0f; 
mA[4024] = 0.0f; 
mA[4025] = 0.0f; 
mA[4026] = 0.0f; 
mA[4027] = 0.0f; 
mA[4028] = 0.0f; 
mA[4029] = 0.0f; 
mA[4030] = 0.0f; 
mA[4031] = 0.0f; 
mA[4032] = 0.0f; 
mA[4033] = 0.0f; 
mA[4034] = 0.0f; 
mA[4035] = 0.0f; 
mA[4036] = 0.0f; 
mA[4037] = 0.0f; 
mA[4038] = 0.0f; 
mA[4039] = 0.0f; 
mA[4040] = 0.0f; 
mA[4041] = 0.0f; 
mA[4042] = 0.0f; 
mA[4043] = 0.0f; 
mA[4044] = 0.0f; 
mA[4045] = 0.0f; 
mA[4046] = 0.0f; 
mA[4047] = 0.0f; 
mA[4048] = 0.0f; 
mA[4049] = 0.0f; 
mA[4050] = ( (  -1.0f  * v_v17_ppp_fw   )  +(  -1.0f  * v_v14_ppp_fw   )   ) ; 
mA[4051] = 0.0f; 
mA[4052] = 0.0f; 
mA[4053] = 0.0f; 
mA[4054] = 0.0f; 
mA[4055] = 0.0f; 
mA[4056] =  v_v14_ppp_bw ; 
mA[4057] = 0.0f; 
mA[4058] = 0.0f; 
mA[4059] = 0.0f; 
mA[4060] = 0.0f; 
mA[4061] = 0.0f; 
mA[4062] = 0.0f; 
mA[4063] = 0.0f; 
mA[4064] = 0.0f; 
mA[4065] = 0.0f; 
mA[4066] = 0.0f; 
mA[4067] = 0.0f; 
mA[4068] = 0.0f; 
mA[4069] = 0.0f; 
mA[4070] = 0.0f; 
mA[4071] = 0.0f; 
mA[4072] = 0.0f; 
mA[4073] = 0.0f; 
mA[4074] = 0.0f; 
mA[4075] = 0.0f; 
mA[4076] = 0.0f; 
mA[4077] = 0.0f; 
mA[4078] = 0.0f; 
mA[4079] = 0.0f; 
mA[4080] = 0.0f; 
mA[4081] = 0.0f; 
mA[4082] = 0.0f; 
mA[4083] = 0.0f; 
mA[4084] = 0.0f; 
mA[4085] = 0.0f; 
mA[4086] = 0.0f; 
mA[4087] = 0.0f; 
mA[4088] = 0.0f; 
mA[4089] = 0.0f; 
mA[4090] = 0.0f; 
mA[4091] = 0.0f; 
mA[4092] = 0.0f; 
mA[4093] = 0.0f; 
mA[4094] = 0.0f; 
mA[4095] = 0.0f; 
mA[4096] = 0.0f; 
mA[4097] = 0.0f; 
mA[4098] = 0.0f; 
mA[4099] = 0.0f; 
mA[4100] = 0.0f; 
mA[4101] = 0.0f; 
mA[4102] = 0.0f; 
mA[4103] = 0.0f; 
mA[4104] = 0.0f; 
mA[4105] = 0.0f; 
mA[4106] = 0.0f; 
mA[4107] = 0.0f; 
mA[4108] = 0.0f; 
mA[4109] = 0.0f; 
mA[4110] = 0.0f; 
mA[4111] = 0.0f; 
mA[4112] = 0.0f; 
mA[4113] = 0.0f; 
mA[4114] = 0.0f; 
mA[4115] = 0.0f; 
mA[4116] = 0.0f; 
mA[4117] = 0.0f; 
mA[4118] = 0.0f; 
mA[4119] = 0.0f; 
mA[4120] = 0.0f; 
mA[4121] = 0.0f; 
mA[4122] = 0.0f; 
mA[4123] = 0.0f; 
mA[4124] = 0.0f; 
mA[4125] = 0.0f; 
mA[4126] = 0.0f; 
mA[4127] = 0.0f; 
mA[4128] = 0.0f; 
mA[4129] = 0.0f; 
mA[4130] = 0.0f; 
mA[4131] = 0.0f; 
mA[4132] = 0.0f; 
mA[4133] = 0.0f; 
mA[4134] = 0.0f; 
mA[4135] =  v_v17_ppp_bw ; 
mA[4136] = 0.0f; 
mA[4137] = 0.0f; 
mA[4138] = 0.0f; 
mA[4139] = 0.0f; 
mA[4140] = 0.0f; 
mA[4141] = 0.0f; 
mA[4142] = 0.0f; 
mA[4143] = 0.0f; 
mA[4144] = 0.0f; 
mA[4145] = 0.0f; 
mA[4146] = 0.0f; 
mA[4147] = 0.0f; 
mA[4148] = 0.0f; 
mA[4149] = 0.0f; 
mA[4150] = 0.0f; 
mA[4151] = 0.0f; 
mA[4152] = 0.0f; 
mA[4153] = 0.0f; 
mA[4154] = 0.0f; 
mA[4155] = 0.0f; 
mA[4156] = 0.0f; 
mA[4157] = 0.0f; 
mA[4158] = 0.0f; 
mA[4159] = 0.0f; 
mA[4160] = 0.0f; 
mA[4161] = 0.0f; 
mA[4162] = 0.0f; 
mA[4163] = 0.0f; 
mA[4164] = 0.0f; 
mA[4165] = 0.0f; 
mA[4166] = 0.0f; 
mA[4167] = 0.0f; 
mA[4168] = 0.0f; 
mA[4169] = 0.0f; 
mA[4170] = 0.0f; 
mA[4171] = 0.0f; 
mA[4172] = 0.0f; 
mA[4173] = 0.0f; 
mA[4174] = 0.0f; 
mA[4175] = 0.0f; 
mA[4176] = 0.0f; 
mA[4177] = 0.0f; 
mA[4178] = 0.0f; 
mA[4179] = 0.0f; 
mA[4180] = 0.0f; 
mA[4181] = 0.0f; 
mA[4182] = 0.0f; 
mA[4183] = 0.0f; 
mA[4184] = 0.0f; 
mA[4185] = 0.0f; 
mA[4186] = 0.0f; 
mA[4187] = 0.0f; 
mA[4188] = 0.0f; 
mA[4189] = 0.0f; 
mA[4190] = 0.0f; 
mA[4191] = 0.0f; 
mA[4192] = 0.0f; 
mA[4193] = 0.0f; 
mA[4194] = 0.0f; 
mA[4195] = 0.0f; 
mA[4196] = 0.0f; 
mA[4197] = 0.0f; 
mA[4198] = 0.0f; 
mA[4199] = 0.0f; 
mA[4200] = ( (  -1.0f  * v_v14_ppp_fw   )  +(  -1.0f  * v_v17_ppp_fw   )   ) ; 
mA[4201] = 0.0f; 
mA[4202] = 0.0f; 
mA[4203] = 0.0f; 
mA[4204] = 0.0f; 
mA[4205] = 0.0f; 
mA[4206] =  v_v14_ppp_bw ; 
mA[4207] = 0.0f; 
mA[4208] = 0.0f; 
mA[4209] = 0.0f; 
mA[4210] = 0.0f; 
mA[4211] = 0.0f; 
mA[4212] = 0.0f; 
mA[4213] = 0.0f; 
mA[4214] = 0.0f; 
mA[4215] = 0.0f; 
mA[4216] = 0.0f; 
mA[4217] = 0.0f; 
mA[4218] = 0.0f; 
mA[4219] = 0.0f; 
mA[4220] = 0.0f; 
mA[4221] = 0.0f; 
mA[4222] = 0.0f; 
mA[4223] = 0.0f; 
mA[4224] = 0.0f; 
mA[4225] = 0.0f; 
mA[4226] = 0.0f; 
mA[4227] = 0.0f; 
mA[4228] = 0.0f; 
mA[4229] = 0.0f; 
mA[4230] = 0.0f; 
mA[4231] = 0.0f; 
mA[4232] = 0.0f; 
mA[4233] = 0.0f; 
mA[4234] = 0.0f; 
mA[4235] = 0.0f; 
mA[4236] = 0.0f; 
mA[4237] = 0.0f; 
mA[4238] = 0.0f; 
mA[4239] = 0.0f; 
mA[4240] = 0.0f; 
mA[4241] = 0.0f; 
mA[4242] = 0.0f; 
mA[4243] = 0.0f; 
mA[4244] = 0.0f; 
mA[4245] = 0.0f; 
mA[4246] = 0.0f; 
mA[4247] = 0.0f; 
mA[4248] = 0.0f; 
mA[4249] = 0.0f; 
mA[4250] = 0.0f; 
mA[4251] = 0.0f; 
mA[4252] = 0.0f; 
mA[4253] = 0.0f; 
mA[4254] = 0.0f; 
mA[4255] = 0.0f; 
mA[4256] = 0.0f; 
mA[4257] = 0.0f; 
mA[4258] = 0.0f; 
mA[4259] = 0.0f; 
mA[4260] = 0.0f; 
mA[4261] = 0.0f; 
mA[4262] = 0.0f; 
mA[4263] = 0.0f; 
mA[4264] = 0.0f; 
mA[4265] = 0.0f; 
mA[4266] = 0.0f; 
mA[4267] = 0.0f; 
mA[4268] = 0.0f; 
mA[4269] = 0.0f; 
mA[4270] = 0.0f; 
mA[4271] = 0.0f; 
mA[4272] = 0.0f; 
mA[4273] = 0.0f; 
mA[4274] = 0.0f; 
mA[4275] = 0.0f; 
mA[4276] = 0.0f; 
mA[4277] = 0.0f; 
mA[4278] = 0.0f; 
mA[4279] = 0.0f; 
mA[4280] = 0.0f; 
mA[4281] = 0.0f; 
mA[4282] = 0.0f; 
mA[4283] = 0.0f; 
mA[4284] = 0.0f; 
mA[4285] =  v_v17_ppp_bw ; 
mA[4286] = 0.0f; 
mA[4287] = 0.0f; 
mA[4288] = 0.0f; 
mA[4289] = 0.0f; 
mA[4290] = 0.0f; 
mA[4291] = 0.0f; 
mA[4292] = 0.0f; 
mA[4293] = 0.0f; 
mA[4294] = 0.0f; 
mA[4295] = 0.0f; 
mA[4296] = 0.0f; 
mA[4297] = 0.0f; 
mA[4298] = 0.0f; 
mA[4299] = 0.0f; 
mA[4300] = 0.0f; 
mA[4301] = 0.0f; 
mA[4302] = 0.0f; 
mA[4303] = 0.0f; 
mA[4304] = 0.0f; 
mA[4305] = 0.0f; 
mA[4306] = 0.0f; 
mA[4307] = 0.0f; 
mA[4308] = 0.0f; 
mA[4309] = 0.0f; 
mA[4310] = 0.0f; 
mA[4311] = 0.0f; 
mA[4312] = 0.0f; 
mA[4313] = 0.0f; 
mA[4314] = 0.0f; 
mA[4315] = 0.0f; 
mA[4316] = 0.0f; 
mA[4317] = 0.0f; 
mA[4318] = 0.0f; 
mA[4319] = 0.0f; 
mA[4320] = 0.0f; 
mA[4321] = 0.0f; 
mA[4322] = 0.0f; 
mA[4323] = 0.0f; 
mA[4324] = 0.0f; 
mA[4325] = 0.0f; 
mA[4326] = 0.0f; 
mA[4327] = 0.0f; 
mA[4328] = 0.0f; 
mA[4329] = 0.0f; 
mA[4330] = 0.0f; 
mA[4331] = 0.0f; 
mA[4332] = 0.0f; 
mA[4333] = 0.0f; 
mA[4334] = 0.0f; 
mA[4335] = 0.0f; 
mA[4336] = 0.0f; 
mA[4337] = 0.0f; 
mA[4338] = 0.0f; 
mA[4339] = 0.0f; 
mA[4340] = 0.0f; 
mA[4341] = 0.0f; 
mA[4342] = 0.0f; 
mA[4343] = 0.0f; 
mA[4344] = 0.0f; 
mA[4345] = 0.0f; 
mA[4346] = 0.0f; 
mA[4347] = 0.0f; 
mA[4348] = 0.0f; 
mA[4349] = 0.0f; 
mA[4350] = ( (  -1.0f  * v_v17_ppp_fw   )  +(  -1.0f  * v_v14_ppp_fw   )   ) ; 
mA[4351] = 0.0f; 
mA[4352] = 0.0f; 
mA[4353] = 0.0f; 
mA[4354] = 0.0f; 
mA[4355] = 0.0f; 
mA[4356] =  v_v14_ppp_bw ; 
mA[4357] = 0.0f; 
mA[4358] = 0.0f; 
mA[4359] = 0.0f; 
mA[4360] = 0.0f; 
mA[4361] = 0.0f; 
mA[4362] = 0.0f; 
mA[4363] = 0.0f; 
mA[4364] = 0.0f; 
mA[4365] = 0.0f; 
mA[4366] = 0.0f; 
mA[4367] = 0.0f; 
mA[4368] = 0.0f; 
mA[4369] = 0.0f; 
mA[4370] = 0.0f; 
mA[4371] = 0.0f; 
mA[4372] = 0.0f; 
mA[4373] = 0.0f; 
mA[4374] = 0.0f; 
mA[4375] = 0.0f; 
mA[4376] = 0.0f; 
mA[4377] = 0.0f; 
mA[4378] = 0.0f; 
mA[4379] = 0.0f; 
mA[4380] = 0.0f; 
mA[4381] = 0.0f; 
mA[4382] = 0.0f; 
mA[4383] = 0.0f; 
mA[4384] = 0.0f; 
mA[4385] = 0.0f; 
mA[4386] = 0.0f; 
mA[4387] = 0.0f; 
mA[4388] = 0.0f; 
mA[4389] = 0.0f; 
mA[4390] = 0.0f; 
mA[4391] = 0.0f; 
mA[4392] = 0.0f; 
mA[4393] = 0.0f; 
mA[4394] = 0.0f; 
mA[4395] = 0.0f; 
mA[4396] = 0.0f; 
mA[4397] = 0.0f; 
mA[4398] = 0.0f; 
mA[4399] = 0.0f; 
mA[4400] = 0.0f; 
mA[4401] = 0.0f; 
mA[4402] = 0.0f; 
mA[4403] = 0.0f; 
mA[4404] = 0.0f; 
mA[4405] = 0.0f; 
mA[4406] = 0.0f; 
mA[4407] = 0.0f; 
mA[4408] = 0.0f; 
mA[4409] = 0.0f; 
mA[4410] = 0.0f; 
mA[4411] = 0.0f; 
mA[4412] = 0.0f; 
mA[4413] = 0.0f; 
mA[4414] = 0.0f; 
mA[4415] = 0.0f; 
mA[4416] = 0.0f; 
mA[4417] = 0.0f; 
mA[4418] = 0.0f; 
mA[4419] = 0.0f; 
mA[4420] = 0.0f; 
mA[4421] = 0.0f; 
mA[4422] = 0.0f; 
mA[4423] = 0.0f; 
mA[4424] = 0.0f; 
mA[4425] = 0.0f; 
mA[4426] = 0.0f; 
mA[4427] = 0.0f; 
mA[4428] = 0.0f; 
mA[4429] = 0.0f; 
mA[4430] = 0.0f; 
mA[4431] = 0.0f; 
mA[4432] = 0.0f; 
mA[4433] = 0.0f; 
mA[4434] = 0.0f; 
mA[4435] =  v_v17_ppp_bw ; 
mA[4436] = 0.0f; 
mA[4437] = 0.0f; 
mA[4438] = 0.0f; 
mA[4439] = 0.0f; 
mA[4440] = 0.0f; 
mA[4441] = 0.0f; 
mA[4442] = 0.0f; 
mA[4443] = 0.0f; 
mA[4444] = 0.0f; 
mA[4445] = 0.0f; 
mA[4446] = 0.0f; 
mA[4447] = 0.0f; 
mA[4448] = 0.0f; 
mA[4449] = 0.0f; 
mA[4450] = 0.0f; 
mA[4451] = 0.0f; 
mA[4452] = 0.0f; 
mA[4453] = 0.0f; 
mA[4454] = 0.0f; 
mA[4455] = 0.0f; 
mA[4456] = 0.0f; 
mA[4457] = 0.0f; 
mA[4458] = 0.0f; 
mA[4459] = 0.0f; 
mA[4460] = 0.0f; 
mA[4461] = 0.0f; 
mA[4462] = 0.0f; 
mA[4463] = 0.0f; 
mA[4464] = 0.0f; 
mA[4465] = 0.0f; 
mA[4466] = 0.0f; 
mA[4467] = 0.0f; 
mA[4468] = 0.0f; 
mA[4469] = 0.0f; 
mA[4470] = 0.0f; 
mA[4471] = 0.0f; 
mA[4472] = 0.0f; 
mA[4473] = 0.0f; 
mA[4474] = 0.0f; 
mA[4475] = 0.0f; 
mA[4476] = 0.0f; 
mA[4477] = 0.0f; 
mA[4478] = 0.0f; 
mA[4479] = 0.0f; 
mA[4480] = 0.0f; 
mA[4481] = 0.0f; 
mA[4482] = 0.0f; 
mA[4483] = 0.0f; 
mA[4484] = 0.0f; 
mA[4485] = 0.0f; 
mA[4486] = 0.0f; 
mA[4487] = 0.0f; 
mA[4488] = 0.0f; 
mA[4489] = 0.0f; 
mA[4490] = 0.0f; 
mA[4491] = 0.0f; 
mA[4492] = 0.0f; 
mA[4493] = 0.0f; 
mA[4494] = 0.0f; 
mA[4495] = 0.0f; 
mA[4496] = 0.0f; 
mA[4497] = 0.0f; 
mA[4498] = 0.0f; 
mA[4499] = 0.0f; 
mA[4500] = ( (  -1.0f  * v_v02_glyc_fw   )  +(  -1.0f  * v_v16_ppp_bw   )  +(  -1.0f  * v_v14_ppp_bw   )   ) ; 
mA[4501] = 0.0f; 
mA[4502] = 0.0f; 
mA[4503] = 0.0f; 
mA[4504] = 0.0f; 
mA[4505] = 0.0f; 
mA[4506] =  v_v03_glyc_fw ; 
mA[4507] = 0.0f; 
mA[4508] = 0.0f; 
mA[4509] = 0.0f; 
mA[4510] = 0.0f; 
mA[4511] = 0.0f; 
mA[4512] = 0.0f; 
mA[4513] = 0.0f; 
mA[4514] = 0.0f; 
mA[4515] = 0.0f; 
mA[4516] =  v_v02_glyc_bw ; 
mA[4517] = 0.0f; 
mA[4518] = 0.0f; 
mA[4519] = 0.0f; 
mA[4520] = 0.0f; 
mA[4521] = 0.0f; 
mA[4522] = 0.0f; 
mA[4523] = 0.0f; 
mA[4524] = 0.0f; 
mA[4525] = 0.0f; 
mA[4526] = 0.0f; 
mA[4527] = 0.0f; 
mA[4528] = 0.0f; 
mA[4529] = 0.0f; 
mA[4530] = 0.0f; 
mA[4531] = 0.0f; 
mA[4532] = 0.0f; 
mA[4533] = 0.0f; 
mA[4534] = 0.0f; 
mA[4535] = 0.0f; 
mA[4536] = 0.0f; 
mA[4537] = 0.0f; 
mA[4538] = 0.0f; 
mA[4539] = 0.0f; 
mA[4540] = 0.0f; 
mA[4541] = 0.0f; 
mA[4542] = 0.0f; 
mA[4543] = 0.0f; 
mA[4544] = 0.0f; 
mA[4545] = 0.0f; 
mA[4546] = 0.0f; 
mA[4547] = 0.0f; 
mA[4548] = 0.0f; 
mA[4549] = 0.0f; 
mA[4550] = 0.0f; 
mA[4551] = 0.0f; 
mA[4552] = 0.0f; 
mA[4553] = 0.0f; 
mA[4554] = 0.0f; 
mA[4555] = 0.0f; 
mA[4556] = 0.0f; 
mA[4557] = 0.0f; 
mA[4558] = 0.0f; 
mA[4559] = 0.0f; 
mA[4560] = 0.0f; 
mA[4561] = 0.0f; 
mA[4562] = 0.0f; 
mA[4563] = 0.0f; 
mA[4564] = 0.0f; 
mA[4565] = 0.0f; 
mA[4566] = 0.0f; 
mA[4567] = 0.0f; 
mA[4568] = 0.0f; 
mA[4569] = 0.0f; 
mA[4570] = 0.0f; 
mA[4571] = 0.0f; 
mA[4572] = 0.0f; 
mA[4573] = 0.0f; 
mA[4574] = 0.0f; 
mA[4575] = 0.0f; 
mA[4576] = 0.0f; 
mA[4577] = 0.0f; 
mA[4578] = 0.0f; 
mA[4579] = 0.0f; 
mA[4580] = 0.0f; 
mA[4581] = 0.0f; 
mA[4582] = 0.0f; 
mA[4583] = 0.0f; 
mA[4584] = 0.0f; 
mA[4585] = 0.0f; 
mA[4586] = 0.0f; 
mA[4587] = 0.0f; 
mA[4588] = 0.0f; 
mA[4589] = 0.0f; 
mA[4590] = 0.0f; 
mA[4591] = 0.0f; 
mA[4592] = 0.0f; 
mA[4593] = 0.0f; 
mA[4594] = 0.0f; 
mA[4595] = 0.0f; 
mA[4596] =  v_v16_ppp_fw ; 
mA[4597] = 0.0f; 
mA[4598] = 0.0f; 
mA[4599] =  v_v14_ppp_fw ; 
mA[4600] = 0.0f; 
mA[4601] = 0.0f; 
mA[4602] = 0.0f; 
mA[4603] = 0.0f; 
mA[4604] = 0.0f; 
mA[4605] = 0.0f; 
mA[4606] = 0.0f; 
mA[4607] = 0.0f; 
mA[4608] = 0.0f; 
mA[4609] = 0.0f; 
mA[4610] = 0.0f; 
mA[4611] = 0.0f; 
mA[4612] = 0.0f; 
mA[4613] = 0.0f; 
mA[4614] = 0.0f; 
mA[4615] = 0.0f; 
mA[4616] = 0.0f; 
mA[4617] = 0.0f; 
mA[4618] = 0.0f; 
mA[4619] = 0.0f; 
mA[4620] = 0.0f; 
mA[4621] = 0.0f; 
mA[4622] = 0.0f; 
mA[4623] = 0.0f; 
mA[4624] = 0.0f; 
mA[4625] = 0.0f; 
mA[4626] = 0.0f; 
mA[4627] = 0.0f; 
mA[4628] = 0.0f; 
mA[4629] = 0.0f; 
mA[4630] = 0.0f; 
mA[4631] = 0.0f; 
mA[4632] = 0.0f; 
mA[4633] = 0.0f; 
mA[4634] = 0.0f; 
mA[4635] = 0.0f; 
mA[4636] = 0.0f; 
mA[4637] = 0.0f; 
mA[4638] = 0.0f; 
mA[4639] = 0.0f; 
mA[4640] = 0.0f; 
mA[4641] = 0.0f; 
mA[4642] = 0.0f; 
mA[4643] = 0.0f; 
mA[4644] = 0.0f; 
mA[4645] = 0.0f; 
mA[4646] = 0.0f; 
mA[4647] = 0.0f; 
mA[4648] = 0.0f; 
mA[4649] = 0.0f; 
mA[4650] = ( (  -1.0f  * v_v16_ppp_bw   )  +(  -1.0f  * v_v14_ppp_bw   )  +(  -1.0f  * v_v02_glyc_fw   )   ) ; 
mA[4651] = 0.0f; 
mA[4652] = 0.0f; 
mA[4653] = 0.0f; 
mA[4654] = 0.0f; 
mA[4655] = 0.0f; 
mA[4656] =  v_v03_glyc_fw ; 
mA[4657] = 0.0f; 
mA[4658] = 0.0f; 
mA[4659] = 0.0f; 
mA[4660] = 0.0f; 
mA[4661] = 0.0f; 
mA[4662] = 0.0f; 
mA[4663] = 0.0f; 
mA[4664] = 0.0f; 
mA[4665] = 0.0f; 
mA[4666] =  v_v02_glyc_bw ; 
mA[4667] = 0.0f; 
mA[4668] = 0.0f; 
mA[4669] = 0.0f; 
mA[4670] = 0.0f; 
mA[4671] = 0.0f; 
mA[4672] = 0.0f; 
mA[4673] = 0.0f; 
mA[4674] = 0.0f; 
mA[4675] = 0.0f; 
mA[4676] = 0.0f; 
mA[4677] = 0.0f; 
mA[4678] = 0.0f; 
mA[4679] = 0.0f; 
mA[4680] = 0.0f; 
mA[4681] = 0.0f; 
mA[4682] = 0.0f; 
mA[4683] = 0.0f; 
mA[4684] = 0.0f; 
mA[4685] = 0.0f; 
mA[4686] = 0.0f; 
mA[4687] = 0.0f; 
mA[4688] = 0.0f; 
mA[4689] = 0.0f; 
mA[4690] = 0.0f; 
mA[4691] = 0.0f; 
mA[4692] = 0.0f; 
mA[4693] = 0.0f; 
mA[4694] = 0.0f; 
mA[4695] = 0.0f; 
mA[4696] = 0.0f; 
mA[4697] = 0.0f; 
mA[4698] = 0.0f; 
mA[4699] = 0.0f; 
mA[4700] = 0.0f; 
mA[4701] = 0.0f; 
mA[4702] = 0.0f; 
mA[4703] = 0.0f; 
mA[4704] = 0.0f; 
mA[4705] = 0.0f; 
mA[4706] = 0.0f; 
mA[4707] = 0.0f; 
mA[4708] = 0.0f; 
mA[4709] = 0.0f; 
mA[4710] = 0.0f; 
mA[4711] = 0.0f; 
mA[4712] = 0.0f; 
mA[4713] = 0.0f; 
mA[4714] = 0.0f; 
mA[4715] = 0.0f; 
mA[4716] = 0.0f; 
mA[4717] = 0.0f; 
mA[4718] = 0.0f; 
mA[4719] = 0.0f; 
mA[4720] = 0.0f; 
mA[4721] = 0.0f; 
mA[4722] = 0.0f; 
mA[4723] = 0.0f; 
mA[4724] = 0.0f; 
mA[4725] = 0.0f; 
mA[4726] = 0.0f; 
mA[4727] = 0.0f; 
mA[4728] = 0.0f; 
mA[4729] = 0.0f; 
mA[4730] = 0.0f; 
mA[4731] = 0.0f; 
mA[4732] = 0.0f; 
mA[4733] = 0.0f; 
mA[4734] = 0.0f; 
mA[4735] = 0.0f; 
mA[4736] = 0.0f; 
mA[4737] = 0.0f; 
mA[4738] = 0.0f; 
mA[4739] = 0.0f; 
mA[4740] = 0.0f; 
mA[4741] = 0.0f; 
mA[4742] = 0.0f; 
mA[4743] = 0.0f; 
mA[4744] = 0.0f; 
mA[4745] = 0.0f; 
mA[4746] =  v_v16_ppp_fw ; 
mA[4747] = 0.0f; 
mA[4748] = 0.0f; 
mA[4749] =  v_v14_ppp_fw ; 
mA[4750] = 0.0f; 
mA[4751] = 0.0f; 
mA[4752] = 0.0f; 
mA[4753] = 0.0f; 
mA[4754] = 0.0f; 
mA[4755] = 0.0f; 
mA[4756] = 0.0f; 
mA[4757] = 0.0f; 
mA[4758] = 0.0f; 
mA[4759] = 0.0f; 
mA[4760] = 0.0f; 
mA[4761] = 0.0f; 
mA[4762] = 0.0f; 
mA[4763] = 0.0f; 
mA[4764] = 0.0f; 
mA[4765] = 0.0f; 
mA[4766] = 0.0f; 
mA[4767] = 0.0f; 
mA[4768] = 0.0f; 
mA[4769] = 0.0f; 
mA[4770] = 0.0f; 
mA[4771] = 0.0f; 
mA[4772] = 0.0f; 
mA[4773] = 0.0f; 
mA[4774] = 0.0f; 
mA[4775] = 0.0f; 
mA[4776] = 0.0f; 
mA[4777] = 0.0f; 
mA[4778] = 0.0f; 
mA[4779] = 0.0f; 
mA[4780] = 0.0f; 
mA[4781] = 0.0f; 
mA[4782] = 0.0f; 
mA[4783] = 0.0f; 
mA[4784] = 0.0f; 
mA[4785] = 0.0f; 
mA[4786] = 0.0f; 
mA[4787] = 0.0f; 
mA[4788] = 0.0f; 
mA[4789] = 0.0f; 
mA[4790] = 0.0f; 
mA[4791] = 0.0f; 
mA[4792] = 0.0f; 
mA[4793] = 0.0f; 
mA[4794] =  v_v14_ppp_fw ; 
mA[4795] = 0.0f; 
mA[4796] = 0.0f; 
mA[4797] = 0.0f; 
mA[4798] = 0.0f; 
mA[4799] = 0.0f; 
mA[4800] = ( (  -1.0f  * v_v02_glyc_fw   )  +(  -1.0f  * v_v14_ppp_bw   )  +(  -1.0f  * v_v16_ppp_bw   )   ) ; 
mA[4801] = 0.0f; 
mA[4802] = 0.0f; 
mA[4803] = 0.0f; 
mA[4804] = 0.0f; 
mA[4805] = 0.0f; 
mA[4806] =  v_v03_glyc_fw ; 
mA[4807] = 0.0f; 
mA[4808] = 0.0f; 
mA[4809] = 0.0f; 
mA[4810] = 0.0f; 
mA[4811] = 0.0f; 
mA[4812] = 0.0f; 
mA[4813] = 0.0f; 
mA[4814] = 0.0f; 
mA[4815] = 0.0f; 
mA[4816] =  v_v02_glyc_bw ; 
mA[4817] = 0.0f; 
mA[4818] = 0.0f; 
mA[4819] = 0.0f; 
mA[4820] = 0.0f; 
mA[4821] = 0.0f; 
mA[4822] = 0.0f; 
mA[4823] = 0.0f; 
mA[4824] = 0.0f; 
mA[4825] = 0.0f; 
mA[4826] = 0.0f; 
mA[4827] = 0.0f; 
mA[4828] = 0.0f; 
mA[4829] = 0.0f; 
mA[4830] = 0.0f; 
mA[4831] = 0.0f; 
mA[4832] = 0.0f; 
mA[4833] = 0.0f; 
mA[4834] = 0.0f; 
mA[4835] = 0.0f; 
mA[4836] = 0.0f; 
mA[4837] = 0.0f; 
mA[4838] = 0.0f; 
mA[4839] = 0.0f; 
mA[4840] = 0.0f; 
mA[4841] = 0.0f; 
mA[4842] = 0.0f; 
mA[4843] = 0.0f; 
mA[4844] = 0.0f; 
mA[4845] = 0.0f; 
mA[4846] = 0.0f; 
mA[4847] = 0.0f; 
mA[4848] = 0.0f; 
mA[4849] = 0.0f; 
mA[4850] = 0.0f; 
mA[4851] = 0.0f; 
mA[4852] = 0.0f; 
mA[4853] = 0.0f; 
mA[4854] = 0.0f; 
mA[4855] = 0.0f; 
mA[4856] = 0.0f; 
mA[4857] = 0.0f; 
mA[4858] = 0.0f; 
mA[4859] = 0.0f; 
mA[4860] = 0.0f; 
mA[4861] = 0.0f; 
mA[4862] = 0.0f; 
mA[4863] = 0.0f; 
mA[4864] = 0.0f; 
mA[4865] = 0.0f; 
mA[4866] = 0.0f; 
mA[4867] = 0.0f; 
mA[4868] = 0.0f; 
mA[4869] = 0.0f; 
mA[4870] = 0.0f; 
mA[4871] = 0.0f; 
mA[4872] = 0.0f; 
mA[4873] = 0.0f; 
mA[4874] = 0.0f; 
mA[4875] = 0.0f; 
mA[4876] = 0.0f; 
mA[4877] = 0.0f; 
mA[4878] = 0.0f; 
mA[4879] = 0.0f; 
mA[4880] = 0.0f; 
mA[4881] = 0.0f; 
mA[4882] = 0.0f; 
mA[4883] = 0.0f; 
mA[4884] = 0.0f; 
mA[4885] = 0.0f; 
mA[4886] = 0.0f; 
mA[4887] = 0.0f; 
mA[4888] = 0.0f; 
mA[4889] = 0.0f; 
mA[4890] = 0.0f; 
mA[4891] = 0.0f; 
mA[4892] = 0.0f; 
mA[4893] = 0.0f; 
mA[4894] = 0.0f; 
mA[4895] = 0.0f; 
mA[4896] =  v_v16_ppp_fw ; 
mA[4897] = 0.0f; 
mA[4898] = 0.0f; 
mA[4899] = 0.0f; 
mA[4900] = 0.0f; 
mA[4901] = 0.0f; 
mA[4902] = 0.0f; 
mA[4903] = 0.0f; 
mA[4904] = 0.0f; 
mA[4905] = 0.0f; 
mA[4906] = 0.0f; 
mA[4907] = 0.0f; 
mA[4908] = 0.0f; 
mA[4909] = 0.0f; 
mA[4910] = 0.0f; 
mA[4911] = 0.0f; 
mA[4912] = 0.0f; 
mA[4913] = 0.0f; 
mA[4914] = 0.0f; 
mA[4915] = 0.0f; 
mA[4916] = 0.0f; 
mA[4917] = 0.0f; 
mA[4918] = 0.0f; 
mA[4919] = 0.0f; 
mA[4920] = 0.0f; 
mA[4921] = 0.0f; 
mA[4922] = 0.0f; 
mA[4923] = 0.0f; 
mA[4924] = 0.0f; 
mA[4925] = 0.0f; 
mA[4926] = 0.0f; 
mA[4927] = 0.0f; 
mA[4928] = 0.0f; 
mA[4929] = 0.0f; 
mA[4930] = 0.0f; 
mA[4931] = 0.0f; 
mA[4932] = 0.0f; 
mA[4933] = 0.0f; 
mA[4934] = 0.0f; 
mA[4935] = 0.0f; 
mA[4936] = 0.0f; 
mA[4937] = 0.0f; 
mA[4938] = 0.0f; 
mA[4939] = 0.0f; 
mA[4940] = 0.0f; 
mA[4941] = 0.0f; 
mA[4942] = 0.0f; 
mA[4943] = 0.0f; 
mA[4944] =  v_v14_ppp_fw ; 
mA[4945] = 0.0f; 
mA[4946] = 0.0f; 
mA[4947] = 0.0f; 
mA[4948] = 0.0f; 
mA[4949] = 0.0f; 
mA[4950] = ( (  -1.0f  * v_v14_ppp_bw   )  +(  -1.0f  * v_v16_ppp_bw   )  +(  -1.0f  * v_v02_glyc_fw   )   ) ; 
mA[4951] = 0.0f; 
mA[4952] = 0.0f; 
mA[4953] = 0.0f; 
mA[4954] = 0.0f; 
mA[4955] = 0.0f; 
mA[4956] =  v_v03_glyc_fw ; 
mA[4957] = 0.0f; 
mA[4958] = 0.0f; 
mA[4959] = 0.0f; 
mA[4960] = 0.0f; 
mA[4961] = 0.0f; 
mA[4962] = 0.0f; 
mA[4963] = 0.0f; 
mA[4964] = 0.0f; 
mA[4965] = 0.0f; 
mA[4966] =  v_v02_glyc_bw ; 
mA[4967] = 0.0f; 
mA[4968] = 0.0f; 
mA[4969] =  v_v16_ppp_fw ; 
mA[4970] = 0.0f; 
mA[4971] = 0.0f; 
mA[4972] = 0.0f; 
mA[4973] = 0.0f; 
mA[4974] = 0.0f; 
mA[4975] = 0.0f; 
mA[4976] = 0.0f; 
mA[4977] = 0.0f; 
mA[4978] = 0.0f; 
mA[4979] = 0.0f; 
mA[4980] = 0.0f; 
mA[4981] = 0.0f; 
mA[4982] = 0.0f; 
mA[4983] = 0.0f; 
mA[4984] = 0.0f; 
mA[4985] = 0.0f; 
mA[4986] = 0.0f; 
mA[4987] = 0.0f; 
mA[4988] = 0.0f; 
mA[4989] = 0.0f; 
mA[4990] = 0.0f; 
mA[4991] = 0.0f; 
mA[4992] = 0.0f; 
mA[4993] = 0.0f; 
mA[4994] = 0.0f; 
mA[4995] = 0.0f; 
mA[4996] = 0.0f; 
mA[4997] = 0.0f; 
mA[4998] = 0.0f; 
mA[4999] = 0.0f; 
mA[5000] = 0.0f; 
mA[5001] = 0.0f; 
mA[5002] = 0.0f; 
mA[5003] = 0.0f; 
mA[5004] = 0.0f; 
mA[5005] = 0.0f; 
mA[5006] = 0.0f; 
mA[5007] = 0.0f; 
mA[5008] = 0.0f; 
mA[5009] = 0.0f; 
mA[5010] = 0.0f; 
mA[5011] = 0.0f; 
mA[5012] = 0.0f; 
mA[5013] = 0.0f; 
mA[5014] = 0.0f; 
mA[5015] = 0.0f; 
mA[5016] = 0.0f; 
mA[5017] = 0.0f; 
mA[5018] = 0.0f; 
mA[5019] = 0.0f; 
mA[5020] = 0.0f; 
mA[5021] = 0.0f; 
mA[5022] = 0.0f; 
mA[5023] = 0.0f; 
mA[5024] = 0.0f; 
mA[5025] = 0.0f; 
mA[5026] = 0.0f; 
mA[5027] = 0.0f; 
mA[5028] = 0.0f; 
mA[5029] = 0.0f; 
mA[5030] = 0.0f; 
mA[5031] = 0.0f; 
mA[5032] = 0.0f; 
mA[5033] = 0.0f; 
mA[5034] = 0.0f; 
mA[5035] = 0.0f; 
mA[5036] = 0.0f; 
mA[5037] = 0.0f; 
mA[5038] = 0.0f; 
mA[5039] = 0.0f; 
mA[5040] = 0.0f; 
mA[5041] = 0.0f; 
mA[5042] = 0.0f; 
mA[5043] = 0.0f; 
mA[5044] = 0.0f; 
mA[5045] = 0.0f; 
mA[5046] = 0.0f; 
mA[5047] = 0.0f; 
mA[5048] = 0.0f; 
mA[5049] = 0.0f; 
mA[5050] = 0.0f; 
mA[5051] = 0.0f; 
mA[5052] = 0.0f; 
mA[5053] = 0.0f; 
mA[5054] = 0.0f; 
mA[5055] = 0.0f; 
mA[5056] = 0.0f; 
mA[5057] = 0.0f; 
mA[5058] = 0.0f; 
mA[5059] = 0.0f; 
mA[5060] = 0.0f; 
mA[5061] = 0.0f; 
mA[5062] = 0.0f; 
mA[5063] = 0.0f; 
mA[5064] = 0.0f; 
mA[5065] = 0.0f; 
mA[5066] = 0.0f; 
mA[5067] = 0.0f; 
mA[5068] = 0.0f; 
mA[5069] = 0.0f; 
mA[5070] = 0.0f; 
mA[5071] = 0.0f; 
mA[5072] = 0.0f; 
mA[5073] = 0.0f; 
mA[5074] = 0.0f; 
mA[5075] = 0.0f; 
mA[5076] = 0.0f; 
mA[5077] = 0.0f; 
mA[5078] = 0.0f; 
mA[5079] = 0.0f; 
mA[5080] = 0.0f; 
mA[5081] = 0.0f; 
mA[5082] = 0.0f; 
mA[5083] = 0.0f; 
mA[5084] = 0.0f; 
mA[5085] = 0.0f; 
mA[5086] = 0.0f; 
mA[5087] = 0.0f; 
mA[5088] = 0.0f; 
mA[5089] = 0.0f; 
mA[5090] = 0.0f; 
mA[5091] = 0.0f; 
mA[5092] = 0.0f; 
mA[5093] = 0.0f; 
mA[5094] =  v_v14_ppp_fw ; 
mA[5095] = 0.0f; 
mA[5096] = 0.0f; 
mA[5097] = 0.0f; 
mA[5098] = 0.0f; 
mA[5099] = 0.0f; 
mA[5100] = ( (  -1.0f  * v_v16_ppp_bw   )  +(  -1.0f  * v_v14_ppp_bw   )  +(  -1.0f  * v_v02_glyc_fw   )   ) ; 
mA[5101] = 0.0f; 
mA[5102] = 0.0f; 
mA[5103] = 0.0f; 
mA[5104] = 0.0f; 
mA[5105] = 0.0f; 
mA[5106] =  v_v03_glyc_fw ; 
mA[5107] = 0.0f; 
mA[5108] = 0.0f; 
mA[5109] = 0.0f; 
mA[5110] = 0.0f; 
mA[5111] = 0.0f; 
mA[5112] = 0.0f; 
mA[5113] = 0.0f; 
mA[5114] = 0.0f; 
mA[5115] = 0.0f; 
mA[5116] =  v_v02_glyc_bw ; 
mA[5117] = 0.0f; 
mA[5118] = 0.0f; 
mA[5119] =  v_v16_ppp_fw ; 
mA[5120] = 0.0f; 
mA[5121] = 0.0f; 
mA[5122] = 0.0f; 
mA[5123] = 0.0f; 
mA[5124] = 0.0f; 
mA[5125] = 0.0f; 
mA[5126] = 0.0f; 
mA[5127] = 0.0f; 
mA[5128] = 0.0f; 
mA[5129] = 0.0f; 
mA[5130] = 0.0f; 
mA[5131] = 0.0f; 
mA[5132] = 0.0f; 
mA[5133] = 0.0f; 
mA[5134] = 0.0f; 
mA[5135] = 0.0f; 
mA[5136] = 0.0f; 
mA[5137] = 0.0f; 
mA[5138] = 0.0f; 
mA[5139] = 0.0f; 
mA[5140] = 0.0f; 
mA[5141] = 0.0f; 
mA[5142] = 0.0f; 
mA[5143] = 0.0f; 
mA[5144] = 0.0f; 
mA[5145] = 0.0f; 
mA[5146] = 0.0f; 
mA[5147] = 0.0f; 
mA[5148] = 0.0f; 
mA[5149] = 0.0f; 
mA[5150] = 0.0f; 
mA[5151] = 0.0f; 
mA[5152] = 0.0f; 
mA[5153] = 0.0f; 
mA[5154] = 0.0f; 
mA[5155] = 0.0f; 
mA[5156] = 0.0f; 
mA[5157] = 0.0f; 
mA[5158] = 0.0f; 
mA[5159] = 0.0f; 
mA[5160] = 0.0f; 
mA[5161] = 0.0f; 
mA[5162] = 0.0f; 
mA[5163] = 0.0f; 
mA[5164] = 0.0f; 
mA[5165] = 0.0f; 
mA[5166] = 0.0f; 
mA[5167] = 0.0f; 
mA[5168] = 0.0f; 
mA[5169] = 0.0f; 
mA[5170] = 0.0f; 
mA[5171] = 0.0f; 
mA[5172] = 0.0f; 
mA[5173] = 0.0f; 
mA[5174] = 0.0f; 
mA[5175] = 0.0f; 
mA[5176] = 0.0f; 
mA[5177] = 0.0f; 
mA[5178] = 0.0f; 
mA[5179] = 0.0f; 
mA[5180] = 0.0f; 
mA[5181] = 0.0f; 
mA[5182] = 0.0f; 
mA[5183] = 0.0f; 
mA[5184] = 0.0f; 
mA[5185] = 0.0f; 
mA[5186] = 0.0f; 
mA[5187] = 0.0f; 
mA[5188] = 0.0f; 
mA[5189] = 0.0f; 
mA[5190] = 0.0f; 
mA[5191] = 0.0f; 
mA[5192] = 0.0f; 
mA[5193] = 0.0f; 
mA[5194] = 0.0f; 
mA[5195] = 0.0f; 
mA[5196] = 0.0f; 
mA[5197] = 0.0f; 
mA[5198] = 0.0f; 
mA[5199] = 0.0f; 
mA[5200] = 0.0f; 
mA[5201] = 0.0f; 
mA[5202] = 0.0f; 
mA[5203] = 0.0f; 
mA[5204] = 0.0f; 
mA[5205] = 0.0f; 
mA[5206] = 0.0f; 
mA[5207] = 0.0f; 
mA[5208] = 0.0f; 
mA[5209] = 0.0f; 
mA[5210] = 0.0f; 
mA[5211] = 0.0f; 
mA[5212] = 0.0f; 
mA[5213] = 0.0f; 
mA[5214] = 0.0f; 
mA[5215] = 0.0f; 
mA[5216] = 0.0f; 
mA[5217] = 0.0f; 
mA[5218] = 0.0f; 
mA[5219] = 0.0f; 
mA[5220] = 0.0f; 
mA[5221] = 0.0f; 
mA[5222] = 0.0f; 
mA[5223] = 0.0f; 
mA[5224] = 0.0f; 
mA[5225] = 0.0f; 
mA[5226] = 0.0f; 
mA[5227] = 0.0f; 
mA[5228] = 0.0f; 
mA[5229] = 0.0f; 
mA[5230] = 0.0f; 
mA[5231] = 0.0f; 
mA[5232] = 0.0f; 
mA[5233] = 0.0f; 
mA[5234] = 0.0f; 
mA[5235] = 0.0f; 
mA[5236] = 0.0f; 
mA[5237] = 0.0f; 
mA[5238] = 0.0f; 
mA[5239] = 0.0f; 
mA[5240] = 0.0f; 
mA[5241] = 0.0f; 
mA[5242] = 0.0f; 
mA[5243] = 0.0f; 
mA[5244] =  v_v14_ppp_fw ; 
mA[5245] = 0.0f; 
mA[5246] = 0.0f; 
mA[5247] = 0.0f; 
mA[5248] = 0.0f; 
mA[5249] = 0.0f; 
mA[5250] = ( (  -1.0f  * v_v16_ppp_bw   )  +(  -1.0f  * v_v14_ppp_bw   )  +(  -1.0f  * v_v02_glyc_fw   )   ) ; 
mA[5251] = 0.0f; 
mA[5252] = 0.0f; 
mA[5253] = 0.0f; 
mA[5254] = 0.0f; 
mA[5255] = 0.0f; 
mA[5256] =  v_v03_glyc_fw ; 
mA[5257] = 0.0f; 
mA[5258] = 0.0f; 
mA[5259] = 0.0f; 
mA[5260] = 0.0f; 
mA[5261] = 0.0f; 
mA[5262] = 0.0f; 
mA[5263] = 0.0f; 
mA[5264] = 0.0f; 
mA[5265] = 0.0f; 
mA[5266] =  v_v02_glyc_bw ; 
mA[5267] = 0.0f; 
mA[5268] = 0.0f; 
mA[5269] =  v_v16_ppp_fw ; 
mA[5270] = 0.0f; 
mA[5271] = 0.0f; 
mA[5272] = 0.0f; 
mA[5273] = 0.0f; 
mA[5274] = 0.0f; 
mA[5275] = 0.0f; 
mA[5276] = 0.0f; 
mA[5277] = 0.0f; 
mA[5278] = 0.0f; 
mA[5279] = 0.0f; 
mA[5280] = 0.0f; 
mA[5281] = 0.0f; 
mA[5282] = 0.0f; 
mA[5283] = 0.0f; 
mA[5284] = 0.0f; 
mA[5285] = 0.0f; 
mA[5286] = 0.0f; 
mA[5287] = 0.0f; 
mA[5288] = 0.0f; 
mA[5289] = 0.0f; 
mA[5290] = 0.0f; 
mA[5291] = 0.0f; 
mA[5292] = 0.0f; 
mA[5293] = 0.0f; 
mA[5294] = 0.0f; 
mA[5295] = 0.0f; 
mA[5296] = 0.0f; 
mA[5297] = 0.0f; 
mA[5298] = 0.0f; 
mA[5299] = 0.0f; 
mA[5300] = 0.0f; 
mA[5301] = 0.0f; 
mA[5302] = 0.0f; 
mA[5303] = 0.0f; 
mA[5304] = 0.0f; 
mA[5305] = 0.0f; 
mA[5306] = 0.0f; 
mA[5307] = 0.0f; 
mA[5308] = 0.0f; 
mA[5309] = 0.0f; 
mA[5310] = 0.0f; 
mA[5311] = 0.0f; 
mA[5312] = 0.0f; 
mA[5313] = 0.0f; 
mA[5314] = 0.0f; 
mA[5315] = 0.0f; 
mA[5316] = 0.0f; 
mA[5317] = 0.0f; 
mA[5318] = 0.0f; 
mA[5319] = 0.0f; 
mA[5320] = 0.0f; 
mA[5321] = 0.0f; 
mA[5322] = 0.0f; 
mA[5323] = 0.0f; 
mA[5324] = 0.0f; 
mA[5325] = 0.0f; 
mA[5326] = 0.0f; 
mA[5327] = 0.0f; 
mA[5328] = 0.0f; 
mA[5329] = 0.0f; 
mA[5330] = 0.0f; 
mA[5331] = 0.0f; 
mA[5332] = 0.0f; 
mA[5333] = 0.0f; 
mA[5334] = 0.0f; 
mA[5335] = 0.0f; 
mA[5336] = 0.0f; 
mA[5337] = 0.0f; 
mA[5338] = 0.0f; 
mA[5339] = 0.0f; 
mA[5340] = 0.0f; 
mA[5341] = 0.0f; 
mA[5342] = 0.0f; 
mA[5343] = 0.0f; 
mA[5344] = 0.0f; 
mA[5345] = 0.0f; 
mA[5346] = 0.0f; 
mA[5347] = 0.0f; 
mA[5348] = 0.0f; 
mA[5349] = 0.0f; 
mA[5350] = 0.0f; 
mA[5351] = 0.0f; 
mA[5352] = 0.0f; 
mA[5353] = 0.0f; 
mA[5354] = 0.0f; 
mA[5355] = 0.0f; 
mA[5356] = 0.0f; 
mA[5357] = 0.0f; 
mA[5358] = 0.0f; 
mA[5359] = 0.0f; 
mA[5360] = 0.0f; 
mA[5361] = 0.0f; 
mA[5362] = 0.0f; 
mA[5363] = 0.0f; 
mA[5364] = 0.0f; 
mA[5365] = 0.0f; 
mA[5366] = 0.0f; 
mA[5367] = 0.0f; 
mA[5368] = 0.0f; 
mA[5369] = 0.0f; 
mA[5370] = 0.0f; 
mA[5371] = 0.0f; 
mA[5372] = 0.0f; 
mA[5373] = 0.0f; 
mA[5374] = 0.0f; 
mA[5375] = 0.0f; 
mA[5376] = 0.0f; 
mA[5377] = 0.0f; 
mA[5378] = 0.0f; 
mA[5379] = 0.0f; 
mA[5380] = 0.0f; 
mA[5381] = 0.0f; 
mA[5382] = 0.0f; 
mA[5383] = 0.0f; 
mA[5384] = 0.0f; 
mA[5385] = 0.0f; 
mA[5386] = 0.0f; 
mA[5387] = 0.0f; 
mA[5388] = 0.0f; 
mA[5389] =  v_v04_glyc_fw ; 
mA[5390] = 0.0f; 
mA[5391] = 0.0f; 
mA[5392] = 0.0f; 
mA[5393] = 0.0f; 
mA[5394] = 0.0f; 
mA[5395] = 0.0f; 
mA[5396] = 0.0f; 
mA[5397] = 0.0f; 
mA[5398] = 0.0f; 
mA[5399] = 0.0f; 
mA[5400] = ( (  -1.0f  * v_v04_glyc_bw   )  +(  -1.0f  * v_v03_glyc_fw   )   ) ; 
mA[5401] = 0.0f; 
mA[5402] = 0.0f; 
mA[5403] = 0.0f; 
mA[5404] = 0.0f; 
mA[5405] = 0.0f; 
mA[5406] = 0.0f; 
mA[5407] = 0.0f; 
mA[5408] = 0.0f; 
mA[5409] = 0.0f; 
mA[5410] = 0.0f; 
mA[5411] = 0.0f; 
mA[5412] = 0.0f; 
mA[5413] = 0.0f; 
mA[5414] = 0.0f; 
mA[5415] = 0.0f; 
mA[5416] = 0.0f; 
mA[5417] = 0.0f; 
mA[5418] = 0.0f; 
mA[5419] = 0.0f; 
mA[5420] = 0.0f; 
mA[5421] = 0.0f; 
mA[5422] = 0.0f; 
mA[5423] = 0.0f; 
mA[5424] = 0.0f; 
mA[5425] = 0.0f; 
mA[5426] = 0.0f; 
mA[5427] = 0.0f; 
mA[5428] = 0.0f; 
mA[5429] = 0.0f; 
mA[5430] = 0.0f; 
mA[5431] = 0.0f; 
mA[5432] = 0.0f; 
mA[5433] = 0.0f; 
mA[5434] = 0.0f; 
mA[5435] = 0.0f; 
mA[5436] = 0.0f; 
mA[5437] = 0.0f; 
mA[5438] = 0.0f; 
mA[5439] = 0.0f; 
mA[5440] = 0.0f; 
mA[5441] = 0.0f; 
mA[5442] = 0.0f; 
mA[5443] = 0.0f; 
mA[5444] = 0.0f; 
mA[5445] = 0.0f; 
mA[5446] = 0.0f; 
mA[5447] = 0.0f; 
mA[5448] = 0.0f; 
mA[5449] = 0.0f; 
mA[5450] = 0.0f; 
mA[5451] = 0.0f; 
mA[5452] = 0.0f; 
mA[5453] = 0.0f; 
mA[5454] = 0.0f; 
mA[5455] = 0.0f; 
mA[5456] = 0.0f; 
mA[5457] = 0.0f; 
mA[5458] = 0.0f; 
mA[5459] = 0.0f; 
mA[5460] = 0.0f; 
mA[5461] = 0.0f; 
mA[5462] = 0.0f; 
mA[5463] = 0.0f; 
mA[5464] = 0.0f; 
mA[5465] = 0.0f; 
mA[5466] = 0.0f; 
mA[5467] = 0.0f; 
mA[5468] = 0.0f; 
mA[5469] = 0.0f; 
mA[5470] = 0.0f; 
mA[5471] = 0.0f; 
mA[5472] = 0.0f; 
mA[5473] = 0.0f; 
mA[5474] = 0.0f; 
mA[5475] = 0.0f; 
mA[5476] = 0.0f; 
mA[5477] = 0.0f; 
mA[5478] = 0.0f; 
mA[5479] = 0.0f; 
mA[5480] = 0.0f; 
mA[5481] = 0.0f; 
mA[5482] = 0.0f; 
mA[5483] = 0.0f; 
mA[5484] = 0.0f; 
mA[5485] = 0.0f; 
mA[5486] = 0.0f; 
mA[5487] = 0.0f; 
mA[5488] = 0.0f; 
mA[5489] = 0.0f; 
mA[5490] = 0.0f; 
mA[5491] = 0.0f; 
mA[5492] = 0.0f; 
mA[5493] = 0.0f; 
mA[5494] = 0.0f; 
mA[5495] = 0.0f; 
mA[5496] = 0.0f; 
mA[5497] = 0.0f; 
mA[5498] = 0.0f; 
mA[5499] = 0.0f; 
mA[5500] = 0.0f; 
mA[5501] = 0.0f; 
mA[5502] = 0.0f; 
mA[5503] = 0.0f; 
mA[5504] = 0.0f; 
mA[5505] = 0.0f; 
mA[5506] = 0.0f; 
mA[5507] = 0.0f; 
mA[5508] = 0.0f; 
mA[5509] = 0.0f; 
mA[5510] = 0.0f; 
mA[5511] = 0.0f; 
mA[5512] = 0.0f; 
mA[5513] = 0.0f; 
mA[5514] = 0.0f; 
mA[5515] = 0.0f; 
mA[5516] = 0.0f; 
mA[5517] = 0.0f; 
mA[5518] = 0.0f; 
mA[5519] = 0.0f; 
mA[5520] = 0.0f; 
mA[5521] = 0.0f; 
mA[5522] = 0.0f; 
mA[5523] = 0.0f; 
mA[5524] = 0.0f; 
mA[5525] = 0.0f; 
mA[5526] = 0.0f; 
mA[5527] = 0.0f; 
mA[5528] = 0.0f; 
mA[5529] = 0.0f; 
mA[5530] = 0.0f; 
mA[5531] = 0.0f; 
mA[5532] = 0.0f; 
mA[5533] = 0.0f; 
mA[5534] = 0.0f; 
mA[5535] = 0.0f; 
mA[5536] = 0.0f; 
mA[5537] =  v_v04_glyc_fw ; 
mA[5538] = 0.0f; 
mA[5539] = 0.0f; 
mA[5540] = 0.0f; 
mA[5541] = 0.0f; 
mA[5542] = 0.0f; 
mA[5543] = 0.0f; 
mA[5544] = 0.0f; 
mA[5545] = 0.0f; 
mA[5546] = 0.0f; 
mA[5547] = 0.0f; 
mA[5548] = 0.0f; 
mA[5549] = 0.0f; 
mA[5550] = ( (  -1.0f  * v_v03_glyc_fw   )  +(  -1.0f  * v_v04_glyc_bw   )   ) ; 
mA[5551] = 0.0f; 
mA[5552] = 0.0f; 
mA[5553] = 0.0f; 
mA[5554] = 0.0f; 
mA[5555] = 0.0f; 
mA[5556] = 0.0f; 
mA[5557] = 0.0f; 
mA[5558] = 0.0f; 
mA[5559] = 0.0f; 
mA[5560] = 0.0f; 
mA[5561] = 0.0f; 
mA[5562] = 0.0f; 
mA[5563] = 0.0f; 
mA[5564] = 0.0f; 
mA[5565] = 0.0f; 
mA[5566] = 0.0f; 
mA[5567] = 0.0f; 
mA[5568] = 0.0f; 
mA[5569] = 0.0f; 
mA[5570] = 0.0f; 
mA[5571] = 0.0f; 
mA[5572] = 0.0f; 
mA[5573] = 0.0f; 
mA[5574] = 0.0f; 
mA[5575] = 0.0f; 
mA[5576] = 0.0f; 
mA[5577] = 0.0f; 
mA[5578] = 0.0f; 
mA[5579] = 0.0f; 
mA[5580] = 0.0f; 
mA[5581] = 0.0f; 
mA[5582] = 0.0f; 
mA[5583] = 0.0f; 
mA[5584] = 0.0f; 
mA[5585] = 0.0f; 
mA[5586] = 0.0f; 
mA[5587] = 0.0f; 
mA[5588] = 0.0f; 
mA[5589] = 0.0f; 
mA[5590] = 0.0f; 
mA[5591] = 0.0f; 
mA[5592] = 0.0f; 
mA[5593] = 0.0f; 
mA[5594] = 0.0f; 
mA[5595] = 0.0f; 
mA[5596] = 0.0f; 
mA[5597] = 0.0f; 
mA[5598] = 0.0f; 
mA[5599] = 0.0f; 
mA[5600] = 0.0f; 
mA[5601] = 0.0f; 
mA[5602] = 0.0f; 
mA[5603] = 0.0f; 
mA[5604] = 0.0f; 
mA[5605] = 0.0f; 
mA[5606] = 0.0f; 
mA[5607] = 0.0f; 
mA[5608] = 0.0f; 
mA[5609] = 0.0f; 
mA[5610] = 0.0f; 
mA[5611] = 0.0f; 
mA[5612] = 0.0f; 
mA[5613] = 0.0f; 
mA[5614] = 0.0f; 
mA[5615] = 0.0f; 
mA[5616] = 0.0f; 
mA[5617] = 0.0f; 
mA[5618] = 0.0f; 
mA[5619] = 0.0f; 
mA[5620] = 0.0f; 
mA[5621] = 0.0f; 
mA[5622] = 0.0f; 
mA[5623] = 0.0f; 
mA[5624] = 0.0f; 
mA[5625] = 0.0f; 
mA[5626] = 0.0f; 
mA[5627] = 0.0f; 
mA[5628] = 0.0f; 
mA[5629] = 0.0f; 
mA[5630] = 0.0f; 
mA[5631] = 0.0f; 
mA[5632] = 0.0f; 
mA[5633] = 0.0f; 
mA[5634] = 0.0f; 
mA[5635] = 0.0f; 
mA[5636] = 0.0f; 
mA[5637] = 0.0f; 
mA[5638] = 0.0f; 
mA[5639] = 0.0f; 
mA[5640] = 0.0f; 
mA[5641] = 0.0f; 
mA[5642] = 0.0f; 
mA[5643] = 0.0f; 
mA[5644] = 0.0f; 
mA[5645] = 0.0f; 
mA[5646] = 0.0f; 
mA[5647] = 0.0f; 
mA[5648] = 0.0f; 
mA[5649] = 0.0f; 
mA[5650] = 0.0f; 
mA[5651] = 0.0f; 
mA[5652] = 0.0f; 
mA[5653] = 0.0f; 
mA[5654] = 0.0f; 
mA[5655] = 0.0f; 
mA[5656] = 0.0f; 
mA[5657] = 0.0f; 
mA[5658] = 0.0f; 
mA[5659] = 0.0f; 
mA[5660] = 0.0f; 
mA[5661] = 0.0f; 
mA[5662] = 0.0f; 
mA[5663] = 0.0f; 
mA[5664] = 0.0f; 
mA[5665] = 0.0f; 
mA[5666] = 0.0f; 
mA[5667] = 0.0f; 
mA[5668] = 0.0f; 
mA[5669] = 0.0f; 
mA[5670] = 0.0f; 
mA[5671] = 0.0f; 
mA[5672] = 0.0f; 
mA[5673] = 0.0f; 
mA[5674] = 0.0f; 
mA[5675] = 0.0f; 
mA[5676] = 0.0f; 
mA[5677] = 0.0f; 
mA[5678] = 0.0f; 
mA[5679] = 0.0f; 
mA[5680] = 0.0f; 
mA[5681] = 0.0f; 
mA[5682] = 0.0f; 
mA[5683] = 0.0f; 
mA[5684] = 0.0f; 
mA[5685] =  v_v04_glyc_fw ; 
mA[5686] = 0.0f; 
mA[5687] = 0.0f; 
mA[5688] = 0.0f; 
mA[5689] = 0.0f; 
mA[5690] = 0.0f; 
mA[5691] = 0.0f; 
mA[5692] = 0.0f; 
mA[5693] = 0.0f; 
mA[5694] = 0.0f; 
mA[5695] = 0.0f; 
mA[5696] = 0.0f; 
mA[5697] = 0.0f; 
mA[5698] = 0.0f; 
mA[5699] = 0.0f; 
mA[5700] = ( (  -1.0f  * v_v04_glyc_bw   )  +(  -1.0f  * v_v03_glyc_fw   )   ) ; 
mA[5701] = 0.0f; 
mA[5702] = 0.0f; 
mA[5703] = 0.0f; 
mA[5704] = 0.0f; 
mA[5705] = 0.0f; 
mA[5706] = 0.0f; 
mA[5707] = 0.0f; 
mA[5708] = 0.0f; 
mA[5709] = 0.0f; 
mA[5710] = 0.0f; 
mA[5711] = 0.0f; 
mA[5712] = 0.0f; 
mA[5713] = 0.0f; 
mA[5714] = 0.0f; 
mA[5715] = 0.0f; 
mA[5716] = 0.0f; 
mA[5717] = 0.0f; 
mA[5718] = 0.0f; 
mA[5719] = 0.0f; 
mA[5720] = 0.0f; 
mA[5721] = 0.0f; 
mA[5722] = 0.0f; 
mA[5723] = 0.0f; 
mA[5724] = 0.0f; 
mA[5725] = 0.0f; 
mA[5726] = 0.0f; 
mA[5727] = 0.0f; 
mA[5728] = 0.0f; 
mA[5729] = 0.0f; 
mA[5730] = 0.0f; 
mA[5731] = 0.0f; 
mA[5732] = 0.0f; 
mA[5733] = 0.0f; 
mA[5734] = 0.0f; 
mA[5735] = 0.0f; 
mA[5736] = 0.0f; 
mA[5737] = 0.0f; 
mA[5738] = 0.0f; 
mA[5739] = 0.0f; 
mA[5740] = 0.0f; 
mA[5741] = 0.0f; 
mA[5742] = 0.0f; 
mA[5743] = 0.0f; 
mA[5744] = 0.0f; 
mA[5745] = 0.0f; 
mA[5746] = 0.0f; 
mA[5747] = 0.0f; 
mA[5748] = 0.0f; 
mA[5749] = 0.0f; 
mA[5750] = 0.0f; 
mA[5751] = 0.0f; 
mA[5752] = 0.0f; 
mA[5753] = 0.0f; 
mA[5754] = 0.0f; 
mA[5755] = 0.0f; 
mA[5756] = 0.0f; 
mA[5757] = 0.0f; 
mA[5758] = 0.0f; 
mA[5759] = 0.0f; 
mA[5760] = 0.0f; 
mA[5761] = 0.0f; 
mA[5762] = 0.0f; 
mA[5763] = 0.0f; 
mA[5764] = 0.0f; 
mA[5765] = 0.0f; 
mA[5766] = 0.0f; 
mA[5767] = 0.0f; 
mA[5768] = 0.0f; 
mA[5769] = 0.0f; 
mA[5770] = 0.0f; 
mA[5771] = 0.0f; 
mA[5772] = 0.0f; 
mA[5773] = 0.0f; 
mA[5774] = 0.0f; 
mA[5775] = 0.0f; 
mA[5776] = 0.0f; 
mA[5777] = 0.0f; 
mA[5778] = 0.0f; 
mA[5779] = 0.0f; 
mA[5780] = 0.0f; 
mA[5781] = 0.0f; 
mA[5782] = 0.0f; 
mA[5783] = 0.0f; 
mA[5784] = 0.0f; 
mA[5785] = 0.0f; 
mA[5786] = 0.0f; 
mA[5787] = 0.0f; 
mA[5788] = 0.0f; 
mA[5789] = 0.0f; 
mA[5790] = 0.0f; 
mA[5791] = 0.0f; 
mA[5792] = 0.0f; 
mA[5793] = 0.0f; 
mA[5794] = 0.0f; 
mA[5795] = 0.0f; 
mA[5796] = 0.0f; 
mA[5797] = 0.0f; 
mA[5798] = 0.0f; 
mA[5799] = 0.0f; 
mA[5800] = 0.0f; 
mA[5801] = 0.0f; 
mA[5802] = 0.0f; 
mA[5803] = 0.0f; 
mA[5804] = 0.0f; 
mA[5805] = 0.0f; 
mA[5806] = 0.0f; 
mA[5807] = 0.0f; 
mA[5808] = 0.0f; 
mA[5809] = 0.0f; 
mA[5810] = 0.0f; 
mA[5811] = 0.0f; 
mA[5812] = 0.0f; 
mA[5813] = 0.0f; 
mA[5814] = 0.0f; 
mA[5815] = 0.0f; 
mA[5816] = 0.0f; 
mA[5817] = 0.0f; 
mA[5818] = 0.0f; 
mA[5819] = 0.0f; 
mA[5820] = 0.0f; 
mA[5821] = 0.0f; 
mA[5822] = 0.0f; 
mA[5823] = 0.0f; 
mA[5824] = 0.0f; 
mA[5825] = 0.0f; 
mA[5826] = 0.0f; 
mA[5827] = 0.0f; 
mA[5828] = 0.0f; 
mA[5829] = 0.0f; 
mA[5830] = 0.0f; 
mA[5831] = 0.0f; 
mA[5832] = 0.0f; 
mA[5833] = 0.0f; 
mA[5834] = 0.0f; 
mA[5835] = 0.0f; 
mA[5836] = 0.0f; 
mA[5837] = 0.0f; 
mA[5838] = 0.0f; 
mA[5839] = 0.0f; 
mA[5840] = 0.0f; 
mA[5841] = 0.0f; 
mA[5842] = 0.0f; 
mA[5843] = 0.0f; 
mA[5844] = 0.0f; 
mA[5845] = 0.0f; 
mA[5846] = 0.0f; 
mA[5847] = 0.0f; 
mA[5848] = 0.0f; 
mA[5849] = 0.0f; 
mA[5850] = ( (  -1.0f  * v_v03_glyc_fw   )  +(  -1.0f  * v_v04_glyc_bw   )   ) ; 
mA[5851] = 0.0f; 
mA[5852] = 0.0f; 
mA[5853] = 0.0f; 
mA[5854] = 0.0f; 
mA[5855] = 0.0f; 
mA[5856] = 0.0f; 
mA[5857] = 0.0f; 
mA[5858] = 0.0f; 
mA[5859] = 0.0f; 
mA[5860] = 0.0f; 
mA[5861] = 0.0f; 
mA[5862] = 0.0f; 
mA[5863] =  v_v04_glyc_fw ; 
mA[5864] = 0.0f; 
mA[5865] = 0.0f; 
mA[5866] = 0.0f; 
mA[5867] = 0.0f; 
mA[5868] = 0.0f; 
mA[5869] = 0.0f; 
mA[5870] = 0.0f; 
mA[5871] = 0.0f; 
mA[5872] = 0.0f; 
mA[5873] = 0.0f; 
mA[5874] = 0.0f; 
mA[5875] = 0.0f; 
mA[5876] = 0.0f; 
mA[5877] = 0.0f; 
mA[5878] = 0.0f; 
mA[5879] = 0.0f; 
mA[5880] = 0.0f; 
mA[5881] = 0.0f; 
mA[5882] = 0.0f; 
mA[5883] = 0.0f; 
mA[5884] = 0.0f; 
mA[5885] = 0.0f; 
mA[5886] = 0.0f; 
mA[5887] = 0.0f; 
mA[5888] = 0.0f; 
mA[5889] = 0.0f; 
mA[5890] = 0.0f; 
mA[5891] = 0.0f; 
mA[5892] = 0.0f; 
mA[5893] = 0.0f; 
mA[5894] = 0.0f; 
mA[5895] = 0.0f; 
mA[5896] = 0.0f; 
mA[5897] = 0.0f; 
mA[5898] = 0.0f; 
mA[5899] = 0.0f; 
mA[5900] = 0.0f; 
mA[5901] = 0.0f; 
mA[5902] = 0.0f; 
mA[5903] = 0.0f; 
mA[5904] = 0.0f; 
mA[5905] = 0.0f; 
mA[5906] = 0.0f; 
mA[5907] = 0.0f; 
mA[5908] = 0.0f; 
mA[5909] = 0.0f; 
mA[5910] = 0.0f; 
mA[5911] = 0.0f; 
mA[5912] = 0.0f; 
mA[5913] = 0.0f; 
mA[5914] = 0.0f; 
mA[5915] = 0.0f; 
mA[5916] = 0.0f; 
mA[5917] = 0.0f; 
mA[5918] = 0.0f; 
mA[5919] = 0.0f; 
mA[5920] = 0.0f; 
mA[5921] = 0.0f; 
mA[5922] = 0.0f; 
mA[5923] = 0.0f; 
mA[5924] = 0.0f; 
mA[5925] = 0.0f; 
mA[5926] = 0.0f; 
mA[5927] = 0.0f; 
mA[5928] = 0.0f; 
mA[5929] = 0.0f; 
mA[5930] = 0.0f; 
mA[5931] = 0.0f; 
mA[5932] = 0.0f; 
mA[5933] = 0.0f; 
mA[5934] = 0.0f; 
mA[5935] = 0.0f; 
mA[5936] = 0.0f; 
mA[5937] = 0.0f; 
mA[5938] = 0.0f; 
mA[5939] = 0.0f; 
mA[5940] = 0.0f; 
mA[5941] = 0.0f; 
mA[5942] = 0.0f; 
mA[5943] = 0.0f; 
mA[5944] = 0.0f; 
mA[5945] = 0.0f; 
mA[5946] = 0.0f; 
mA[5947] = 0.0f; 
mA[5948] = 0.0f; 
mA[5949] = 0.0f; 
mA[5950] = 0.0f; 
mA[5951] = 0.0f; 
mA[5952] = 0.0f; 
mA[5953] = 0.0f; 
mA[5954] = 0.0f; 
mA[5955] = 0.0f; 
mA[5956] = 0.0f; 
mA[5957] = 0.0f; 
mA[5958] = 0.0f; 
mA[5959] = 0.0f; 
mA[5960] = 0.0f; 
mA[5961] = 0.0f; 
mA[5962] = 0.0f; 
mA[5963] = 0.0f; 
mA[5964] = 0.0f; 
mA[5965] = 0.0f; 
mA[5966] = 0.0f; 
mA[5967] = 0.0f; 
mA[5968] = 0.0f; 
mA[5969] = 0.0f; 
mA[5970] = 0.0f; 
mA[5971] = 0.0f; 
mA[5972] = 0.0f; 
mA[5973] = 0.0f; 
mA[5974] = 0.0f; 
mA[5975] = 0.0f; 
mA[5976] = 0.0f; 
mA[5977] = 0.0f; 
mA[5978] = 0.0f; 
mA[5979] = 0.0f; 
mA[5980] = 0.0f; 
mA[5981] = 0.0f; 
mA[5982] = 0.0f; 
mA[5983] = 0.0f; 
mA[5984] = 0.0f; 
mA[5985] = 0.0f; 
mA[5986] = 0.0f; 
mA[5987] = 0.0f; 
mA[5988] = 0.0f; 
mA[5989] = 0.0f; 
mA[5990] = 0.0f; 
mA[5991] = 0.0f; 
mA[5992] = 0.0f; 
mA[5993] = 0.0f; 
mA[5994] = 0.0f; 
mA[5995] = 0.0f; 
mA[5996] = 0.0f; 
mA[5997] = 0.0f; 
mA[5998] = 0.0f; 
mA[5999] = 0.0f; 
mA[6000] = ( (  -1.0f  * v_v03_glyc_fw   )  +(  -1.0f  * v_v04_glyc_bw   )   ) ; 
mA[6001] = 0.0f; 
mA[6002] = 0.0f; 
mA[6003] = 0.0f; 
mA[6004] = 0.0f; 
mA[6005] = 0.0f; 
mA[6006] = 0.0f; 
mA[6007] = 0.0f; 
mA[6008] = 0.0f; 
mA[6009] = 0.0f; 
mA[6010] = 0.0f; 
mA[6011] = 0.0f; 
mA[6012] = 0.0f; 
mA[6013] =  v_v04_glyc_fw ; 
mA[6014] = 0.0f; 
mA[6015] = 0.0f; 
mA[6016] = 0.0f; 
mA[6017] = 0.0f; 
mA[6018] = 0.0f; 
mA[6019] = 0.0f; 
mA[6020] = 0.0f; 
mA[6021] = 0.0f; 
mA[6022] = 0.0f; 
mA[6023] = 0.0f; 
mA[6024] = 0.0f; 
mA[6025] = 0.0f; 
mA[6026] = 0.0f; 
mA[6027] = 0.0f; 
mA[6028] = 0.0f; 
mA[6029] = 0.0f; 
mA[6030] = 0.0f; 
mA[6031] = 0.0f; 
mA[6032] = 0.0f; 
mA[6033] = 0.0f; 
mA[6034] = 0.0f; 
mA[6035] = 0.0f; 
mA[6036] = 0.0f; 
mA[6037] = 0.0f; 
mA[6038] = 0.0f; 
mA[6039] = 0.0f; 
mA[6040] = 0.0f; 
mA[6041] = 0.0f; 
mA[6042] = 0.0f; 
mA[6043] = 0.0f; 
mA[6044] = 0.0f; 
mA[6045] = 0.0f; 
mA[6046] = 0.0f; 
mA[6047] = 0.0f; 
mA[6048] = 0.0f; 
mA[6049] = 0.0f; 
mA[6050] = 0.0f; 
mA[6051] = 0.0f; 
mA[6052] = 0.0f; 
mA[6053] = 0.0f; 
mA[6054] = 0.0f; 
mA[6055] = 0.0f; 
mA[6056] = 0.0f; 
mA[6057] = 0.0f; 
mA[6058] = 0.0f; 
mA[6059] = 0.0f; 
mA[6060] = 0.0f; 
mA[6061] = 0.0f; 
mA[6062] = 0.0f; 
mA[6063] = 0.0f; 
mA[6064] = 0.0f; 
mA[6065] = 0.0f; 
mA[6066] = 0.0f; 
mA[6067] = 0.0f; 
mA[6068] = 0.0f; 
mA[6069] = 0.0f; 
mA[6070] = 0.0f; 
mA[6071] = 0.0f; 
mA[6072] = 0.0f; 
mA[6073] = 0.0f; 
mA[6074] = 0.0f; 
mA[6075] = 0.0f; 
mA[6076] = 0.0f; 
mA[6077] = 0.0f; 
mA[6078] = 0.0f; 
mA[6079] = 0.0f; 
mA[6080] = 0.0f; 
mA[6081] = 0.0f; 
mA[6082] = 0.0f; 
mA[6083] = 0.0f; 
mA[6084] = 0.0f; 
mA[6085] = 0.0f; 
mA[6086] = 0.0f; 
mA[6087] = 0.0f; 
mA[6088] = 0.0f; 
mA[6089] = 0.0f; 
mA[6090] = 0.0f; 
mA[6091] = 0.0f; 
mA[6092] = 0.0f; 
mA[6093] = 0.0f; 
mA[6094] = 0.0f; 
mA[6095] = 0.0f; 
mA[6096] = 0.0f; 
mA[6097] = 0.0f; 
mA[6098] = 0.0f; 
mA[6099] = 0.0f; 
mA[6100] = 0.0f; 
mA[6101] = 0.0f; 
mA[6102] = 0.0f; 
mA[6103] = 0.0f; 
mA[6104] = 0.0f; 
mA[6105] = 0.0f; 
mA[6106] = 0.0f; 
mA[6107] = 0.0f; 
mA[6108] = 0.0f; 
mA[6109] = 0.0f; 
mA[6110] = 0.0f; 
mA[6111] = 0.0f; 
mA[6112] = 0.0f; 
mA[6113] = 0.0f; 
mA[6114] = 0.0f; 
mA[6115] = 0.0f; 
mA[6116] = 0.0f; 
mA[6117] = 0.0f; 
mA[6118] = 0.0f; 
mA[6119] = 0.0f; 
mA[6120] = 0.0f; 
mA[6121] = 0.0f; 
mA[6122] = 0.0f; 
mA[6123] = 0.0f; 
mA[6124] = 0.0f; 
mA[6125] = 0.0f; 
mA[6126] = 0.0f; 
mA[6127] = 0.0f; 
mA[6128] = 0.0f; 
mA[6129] = 0.0f; 
mA[6130] = 0.0f; 
mA[6131] = 0.0f; 
mA[6132] = 0.0f; 
mA[6133] = 0.0f; 
mA[6134] = 0.0f; 
mA[6135] = 0.0f; 
mA[6136] = 0.0f; 
mA[6137] = 0.0f; 
mA[6138] = 0.0f; 
mA[6139] = 0.0f; 
mA[6140] = 0.0f; 
mA[6141] = 0.0f; 
mA[6142] = 0.0f; 
mA[6143] = 0.0f; 
mA[6144] = 0.0f; 
mA[6145] = 0.0f; 
mA[6146] = 0.0f; 
mA[6147] = 0.0f; 
mA[6148] = 0.0f; 
mA[6149] = 0.0f; 
mA[6150] = ( (  -1.0f  * v_v04_glyc_bw   )  +(  -1.0f  * v_v03_glyc_fw   )   ) ; 
mA[6151] = 0.0f; 
mA[6152] = 0.0f; 
mA[6153] = 0.0f; 
mA[6154] = 0.0f; 
mA[6155] = 0.0f; 
mA[6156] = 0.0f; 
mA[6157] = 0.0f; 
mA[6158] = 0.0f; 
mA[6159] = 0.0f; 
mA[6160] = 0.0f; 
mA[6161] = 0.0f; 
mA[6162] = 0.0f; 
mA[6163] =  v_v04_glyc_fw ; 
mA[6164] = 0.0f; 
mA[6165] = 0.0f; 
mA[6166] = 0.0f; 
mA[6167] = 0.0f; 
mA[6168] = 0.0f; 
mA[6169] = 0.0f; 
mA[6170] = 0.0f; 
mA[6171] = 0.0f; 
mA[6172] = 0.0f; 
mA[6173] = 0.0f; 
mA[6174] = 0.0f; 
mA[6175] = 0.0f; 
mA[6176] = 0.0f; 
mA[6177] = 0.0f; 
mA[6178] = 0.0f; 
mA[6179] = 0.0f; 
mA[6180] = 0.0f; 
mA[6181] = 0.0f; 
mA[6182] = 0.0f; 
mA[6183] = 0.0f; 
mA[6184] = 0.0f; 
mA[6185] = 0.0f; 
mA[6186] = 0.0f; 
mA[6187] = 0.0f; 
mA[6188] = 0.0f; 
mA[6189] = 0.0f; 
mA[6190] = 0.0f; 
mA[6191] = 0.0f; 
mA[6192] = 0.0f; 
mA[6193] = 0.0f; 
mA[6194] = 0.0f; 
mA[6195] = 0.0f; 
mA[6196] = 0.0f; 
mA[6197] = 0.0f; 
mA[6198] = 0.0f; 
mA[6199] = 0.0f; 
mA[6200] = 0.0f; 
mA[6201] = 0.0f; 
mA[6202] = 0.0f; 
mA[6203] = 0.0f; 
mA[6204] = 0.0f; 
mA[6205] = 0.0f; 
mA[6206] = 0.0f; 
mA[6207] = 0.0f; 
mA[6208] = 0.0f; 
mA[6209] = 0.0f; 
mA[6210] = 0.0f; 
mA[6211] = 0.0f; 
mA[6212] = 0.0f; 
mA[6213] = 0.0f; 
mA[6214] = 0.0f; 
mA[6215] = 0.0f; 
mA[6216] = 0.0f; 
mA[6217] = 0.0f; 
mA[6218] = 0.0f; 
mA[6219] = 0.0f; 
mA[6220] = 0.0f; 
mA[6221] = 0.0f; 
mA[6222] = 0.0f; 
mA[6223] = 0.0f; 
mA[6224] = 0.0f; 
mA[6225] = 0.0f; 
mA[6226] = 0.0f; 
mA[6227] = 0.0f; 
mA[6228] = 0.0f; 
mA[6229] = 0.0f; 
mA[6230] = 0.0f; 
mA[6231] = 0.0f; 
mA[6232] = 0.0f; 
mA[6233] = 0.0f; 
mA[6234] = 0.0f; 
mA[6235] = 0.0f; 
mA[6236] = 0.0f; 
mA[6237] = 0.0f; 
mA[6238] = 0.0f; 
mA[6239] = 0.0f; 
mA[6240] = 0.0f; 
mA[6241] = 0.0f; 
mA[6242] = 0.0f; 
mA[6243] = 0.0f; 
mA[6244] = 0.0f; 
mA[6245] = 0.0f; 
mA[6246] = 0.0f; 
mA[6247] = 0.0f; 
mA[6248] = 0.0f; 
mA[6249] = 0.0f; 
mA[6250] = 0.0f; 
mA[6251] = 0.0f; 
mA[6252] = 0.0f; 
mA[6253] = 0.0f; 
mA[6254] = 0.0f; 
mA[6255] = 0.0f; 
mA[6256] = 0.0f; 
mA[6257] = 0.0f; 
mA[6258] = 0.0f; 
mA[6259] = 0.0f; 
mA[6260] = 0.0f; 
mA[6261] = 0.0f; 
mA[6262] = 0.0f; 
mA[6263] = 0.0f; 
mA[6264] = 0.0f; 
mA[6265] = 0.0f; 
mA[6266] = 0.0f; 
mA[6267] = 0.0f; 
mA[6268] = 0.0f; 
mA[6269] = 0.0f; 
mA[6270] = 0.0f; 
mA[6271] = 0.0f; 
mA[6272] = 0.0f; 
mA[6273] = 0.0f; 
mA[6274] = 0.0f; 
mA[6275] = 0.0f; 
mA[6276] = 0.0f; 
mA[6277] = 0.0f; 
mA[6278] = 0.0f; 
mA[6279] = 0.0f; 
mA[6280] = 0.0f; 
mA[6281] = 0.0f; 
mA[6282] = 0.0f; 
mA[6283] = 0.0f; 
mA[6284] = 0.0f; 
mA[6285] = 0.0f; 
mA[6286] = 0.0f; 
mA[6287] = 0.0f; 
mA[6288] = 0.0f; 
mA[6289] = 0.0f; 
mA[6290] = 0.0f; 
mA[6291] = 0.0f; 
mA[6292] = 0.0f; 
mA[6293] = 0.0f; 
mA[6294] = 0.0f; 
mA[6295] = 0.0f; 
mA[6296] = 0.0f; 
mA[6297] = 0.0f; 
mA[6298] = 0.0f; 
mA[6299] = 0.0f; 
mA[6300] = ( (  -1.0f  * v_v27_tca_bw_a   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v26_tca_fw_b   )  +(  -1.0f  * v_v27_tca_bw_b   )  +(  -1.0f  * v_v26_tca_fw_a   )   ) ; 
mA[6301] = 0.0f; 
mA[6302] = 0.0f; 
mA[6303] = 0.0f; 
mA[6304] = 0.0f; 
mA[6305] = 0.0f; 
mA[6306] = 0.0f; 
mA[6307] = 0.0f; 
mA[6308] = 0.0f; 
mA[6309] = 0.0f; 
mA[6310] = 0.0f; 
mA[6311] = 0.0f; 
mA[6312] = 0.0f; 
mA[6313] = 0.0f; 
mA[6314] = 0.0f; 
mA[6315] = 0.0f; 
mA[6316] = 0.0f; 
mA[6317] = 0.0f; 
mA[6318] = 0.0f; 
mA[6319] = 0.0f; 
mA[6320] = 0.0f; 
mA[6321] = 0.0f; 
mA[6322] = 0.0f; 
mA[6323] = 0.0f; 
mA[6324] = 0.0f; 
mA[6325] = 0.0f; 
mA[6326] = 0.0f; 
mA[6327] = 0.0f; 
mA[6328] = 0.0f; 
mA[6329] = 0.0f; 
mA[6330] = 0.0f; 
mA[6331] = 0.0f; 
mA[6332] = 0.0f; 
mA[6333] = 0.0f; 
mA[6334] = 0.0f; 
mA[6335] = 0.0f; 
mA[6336] = 0.0f; 
mA[6337] = 0.0f; 
mA[6338] = 0.0f; 
mA[6339] = 0.0f; 
mA[6340] = 0.0f; 
mA[6341] = 0.0f; 
mA[6342] =  v_v27_tca_fw_a ; 
mA[6343] = 0.0f; 
mA[6344] = 0.0f; 
mA[6345] =  v_v27_tca_fw_b ; 
mA[6346] = 0.0f; 
mA[6347] = 0.0f; 
mA[6348] = 0.0f; 
mA[6349] = 0.0f; 
mA[6350] = 0.0f; 
mA[6351] = 0.0f; 
mA[6352] = 0.0f; 
mA[6353] = 0.0f; 
mA[6354] = 0.0f; 
mA[6355] = 0.0f; 
mA[6356] = 0.0f; 
mA[6357] = 0.0f; 
mA[6358] = 0.0f; 
mA[6359] = 0.0f; 
mA[6360] = 0.0f; 
mA[6361] = 0.0f; 
mA[6362] = 0.0f; 
mA[6363] = 0.0f; 
mA[6364] = 0.0f; 
mA[6365] = 0.0f; 
mA[6366] = 0.0f; 
mA[6367] = 0.0f; 
mA[6368] = 0.0f; 
mA[6369] = 0.0f; 
mA[6370] = 0.0f; 
mA[6371] = 0.0f; 
mA[6372] = 0.0f; 
mA[6373] = 0.0f; 
mA[6374] = 0.0f; 
mA[6375] = 0.0f; 
mA[6376] =  v_v26_tca_bw_a ; 
mA[6377] = 0.0f; 
mA[6378] = 0.0f; 
mA[6379] =  v_v26_tca_bw_b ; 
mA[6380] = 0.0f; 
mA[6381] = 0.0f; 
mA[6382] = 0.0f; 
mA[6383] = 0.0f; 
mA[6384] = 0.0f; 
mA[6385] = 0.0f; 
mA[6386] = 0.0f; 
mA[6387] = 0.0f; 
mA[6388] = 0.0f; 
mA[6389] = 0.0f; 
mA[6390] = 0.0f; 
mA[6391] = 0.0f; 
mA[6392] = 0.0f; 
mA[6393] = 0.0f; 
mA[6394] = 0.0f; 
mA[6395] = 0.0f; 
mA[6396] = 0.0f; 
mA[6397] = 0.0f; 
mA[6398] = 0.0f; 
mA[6399] = 0.0f; 
mA[6400] = 0.0f; 
mA[6401] = 0.0f; 
mA[6402] = 0.0f; 
mA[6403] = 0.0f; 
mA[6404] = 0.0f; 
mA[6405] = 0.0f; 
mA[6406] = 0.0f; 
mA[6407] = 0.0f; 
mA[6408] = 0.0f; 
mA[6409] = 0.0f; 
mA[6410] = 0.0f; 
mA[6411] = 0.0f; 
mA[6412] = 0.0f; 
mA[6413] = 0.0f; 
mA[6414] = 0.0f; 
mA[6415] = 0.0f; 
mA[6416] = 0.0f; 
mA[6417] = 0.0f; 
mA[6418] = 0.0f; 
mA[6419] = 0.0f; 
mA[6420] = 0.0f; 
mA[6421] = 0.0f; 
mA[6422] = 0.0f; 
mA[6423] = 0.0f; 
mA[6424] = 0.0f; 
mA[6425] = 0.0f; 
mA[6426] = 0.0f; 
mA[6427] = 0.0f; 
mA[6428] = 0.0f; 
mA[6429] = 0.0f; 
mA[6430] = 0.0f; 
mA[6431] = 0.0f; 
mA[6432] = 0.0f; 
mA[6433] = 0.0f; 
mA[6434] = 0.0f; 
mA[6435] = 0.0f; 
mA[6436] = 0.0f; 
mA[6437] = 0.0f; 
mA[6438] = 0.0f; 
mA[6439] = 0.0f; 
mA[6440] = 0.0f; 
mA[6441] = 0.0f; 
mA[6442] = 0.0f; 
mA[6443] = 0.0f; 
mA[6444] = 0.0f; 
mA[6445] = 0.0f; 
mA[6446] = 0.0f; 
mA[6447] = 0.0f; 
mA[6448] = 0.0f; 
mA[6449] = 0.0f; 
mA[6450] = ( (  -1.0f  * v_v27_tca_bw_b   )  +(  -1.0f  * v_v26_tca_fw_b   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v27_tca_bw_a   )  +(  -1.0f  * v_v26_tca_fw_a   )   ) ; 
mA[6451] = 0.0f; 
mA[6452] = 0.0f; 
mA[6453] = 0.0f; 
mA[6454] = 0.0f; 
mA[6455] = 0.0f; 
mA[6456] = 0.0f; 
mA[6457] = 0.0f; 
mA[6458] = 0.0f; 
mA[6459] = 0.0f; 
mA[6460] = 0.0f; 
mA[6461] = 0.0f; 
mA[6462] = 0.0f; 
mA[6463] = 0.0f; 
mA[6464] = 0.0f; 
mA[6465] = 0.0f; 
mA[6466] = 0.0f; 
mA[6467] = 0.0f; 
mA[6468] = 0.0f; 
mA[6469] = 0.0f; 
mA[6470] = 0.0f; 
mA[6471] = 0.0f; 
mA[6472] = 0.0f; 
mA[6473] = 0.0f; 
mA[6474] = 0.0f; 
mA[6475] = 0.0f; 
mA[6476] = 0.0f; 
mA[6477] = 0.0f; 
mA[6478] = 0.0f; 
mA[6479] = 0.0f; 
mA[6480] = 0.0f; 
mA[6481] = 0.0f; 
mA[6482] = 0.0f; 
mA[6483] = 0.0f; 
mA[6484] = 0.0f; 
mA[6485] = 0.0f; 
mA[6486] = 0.0f; 
mA[6487] = 0.0f; 
mA[6488] = 0.0f; 
mA[6489] = 0.0f; 
mA[6490] = 0.0f; 
mA[6491] = 0.0f; 
mA[6492] =  v_v27_tca_fw_a ; 
mA[6493] =  v_v27_tca_fw_b ; 
mA[6494] = 0.0f; 
mA[6495] = 0.0f; 
mA[6496] = 0.0f; 
mA[6497] = 0.0f; 
mA[6498] = 0.0f; 
mA[6499] = 0.0f; 
mA[6500] = 0.0f; 
mA[6501] = 0.0f; 
mA[6502] = 0.0f; 
mA[6503] = 0.0f; 
mA[6504] = 0.0f; 
mA[6505] = 0.0f; 
mA[6506] = 0.0f; 
mA[6507] = 0.0f; 
mA[6508] = 0.0f; 
mA[6509] = 0.0f; 
mA[6510] = 0.0f; 
mA[6511] = 0.0f; 
mA[6512] = 0.0f; 
mA[6513] = 0.0f; 
mA[6514] = 0.0f; 
mA[6515] = 0.0f; 
mA[6516] = 0.0f; 
mA[6517] = 0.0f; 
mA[6518] = 0.0f; 
mA[6519] = 0.0f; 
mA[6520] = 0.0f; 
mA[6521] = 0.0f; 
mA[6522] = 0.0f; 
mA[6523] = 0.0f; 
mA[6524] = 0.0f; 
mA[6525] = 0.0f; 
mA[6526] =  v_v26_tca_bw_a ; 
mA[6527] =  v_v26_tca_bw_b ; 
mA[6528] = 0.0f; 
mA[6529] = 0.0f; 
mA[6530] = 0.0f; 
mA[6531] = 0.0f; 
mA[6532] = 0.0f; 
mA[6533] = 0.0f; 
mA[6534] = 0.0f; 
mA[6535] = 0.0f; 
mA[6536] = 0.0f; 
mA[6537] = 0.0f; 
mA[6538] = 0.0f; 
mA[6539] = 0.0f; 
mA[6540] = 0.0f; 
mA[6541] = 0.0f; 
mA[6542] = 0.0f; 
mA[6543] = 0.0f; 
mA[6544] = 0.0f; 
mA[6545] = 0.0f; 
mA[6546] = 0.0f; 
mA[6547] = 0.0f; 
mA[6548] = 0.0f; 
mA[6549] = 0.0f; 
mA[6550] = 0.0f; 
mA[6551] = 0.0f; 
mA[6552] = 0.0f; 
mA[6553] = 0.0f; 
mA[6554] = 0.0f; 
mA[6555] = 0.0f; 
mA[6556] = 0.0f; 
mA[6557] = 0.0f; 
mA[6558] = 0.0f; 
mA[6559] = 0.0f; 
mA[6560] = 0.0f; 
mA[6561] = 0.0f; 
mA[6562] = 0.0f; 
mA[6563] = 0.0f; 
mA[6564] = 0.0f; 
mA[6565] = 0.0f; 
mA[6566] = 0.0f; 
mA[6567] = 0.0f; 
mA[6568] = 0.0f; 
mA[6569] = 0.0f; 
mA[6570] = 0.0f; 
mA[6571] = 0.0f; 
mA[6572] = 0.0f; 
mA[6573] = 0.0f; 
mA[6574] = 0.0f; 
mA[6575] = 0.0f; 
mA[6576] = 0.0f; 
mA[6577] = 0.0f; 
mA[6578] = 0.0f; 
mA[6579] = 0.0f; 
mA[6580] = 0.0f; 
mA[6581] = 0.0f; 
mA[6582] = 0.0f; 
mA[6583] = 0.0f; 
mA[6584] = 0.0f; 
mA[6585] = 0.0f; 
mA[6586] = 0.0f; 
mA[6587] = 0.0f; 
mA[6588] = 0.0f; 
mA[6589] = 0.0f; 
mA[6590] = 0.0f; 
mA[6591] = 0.0f; 
mA[6592] = 0.0f; 
mA[6593] = 0.0f; 
mA[6594] = 0.0f; 
mA[6595] = 0.0f; 
mA[6596] = 0.0f; 
mA[6597] = 0.0f; 
mA[6598] = 0.0f; 
mA[6599] = 0.0f; 
mA[6600] = ( (  -1.0f  * v_v26_tca_fw_b   )  +(  -1.0f  * v_v27_tca_bw_a   )  +(  -1.0f  * v_v27_tca_bw_b   )  +(  -1.0f  * v_v26_tca_fw_a   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v58_aa_fw   )   ) ; 
mA[6601] = 0.0f; 
mA[6602] = 0.0f; 
mA[6603] = 0.0f; 
mA[6604] = 0.0f; 
mA[6605] = 0.0f; 
mA[6606] = 0.0f; 
mA[6607] = 0.0f; 
mA[6608] = 0.0f; 
mA[6609] = 0.0f; 
mA[6610] = 0.0f; 
mA[6611] = 0.0f; 
mA[6612] = 0.0f; 
mA[6613] = 0.0f; 
mA[6614] = 0.0f; 
mA[6615] = 0.0f; 
mA[6616] = 0.0f; 
mA[6617] = 0.0f; 
mA[6618] = 0.0f; 
mA[6619] = 0.0f; 
mA[6620] = 0.0f; 
mA[6621] = 0.0f; 
mA[6622] = 0.0f; 
mA[6623] = 0.0f; 
mA[6624] = 0.0f; 
mA[6625] = 0.0f; 
mA[6626] = 0.0f; 
mA[6627] = 0.0f; 
mA[6628] = 0.0f; 
mA[6629] = 0.0f; 
mA[6630] = 0.0f; 
mA[6631] = 0.0f; 
mA[6632] = 0.0f; 
mA[6633] = 0.0f; 
mA[6634] = 0.0f; 
mA[6635] = 0.0f; 
mA[6636] = 0.0f; 
mA[6637] = 0.0f; 
mA[6638] = 0.0f; 
mA[6639] = 0.0f; 
mA[6640] = 0.0f; 
mA[6641] =  v_v27_tca_fw_b ; 
mA[6642] =  v_v27_tca_fw_a ; 
mA[6643] = 0.0f; 
mA[6644] = 0.0f; 
mA[6645] = 0.0f; 
mA[6646] = 0.0f; 
mA[6647] = 0.0f; 
mA[6648] = 0.0f; 
mA[6649] = 0.0f; 
mA[6650] = 0.0f; 
mA[6651] = 0.0f; 
mA[6652] = 0.0f; 
mA[6653] = 0.0f; 
mA[6654] = 0.0f; 
mA[6655] = 0.0f; 
mA[6656] = 0.0f; 
mA[6657] = 0.0f; 
mA[6658] = 0.0f; 
mA[6659] = 0.0f; 
mA[6660] = 0.0f; 
mA[6661] = 0.0f; 
mA[6662] = 0.0f; 
mA[6663] = 0.0f; 
mA[6664] = 0.0f; 
mA[6665] = 0.0f; 
mA[6666] = 0.0f; 
mA[6667] = 0.0f; 
mA[6668] = 0.0f; 
mA[6669] = 0.0f; 
mA[6670] = 0.0f; 
mA[6671] = 0.0f; 
mA[6672] = 0.0f; 
mA[6673] = 0.0f; 
mA[6674] = 0.0f; 
mA[6675] =  v_v26_tca_bw_b ; 
mA[6676] =  v_v26_tca_bw_a ; 
mA[6677] = 0.0f; 
mA[6678] = 0.0f; 
mA[6679] = 0.0f; 
mA[6680] = 0.0f; 
mA[6681] = 0.0f; 
mA[6682] = 0.0f; 
mA[6683] = 0.0f; 
mA[6684] = 0.0f; 
mA[6685] = 0.0f; 
mA[6686] = 0.0f; 
mA[6687] = 0.0f; 
mA[6688] = 0.0f; 
mA[6689] = 0.0f; 
mA[6690] = 0.0f; 
mA[6691] = 0.0f; 
mA[6692] = 0.0f; 
mA[6693] = 0.0f; 
mA[6694] = 0.0f; 
mA[6695] = 0.0f; 
mA[6696] = 0.0f; 
mA[6697] = 0.0f; 
mA[6698] = 0.0f; 
mA[6699] = 0.0f; 
mA[6700] = 0.0f; 
mA[6701] = 0.0f; 
mA[6702] = 0.0f; 
mA[6703] = 0.0f; 
mA[6704] = 0.0f; 
mA[6705] = 0.0f; 
mA[6706] = 0.0f; 
mA[6707] = 0.0f; 
mA[6708] = 0.0f; 
mA[6709] = 0.0f; 
mA[6710] = 0.0f; 
mA[6711] = 0.0f; 
mA[6712] = 0.0f; 
mA[6713] = 0.0f; 
mA[6714] = 0.0f; 
mA[6715] = 0.0f; 
mA[6716] = 0.0f; 
mA[6717] = 0.0f; 
mA[6718] = 0.0f; 
mA[6719] = 0.0f; 
mA[6720] = 0.0f; 
mA[6721] = 0.0f; 
mA[6722] = 0.0f; 
mA[6723] = 0.0f; 
mA[6724] = 0.0f; 
mA[6725] = 0.0f; 
mA[6726] = 0.0f; 
mA[6727] = 0.0f; 
mA[6728] = 0.0f; 
mA[6729] = 0.0f; 
mA[6730] = 0.0f; 
mA[6731] = 0.0f; 
mA[6732] = 0.0f; 
mA[6733] = 0.0f; 
mA[6734] = 0.0f; 
mA[6735] = 0.0f; 
mA[6736] = 0.0f; 
mA[6737] = 0.0f; 
mA[6738] = 0.0f; 
mA[6739] = 0.0f; 
mA[6740] = 0.0f; 
mA[6741] = 0.0f; 
mA[6742] = 0.0f; 
mA[6743] = 0.0f; 
mA[6744] = 0.0f; 
mA[6745] = 0.0f; 
mA[6746] = 0.0f; 
mA[6747] = 0.0f; 
mA[6748] = 0.0f; 
mA[6749] = 0.0f; 
mA[6750] = ( (  -1.0f  * v_v26_tca_fw_b   )  +(  -1.0f  * v_v26_tca_fw_a   )  +(  -1.0f  * v_v27_tca_bw_a   )  +(  -1.0f  * v_v27_tca_bw_b   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v39_aa_fw   )   ) ; 
mA[6751] = 0.0f; 
mA[6752] = 0.0f; 
mA[6753] = 0.0f; 
mA[6754] = 0.0f; 
mA[6755] = 0.0f; 
mA[6756] = 0.0f; 
mA[6757] = 0.0f; 
mA[6758] = 0.0f; 
mA[6759] = 0.0f; 
mA[6760] = 0.0f; 
mA[6761] = 0.0f; 
mA[6762] = 0.0f; 
mA[6763] = 0.0f; 
mA[6764] = 0.0f; 
mA[6765] = 0.0f; 
mA[6766] = 0.0f; 
mA[6767] = 0.0f; 
mA[6768] = 0.0f; 
mA[6769] = 0.0f; 
mA[6770] = 0.0f; 
mA[6771] = 0.0f; 
mA[6772] = 0.0f; 
mA[6773] = 0.0f; 
mA[6774] = 0.0f; 
mA[6775] = 0.0f; 
mA[6776] = 0.0f; 
mA[6777] = 0.0f; 
mA[6778] = 0.0f; 
mA[6779] = 0.0f; 
mA[6780] = 0.0f; 
mA[6781] = 0.0f; 
mA[6782] = 0.0f; 
mA[6783] = 0.0f; 
mA[6784] = 0.0f; 
mA[6785] = 0.0f; 
mA[6786] = 0.0f; 
mA[6787] = 0.0f; 
mA[6788] = 0.0f; 
mA[6789] =  v_v27_tca_fw_b ; 
mA[6790] = 0.0f; 
mA[6791] = 0.0f; 
mA[6792] =  v_v27_tca_fw_a ; 
mA[6793] = 0.0f; 
mA[6794] = 0.0f; 
mA[6795] = 0.0f; 
mA[6796] = 0.0f; 
mA[6797] = 0.0f; 
mA[6798] = 0.0f; 
mA[6799] = 0.0f; 
mA[6800] = 0.0f; 
mA[6801] = 0.0f; 
mA[6802] = 0.0f; 
mA[6803] = 0.0f; 
mA[6804] = 0.0f; 
mA[6805] = 0.0f; 
mA[6806] = 0.0f; 
mA[6807] = 0.0f; 
mA[6808] = 0.0f; 
mA[6809] = 0.0f; 
mA[6810] = 0.0f; 
mA[6811] = 0.0f; 
mA[6812] = 0.0f; 
mA[6813] = 0.0f; 
mA[6814] = 0.0f; 
mA[6815] = 0.0f; 
mA[6816] = 0.0f; 
mA[6817] = 0.0f; 
mA[6818] = 0.0f; 
mA[6819] = 0.0f; 
mA[6820] = 0.0f; 
mA[6821] = 0.0f; 
mA[6822] = 0.0f; 
mA[6823] =  v_v26_tca_bw_b ; 
mA[6824] = 0.0f; 
mA[6825] = 0.0f; 
mA[6826] =  v_v26_tca_bw_a ; 
mA[6827] = 0.0f; 
mA[6828] = 0.0f; 
mA[6829] = 0.0f; 
mA[6830] = 0.0f; 
mA[6831] = 0.0f; 
mA[6832] = 0.0f; 
mA[6833] = 0.0f; 
mA[6834] = 0.0f; 
mA[6835] = 0.0f; 
mA[6836] = 0.0f; 
mA[6837] = 0.0f; 
mA[6838] = 0.0f; 
mA[6839] = 0.0f; 
mA[6840] = 0.0f; 
mA[6841] = 0.0f; 
mA[6842] = 0.0f; 
mA[6843] = 0.0f; 
mA[6844] = 0.0f; 
mA[6845] = 0.0f; 
mA[6846] = 0.0f; 
mA[6847] = 0.0f; 
mA[6848] = 0.0f; 
mA[6849] = 0.0f; 
mA[6850] = 0.0f; 
mA[6851] = 0.0f; 
mA[6852] = 0.0f; 
mA[6853] = 0.0f; 
mA[6854] = 0.0f; 
mA[6855] = 0.0f; 
mA[6856] = 0.0f; 
mA[6857] = 0.0f; 
mA[6858] = 0.0f; 
mA[6859] = 0.0f; 
mA[6860] = 0.0f; 
mA[6861] = 0.0f; 
mA[6862] = 0.0f; 
mA[6863] = 0.0f; 
mA[6864] = 0.0f; 
mA[6865] = 0.0f; 
mA[6866] = 0.0f; 
mA[6867] = 0.0f; 
mA[6868] = 0.0f; 
mA[6869] = 0.0f; 
mA[6870] = 0.0f; 
mA[6871] = 0.0f; 
mA[6872] = 0.0f; 
mA[6873] = 0.0f; 
mA[6874] = 0.0f; 
mA[6875] = 0.0f; 
mA[6876] = 0.0f; 
mA[6877] = 0.0f; 
mA[6878] = 0.0f; 
mA[6879] = 0.0f; 
mA[6880] = 0.0f; 
mA[6881] = 0.0f; 
mA[6882] = 0.0f; 
mA[6883] = 0.0f; 
mA[6884] =  v_v02_glyc_fw ; 
mA[6885] = 0.0f; 
mA[6886] = 0.0f; 
mA[6887] = 0.0f; 
mA[6888] = 0.0f; 
mA[6889] = 0.0f; 
mA[6890] = 0.0f; 
mA[6891] = 0.0f; 
mA[6892] = 0.0f; 
mA[6893] = 0.0f; 
mA[6894] = 0.0f; 
mA[6895] = 0.0f; 
mA[6896] = 0.0f; 
mA[6897] = 0.0f; 
mA[6898] = 0.0f; 
mA[6899] = 0.0f; 
mA[6900] = ( (  -1.0f  * v_v01_SX_Gluc_In_b   )  +(  -1.0f  * v_v02_glyc_bw   )   ) ; 
mA[6901] = 0.0f; 
mA[6902] = 0.0f; 
mA[6903] = 0.0f; 
mA[6904] = 0.0f; 
mA[6905] = 0.0f; 
mA[6906] = 0.0f; 
mA[6907] = 0.0f; 
mA[6908] = 0.0f; 
mA[6909] = 0.0f; 
mA[6910] = 0.0f; 
mA[6911] = 0.0f; 
mA[6912] = 0.0f; 
mA[6913] = 0.0f; 
mA[6914] = 0.0f; 
mA[6915] = 0.0f; 
mA[6916] = 0.0f; 
mA[6917] = 0.0f; 
mA[6918] = 0.0f; 
mA[6919] = 0.0f; 
mA[6920] = 0.0f; 
mA[6921] = 0.0f; 
mA[6922] = 0.0f; 
mA[6923] = 0.0f; 
mA[6924] = 0.0f; 
mA[6925] = 0.0f; 
mA[6926] = 0.0f; 
mA[6927] = 0.0f; 
mA[6928] = 0.0f; 
mA[6929] = 0.0f; 
mA[6930] = 0.0f; 
mA[6931] = 0.0f; 
mA[6932] = 0.0f; 
mA[6933] = 0.0f; 
mA[6934] = 0.0f; 
mA[6935] = 0.0f; 
mA[6936] = 0.0f; 
mA[6937] = 0.0f; 
mA[6938] = 0.0f; 
mA[6939] = 0.0f; 
mA[6940] = 0.0f; 
mA[6941] = 0.0f; 
mA[6942] = 0.0f; 
mA[6943] = 0.0f; 
mA[6944] = 0.0f; 
mA[6945] = 0.0f; 
mA[6946] = 0.0f; 
mA[6947] = 0.0f; 
mA[6948] = 0.0f; 
mA[6949] = 0.0f; 
mA[6950] = 0.0f; 
mA[6951] = 0.0f; 
mA[6952] = 0.0f; 
mA[6953] = 0.0f; 
mA[6954] = 0.0f; 
mA[6955] = 0.0f; 
mA[6956] = 0.0f; 
mA[6957] = 0.0f; 
mA[6958] = 0.0f; 
mA[6959] = 0.0f; 
mA[6960] = 0.0f; 
mA[6961] = 0.0f; 
mA[6962] = 0.0f; 
mA[6963] = 0.0f; 
mA[6964] = 0.0f; 
mA[6965] = 0.0f; 
mA[6966] = 0.0f; 
mA[6967] = 0.0f; 
mA[6968] = 0.0f; 
mA[6969] = 0.0f; 
mA[6970] = 0.0f; 
mA[6971] = 0.0f; 
mA[6972] = 0.0f; 
mA[6973] = 0.0f; 
mA[6974] = 0.0f; 
mA[6975] = 0.0f; 
mA[6976] = 0.0f; 
mA[6977] = 0.0f; 
mA[6978] = 0.0f; 
mA[6979] = 0.0f; 
mA[6980] = 0.0f; 
mA[6981] = 0.0f; 
mA[6982] = 0.0f; 
mA[6983] = 0.0f; 
mA[6984] = 0.0f; 
mA[6985] = 0.0f; 
mA[6986] = 0.0f; 
mA[6987] = 0.0f; 
mA[6988] = 0.0f; 
mA[6989] = 0.0f; 
mA[6990] = 0.0f; 
mA[6991] = 0.0f; 
mA[6992] = 0.0f; 
mA[6993] = 0.0f; 
mA[6994] = 0.0f; 
mA[6995] = 0.0f; 
mA[6996] = 0.0f; 
mA[6997] =  v_v09_ppp_fw ; 
mA[6998] = 0.0f; 
mA[6999] = 0.0f; 
mA[7000] = 0.0f; 
mA[7001] = 0.0f; 
mA[7002] = 0.0f; 
mA[7003] = 0.0f; 
mA[7004] = 0.0f; 
mA[7005] = 0.0f; 
mA[7006] = 0.0f; 
mA[7007] = 0.0f; 
mA[7008] = 0.0f; 
mA[7009] = 0.0f; 
mA[7010] = 0.0f; 
mA[7011] = 0.0f; 
mA[7012] = 0.0f; 
mA[7013] = 0.0f; 
mA[7014] = 0.0f; 
mA[7015] = 0.0f; 
mA[7016] = 0.0f; 
mA[7017] = 0.0f; 
mA[7018] = 0.0f; 
mA[7019] = 0.0f; 
mA[7020] = 0.0f; 
mA[7021] = 0.0f; 
mA[7022] = 0.0f; 
mA[7023] = 0.0f; 
mA[7024] = 0.0f; 
mA[7025] = 0.0f; 
mA[7026] = 0.0f; 
mA[7027] = 0.0f; 
mA[7028] = 0.0f; 
mA[7029] = 0.0f; 
mA[7030] = 0.0f; 
mA[7031] = 0.0f; 
mA[7032] = 0.0f; 
mA[7033] = 0.0f; 
mA[7034] =  v_v02_glyc_fw ; 
mA[7035] = 0.0f; 
mA[7036] = 0.0f; 
mA[7037] = 0.0f; 
mA[7038] = 0.0f; 
mA[7039] = 0.0f; 
mA[7040] = 0.0f; 
mA[7041] = 0.0f; 
mA[7042] = 0.0f; 
mA[7043] = 0.0f; 
mA[7044] = 0.0f; 
mA[7045] = 0.0f; 
mA[7046] = 0.0f; 
mA[7047] = 0.0f; 
mA[7048] = 0.0f; 
mA[7049] = 0.0f; 
mA[7050] = ( (  -1.0f  * v_v02_glyc_bw   )  +(  -1.0f  * v_v01_SX_Gluc_In_b   )   ) ; 
mA[7051] = 0.0f; 
mA[7052] = 0.0f; 
mA[7053] = 0.0f; 
mA[7054] = 0.0f; 
mA[7055] = 0.0f; 
mA[7056] = 0.0f; 
mA[7057] = 0.0f; 
mA[7058] = 0.0f; 
mA[7059] = 0.0f; 
mA[7060] = 0.0f; 
mA[7061] = 0.0f; 
mA[7062] = 0.0f; 
mA[7063] = 0.0f; 
mA[7064] = 0.0f; 
mA[7065] = 0.0f; 
mA[7066] = 0.0f; 
mA[7067] = 0.0f; 
mA[7068] = 0.0f; 
mA[7069] = 0.0f; 
mA[7070] = 0.0f; 
mA[7071] = 0.0f; 
mA[7072] = 0.0f; 
mA[7073] = 0.0f; 
mA[7074] = 0.0f; 
mA[7075] = 0.0f; 
mA[7076] = 0.0f; 
mA[7077] = 0.0f; 
mA[7078] = 0.0f; 
mA[7079] = 0.0f; 
mA[7080] = 0.0f; 
mA[7081] = 0.0f; 
mA[7082] = 0.0f; 
mA[7083] = 0.0f; 
mA[7084] = 0.0f; 
mA[7085] = 0.0f; 
mA[7086] = 0.0f; 
mA[7087] = 0.0f; 
mA[7088] = 0.0f; 
mA[7089] = 0.0f; 
mA[7090] = 0.0f; 
mA[7091] = 0.0f; 
mA[7092] = 0.0f; 
mA[7093] = 0.0f; 
mA[7094] = 0.0f; 
mA[7095] = 0.0f; 
mA[7096] = 0.0f; 
mA[7097] = 0.0f; 
mA[7098] = 0.0f; 
mA[7099] = 0.0f; 
mA[7100] = 0.0f; 
mA[7101] = 0.0f; 
mA[7102] = 0.0f; 
mA[7103] = 0.0f; 
mA[7104] = 0.0f; 
mA[7105] = 0.0f; 
mA[7106] = 0.0f; 
mA[7107] = 0.0f; 
mA[7108] = 0.0f; 
mA[7109] = 0.0f; 
mA[7110] = 0.0f; 
mA[7111] = 0.0f; 
mA[7112] = 0.0f; 
mA[7113] = 0.0f; 
mA[7114] = 0.0f; 
mA[7115] = 0.0f; 
mA[7116] = 0.0f; 
mA[7117] = 0.0f; 
mA[7118] = 0.0f; 
mA[7119] = 0.0f; 
mA[7120] = 0.0f; 
mA[7121] = 0.0f; 
mA[7122] = 0.0f; 
mA[7123] = 0.0f; 
mA[7124] = 0.0f; 
mA[7125] = 0.0f; 
mA[7126] = 0.0f; 
mA[7127] = 0.0f; 
mA[7128] = 0.0f; 
mA[7129] = 0.0f; 
mA[7130] = 0.0f; 
mA[7131] = 0.0f; 
mA[7132] = 0.0f; 
mA[7133] = 0.0f; 
mA[7134] = 0.0f; 
mA[7135] = 0.0f; 
mA[7136] = 0.0f; 
mA[7137] = 0.0f; 
mA[7138] = 0.0f; 
mA[7139] = 0.0f; 
mA[7140] = 0.0f; 
mA[7141] = 0.0f; 
mA[7142] = 0.0f; 
mA[7143] = 0.0f; 
mA[7144] = 0.0f; 
mA[7145] = 0.0f; 
mA[7146] = 0.0f; 
mA[7147] =  v_v09_ppp_fw ; 
mA[7148] = 0.0f; 
mA[7149] = 0.0f; 
mA[7150] = 0.0f; 
mA[7151] = 0.0f; 
mA[7152] = 0.0f; 
mA[7153] = 0.0f; 
mA[7154] = 0.0f; 
mA[7155] = 0.0f; 
mA[7156] = 0.0f; 
mA[7157] = 0.0f; 
mA[7158] = 0.0f; 
mA[7159] = 0.0f; 
mA[7160] = 0.0f; 
mA[7161] = 0.0f; 
mA[7162] = 0.0f; 
mA[7163] = 0.0f; 
mA[7164] = 0.0f; 
mA[7165] = 0.0f; 
mA[7166] = 0.0f; 
mA[7167] = 0.0f; 
mA[7168] = 0.0f; 
mA[7169] = 0.0f; 
mA[7170] = 0.0f; 
mA[7171] = 0.0f; 
mA[7172] = 0.0f; 
mA[7173] = 0.0f; 
mA[7174] = 0.0f; 
mA[7175] = 0.0f; 
mA[7176] = 0.0f; 
mA[7177] = 0.0f; 
mA[7178] = 0.0f; 
mA[7179] = 0.0f; 
mA[7180] = 0.0f; 
mA[7181] = 0.0f; 
mA[7182] = 0.0f; 
mA[7183] = 0.0f; 
mA[7184] =  v_v02_glyc_fw ; 
mA[7185] = 0.0f; 
mA[7186] = 0.0f; 
mA[7187] = 0.0f; 
mA[7188] = 0.0f; 
mA[7189] = 0.0f; 
mA[7190] = 0.0f; 
mA[7191] = 0.0f; 
mA[7192] = 0.0f; 
mA[7193] = 0.0f; 
mA[7194] = 0.0f; 
mA[7195] = 0.0f; 
mA[7196] = 0.0f; 
mA[7197] = 0.0f; 
mA[7198] = 0.0f; 
mA[7199] = 0.0f; 
mA[7200] = ( (  -1.0f  * v_v02_glyc_bw   )  +(  -1.0f  * v_v01_SX_Gluc_In_b   )   ) ; 
mA[7201] = 0.0f; 
mA[7202] = 0.0f; 
mA[7203] = 0.0f; 
mA[7204] = 0.0f; 
mA[7205] = 0.0f; 
mA[7206] = 0.0f; 
mA[7207] = 0.0f; 
mA[7208] = 0.0f; 
mA[7209] = 0.0f; 
mA[7210] = 0.0f; 
mA[7211] = 0.0f; 
mA[7212] = 0.0f; 
mA[7213] = 0.0f; 
mA[7214] = 0.0f; 
mA[7215] = 0.0f; 
mA[7216] = 0.0f; 
mA[7217] = 0.0f; 
mA[7218] = 0.0f; 
mA[7219] = 0.0f; 
mA[7220] = 0.0f; 
mA[7221] = 0.0f; 
mA[7222] = 0.0f; 
mA[7223] = 0.0f; 
mA[7224] = 0.0f; 
mA[7225] = 0.0f; 
mA[7226] = 0.0f; 
mA[7227] = 0.0f; 
mA[7228] = 0.0f; 
mA[7229] = 0.0f; 
mA[7230] = 0.0f; 
mA[7231] = 0.0f; 
mA[7232] = 0.0f; 
mA[7233] = 0.0f; 
mA[7234] = 0.0f; 
mA[7235] = 0.0f; 
mA[7236] = 0.0f; 
mA[7237] = 0.0f; 
mA[7238] = 0.0f; 
mA[7239] = 0.0f; 
mA[7240] = 0.0f; 
mA[7241] = 0.0f; 
mA[7242] = 0.0f; 
mA[7243] = 0.0f; 
mA[7244] = 0.0f; 
mA[7245] = 0.0f; 
mA[7246] = 0.0f; 
mA[7247] = 0.0f; 
mA[7248] = 0.0f; 
mA[7249] = 0.0f; 
mA[7250] = 0.0f; 
mA[7251] = 0.0f; 
mA[7252] = 0.0f; 
mA[7253] = 0.0f; 
mA[7254] = 0.0f; 
mA[7255] = 0.0f; 
mA[7256] = 0.0f; 
mA[7257] = 0.0f; 
mA[7258] = 0.0f; 
mA[7259] = 0.0f; 
mA[7260] = 0.0f; 
mA[7261] = 0.0f; 
mA[7262] = 0.0f; 
mA[7263] = 0.0f; 
mA[7264] = 0.0f; 
mA[7265] = 0.0f; 
mA[7266] = 0.0f; 
mA[7267] = 0.0f; 
mA[7268] = 0.0f; 
mA[7269] = 0.0f; 
mA[7270] = 0.0f; 
mA[7271] = 0.0f; 
mA[7272] = 0.0f; 
mA[7273] = 0.0f; 
mA[7274] = 0.0f; 
mA[7275] = 0.0f; 
mA[7276] = 0.0f; 
mA[7277] = 0.0f; 
mA[7278] = 0.0f; 
mA[7279] = 0.0f; 
mA[7280] = 0.0f; 
mA[7281] = 0.0f; 
mA[7282] = 0.0f; 
mA[7283] = 0.0f; 
mA[7284] = 0.0f; 
mA[7285] = 0.0f; 
mA[7286] = 0.0f; 
mA[7287] = 0.0f; 
mA[7288] = 0.0f; 
mA[7289] = 0.0f; 
mA[7290] = 0.0f; 
mA[7291] = 0.0f; 
mA[7292] = 0.0f; 
mA[7293] = 0.0f; 
mA[7294] = 0.0f; 
mA[7295] = 0.0f; 
mA[7296] = 0.0f; 
mA[7297] =  v_v09_ppp_fw ; 
mA[7298] = 0.0f; 
mA[7299] = 0.0f; 
mA[7300] = 0.0f; 
mA[7301] = 0.0f; 
mA[7302] = 0.0f; 
mA[7303] = 0.0f; 
mA[7304] = 0.0f; 
mA[7305] = 0.0f; 
mA[7306] = 0.0f; 
mA[7307] = 0.0f; 
mA[7308] = 0.0f; 
mA[7309] = 0.0f; 
mA[7310] = 0.0f; 
mA[7311] = 0.0f; 
mA[7312] = 0.0f; 
mA[7313] = 0.0f; 
mA[7314] = 0.0f; 
mA[7315] = 0.0f; 
mA[7316] = 0.0f; 
mA[7317] = 0.0f; 
mA[7318] = 0.0f; 
mA[7319] = 0.0f; 
mA[7320] = 0.0f; 
mA[7321] = 0.0f; 
mA[7322] = 0.0f; 
mA[7323] = 0.0f; 
mA[7324] = 0.0f; 
mA[7325] = 0.0f; 
mA[7326] = 0.0f; 
mA[7327] = 0.0f; 
mA[7328] = 0.0f; 
mA[7329] = 0.0f; 
mA[7330] = 0.0f; 
mA[7331] = 0.0f; 
mA[7332] = 0.0f; 
mA[7333] = 0.0f; 
mA[7334] =  v_v02_glyc_fw ; 
mA[7335] = 0.0f; 
mA[7336] = 0.0f; 
mA[7337] = 0.0f; 
mA[7338] = 0.0f; 
mA[7339] = 0.0f; 
mA[7340] = 0.0f; 
mA[7341] = 0.0f; 
mA[7342] = 0.0f; 
mA[7343] = 0.0f; 
mA[7344] = 0.0f; 
mA[7345] = 0.0f; 
mA[7346] = 0.0f; 
mA[7347] = 0.0f; 
mA[7348] = 0.0f; 
mA[7349] = 0.0f; 
mA[7350] = ( (  -1.0f  * v_v01_SX_Gluc_In_b   )  +(  -1.0f  * v_v02_glyc_bw   )   ) ; 
mA[7351] = 0.0f; 
mA[7352] = 0.0f; 
mA[7353] = 0.0f; 
mA[7354] = 0.0f; 
mA[7355] = 0.0f; 
mA[7356] = 0.0f; 
mA[7357] = 0.0f; 
mA[7358] = 0.0f; 
mA[7359] = 0.0f; 
mA[7360] = 0.0f; 
mA[7361] = 0.0f; 
mA[7362] = 0.0f; 
mA[7363] = 0.0f; 
mA[7364] = 0.0f; 
mA[7365] = 0.0f; 
mA[7366] = 0.0f; 
mA[7367] = 0.0f; 
mA[7368] = 0.0f; 
mA[7369] = 0.0f; 
mA[7370] = 0.0f; 
mA[7371] = 0.0f; 
mA[7372] = 0.0f; 
mA[7373] = 0.0f; 
mA[7374] = 0.0f; 
mA[7375] = 0.0f; 
mA[7376] = 0.0f; 
mA[7377] = 0.0f; 
mA[7378] = 0.0f; 
mA[7379] = 0.0f; 
mA[7380] = 0.0f; 
mA[7381] = 0.0f; 
mA[7382] = 0.0f; 
mA[7383] = 0.0f; 
mA[7384] = 0.0f; 
mA[7385] = 0.0f; 
mA[7386] = 0.0f; 
mA[7387] = 0.0f; 
mA[7388] = 0.0f; 
mA[7389] = 0.0f; 
mA[7390] = 0.0f; 
mA[7391] = 0.0f; 
mA[7392] = 0.0f; 
mA[7393] = 0.0f; 
mA[7394] = 0.0f; 
mA[7395] = 0.0f; 
mA[7396] = 0.0f; 
mA[7397] = 0.0f; 
mA[7398] = 0.0f; 
mA[7399] = 0.0f; 
mA[7400] = 0.0f; 
mA[7401] = 0.0f; 
mA[7402] = 0.0f; 
mA[7403] = 0.0f; 
mA[7404] = 0.0f; 
mA[7405] = 0.0f; 
mA[7406] = 0.0f; 
mA[7407] = 0.0f; 
mA[7408] = 0.0f; 
mA[7409] = 0.0f; 
mA[7410] = 0.0f; 
mA[7411] = 0.0f; 
mA[7412] = 0.0f; 
mA[7413] = 0.0f; 
mA[7414] = 0.0f; 
mA[7415] = 0.0f; 
mA[7416] = 0.0f; 
mA[7417] = 0.0f; 
mA[7418] = 0.0f; 
mA[7419] = 0.0f; 
mA[7420] = 0.0f; 
mA[7421] = 0.0f; 
mA[7422] = 0.0f; 
mA[7423] = 0.0f; 
mA[7424] = 0.0f; 
mA[7425] = 0.0f; 
mA[7426] = 0.0f; 
mA[7427] = 0.0f; 
mA[7428] = 0.0f; 
mA[7429] = 0.0f; 
mA[7430] = 0.0f; 
mA[7431] = 0.0f; 
mA[7432] = 0.0f; 
mA[7433] = 0.0f; 
mA[7434] = 0.0f; 
mA[7435] = 0.0f; 
mA[7436] = 0.0f; 
mA[7437] = 0.0f; 
mA[7438] = 0.0f; 
mA[7439] = 0.0f; 
mA[7440] = 0.0f; 
mA[7441] = 0.0f; 
mA[7442] = 0.0f; 
mA[7443] = 0.0f; 
mA[7444] = 0.0f; 
mA[7445] = 0.0f; 
mA[7446] = 0.0f; 
mA[7447] =  v_v09_ppp_fw ; 
mA[7448] = 0.0f; 
mA[7449] = 0.0f; 
mA[7450] = 0.0f; 
mA[7451] = 0.0f; 
mA[7452] = 0.0f; 
mA[7453] = 0.0f; 
mA[7454] = 0.0f; 
mA[7455] = 0.0f; 
mA[7456] = 0.0f; 
mA[7457] = 0.0f; 
mA[7458] = 0.0f; 
mA[7459] = 0.0f; 
mA[7460] = 0.0f; 
mA[7461] = 0.0f; 
mA[7462] = 0.0f; 
mA[7463] = 0.0f; 
mA[7464] = 0.0f; 
mA[7465] = 0.0f; 
mA[7466] = 0.0f; 
mA[7467] = 0.0f; 
mA[7468] = 0.0f; 
mA[7469] = 0.0f; 
mA[7470] = 0.0f; 
mA[7471] = 0.0f; 
mA[7472] = 0.0f; 
mA[7473] = 0.0f; 
mA[7474] = 0.0f; 
mA[7475] = 0.0f; 
mA[7476] = 0.0f; 
mA[7477] = 0.0f; 
mA[7478] = 0.0f; 
mA[7479] = 0.0f; 
mA[7480] = 0.0f; 
mA[7481] = 0.0f; 
mA[7482] = 0.0f; 
mA[7483] = 0.0f; 
mA[7484] =  v_v02_glyc_fw ; 
mA[7485] = 0.0f; 
mA[7486] = 0.0f; 
mA[7487] = 0.0f; 
mA[7488] = 0.0f; 
mA[7489] = 0.0f; 
mA[7490] = 0.0f; 
mA[7491] = 0.0f; 
mA[7492] = 0.0f; 
mA[7493] = 0.0f; 
mA[7494] = 0.0f; 
mA[7495] = 0.0f; 
mA[7496] = 0.0f; 
mA[7497] = 0.0f; 
mA[7498] = 0.0f; 
mA[7499] = 0.0f; 
mA[7500] = ( (  -1.0f  * v_v02_glyc_bw   )  +(  -1.0f  * v_v01_SX_Gluc_In_b   )   ) ; 
mA[7501] = 0.0f; 
mA[7502] = 0.0f; 
mA[7503] = 0.0f; 
mA[7504] = 0.0f; 
mA[7505] = 0.0f; 
mA[7506] = 0.0f; 
mA[7507] = 0.0f; 
mA[7508] = 0.0f; 
mA[7509] = 0.0f; 
mA[7510] = 0.0f; 
mA[7511] = 0.0f; 
mA[7512] = 0.0f; 
mA[7513] = 0.0f; 
mA[7514] = 0.0f; 
mA[7515] = 0.0f; 
mA[7516] = 0.0f; 
mA[7517] = 0.0f; 
mA[7518] = 0.0f; 
mA[7519] = 0.0f; 
mA[7520] = 0.0f; 
mA[7521] = 0.0f; 
mA[7522] = 0.0f; 
mA[7523] = 0.0f; 
mA[7524] = 0.0f; 
mA[7525] = 0.0f; 
mA[7526] = 0.0f; 
mA[7527] = 0.0f; 
mA[7528] = 0.0f; 
mA[7529] = 0.0f; 
mA[7530] = 0.0f; 
mA[7531] = 0.0f; 
mA[7532] = 0.0f; 
mA[7533] = 0.0f; 
mA[7534] = 0.0f; 
mA[7535] = 0.0f; 
mA[7536] = 0.0f; 
mA[7537] = 0.0f; 
mA[7538] = 0.0f; 
mA[7539] = 0.0f; 
mA[7540] = 0.0f; 
mA[7541] = 0.0f; 
mA[7542] = 0.0f; 
mA[7543] = 0.0f; 
mA[7544] = 0.0f; 
mA[7545] = 0.0f; 
mA[7546] = 0.0f; 
mA[7547] = 0.0f; 
mA[7548] = 0.0f; 
mA[7549] = 0.0f; 
mA[7550] = 0.0f; 
mA[7551] = 0.0f; 
mA[7552] = 0.0f; 
mA[7553] = 0.0f; 
mA[7554] = 0.0f; 
mA[7555] = 0.0f; 
mA[7556] = 0.0f; 
mA[7557] = 0.0f; 
mA[7558] = 0.0f; 
mA[7559] = 0.0f; 
mA[7560] = 0.0f; 
mA[7561] = 0.0f; 
mA[7562] = 0.0f; 
mA[7563] = 0.0f; 
mA[7564] = 0.0f; 
mA[7565] = 0.0f; 
mA[7566] = 0.0f; 
mA[7567] = 0.0f; 
mA[7568] = 0.0f; 
mA[7569] = 0.0f; 
mA[7570] = 0.0f; 
mA[7571] = 0.0f; 
mA[7572] = 0.0f; 
mA[7573] = 0.0f; 
mA[7574] = 0.0f; 
mA[7575] = 0.0f; 
mA[7576] = 0.0f; 
mA[7577] = 0.0f; 
mA[7578] = 0.0f; 
mA[7579] = 0.0f; 
mA[7580] = 0.0f; 
mA[7581] = 0.0f; 
mA[7582] = 0.0f; 
mA[7583] = 0.0f; 
mA[7584] = 0.0f; 
mA[7585] = 0.0f; 
mA[7586] = 0.0f; 
mA[7587] = 0.0f; 
mA[7588] = 0.0f; 
mA[7589] = 0.0f; 
mA[7590] = 0.0f; 
mA[7591] = 0.0f; 
mA[7592] = 0.0f; 
mA[7593] = 0.0f; 
mA[7594] = 0.0f; 
mA[7595] = 0.0f; 
mA[7596] = 0.0f; 
mA[7597] =  v_v09_ppp_fw ; 
mA[7598] = 0.0f; 
mA[7599] = 0.0f; 
mA[7600] = 0.0f; 
mA[7601] = 0.0f; 
mA[7602] = 0.0f; 
mA[7603] = 0.0f; 
mA[7604] = 0.0f; 
mA[7605] = 0.0f; 
mA[7606] = 0.0f; 
mA[7607] = 0.0f; 
mA[7608] = 0.0f; 
mA[7609] = 0.0f; 
mA[7610] = 0.0f; 
mA[7611] = 0.0f; 
mA[7612] = 0.0f; 
mA[7613] = 0.0f; 
mA[7614] = 0.0f; 
mA[7615] = 0.0f; 
mA[7616] = 0.0f; 
mA[7617] = 0.0f; 
mA[7618] = 0.0f; 
mA[7619] = 0.0f; 
mA[7620] = 0.0f; 
mA[7621] = 0.0f; 
mA[7622] = 0.0f; 
mA[7623] = 0.0f; 
mA[7624] = 0.0f; 
mA[7625] = 0.0f; 
mA[7626] = 0.0f; 
mA[7627] = 0.0f; 
mA[7628] = 0.0f; 
mA[7629] = 0.0f; 
mA[7630] = 0.0f; 
mA[7631] = 0.0f; 
mA[7632] = 0.0f; 
mA[7633] = 0.0f; 
mA[7634] =  v_v02_glyc_fw ; 
mA[7635] = 0.0f; 
mA[7636] = 0.0f; 
mA[7637] = 0.0f; 
mA[7638] = 0.0f; 
mA[7639] = 0.0f; 
mA[7640] = 0.0f; 
mA[7641] = 0.0f; 
mA[7642] = 0.0f; 
mA[7643] = 0.0f; 
mA[7644] = 0.0f; 
mA[7645] = 0.0f; 
mA[7646] = 0.0f; 
mA[7647] = 0.0f; 
mA[7648] = 0.0f; 
mA[7649] = 0.0f; 
mA[7650] = ( (  -1.0f  * v_v01_SX_Gluc_In_b   )  +(  -1.0f  * v_v02_glyc_bw   )   ) ; 
mA[7651] = 0.0f; 
mA[7652] = 0.0f; 
mA[7653] = 0.0f; 
mA[7654] = 0.0f; 
mA[7655] = 0.0f; 
mA[7656] = 0.0f; 
mA[7657] = 0.0f; 
mA[7658] = 0.0f; 
mA[7659] = 0.0f; 
mA[7660] = 0.0f; 
mA[7661] = 0.0f; 
mA[7662] = 0.0f; 
mA[7663] = 0.0f; 
mA[7664] = 0.0f; 
mA[7665] = 0.0f; 
mA[7666] = 0.0f; 
mA[7667] = 0.0f; 
mA[7668] = 0.0f; 
mA[7669] = 0.0f; 
mA[7670] = 0.0f; 
mA[7671] = 0.0f; 
mA[7672] = 0.0f; 
mA[7673] = 0.0f; 
mA[7674] = 0.0f; 
mA[7675] = 0.0f; 
mA[7676] = 0.0f; 
mA[7677] = 0.0f; 
mA[7678] = 0.0f; 
mA[7679] = 0.0f; 
mA[7680] = 0.0f; 
mA[7681] = 0.0f; 
mA[7682] = 0.0f; 
mA[7683] = 0.0f; 
mA[7684] = 0.0f; 
mA[7685] = 0.0f; 
mA[7686] = 0.0f; 
mA[7687] = 0.0f; 
mA[7688] = 0.0f; 
mA[7689] = 0.0f; 
mA[7690] = 0.0f; 
mA[7691] = 0.0f; 
mA[7692] = 0.0f; 
mA[7693] = 0.0f; 
mA[7694] = 0.0f; 
mA[7695] = 0.0f; 
mA[7696] = 0.0f; 
mA[7697] = 0.0f; 
mA[7698] = 0.0f; 
mA[7699] = 0.0f; 
mA[7700] = 0.0f; 
mA[7701] = 0.0f; 
mA[7702] = 0.0f; 
mA[7703] = 0.0f; 
mA[7704] = 0.0f; 
mA[7705] = 0.0f; 
mA[7706] = 0.0f; 
mA[7707] = 0.0f; 
mA[7708] = 0.0f; 
mA[7709] = 0.0f; 
mA[7710] = 0.0f; 
mA[7711] = 0.0f; 
mA[7712] = 0.0f; 
mA[7713] = 0.0f; 
mA[7714] = 0.0f; 
mA[7715] = 0.0f; 
mA[7716] = 0.0f; 
mA[7717] = 0.0f; 
mA[7718] = 0.0f; 
mA[7719] = 0.0f; 
mA[7720] = 0.0f; 
mA[7721] = 0.0f; 
mA[7722] = 0.0f; 
mA[7723] = 0.0f; 
mA[7724] = 0.0f; 
mA[7725] = 0.0f; 
mA[7726] = 0.0f; 
mA[7727] = 0.0f; 
mA[7728] = 0.0f; 
mA[7729] = 0.0f; 
mA[7730] = 0.0f; 
mA[7731] = 0.0f; 
mA[7732] = 0.0f; 
mA[7733] = 0.0f; 
mA[7734] = 0.0f; 
mA[7735] = 0.0f; 
mA[7736] = 0.0f; 
mA[7737] = 0.0f; 
mA[7738] = 0.0f; 
mA[7739] = 0.0f; 
mA[7740] = 0.0f; 
mA[7741] = 0.0f; 
mA[7742] = 0.0f; 
mA[7743] = 0.0f; 
mA[7744] = 0.0f; 
mA[7745] = 0.0f; 
mA[7746] = 0.0f; 
mA[7747] =  v_v09_ppp_fw ; 
mA[7748] = 0.0f; 
mA[7749] = 0.0f; 
mA[7750] = 0.0f; 
mA[7751] = 0.0f; 
mA[7752] = 0.0f; 
mA[7753] = 0.0f; 
mA[7754] = 0.0f; 
mA[7755] = 0.0f; 
mA[7756] = 0.0f; 
mA[7757] = 0.0f; 
mA[7758] = 0.0f; 
mA[7759] = 0.0f; 
mA[7760] = 0.0f; 
mA[7761] = 0.0f; 
mA[7762] = 0.0f; 
mA[7763] = 0.0f; 
mA[7764] = 0.0f; 
mA[7765] = 0.0f; 
mA[7766] = 0.0f; 
mA[7767] = 0.0f; 
mA[7768] = 0.0f; 
mA[7769] = 0.0f; 
mA[7770] = 0.0f; 
mA[7771] =  v_v05_glyc_bw ; 
mA[7772] = 0.0f; 
mA[7773] = 0.0f; 
mA[7774] = 0.0f; 
mA[7775] = 0.0f; 
mA[7776] = 0.0f; 
mA[7777] = 0.0f; 
mA[7778] = 0.0f; 
mA[7779] = 0.0f; 
mA[7780] = 0.0f; 
mA[7781] =  v_v16_ppp_bw ; 
mA[7782] = 0.0f; 
mA[7783] = 0.0f; 
mA[7784] = 0.0f; 
mA[7785] = 0.0f; 
mA[7786] = 0.0f; 
mA[7787] =  v_v04_glyc_bw ; 
mA[7788] = 0.0f; 
mA[7789] = 0.0f; 
mA[7790] = 0.0f; 
mA[7791] = 0.0f; 
mA[7792] = 0.0f; 
mA[7793] = 0.0f; 
mA[7794] = 0.0f; 
mA[7795] = 0.0f; 
mA[7796] = 0.0f; 
mA[7797] = 0.0f; 
mA[7798] = 0.0f; 
mA[7799] = 0.0f; 
mA[7800] = ( (  -1.0f  * v_v06_glyc_bw   )  +(  -1.0f  * v_v04_glyc_fw   )  +(  -1.0f  * v_v57_aa_fw   )  +(  -1.0f  * v_v05_glyc_fw   )  +(  -1.0f  * v_v16_ppp_fw   )  +(  -1.0f  * v_v13_ppp_fw   )  +(  -1.0f  * v_v19_ed_fw   )   ) ; 
mA[7801] = 0.0f; 
mA[7802] = 0.0f; 
mA[7803] = 0.0f; 
mA[7804] = 0.0f; 
mA[7805] = 0.0f; 
mA[7806] = 0.0f; 
mA[7807] = 0.0f; 
mA[7808] = 0.0f; 
mA[7809] = 0.0f; 
mA[7810] = 0.0f; 
mA[7811] = 0.0f; 
mA[7812] = 0.0f; 
mA[7813] = 0.0f; 
mA[7814] = 0.0f; 
mA[7815] = 0.0f; 
mA[7816] = 0.0f; 
mA[7817] = 0.0f; 
mA[7818] = 0.0f; 
mA[7819] = 0.0f; 
mA[7820] = 0.0f; 
mA[7821] = 0.0f; 
mA[7822] = 0.0f; 
mA[7823] = 0.0f; 
mA[7824] = 0.0f; 
mA[7825] = 0.0f; 
mA[7826] = 0.0f; 
mA[7827] = 0.0f; 
mA[7828] = 0.0f; 
mA[7829] = 0.0f; 
mA[7830] = 0.0f; 
mA[7831] = 0.0f; 
mA[7832] = 0.0f; 
mA[7833] = 0.0f; 
mA[7834] = 0.0f; 
mA[7835] = 0.0f; 
mA[7836] = 0.0f; 
mA[7837] = 0.0f; 
mA[7838] = 0.0f; 
mA[7839] = 0.0f; 
mA[7840] = 0.0f; 
mA[7841] = 0.0f; 
mA[7842] = 0.0f; 
mA[7843] = 0.0f; 
mA[7844] = 0.0f; 
mA[7845] = 0.0f; 
mA[7846] = 0.0f; 
mA[7847] = 0.0f; 
mA[7848] = 0.0f; 
mA[7849] = 0.0f; 
mA[7850] = 0.0f; 
mA[7851] = 0.0f; 
mA[7852] = 0.0f; 
mA[7853] = 0.0f; 
mA[7854] = 0.0f; 
mA[7855] = 0.0f; 
mA[7856] = 0.0f; 
mA[7857] = 0.0f; 
mA[7858] = 0.0f; 
mA[7859] = 0.0f; 
mA[7860] = 0.0f; 
mA[7861] = 0.0f; 
mA[7862] = 0.0f; 
mA[7863] = 0.0f; 
mA[7864] = 0.0f; 
mA[7865] = 0.0f; 
mA[7866] = 0.0f; 
mA[7867] = 0.0f; 
mA[7868] = 0.0f; 
mA[7869] = 0.0f; 
mA[7870] = 0.0f; 
mA[7871] = 0.0f; 
mA[7872] = 0.0f; 
mA[7873] = 0.0f; 
mA[7874] = 0.0f; 
mA[7875] = 0.0f; 
mA[7876] = 0.0f; 
mA[7877] = 0.0f; 
mA[7878] = 0.0f; 
mA[7879] = 0.0f; 
mA[7880] = 0.0f; 
mA[7881] = 0.0f; 
mA[7882] = 0.0f; 
mA[7883] =  v_v06_glyc_fw ; 
mA[7884] = 0.0f; 
mA[7885] = 0.0f; 
mA[7886] = 0.0f; 
mA[7887] = 0.0f; 
mA[7888] =  v_v13_ppp_bw ; 
mA[7889] = 0.0f; 
mA[7890] = 0.0f; 
mA[7891] = 0.0f; 
mA[7892] = 0.0f; 
mA[7893] = 0.0f; 
mA[7894] = 0.0f; 
mA[7895] = 0.0f; 
mA[7896] = 0.0f; 
mA[7897] = 0.0f; 
mA[7898] = 0.0f; 
mA[7899] = 0.0f; 
mA[7900] = 0.0f; 
mA[7901] = 0.0f; 
mA[7902] = 0.0f; 
mA[7903] = 0.0f; 
mA[7904] = 0.0f; 
mA[7905] = 0.0f; 
mA[7906] = 0.0f; 
mA[7907] = 0.0f; 
mA[7908] = 0.0f; 
mA[7909] = 0.0f; 
mA[7910] = 0.0f; 
mA[7911] = 0.0f; 
mA[7912] = 0.0f; 
mA[7913] = 0.0f; 
mA[7914] = 0.0f; 
mA[7915] = 0.0f; 
mA[7916] = 0.0f; 
mA[7917] = 0.0f; 
mA[7918] = 0.0f; 
mA[7919] = 0.0f; 
mA[7920] = 0.0f; 
mA[7921] =  v_v05_glyc_bw ; 
mA[7922] = 0.0f; 
mA[7923] = 0.0f; 
mA[7924] = 0.0f; 
mA[7925] = 0.0f; 
mA[7926] = 0.0f; 
mA[7927] = 0.0f; 
mA[7928] = 0.0f; 
mA[7929] = 0.0f; 
mA[7930] = 0.0f; 
mA[7931] =  v_v16_ppp_bw ; 
mA[7932] = 0.0f; 
mA[7933] = 0.0f; 
mA[7934] = 0.0f; 
mA[7935] = 0.0f; 
mA[7936] = 0.0f; 
mA[7937] =  v_v04_glyc_bw ; 
mA[7938] = 0.0f; 
mA[7939] = 0.0f; 
mA[7940] = 0.0f; 
mA[7941] = 0.0f; 
mA[7942] = 0.0f; 
mA[7943] = 0.0f; 
mA[7944] = 0.0f; 
mA[7945] = 0.0f; 
mA[7946] = 0.0f; 
mA[7947] = 0.0f; 
mA[7948] = 0.0f; 
mA[7949] = 0.0f; 
mA[7950] = ( (  -1.0f  * v_v16_ppp_fw   )  +(  -1.0f  * v_v13_ppp_fw   )  +(  -1.0f  * v_v06_glyc_bw   )  +(  -1.0f  * v_v05_glyc_fw   )  +(  -1.0f  * v_v19_ed_fw   )  +(  -1.0f  * v_v04_glyc_fw   )  +(  -1.0f  * v_v57_aa_fw   )   ) ; 
mA[7951] = 0.0f; 
mA[7952] = 0.0f; 
mA[7953] = 0.0f; 
mA[7954] = 0.0f; 
mA[7955] = 0.0f; 
mA[7956] = 0.0f; 
mA[7957] = 0.0f; 
mA[7958] = 0.0f; 
mA[7959] = 0.0f; 
mA[7960] = 0.0f; 
mA[7961] = 0.0f; 
mA[7962] = 0.0f; 
mA[7963] = 0.0f; 
mA[7964] = 0.0f; 
mA[7965] = 0.0f; 
mA[7966] = 0.0f; 
mA[7967] = 0.0f; 
mA[7968] = 0.0f; 
mA[7969] = 0.0f; 
mA[7970] = 0.0f; 
mA[7971] = 0.0f; 
mA[7972] = 0.0f; 
mA[7973] = 0.0f; 
mA[7974] = 0.0f; 
mA[7975] = 0.0f; 
mA[7976] = 0.0f; 
mA[7977] = 0.0f; 
mA[7978] = 0.0f; 
mA[7979] = 0.0f; 
mA[7980] = 0.0f; 
mA[7981] = 0.0f; 
mA[7982] = 0.0f; 
mA[7983] = 0.0f; 
mA[7984] = 0.0f; 
mA[7985] = 0.0f; 
mA[7986] = 0.0f; 
mA[7987] = 0.0f; 
mA[7988] = 0.0f; 
mA[7989] = 0.0f; 
mA[7990] = 0.0f; 
mA[7991] = 0.0f; 
mA[7992] = 0.0f; 
mA[7993] = 0.0f; 
mA[7994] = 0.0f; 
mA[7995] = 0.0f; 
mA[7996] = 0.0f; 
mA[7997] = 0.0f; 
mA[7998] = 0.0f; 
mA[7999] = 0.0f; 
mA[8000] = 0.0f; 
mA[8001] = 0.0f; 
mA[8002] = 0.0f; 
mA[8003] = 0.0f; 
mA[8004] = 0.0f; 
mA[8005] = 0.0f; 
mA[8006] = 0.0f; 
mA[8007] = 0.0f; 
mA[8008] = 0.0f; 
mA[8009] = 0.0f; 
mA[8010] = 0.0f; 
mA[8011] = 0.0f; 
mA[8012] = 0.0f; 
mA[8013] = 0.0f; 
mA[8014] = 0.0f; 
mA[8015] = 0.0f; 
mA[8016] = 0.0f; 
mA[8017] = 0.0f; 
mA[8018] = 0.0f; 
mA[8019] = 0.0f; 
mA[8020] = 0.0f; 
mA[8021] = 0.0f; 
mA[8022] = 0.0f; 
mA[8023] = 0.0f; 
mA[8024] = 0.0f; 
mA[8025] = 0.0f; 
mA[8026] = 0.0f; 
mA[8027] = 0.0f; 
mA[8028] = 0.0f; 
mA[8029] = 0.0f; 
mA[8030] = 0.0f; 
mA[8031] = 0.0f; 
mA[8032] = 0.0f; 
mA[8033] =  v_v06_glyc_fw ; 
mA[8034] = 0.0f; 
mA[8035] = 0.0f; 
mA[8036] = 0.0f; 
mA[8037] = 0.0f; 
mA[8038] =  v_v13_ppp_bw ; 
mA[8039] = 0.0f; 
mA[8040] = 0.0f; 
mA[8041] = 0.0f; 
mA[8042] = 0.0f; 
mA[8043] = 0.0f; 
mA[8044] = 0.0f; 
mA[8045] = 0.0f; 
mA[8046] = 0.0f; 
mA[8047] = 0.0f; 
mA[8048] = 0.0f; 
mA[8049] = 0.0f; 
mA[8050] = 0.0f; 
mA[8051] = 0.0f; 
mA[8052] = 0.0f; 
mA[8053] = 0.0f; 
mA[8054] = 0.0f; 
mA[8055] = 0.0f; 
mA[8056] = 0.0f; 
mA[8057] = 0.0f; 
mA[8058] = 0.0f; 
mA[8059] = 0.0f; 
mA[8060] = 0.0f; 
mA[8061] = 0.0f; 
mA[8062] = 0.0f; 
mA[8063] = 0.0f; 
mA[8064] = 0.0f; 
mA[8065] = 0.0f; 
mA[8066] = 0.0f; 
mA[8067] = 0.0f; 
mA[8068] = 0.0f; 
mA[8069] = 0.0f; 
mA[8070] = 0.0f; 
mA[8071] =  v_v05_glyc_bw ; 
mA[8072] = 0.0f; 
mA[8073] = 0.0f; 
mA[8074] = 0.0f; 
mA[8075] = 0.0f; 
mA[8076] = 0.0f; 
mA[8077] = 0.0f; 
mA[8078] = 0.0f; 
mA[8079] = 0.0f; 
mA[8080] = 0.0f; 
mA[8081] =  v_v16_ppp_bw ; 
mA[8082] = 0.0f; 
mA[8083] = 0.0f; 
mA[8084] = 0.0f; 
mA[8085] = 0.0f; 
mA[8086] = 0.0f; 
mA[8087] =  v_v04_glyc_bw ; 
mA[8088] = 0.0f; 
mA[8089] = 0.0f; 
mA[8090] = 0.0f; 
mA[8091] = 0.0f; 
mA[8092] = 0.0f; 
mA[8093] = 0.0f; 
mA[8094] = 0.0f; 
mA[8095] = 0.0f; 
mA[8096] = 0.0f; 
mA[8097] = 0.0f; 
mA[8098] = 0.0f; 
mA[8099] = 0.0f; 
mA[8100] = ( (  -1.0f  * v_v57_aa_fw   )  +(  -1.0f  * v_v04_glyc_fw   )  +(  -1.0f  * v_v19_ed_fw   )  +(  -1.0f  * v_v16_ppp_fw   )  +(  -1.0f  * v_v06_glyc_bw   )  +(  -1.0f  * v_v13_ppp_fw   )  +(  -1.0f  * v_v05_glyc_fw   )   ) ; 
mA[8101] = 0.0f; 
mA[8102] = 0.0f; 
mA[8103] = 0.0f; 
mA[8104] = 0.0f; 
mA[8105] = 0.0f; 
mA[8106] = 0.0f; 
mA[8107] = 0.0f; 
mA[8108] = 0.0f; 
mA[8109] = 0.0f; 
mA[8110] = 0.0f; 
mA[8111] = 0.0f; 
mA[8112] = 0.0f; 
mA[8113] = 0.0f; 
mA[8114] = 0.0f; 
mA[8115] = 0.0f; 
mA[8116] = 0.0f; 
mA[8117] = 0.0f; 
mA[8118] = 0.0f; 
mA[8119] = 0.0f; 
mA[8120] = 0.0f; 
mA[8121] = 0.0f; 
mA[8122] = 0.0f; 
mA[8123] = 0.0f; 
mA[8124] = 0.0f; 
mA[8125] = 0.0f; 
mA[8126] = 0.0f; 
mA[8127] = 0.0f; 
mA[8128] = 0.0f; 
mA[8129] = 0.0f; 
mA[8130] = 0.0f; 
mA[8131] = 0.0f; 
mA[8132] = 0.0f; 
mA[8133] = 0.0f; 
mA[8134] = 0.0f; 
mA[8135] = 0.0f; 
mA[8136] = 0.0f; 
mA[8137] = 0.0f; 
mA[8138] = 0.0f; 
mA[8139] = 0.0f; 
mA[8140] = 0.0f; 
mA[8141] = 0.0f; 
mA[8142] = 0.0f; 
mA[8143] = 0.0f; 
mA[8144] = 0.0f; 
mA[8145] = 0.0f; 
mA[8146] = 0.0f; 
mA[8147] = 0.0f; 
mA[8148] = 0.0f; 
mA[8149] = 0.0f; 
mA[8150] = 0.0f; 
mA[8151] = 0.0f; 
mA[8152] = 0.0f; 
mA[8153] = 0.0f; 
mA[8154] = 0.0f; 
mA[8155] = 0.0f; 
mA[8156] = 0.0f; 
mA[8157] = 0.0f; 
mA[8158] = 0.0f; 
mA[8159] = 0.0f; 
mA[8160] = 0.0f; 
mA[8161] = 0.0f; 
mA[8162] = 0.0f; 
mA[8163] = 0.0f; 
mA[8164] = 0.0f; 
mA[8165] = 0.0f; 
mA[8166] = 0.0f; 
mA[8167] = 0.0f; 
mA[8168] = 0.0f; 
mA[8169] = 0.0f; 
mA[8170] = 0.0f; 
mA[8171] = 0.0f; 
mA[8172] = 0.0f; 
mA[8173] = 0.0f; 
mA[8174] = 0.0f; 
mA[8175] = 0.0f; 
mA[8176] = 0.0f; 
mA[8177] = 0.0f; 
mA[8178] = 0.0f; 
mA[8179] = 0.0f; 
mA[8180] = 0.0f; 
mA[8181] = 0.0f; 
mA[8182] = 0.0f; 
mA[8183] =  v_v06_glyc_fw ; 
mA[8184] = 0.0f; 
mA[8185] = 0.0f; 
mA[8186] = 0.0f; 
mA[8187] = 0.0f; 
mA[8188] =  v_v13_ppp_bw ; 
mA[8189] = 0.0f; 
mA[8190] = 0.0f; 
mA[8191] = 0.0f; 
mA[8192] = 0.0f; 
mA[8193] = 0.0f; 
mA[8194] = 0.0f; 
mA[8195] = (  v_v39_aa_fw  + v_v58_aa_fw   ) ; 
mA[8196] = 0.0f; 
mA[8197] = 0.0f; 
mA[8198] = 0.0f; 
mA[8199] = 0.0f; 
mA[8200] = 0.0f; 
mA[8201] = 0.0f; 
mA[8202] = 0.0f; 
mA[8203] = 0.0f; 
mA[8204] = 0.0f; 
mA[8205] = 0.0f; 
mA[8206] = 0.0f; 
mA[8207] = 0.0f; 
mA[8208] = 0.0f; 
mA[8209] = 0.0f; 
mA[8210] = 0.0f; 
mA[8211] = 0.0f; 
mA[8212] = 0.0f; 
mA[8213] = 0.0f; 
mA[8214] = 0.0f; 
mA[8215] = 0.0f; 
mA[8216] = 0.0f; 
mA[8217] = 0.0f; 
mA[8218] = 0.0f; 
mA[8219] = 0.0f; 
mA[8220] = 0.0f; 
mA[8221] = 0.0f; 
mA[8222] = 0.0f; 
mA[8223] = 0.0f; 
mA[8224] = 0.0f; 
mA[8225] = 0.0f; 
mA[8226] = 0.0f; 
mA[8227] = 0.0f; 
mA[8228] = 0.0f; 
mA[8229] = 0.0f; 
mA[8230] = 0.0f; 
mA[8231] = 0.0f; 
mA[8232] = 0.0f; 
mA[8233] = 0.0f; 
mA[8234] = 0.0f; 
mA[8235] = 0.0f; 
mA[8236] = 0.0f; 
mA[8237] = 0.0f; 
mA[8238] = 0.0f; 
mA[8239] = 0.0f; 
mA[8240] = 0.0f; 
mA[8241] = 0.0f; 
mA[8242] = 0.0f; 
mA[8243] = 0.0f; 
mA[8244] = 0.0f; 
mA[8245] = 0.0f; 
mA[8246] = 0.0f; 
mA[8247] = 0.0f; 
mA[8248] = 0.0f; 
mA[8249] = 0.0f; 
mA[8250] = ( (  -1.0f  * v_v37_aa_fw   )   ) ; 
mA[8251] = 0.0f; 
mA[8252] = 0.0f; 
mA[8253] = 0.0f; 
mA[8254] = 0.0f; 
mA[8255] =  v_v57_aa_fw ; 
mA[8256] = 0.0f; 
mA[8257] = 0.0f; 
mA[8258] = 0.0f; 
mA[8259] = 0.0f; 
mA[8260] = 0.0f; 
mA[8261] = 0.0f; 
mA[8262] = 0.0f; 
mA[8263] = 0.0f; 
mA[8264] = 0.0f; 
mA[8265] = 0.0f; 
mA[8266] = 0.0f; 
mA[8267] = 0.0f; 
mA[8268] = 0.0f; 
mA[8269] = 0.0f; 
mA[8270] = 0.0f; 
mA[8271] = 0.0f; 
mA[8272] = 0.0f; 
mA[8273] = 0.0f; 
mA[8274] = 0.0f; 
mA[8275] = 0.0f; 
mA[8276] = 0.0f; 
mA[8277] = 0.0f; 
mA[8278] = 0.0f; 
mA[8279] = 0.0f; 
mA[8280] = 0.0f; 
mA[8281] = 0.0f; 
mA[8282] = 0.0f; 
mA[8283] = 0.0f; 
mA[8284] = 0.0f; 
mA[8285] = 0.0f; 
mA[8286] = 0.0f; 
mA[8287] = 0.0f; 
mA[8288] = 0.0f; 
mA[8289] = 0.0f; 
mA[8290] = 0.0f; 
mA[8291] = 0.0f; 
mA[8292] = 0.0f; 
mA[8293] = 0.0f; 
mA[8294] = 0.0f; 
mA[8295] = 0.0f; 
mA[8296] = 0.0f; 
mA[8297] = 0.0f; 
mA[8298] = 0.0f; 
mA[8299] = 0.0f; 
mA[8300] = 0.0f; 
mA[8301] = 0.0f; 
mA[8302] = 0.0f; 
mA[8303] = 0.0f; 
mA[8304] = 0.0f; 
mA[8305] = 0.0f; 
mA[8306] = 0.0f; 
mA[8307] = 0.0f; 
mA[8308] = 0.0f; 
mA[8309] = 0.0f; 
mA[8310] = 0.0f; 
mA[8311] = 0.0f; 
mA[8312] = 0.0f; 
mA[8313] = 0.0f; 
mA[8314] = 0.0f; 
mA[8315] = 0.0f; 
mA[8316] = 0.0f; 
mA[8317] = 0.0f; 
mA[8318] = 0.0f; 
mA[8319] = 0.0f; 
mA[8320] = 0.0f; 
mA[8321] = 0.0f; 
mA[8322] = 0.0f; 
mA[8323] = 0.0f; 
mA[8324] = 0.0f; 
mA[8325] = 0.0f; 
mA[8326] = 0.0f; 
mA[8327] = 0.0f; 
mA[8328] = 0.0f; 
mA[8329] = 0.0f; 
mA[8330] = 0.0f; 
mA[8331] = 0.0f; 
mA[8332] = 0.0f; 
mA[8333] = 0.0f; 
mA[8334] = 0.0f; 
mA[8335] = 0.0f; 
mA[8336] = 0.0f; 
mA[8337] = 0.0f; 
mA[8338] = 0.0f; 
mA[8339] = 0.0f; 
mA[8340] = 0.0f; 
mA[8341] = 0.0f; 
mA[8342] = 0.0f; 
mA[8343] = 0.0f; 
mA[8344] = 0.0f; 
mA[8345] = (  v_v58_aa_fw  + v_v39_aa_fw   ) ; 
mA[8346] = 0.0f; 
mA[8347] = 0.0f; 
mA[8348] = 0.0f; 
mA[8349] = 0.0f; 
mA[8350] = 0.0f; 
mA[8351] = 0.0f; 
mA[8352] = 0.0f; 
mA[8353] = 0.0f; 
mA[8354] = 0.0f; 
mA[8355] = 0.0f; 
mA[8356] = 0.0f; 
mA[8357] = 0.0f; 
mA[8358] = 0.0f; 
mA[8359] = 0.0f; 
mA[8360] = 0.0f; 
mA[8361] = 0.0f; 
mA[8362] = 0.0f; 
mA[8363] = 0.0f; 
mA[8364] = 0.0f; 
mA[8365] = 0.0f; 
mA[8366] = 0.0f; 
mA[8367] = 0.0f; 
mA[8368] = 0.0f; 
mA[8369] = 0.0f; 
mA[8370] = 0.0f; 
mA[8371] = 0.0f; 
mA[8372] = 0.0f; 
mA[8373] = 0.0f; 
mA[8374] = 0.0f; 
mA[8375] = 0.0f; 
mA[8376] = 0.0f; 
mA[8377] = 0.0f; 
mA[8378] = 0.0f; 
mA[8379] = 0.0f; 
mA[8380] = 0.0f; 
mA[8381] = 0.0f; 
mA[8382] = 0.0f; 
mA[8383] = 0.0f; 
mA[8384] = 0.0f; 
mA[8385] = 0.0f; 
mA[8386] = 0.0f; 
mA[8387] = 0.0f; 
mA[8388] = 0.0f; 
mA[8389] = 0.0f; 
mA[8390] = 0.0f; 
mA[8391] = 0.0f; 
mA[8392] = 0.0f; 
mA[8393] = 0.0f; 
mA[8394] = 0.0f; 
mA[8395] = 0.0f; 
mA[8396] = 0.0f; 
mA[8397] = 0.0f; 
mA[8398] = 0.0f; 
mA[8399] = 0.0f; 
mA[8400] = ( (  -1.0f  * v_v37_aa_fw   )   ) ; 
mA[8401] = 0.0f; 
mA[8402] = 0.0f; 
mA[8403] = 0.0f; 
mA[8404] = 0.0f; 
mA[8405] =  v_v57_aa_fw ; 
mA[8406] = 0.0f; 
mA[8407] = 0.0f; 
mA[8408] = 0.0f; 
mA[8409] = 0.0f; 
mA[8410] = 0.0f; 
mA[8411] = 0.0f; 
mA[8412] = 0.0f; 
mA[8413] = 0.0f; 
mA[8414] = 0.0f; 
mA[8415] = 0.0f; 
mA[8416] = 0.0f; 
mA[8417] = 0.0f; 
mA[8418] = 0.0f; 
mA[8419] = 0.0f; 
mA[8420] = 0.0f; 
mA[8421] = 0.0f; 
mA[8422] = 0.0f; 
mA[8423] = 0.0f; 
mA[8424] = 0.0f; 
mA[8425] = 0.0f; 
mA[8426] = 0.0f; 
mA[8427] = 0.0f; 
mA[8428] = 0.0f; 
mA[8429] = 0.0f; 
mA[8430] = 0.0f; 
mA[8431] = 0.0f; 
mA[8432] = 0.0f; 
mA[8433] = 0.0f; 
mA[8434] = 0.0f; 
mA[8435] = 0.0f; 
mA[8436] = 0.0f; 
mA[8437] = 0.0f; 
mA[8438] = 0.0f; 
mA[8439] = 0.0f; 
mA[8440] = 0.0f; 
mA[8441] = 0.0f; 
mA[8442] = 0.0f; 
mA[8443] = 0.0f; 
mA[8444] = 0.0f; 
mA[8445] = 0.0f; 
mA[8446] = 0.0f; 
mA[8447] = 0.0f; 
mA[8448] = 0.0f; 
mA[8449] = 0.0f; 
mA[8450] = 0.0f; 
mA[8451] = 0.0f; 
mA[8452] = 0.0f; 
mA[8453] = 0.0f; 
mA[8454] = 0.0f; 
mA[8455] = 0.0f; 
mA[8456] = 0.0f; 
mA[8457] = 0.0f; 
mA[8458] = 0.0f; 
mA[8459] = 0.0f; 
mA[8460] = 0.0f; 
mA[8461] = 0.0f; 
mA[8462] = 0.0f; 
mA[8463] = 0.0f; 
mA[8464] = 0.0f; 
mA[8465] = 0.0f; 
mA[8466] = 0.0f; 
mA[8467] = 0.0f; 
mA[8468] = 0.0f; 
mA[8469] = 0.0f; 
mA[8470] = 0.0f; 
mA[8471] = 0.0f; 
mA[8472] = 0.0f; 
mA[8473] = 0.0f; 
mA[8474] = 0.0f; 
mA[8475] = 0.0f; 
mA[8476] = 0.0f; 
mA[8477] = 0.0f; 
mA[8478] = 0.0f; 
mA[8479] = 0.0f; 
mA[8480] = 0.0f; 
mA[8481] = 0.0f; 
mA[8482] = 0.0f; 
mA[8483] = 0.0f; 
mA[8484] = 0.0f; 
mA[8485] = 0.0f; 
mA[8486] = 0.0f; 
mA[8487] = 0.0f; 
mA[8488] = 0.0f; 
mA[8489] = 0.0f; 
mA[8490] = 0.0f; 
mA[8491] = 0.0f; 
mA[8492] = 0.0f; 
mA[8493] = 0.0f; 
mA[8494] = 0.0f; 
mA[8495] = (  v_v58_aa_fw  + v_v39_aa_fw   ) ; 
mA[8496] = 0.0f; 
mA[8497] = 0.0f; 
mA[8498] = 0.0f; 
mA[8499] = 0.0f; 
mA[8500] = 0.0f; 
mA[8501] = 0.0f; 
mA[8502] = 0.0f; 
mA[8503] = 0.0f; 
mA[8504] = 0.0f; 
mA[8505] = 0.0f; 
mA[8506] = 0.0f; 
mA[8507] = 0.0f; 
mA[8508] = 0.0f; 
mA[8509] = 0.0f; 
mA[8510] = 0.0f; 
mA[8511] = 0.0f; 
mA[8512] = 0.0f; 
mA[8513] = 0.0f; 
mA[8514] = 0.0f; 
mA[8515] = 0.0f; 
mA[8516] = 0.0f; 
mA[8517] = 0.0f; 
mA[8518] = 0.0f; 
mA[8519] = 0.0f; 
mA[8520] = 0.0f; 
mA[8521] = 0.0f; 
mA[8522] = 0.0f; 
mA[8523] = 0.0f; 
mA[8524] = 0.0f; 
mA[8525] = 0.0f; 
mA[8526] = 0.0f; 
mA[8527] = 0.0f; 
mA[8528] = 0.0f; 
mA[8529] = 0.0f; 
mA[8530] = 0.0f; 
mA[8531] = 0.0f; 
mA[8532] = 0.0f; 
mA[8533] = 0.0f; 
mA[8534] = 0.0f; 
mA[8535] = 0.0f; 
mA[8536] = 0.0f; 
mA[8537] = 0.0f; 
mA[8538] = 0.0f; 
mA[8539] = 0.0f; 
mA[8540] = 0.0f; 
mA[8541] = 0.0f; 
mA[8542] = 0.0f; 
mA[8543] = 0.0f; 
mA[8544] = 0.0f; 
mA[8545] = 0.0f; 
mA[8546] = 0.0f; 
mA[8547] = 0.0f; 
mA[8548] = 0.0f; 
mA[8549] = 0.0f; 
mA[8550] = ( (  -1.0f  * v_v37_aa_fw   )   ) ; 
mA[8551] = 0.0f; 
mA[8552] = 0.0f; 
mA[8553] = 0.0f; 
mA[8554] = 0.0f; 
mA[8555] =  v_v57_aa_fw ; 
mA[8556] = 0.0f; 
mA[8557] = 0.0f; 
mA[8558] = 0.0f; 
mA[8559] = 0.0f; 
mA[8560] = 0.0f; 
mA[8561] = 0.0f; 
mA[8562] = 0.0f; 
mA[8563] = 0.0f; 
mA[8564] = 0.0f; 
mA[8565] = 0.0f; 
mA[8566] = 0.0f; 
mA[8567] = 0.0f; 
mA[8568] = 0.0f; 
mA[8569] = 0.0f; 
mA[8570] = 0.0f; 
mA[8571] = 0.0f; 
mA[8572] = 0.0f; 
mA[8573] = 0.0f; 
mA[8574] = 0.0f; 
mA[8575] = 0.0f; 
mA[8576] = 0.0f; 
mA[8577] = 0.0f; 
mA[8578] = 0.0f; 
mA[8579] = 0.0f; 
mA[8580] = 0.0f; 
mA[8581] = 0.0f; 
mA[8582] = 0.0f; 
mA[8583] = 0.0f; 
mA[8584] = 0.0f; 
mA[8585] = 0.0f; 
mA[8586] = 0.0f; 
mA[8587] = 0.0f; 
mA[8588] = 0.0f; 
mA[8589] = 0.0f; 
mA[8590] = 0.0f; 
mA[8591] = 0.0f; 
mA[8592] = 0.0f; 
mA[8593] = 0.0f; 
mA[8594] = 0.0f; 
mA[8595] = 0.0f; 
mA[8596] = 0.0f; 
mA[8597] = 0.0f; 
mA[8598] = 0.0f; 
mA[8599] = 0.0f; 
mA[8600] = 0.0f; 
mA[8601] = 0.0f; 
mA[8602] = 0.0f; 
mA[8603] = 0.0f; 
mA[8604] = 0.0f; 
mA[8605] = 0.0f; 
mA[8606] = 0.0f; 
mA[8607] = 0.0f; 
mA[8608] = 0.0f; 
mA[8609] = 0.0f; 
mA[8610] = 0.0f; 
mA[8611] = 0.0f; 
mA[8612] = 0.0f; 
mA[8613] = 0.0f; 
mA[8614] = 0.0f; 
mA[8615] = 0.0f; 
mA[8616] = 0.0f; 
mA[8617] = 0.0f; 
mA[8618] = 0.0f; 
mA[8619] = 0.0f; 
mA[8620] = 0.0f; 
mA[8621] = 0.0f; 
mA[8622] = 0.0f; 
mA[8623] = 0.0f; 
mA[8624] = 0.0f; 
mA[8625] = 0.0f; 
mA[8626] = 0.0f; 
mA[8627] = 0.0f; 
mA[8628] = 0.0f; 
mA[8629] = 0.0f; 
mA[8630] = 0.0f; 
mA[8631] = 0.0f; 
mA[8632] = 0.0f; 
mA[8633] = 0.0f; 
mA[8634] = 0.0f; 
mA[8635] = 0.0f; 
mA[8636] = 0.0f; 
mA[8637] = 0.0f; 
mA[8638] = 0.0f; 
mA[8639] = 0.0f; 
mA[8640] = 0.0f; 
mA[8641] = 0.0f; 
mA[8642] = 0.0f; 
mA[8643] = 0.0f; 
mA[8644] = 0.0f; 
mA[8645] = (  v_v39_aa_fw  + v_v58_aa_fw   ) ; 
mA[8646] = 0.0f; 
mA[8647] = 0.0f; 
mA[8648] = 0.0f; 
mA[8649] = 0.0f; 
mA[8650] = 0.0f; 
mA[8651] = 0.0f; 
mA[8652] = 0.0f; 
mA[8653] = 0.0f; 
mA[8654] = 0.0f; 
mA[8655] = 0.0f; 
mA[8656] = 0.0f; 
mA[8657] = 0.0f; 
mA[8658] = 0.0f; 
mA[8659] = 0.0f; 
mA[8660] = 0.0f; 
mA[8661] = 0.0f; 
mA[8662] = 0.0f; 
mA[8663] = 0.0f; 
mA[8664] = 0.0f; 
mA[8665] = 0.0f; 
mA[8666] = 0.0f; 
mA[8667] = 0.0f; 
mA[8668] = 0.0f; 
mA[8669] = 0.0f; 
mA[8670] = 0.0f; 
mA[8671] = 0.0f; 
mA[8672] = 0.0f; 
mA[8673] = 0.0f; 
mA[8674] = 0.0f; 
mA[8675] = 0.0f; 
mA[8676] = 0.0f; 
mA[8677] = 0.0f; 
mA[8678] = 0.0f; 
mA[8679] = 0.0f; 
mA[8680] = 0.0f; 
mA[8681] = 0.0f; 
mA[8682] = 0.0f; 
mA[8683] = 0.0f; 
mA[8684] = 0.0f; 
mA[8685] = 0.0f; 
mA[8686] = 0.0f; 
mA[8687] = 0.0f; 
mA[8688] = 0.0f; 
mA[8689] = 0.0f; 
mA[8690] = 0.0f; 
mA[8691] = 0.0f; 
mA[8692] = 0.0f; 
mA[8693] = 0.0f; 
mA[8694] = 0.0f; 
mA[8695] = 0.0f; 
mA[8696] = 0.0f; 
mA[8697] = 0.0f; 
mA[8698] = 0.0f; 
mA[8699] = 0.0f; 
mA[8700] = ( (  -1.0f  * v_v37_aa_fw   )   ) ; 
mA[8701] = 0.0f; 
mA[8702] = 0.0f; 
mA[8703] = 0.0f; 
mA[8704] = 0.0f; 
mA[8705] =  v_v57_aa_fw ; 
mA[8706] = 0.0f; 
mA[8707] = 0.0f; 
mA[8708] = 0.0f; 
mA[8709] = 0.0f; 
mA[8710] = 0.0f; 
mA[8711] = 0.0f; 
mA[8712] = 0.0f; 
mA[8713] = 0.0f; 
mA[8714] = 0.0f; 
mA[8715] = 0.0f; 
mA[8716] = 0.0f; 
mA[8717] = 0.0f; 
mA[8718] = 0.0f; 
mA[8719] = 0.0f; 
mA[8720] = 0.0f; 
mA[8721] = 0.0f; 
mA[8722] = 0.0f; 
mA[8723] = 0.0f; 
mA[8724] = 0.0f; 
mA[8725] = 0.0f; 
mA[8726] = 0.0f; 
mA[8727] = 0.0f; 
mA[8728] = 0.0f; 
mA[8729] = 0.0f; 
mA[8730] = 0.0f; 
mA[8731] = 0.0f; 
mA[8732] = 0.0f; 
mA[8733] = 0.0f; 
mA[8734] = 0.0f; 
mA[8735] = 0.0f; 
mA[8736] = 0.0f; 
mA[8737] = 0.0f; 
mA[8738] = 0.0f; 
mA[8739] = 0.0f; 
mA[8740] = 0.0f; 
mA[8741] = 0.0f; 
mA[8742] = 0.0f; 
mA[8743] = 0.0f; 
mA[8744] = 0.0f; 
mA[8745] = 0.0f; 
mA[8746] = 0.0f; 
mA[8747] = 0.0f; 
mA[8748] = 0.0f; 
mA[8749] = 0.0f; 
mA[8750] = 0.0f; 
mA[8751] = 0.0f; 
mA[8752] = 0.0f; 
mA[8753] = 0.0f; 
mA[8754] = 0.0f; 
mA[8755] = 0.0f; 
mA[8756] = 0.0f; 
mA[8757] = 0.0f; 
mA[8758] = 0.0f; 
mA[8759] = 0.0f; 
mA[8760] = 0.0f; 
mA[8761] = 0.0f; 
mA[8762] = 0.0f; 
mA[8763] = 0.0f; 
mA[8764] = 0.0f; 
mA[8765] = 0.0f; 
mA[8766] = 0.0f; 
mA[8767] = 0.0f; 
mA[8768] = 0.0f; 
mA[8769] = 0.0f; 
mA[8770] = 0.0f; 
mA[8771] = 0.0f; 
mA[8772] = 0.0f; 
mA[8773] = 0.0f; 
mA[8774] = 0.0f; 
mA[8775] = 0.0f; 
mA[8776] = 0.0f; 
mA[8777] = 0.0f; 
mA[8778] = 0.0f; 
mA[8779] = 0.0f; 
mA[8780] = 0.0f; 
mA[8781] = 0.0f; 
mA[8782] = 0.0f; 
mA[8783] = 0.0f; 
mA[8784] = 0.0f; 
mA[8785] = 0.0f; 
mA[8786] = 0.0f; 
mA[8787] = 0.0f; 
mA[8788] = 0.0f; 
mA[8789] = 0.0f; 
mA[8790] = 0.0f; 
mA[8791] = 0.0f; 
mA[8792] = 0.0f; 
mA[8793] = 0.0f; 
mA[8794] = 0.0f; 
mA[8795] = (  v_v58_aa_fw  + v_v39_aa_fw   ) ; 
mA[8796] = 0.0f; 
mA[8797] = 0.0f; 
mA[8798] = 0.0f; 
mA[8799] = 0.0f; 
mA[8800] = 0.0f; 
mA[8801] = 0.0f; 
mA[8802] = 0.0f; 
mA[8803] = 0.0f; 
mA[8804] = 0.0f; 
mA[8805] = 0.0f; 
mA[8806] = 0.0f; 
mA[8807] = 0.0f; 
mA[8808] = 0.0f; 
mA[8809] = 0.0f; 
mA[8810] = 0.0f; 
mA[8811] = 0.0f; 
mA[8812] = 0.0f; 
mA[8813] = 0.0f; 
mA[8814] = 0.0f; 
mA[8815] = 0.0f; 
mA[8816] = 0.0f; 
mA[8817] = 0.0f; 
mA[8818] = 0.0f; 
mA[8819] = 0.0f; 
mA[8820] = 0.0f; 
mA[8821] = 0.0f; 
mA[8822] = 0.0f; 
mA[8823] = 0.0f; 
mA[8824] = 0.0f; 
mA[8825] = 0.0f; 
mA[8826] = 0.0f; 
mA[8827] = 0.0f; 
mA[8828] = 0.0f; 
mA[8829] = 0.0f; 
mA[8830] = 0.0f; 
mA[8831] = 0.0f; 
mA[8832] = 0.0f; 
mA[8833] = 0.0f; 
mA[8834] = 0.0f; 
mA[8835] = 0.0f; 
mA[8836] = 0.0f; 
mA[8837] = 0.0f; 
mA[8838] = 0.0f; 
mA[8839] = 0.0f; 
mA[8840] = 0.0f; 
mA[8841] = 0.0f; 
mA[8842] = 0.0f; 
mA[8843] = 0.0f; 
mA[8844] = 0.0f; 
mA[8845] = 0.0f; 
mA[8846] = 0.0f; 
mA[8847] = 0.0f; 
mA[8848] = 0.0f; 
mA[8849] = 0.0f; 
mA[8850] = ( (  -1.0f  * v_v37_aa_fw   )   ) ; 
mA[8851] = 0.0f; 
mA[8852] = 0.0f; 
mA[8853] = 0.0f; 
mA[8854] = 0.0f; 
mA[8855] =  v_v57_aa_fw ; 
mA[8856] = 0.0f; 
mA[8857] = 0.0f; 
mA[8858] = 0.0f; 
mA[8859] = 0.0f; 
mA[8860] = 0.0f; 
mA[8861] = 0.0f; 
mA[8862] = 0.0f; 
mA[8863] = 0.0f; 
mA[8864] = 0.0f; 
mA[8865] = 0.0f; 
mA[8866] = 0.0f; 
mA[8867] = 0.0f; 
mA[8868] = 0.0f; 
mA[8869] = 0.0f; 
mA[8870] = 0.0f; 
mA[8871] = 0.0f; 
mA[8872] = 0.0f; 
mA[8873] = 0.0f; 
mA[8874] = 0.0f; 
mA[8875] = 0.0f; 
mA[8876] = 0.0f; 
mA[8877] = 0.0f; 
mA[8878] = 0.0f; 
mA[8879] = 0.0f; 
mA[8880] = 0.0f; 
mA[8881] = 0.0f; 
mA[8882] = 0.0f; 
mA[8883] = 0.0f; 
mA[8884] = 0.0f; 
mA[8885] = 0.0f; 
mA[8886] = 0.0f; 
mA[8887] = 0.0f; 
mA[8888] = 0.0f; 
mA[8889] = 0.0f; 
mA[8890] = 0.0f; 
mA[8891] = 0.0f; 
mA[8892] = 0.0f; 
mA[8893] = 0.0f; 
mA[8894] = 0.0f; 
mA[8895] = 0.0f; 
mA[8896] = 0.0f; 
mA[8897] = 0.0f; 
mA[8898] = 0.0f; 
mA[8899] = 0.0f; 
mA[8900] = 0.0f; 
mA[8901] = 0.0f; 
mA[8902] = 0.0f; 
mA[8903] = 0.0f; 
mA[8904] = 0.0f; 
mA[8905] = 0.0f; 
mA[8906] = 0.0f; 
mA[8907] = 0.0f; 
mA[8908] = 0.0f; 
mA[8909] = 0.0f; 
mA[8910] = 0.0f; 
mA[8911] = 0.0f; 
mA[8912] = 0.0f; 
mA[8913] = 0.0f; 
mA[8914] = 0.0f; 
mA[8915] = 0.0f; 
mA[8916] = 0.0f; 
mA[8917] = 0.0f; 
mA[8918] = 0.0f; 
mA[8919] = 0.0f; 
mA[8920] = 0.0f; 
mA[8921] = 0.0f; 
mA[8922] = 0.0f; 
mA[8923] = 0.0f; 
mA[8924] = 0.0f; 
mA[8925] = 0.0f; 
mA[8926] = 0.0f; 
mA[8927] = 0.0f; 
mA[8928] = 0.0f; 
mA[8929] = 0.0f; 
mA[8930] = 0.0f; 
mA[8931] = 0.0f; 
mA[8932] = 0.0f; 
mA[8933] = 0.0f; 
mA[8934] = 0.0f; 
mA[8935] = 0.0f; 
mA[8936] = 0.0f; 
mA[8937] = 0.0f; 
mA[8938] = 0.0f; 
mA[8939] = 0.0f; 
mA[8940] = (  v_v42_aa_fw  + v_v55_aa_fw  + v_v53_aa_fw  + v_v48_aa_fw_d  + v_v40_aa_fw  + v_v48_aa_fw_a  + v_v52_aa_fw  + v_v48_aa_fw_b  + v_v54_aa_fw  + v_v43_aa_fw  + v_v56_aa_fw  + v_v48_aa_fw_c   ) ; 
mA[8941] = 0.0f; 
mA[8942] = 0.0f; 
mA[8943] = 0.0f; 
mA[8944] = 0.0f; 
mA[8945] = 0.0f; 
mA[8946] = 0.0f; 
mA[8947] = 0.0f; 
mA[8948] = 0.0f; 
mA[8949] = 0.0f; 
mA[8950] = 0.0f; 
mA[8951] = 0.0f; 
mA[8952] = 0.0f; 
mA[8953] = 0.0f; 
mA[8954] = 0.0f; 
mA[8955] = 0.0f; 
mA[8956] = 0.0f; 
mA[8957] = 0.0f; 
mA[8958] = 0.0f; 
mA[8959] = 0.0f; 
mA[8960] = 0.0f; 
mA[8961] = 0.0f; 
mA[8962] = 0.0f; 
mA[8963] = 0.0f; 
mA[8964] = 0.0f; 
mA[8965] = 0.0f; 
mA[8966] = 0.0f; 
mA[8967] = 0.0f; 
mA[8968] = 0.0f; 
mA[8969] = 0.0f; 
mA[8970] = 0.0f; 
mA[8971] = 0.0f; 
mA[8972] = 0.0f; 
mA[8973] = 0.0f; 
mA[8974] = 0.0f; 
mA[8975] = 0.0f; 
mA[8976] = 0.0f; 
mA[8977] = 0.0f; 
mA[8978] = 0.0f; 
mA[8979] = 0.0f; 
mA[8980] = 0.0f; 
mA[8981] = 0.0f; 
mA[8982] = 0.0f; 
mA[8983] = 0.0f; 
mA[8984] = 0.0f; 
mA[8985] = 0.0f; 
mA[8986] = 0.0f; 
mA[8987] = 0.0f; 
mA[8988] = 0.0f; 
mA[8989] = 0.0f; 
mA[8990] = 0.0f; 
mA[8991] = 0.0f; 
mA[8992] = 0.0f; 
mA[8993] = 0.0f; 
mA[8994] = 0.0f; 
mA[8995] =  v_v37_aa_fw ; 
mA[8996] = 0.0f; 
mA[8997] = 0.0f; 
mA[8998] = 0.0f; 
mA[8999] = 0.0f; 
mA[9000] = ( (  -1.0f  * v_v57_aa_fw   )  +(  -1.0f  * v_v36_aa_fw   )   ) ; 
mA[9001] = 0.0f; 
mA[9002] = 0.0f; 
mA[9003] = 0.0f; 
mA[9004] = 0.0f; 
mA[9005] = 0.0f; 
mA[9006] = 0.0f; 
mA[9007] = 0.0f; 
mA[9008] = 0.0f; 
mA[9009] = 0.0f; 
mA[9010] = 0.0f; 
mA[9011] = 0.0f; 
mA[9012] = 0.0f; 
mA[9013] = 0.0f; 
mA[9014] = 0.0f; 
mA[9015] = 0.0f; 
mA[9016] = 0.0f; 
mA[9017] = 0.0f; 
mA[9018] = 0.0f; 
mA[9019] = 0.0f; 
mA[9020] = 0.0f; 
mA[9021] = 0.0f; 
mA[9022] = 0.0f; 
mA[9023] = 0.0f; 
mA[9024] = 0.0f; 
mA[9025] = 0.0f; 
mA[9026] = 0.0f; 
mA[9027] = 0.0f; 
mA[9028] = 0.0f; 
mA[9029] = 0.0f; 
mA[9030] = 0.0f; 
mA[9031] = 0.0f; 
mA[9032] = 0.0f; 
mA[9033] = 0.0f; 
mA[9034] = 0.0f; 
mA[9035] = 0.0f; 
mA[9036] = 0.0f; 
mA[9037] = 0.0f; 
mA[9038] = 0.0f; 
mA[9039] = 0.0f; 
mA[9040] = 0.0f; 
mA[9041] = 0.0f; 
mA[9042] = 0.0f; 
mA[9043] = 0.0f; 
mA[9044] = 0.0f; 
mA[9045] = 0.0f; 
mA[9046] = 0.0f; 
mA[9047] = 0.0f; 
mA[9048] = 0.0f; 
mA[9049] = 0.0f; 
mA[9050] = 0.0f; 
mA[9051] = 0.0f; 
mA[9052] = 0.0f; 
mA[9053] = 0.0f; 
mA[9054] = 0.0f; 
mA[9055] = 0.0f; 
mA[9056] = 0.0f; 
mA[9057] = 0.0f; 
mA[9058] = 0.0f; 
mA[9059] = 0.0f; 
mA[9060] = 0.0f; 
mA[9061] = 0.0f; 
mA[9062] = 0.0f; 
mA[9063] = 0.0f; 
mA[9064] = 0.0f; 
mA[9065] = 0.0f; 
mA[9066] = 0.0f; 
mA[9067] = 0.0f; 
mA[9068] = 0.0f; 
mA[9069] = 0.0f; 
mA[9070] = 0.0f; 
mA[9071] = 0.0f; 
mA[9072] = 0.0f; 
mA[9073] = 0.0f; 
mA[9074] = 0.0f; 
mA[9075] = 0.0f; 
mA[9076] = 0.0f; 
mA[9077] = 0.0f; 
mA[9078] = 0.0f; 
mA[9079] = 0.0f; 
mA[9080] = 0.0f; 
mA[9081] = 0.0f; 
mA[9082] = 0.0f; 
mA[9083] = 0.0f; 
mA[9084] = 0.0f; 
mA[9085] = 0.0f; 
mA[9086] = 0.0f; 
mA[9087] = 0.0f; 
mA[9088] = 0.0f; 
mA[9089] = 0.0f; 
mA[9090] = (  v_v43_aa_fw  + v_v48_aa_fw_c  + v_v40_aa_fw  + v_v42_aa_fw  + v_v48_aa_fw_a  + v_v54_aa_fw  + v_v55_aa_fw  + v_v48_aa_fw_b  + v_v56_aa_fw  + v_v48_aa_fw_d  + v_v53_aa_fw  + v_v52_aa_fw   ) ; 
mA[9091] = 0.0f; 
mA[9092] = 0.0f; 
mA[9093] = 0.0f; 
mA[9094] = 0.0f; 
mA[9095] = 0.0f; 
mA[9096] = 0.0f; 
mA[9097] = 0.0f; 
mA[9098] = 0.0f; 
mA[9099] = 0.0f; 
mA[9100] = 0.0f; 
mA[9101] = 0.0f; 
mA[9102] = 0.0f; 
mA[9103] = 0.0f; 
mA[9104] = 0.0f; 
mA[9105] = 0.0f; 
mA[9106] = 0.0f; 
mA[9107] = 0.0f; 
mA[9108] = 0.0f; 
mA[9109] = 0.0f; 
mA[9110] = 0.0f; 
mA[9111] = 0.0f; 
mA[9112] = 0.0f; 
mA[9113] = 0.0f; 
mA[9114] = 0.0f; 
mA[9115] = 0.0f; 
mA[9116] = 0.0f; 
mA[9117] = 0.0f; 
mA[9118] = 0.0f; 
mA[9119] = 0.0f; 
mA[9120] = 0.0f; 
mA[9121] = 0.0f; 
mA[9122] = 0.0f; 
mA[9123] = 0.0f; 
mA[9124] = 0.0f; 
mA[9125] = 0.0f; 
mA[9126] = 0.0f; 
mA[9127] = 0.0f; 
mA[9128] = 0.0f; 
mA[9129] = 0.0f; 
mA[9130] = 0.0f; 
mA[9131] = 0.0f; 
mA[9132] = 0.0f; 
mA[9133] = 0.0f; 
mA[9134] = 0.0f; 
mA[9135] = 0.0f; 
mA[9136] = 0.0f; 
mA[9137] = 0.0f; 
mA[9138] = 0.0f; 
mA[9139] = 0.0f; 
mA[9140] = 0.0f; 
mA[9141] = 0.0f; 
mA[9142] = 0.0f; 
mA[9143] = 0.0f; 
mA[9144] = 0.0f; 
mA[9145] =  v_v37_aa_fw ; 
mA[9146] = 0.0f; 
mA[9147] = 0.0f; 
mA[9148] = 0.0f; 
mA[9149] = 0.0f; 
mA[9150] = ( (  -1.0f  * v_v36_aa_fw   )  +(  -1.0f  * v_v57_aa_fw   )   ) ; 
mA[9151] = 0.0f; 
mA[9152] = 0.0f; 
mA[9153] = 0.0f; 
mA[9154] = 0.0f; 
mA[9155] = 0.0f; 
mA[9156] = 0.0f; 
mA[9157] = 0.0f; 
mA[9158] = 0.0f; 
mA[9159] = 0.0f; 
mA[9160] = 0.0f; 
mA[9161] = 0.0f; 
mA[9162] = 0.0f; 
mA[9163] = 0.0f; 
mA[9164] = 0.0f; 
mA[9165] = 0.0f; 
mA[9166] = 0.0f; 
mA[9167] = 0.0f; 
mA[9168] = 0.0f; 
mA[9169] = 0.0f; 
mA[9170] = 0.0f; 
mA[9171] = 0.0f; 
mA[9172] = 0.0f; 
mA[9173] = 0.0f; 
mA[9174] = 0.0f; 
mA[9175] = 0.0f; 
mA[9176] = 0.0f; 
mA[9177] = 0.0f; 
mA[9178] = 0.0f; 
mA[9179] = 0.0f; 
mA[9180] = 0.0f; 
mA[9181] = 0.0f; 
mA[9182] = 0.0f; 
mA[9183] = 0.0f; 
mA[9184] = 0.0f; 
mA[9185] = 0.0f; 
mA[9186] = 0.0f; 
mA[9187] = 0.0f; 
mA[9188] = 0.0f; 
mA[9189] = 0.0f; 
mA[9190] = 0.0f; 
mA[9191] = 0.0f; 
mA[9192] = 0.0f; 
mA[9193] = 0.0f; 
mA[9194] = 0.0f; 
mA[9195] = 0.0f; 
mA[9196] = 0.0f; 
mA[9197] = 0.0f; 
mA[9198] = 0.0f; 
mA[9199] = 0.0f; 
mA[9200] = 0.0f; 
mA[9201] = 0.0f; 
mA[9202] = 0.0f; 
mA[9203] = 0.0f; 
mA[9204] = 0.0f; 
mA[9205] = 0.0f; 
mA[9206] = 0.0f; 
mA[9207] = 0.0f; 
mA[9208] = 0.0f; 
mA[9209] = 0.0f; 
mA[9210] = 0.0f; 
mA[9211] = 0.0f; 
mA[9212] = 0.0f; 
mA[9213] = 0.0f; 
mA[9214] = 0.0f; 
mA[9215] = 0.0f; 
mA[9216] = 0.0f; 
mA[9217] = 0.0f; 
mA[9218] = 0.0f; 
mA[9219] = 0.0f; 
mA[9220] = 0.0f; 
mA[9221] = 0.0f; 
mA[9222] = 0.0f; 
mA[9223] = 0.0f; 
mA[9224] = 0.0f; 
mA[9225] = 0.0f; 
mA[9226] = 0.0f; 
mA[9227] = 0.0f; 
mA[9228] = 0.0f; 
mA[9229] = 0.0f; 
mA[9230] = 0.0f; 
mA[9231] = 0.0f; 
mA[9232] = 0.0f; 
mA[9233] = 0.0f; 
mA[9234] = 0.0f; 
mA[9235] = 0.0f; 
mA[9236] = 0.0f; 
mA[9237] = 0.0f; 
mA[9238] = 0.0f; 
mA[9239] = 0.0f; 
mA[9240] = (  v_v48_aa_fw_c  + v_v48_aa_fw_b  + v_v48_aa_fw_a  + v_v56_aa_fw  + v_v52_aa_fw  + v_v48_aa_fw_d  + v_v54_aa_fw  + v_v40_aa_fw  + v_v53_aa_fw  + v_v42_aa_fw  + v_v43_aa_fw  + v_v55_aa_fw   ) ; 
mA[9241] = 0.0f; 
mA[9242] = 0.0f; 
mA[9243] = 0.0f; 
mA[9244] = 0.0f; 
mA[9245] = 0.0f; 
mA[9246] = 0.0f; 
mA[9247] = 0.0f; 
mA[9248] = 0.0f; 
mA[9249] = 0.0f; 
mA[9250] = 0.0f; 
mA[9251] = 0.0f; 
mA[9252] = 0.0f; 
mA[9253] = 0.0f; 
mA[9254] = 0.0f; 
mA[9255] = 0.0f; 
mA[9256] = 0.0f; 
mA[9257] = 0.0f; 
mA[9258] = 0.0f; 
mA[9259] = 0.0f; 
mA[9260] = 0.0f; 
mA[9261] = 0.0f; 
mA[9262] = 0.0f; 
mA[9263] = 0.0f; 
mA[9264] = 0.0f; 
mA[9265] = 0.0f; 
mA[9266] = 0.0f; 
mA[9267] = 0.0f; 
mA[9268] = 0.0f; 
mA[9269] = 0.0f; 
mA[9270] = 0.0f; 
mA[9271] = 0.0f; 
mA[9272] = 0.0f; 
mA[9273] = 0.0f; 
mA[9274] = 0.0f; 
mA[9275] = 0.0f; 
mA[9276] = 0.0f; 
mA[9277] = 0.0f; 
mA[9278] = 0.0f; 
mA[9279] = 0.0f; 
mA[9280] = 0.0f; 
mA[9281] = 0.0f; 
mA[9282] = 0.0f; 
mA[9283] = 0.0f; 
mA[9284] = 0.0f; 
mA[9285] = 0.0f; 
mA[9286] = 0.0f; 
mA[9287] = 0.0f; 
mA[9288] = 0.0f; 
mA[9289] = 0.0f; 
mA[9290] = 0.0f; 
mA[9291] = 0.0f; 
mA[9292] = 0.0f; 
mA[9293] = 0.0f; 
mA[9294] = 0.0f; 
mA[9295] =  v_v37_aa_fw ; 
mA[9296] = 0.0f; 
mA[9297] = 0.0f; 
mA[9298] = 0.0f; 
mA[9299] = 0.0f; 
mA[9300] = ( (  -1.0f  * v_v57_aa_fw   )  +(  -1.0f  * v_v36_aa_fw   )   ) ; 
mA[9301] = 0.0f; 
mA[9302] = 0.0f; 
mA[9303] = 0.0f; 
mA[9304] = 0.0f; 
mA[9305] = 0.0f; 
mA[9306] = 0.0f; 
mA[9307] = 0.0f; 
mA[9308] = 0.0f; 
mA[9309] = 0.0f; 
mA[9310] = 0.0f; 
mA[9311] = 0.0f; 
mA[9312] = 0.0f; 
mA[9313] = 0.0f; 
mA[9314] = 0.0f; 
mA[9315] = 0.0f; 
mA[9316] = 0.0f; 
mA[9317] = 0.0f; 
mA[9318] = 0.0f; 
mA[9319] = 0.0f; 
mA[9320] = 0.0f; 
mA[9321] = 0.0f; 
mA[9322] = 0.0f; 
mA[9323] = 0.0f; 
mA[9324] = 0.0f; 
mA[9325] = 0.0f; 
mA[9326] = 0.0f; 
mA[9327] = 0.0f; 
mA[9328] = 0.0f; 
mA[9329] = 0.0f; 
mA[9330] = 0.0f; 
mA[9331] = 0.0f; 
mA[9332] = 0.0f; 
mA[9333] = 0.0f; 
mA[9334] = 0.0f; 
mA[9335] = 0.0f; 
mA[9336] = 0.0f; 
mA[9337] = 0.0f; 
mA[9338] = 0.0f; 
mA[9339] = 0.0f; 
mA[9340] = 0.0f; 
mA[9341] = 0.0f; 
mA[9342] = 0.0f; 
mA[9343] = 0.0f; 
mA[9344] = 0.0f; 
mA[9345] = 0.0f; 
mA[9346] = 0.0f; 
mA[9347] = 0.0f; 
mA[9348] = 0.0f; 
mA[9349] = 0.0f; 
mA[9350] = 0.0f; 
mA[9351] = 0.0f; 
mA[9352] = 0.0f; 
mA[9353] = 0.0f; 
mA[9354] = 0.0f; 
mA[9355] = 0.0f; 
mA[9356] = 0.0f; 
mA[9357] = 0.0f; 
mA[9358] = 0.0f; 
mA[9359] = 0.0f; 
mA[9360] = 0.0f; 
mA[9361] = 0.0f; 
mA[9362] = 0.0f; 
mA[9363] = 0.0f; 
mA[9364] = 0.0f; 
mA[9365] = 0.0f; 
mA[9366] = 0.0f; 
mA[9367] = 0.0f; 
mA[9368] = 0.0f; 
mA[9369] = 0.0f; 
mA[9370] = 0.0f; 
mA[9371] = 0.0f; 
mA[9372] = 0.0f; 
mA[9373] = 0.0f; 
mA[9374] = 0.0f; 
mA[9375] = 0.0f; 
mA[9376] = 0.0f; 
mA[9377] = 0.0f; 
mA[9378] = 0.0f; 
mA[9379] = 0.0f; 
mA[9380] = 0.0f; 
mA[9381] = 0.0f; 
mA[9382] = 0.0f; 
mA[9383] = 0.0f; 
mA[9384] = 0.0f; 
mA[9385] = 0.0f; 
mA[9386] = 0.0f; 
mA[9387] = 0.0f; 
mA[9388] = 0.0f; 
mA[9389] = 0.0f; 
mA[9390] = (  v_v53_aa_fw  + v_v54_aa_fw  + v_v52_aa_fw  + v_v48_aa_fw_a  + v_v48_aa_fw_c  + v_v43_aa_fw  + v_v56_aa_fw  + v_v48_aa_fw_d  + v_v55_aa_fw  + v_v42_aa_fw  + v_v40_aa_fw  + v_v48_aa_fw_b   ) ; 
mA[9391] = 0.0f; 
mA[9392] = 0.0f; 
mA[9393] = 0.0f; 
mA[9394] = 0.0f; 
mA[9395] = 0.0f; 
mA[9396] = 0.0f; 
mA[9397] = 0.0f; 
mA[9398] = 0.0f; 
mA[9399] = 0.0f; 
mA[9400] = 0.0f; 
mA[9401] = 0.0f; 
mA[9402] = 0.0f; 
mA[9403] = 0.0f; 
mA[9404] = 0.0f; 
mA[9405] = 0.0f; 
mA[9406] = 0.0f; 
mA[9407] = 0.0f; 
mA[9408] = 0.0f; 
mA[9409] = 0.0f; 
mA[9410] = 0.0f; 
mA[9411] = 0.0f; 
mA[9412] = 0.0f; 
mA[9413] = 0.0f; 
mA[9414] = 0.0f; 
mA[9415] = 0.0f; 
mA[9416] = 0.0f; 
mA[9417] = 0.0f; 
mA[9418] = 0.0f; 
mA[9419] = 0.0f; 
mA[9420] = 0.0f; 
mA[9421] = 0.0f; 
mA[9422] = 0.0f; 
mA[9423] = 0.0f; 
mA[9424] = 0.0f; 
mA[9425] = 0.0f; 
mA[9426] = 0.0f; 
mA[9427] = 0.0f; 
mA[9428] = 0.0f; 
mA[9429] = 0.0f; 
mA[9430] = 0.0f; 
mA[9431] = 0.0f; 
mA[9432] = 0.0f; 
mA[9433] = 0.0f; 
mA[9434] = 0.0f; 
mA[9435] = 0.0f; 
mA[9436] = 0.0f; 
mA[9437] = 0.0f; 
mA[9438] = 0.0f; 
mA[9439] = 0.0f; 
mA[9440] = 0.0f; 
mA[9441] = 0.0f; 
mA[9442] = 0.0f; 
mA[9443] = 0.0f; 
mA[9444] = 0.0f; 
mA[9445] =  v_v37_aa_fw ; 
mA[9446] = 0.0f; 
mA[9447] = 0.0f; 
mA[9448] = 0.0f; 
mA[9449] = 0.0f; 
mA[9450] = ( (  -1.0f  * v_v57_aa_fw   )  +(  -1.0f  * v_v36_aa_fw   )   ) ; 
mA[9451] = 0.0f; 
mA[9452] = 0.0f; 
mA[9453] = 0.0f; 
mA[9454] = 0.0f; 
mA[9455] = 0.0f; 
mA[9456] = 0.0f; 
mA[9457] = 0.0f; 
mA[9458] = 0.0f; 
mA[9459] = 0.0f; 
mA[9460] = 0.0f; 
mA[9461] = 0.0f; 
mA[9462] = 0.0f; 
mA[9463] = 0.0f; 
mA[9464] = 0.0f; 
mA[9465] = 0.0f; 
mA[9466] = 0.0f; 
mA[9467] = 0.0f; 
mA[9468] = 0.0f; 
mA[9469] = 0.0f; 
mA[9470] = 0.0f; 
mA[9471] = 0.0f; 
mA[9472] = 0.0f; 
mA[9473] = 0.0f; 
mA[9474] = 0.0f; 
mA[9475] = 0.0f; 
mA[9476] = 0.0f; 
mA[9477] = 0.0f; 
mA[9478] = 0.0f; 
mA[9479] = 0.0f; 
mA[9480] = 0.0f; 
mA[9481] = 0.0f; 
mA[9482] = 0.0f; 
mA[9483] = 0.0f; 
mA[9484] = 0.0f; 
mA[9485] = 0.0f; 
mA[9486] = 0.0f; 
mA[9487] = 0.0f; 
mA[9488] = 0.0f; 
mA[9489] = 0.0f; 
mA[9490] = 0.0f; 
mA[9491] = 0.0f; 
mA[9492] = 0.0f; 
mA[9493] = 0.0f; 
mA[9494] = 0.0f; 
mA[9495] = 0.0f; 
mA[9496] = 0.0f; 
mA[9497] = 0.0f; 
mA[9498] = 0.0f; 
mA[9499] = 0.0f; 
mA[9500] = 0.0f; 
mA[9501] = 0.0f; 
mA[9502] = 0.0f; 
mA[9503] = 0.0f; 
mA[9504] = 0.0f; 
mA[9505] = 0.0f; 
mA[9506] = 0.0f; 
mA[9507] = 0.0f; 
mA[9508] = 0.0f; 
mA[9509] = 0.0f; 
mA[9510] = 0.0f; 
mA[9511] = 0.0f; 
mA[9512] = 0.0f; 
mA[9513] = 0.0f; 
mA[9514] = 0.0f; 
mA[9515] = 0.0f; 
mA[9516] = 0.0f; 
mA[9517] = 0.0f; 
mA[9518] = 0.0f; 
mA[9519] = 0.0f; 
mA[9520] = 0.0f; 
mA[9521] = 0.0f; 
mA[9522] = 0.0f; 
mA[9523] = 0.0f; 
mA[9524] = 0.0f; 
mA[9525] = 0.0f; 
mA[9526] = 0.0f; 
mA[9527] = 0.0f; 
mA[9528] = 0.0f; 
mA[9529] = 0.0f; 
mA[9530] = 0.0f; 
mA[9531] = 0.0f; 
mA[9532] = 0.0f; 
mA[9533] = 0.0f; 
mA[9534] = 0.0f; 
mA[9535] = 0.0f; 
mA[9536] = 0.0f; 
mA[9537] = 0.0f; 
mA[9538] = 0.0f; 
mA[9539] = 0.0f; 
mA[9540] = (  v_v56_aa_fw  + v_v48_aa_fw_d  + v_v55_aa_fw  + v_v48_aa_fw_c  + v_v48_aa_fw_a  + v_v42_aa_fw  + v_v54_aa_fw  + v_v43_aa_fw  + v_v52_aa_fw  + v_v53_aa_fw  + v_v40_aa_fw  + v_v48_aa_fw_b   ) ; 
mA[9541] = 0.0f; 
mA[9542] = 0.0f; 
mA[9543] = 0.0f; 
mA[9544] = 0.0f; 
mA[9545] = 0.0f; 
mA[9546] = 0.0f; 
mA[9547] = 0.0f; 
mA[9548] = 0.0f; 
mA[9549] = 0.0f; 
mA[9550] = 0.0f; 
mA[9551] = 0.0f; 
mA[9552] = 0.0f; 
mA[9553] = 0.0f; 
mA[9554] = 0.0f; 
mA[9555] = 0.0f; 
mA[9556] = 0.0f; 
mA[9557] = 0.0f; 
mA[9558] = 0.0f; 
mA[9559] = 0.0f; 
mA[9560] = 0.0f; 
mA[9561] = 0.0f; 
mA[9562] = 0.0f; 
mA[9563] = 0.0f; 
mA[9564] = 0.0f; 
mA[9565] = 0.0f; 
mA[9566] = 0.0f; 
mA[9567] = 0.0f; 
mA[9568] = 0.0f; 
mA[9569] = 0.0f; 
mA[9570] = 0.0f; 
mA[9571] = 0.0f; 
mA[9572] = 0.0f; 
mA[9573] = 0.0f; 
mA[9574] = 0.0f; 
mA[9575] = 0.0f; 
mA[9576] = 0.0f; 
mA[9577] = 0.0f; 
mA[9578] = 0.0f; 
mA[9579] = 0.0f; 
mA[9580] = 0.0f; 
mA[9581] = 0.0f; 
mA[9582] = 0.0f; 
mA[9583] = 0.0f; 
mA[9584] = 0.0f; 
mA[9585] = 0.0f; 
mA[9586] = 0.0f; 
mA[9587] = 0.0f; 
mA[9588] = 0.0f; 
mA[9589] = 0.0f; 
mA[9590] = 0.0f; 
mA[9591] = 0.0f; 
mA[9592] = 0.0f; 
mA[9593] = 0.0f; 
mA[9594] = 0.0f; 
mA[9595] =  v_v37_aa_fw ; 
mA[9596] = 0.0f; 
mA[9597] = 0.0f; 
mA[9598] = 0.0f; 
mA[9599] = 0.0f; 
mA[9600] = ( (  -1.0f  * v_v36_aa_fw   )  +(  -1.0f  * v_v57_aa_fw   )   ) ; 
mA[9601] = 0.0f; 
mA[9602] = 0.0f; 
mA[9603] = 0.0f; 
mA[9604] = 0.0f; 
mA[9605] = 0.0f; 
mA[9606] = 0.0f; 
mA[9607] = 0.0f; 
mA[9608] = 0.0f; 
mA[9609] = 0.0f; 
mA[9610] = 0.0f; 
mA[9611] = 0.0f; 
mA[9612] = 0.0f; 
mA[9613] = 0.0f; 
mA[9614] = 0.0f; 
mA[9615] = 0.0f; 
mA[9616] = 0.0f; 
mA[9617] = 0.0f; 
mA[9618] = 0.0f; 
mA[9619] = 0.0f; 
mA[9620] = 0.0f; 
mA[9621] = 0.0f; 
mA[9622] = 0.0f; 
mA[9623] = 0.0f; 
mA[9624] = 0.0f; 
mA[9625] = 0.0f; 
mA[9626] = 0.0f; 
mA[9627] = 0.0f; 
mA[9628] = 0.0f; 
mA[9629] = 0.0f; 
mA[9630] = 0.0f; 
mA[9631] = 0.0f; 
mA[9632] = 0.0f; 
mA[9633] = 0.0f; 
mA[9634] = 0.0f; 
mA[9635] = 0.0f; 
mA[9636] = 0.0f; 
mA[9637] = 0.0f; 
mA[9638] = 0.0f; 
mA[9639] = 0.0f; 
mA[9640] = 0.0f; 
mA[9641] = 0.0f; 
mA[9642] = 0.0f; 
mA[9643] = 0.0f; 
mA[9644] = 0.0f; 
mA[9645] = 0.0f; 
mA[9646] = 0.0f; 
mA[9647] = 0.0f; 
mA[9648] = 0.0f; 
mA[9649] = 0.0f; 
mA[9650] = 0.0f; 
mA[9651] = 0.0f; 
mA[9652] = 0.0f; 
mA[9653] = 0.0f; 
mA[9654] = 0.0f; 
mA[9655] = 0.0f; 
mA[9656] = 0.0f; 
mA[9657] = 0.0f; 
mA[9658] = 0.0f; 
mA[9659] = 0.0f; 
mA[9660] = 0.0f; 
mA[9661] = 0.0f; 
mA[9662] = 0.0f; 
mA[9663] = 0.0f; 
mA[9664] = 0.0f; 
mA[9665] = 0.0f; 
mA[9666] = 0.0f; 
mA[9667] = 0.0f; 
mA[9668] = 0.0f; 
mA[9669] = 0.0f; 
mA[9670] = 0.0f; 
mA[9671] = 0.0f; 
mA[9672] = 0.0f; 
mA[9673] = 0.0f; 
mA[9674] = 0.0f; 
mA[9675] = 0.0f; 
mA[9676] = 0.0f; 
mA[9677] = 0.0f; 
mA[9678] = 0.0f; 
mA[9679] = 0.0f; 
mA[9680] = 0.0f; 
mA[9681] = 0.0f; 
mA[9682] = 0.0f; 
mA[9683] = 0.0f; 
mA[9684] = 0.0f; 
mA[9685] = 0.0f; 
mA[9686] = 0.0f; 
mA[9687] = 0.0f; 
mA[9688] = 0.0f; 
mA[9689] = 0.0f; 
mA[9690] = 0.0f; 
mA[9691] = 0.0f; 
mA[9692] = 0.0f; 
mA[9693] = 0.0f; 
mA[9694] = 0.0f; 
mA[9695] = 0.0f; 
mA[9696] = 0.0f; 
mA[9697] = 0.0f; 
mA[9698] =  v_v45_aa_fw ; 
mA[9699] = 0.0f; 
mA[9700] = 0.0f; 
mA[9701] = 0.0f; 
mA[9702] = 0.0f; 
mA[9703] = 0.0f; 
mA[9704] = 0.0f; 
mA[9705] = 0.0f; 
mA[9706] = 0.0f; 
mA[9707] = 0.0f; 
mA[9708] = 0.0f; 
mA[9709] = 0.0f; 
mA[9710] = 0.0f; 
mA[9711] = 0.0f; 
mA[9712] = 0.0f; 
mA[9713] = 0.0f; 
mA[9714] = 0.0f; 
mA[9715] = 0.0f; 
mA[9716] = 0.0f; 
mA[9717] = 0.0f; 
mA[9718] = 0.0f; 
mA[9719] = 0.0f; 
mA[9720] = 0.0f; 
mA[9721] = 0.0f; 
mA[9722] = 0.0f; 
mA[9723] = 0.0f; 
mA[9724] = 0.0f; 
mA[9725] = 0.0f; 
mA[9726] = 0.0f; 
mA[9727] = 0.0f; 
mA[9728] = 0.0f; 
mA[9729] = 0.0f; 
mA[9730] = 0.0f; 
mA[9731] = 0.0f; 
mA[9732] = 0.0f; 
mA[9733] = 0.0f; 
mA[9734] = 0.0f; 
mA[9735] = 0.0f; 
mA[9736] = 0.0f; 
mA[9737] = 0.0f; 
mA[9738] = 0.0f; 
mA[9739] = 0.0f; 
mA[9740] = 0.0f; 
mA[9741] = 0.0f; 
mA[9742] = 0.0f; 
mA[9743] = 0.0f; 
mA[9744] = 0.0f; 
mA[9745] = 0.0f; 
mA[9746] = 0.0f; 
mA[9747] = 0.0f; 
mA[9748] = 0.0f; 
mA[9749] = 0.0f; 
mA[9750] = ( (  -1.0f  * v_v45_aa_bw   )  +(  -1.0f  * v_v46_aa_fw   )  +(  -1.0f  * v_v44_aa_fw   )   ) ; 
mA[9751] = 0.0f; 
mA[9752] = 0.0f; 
mA[9753] = 0.0f; 
mA[9754] = 0.0f; 
mA[9755] = 0.0f; 
mA[9756] = 0.0f; 
mA[9757] = 0.0f; 
mA[9758] = 0.0f; 
mA[9759] = 0.0f; 
mA[9760] = 0.0f; 
mA[9761] = 0.0f; 
mA[9762] = 0.0f; 
mA[9763] = 0.0f; 
mA[9764] = 0.0f; 
mA[9765] = 0.0f; 
mA[9766] = 0.0f; 
mA[9767] = 0.0f; 
mA[9768] = 0.0f; 
mA[9769] = 0.0f; 
mA[9770] = 0.0f; 
mA[9771] = 0.0f; 
mA[9772] = 0.0f; 
mA[9773] = 0.0f; 
mA[9774] = 0.0f; 
mA[9775] = 0.0f; 
mA[9776] = 0.0f; 
mA[9777] = 0.0f; 
mA[9778] = 0.0f; 
mA[9779] = 0.0f; 
mA[9780] = 0.0f; 
mA[9781] = 0.0f; 
mA[9782] = 0.0f; 
mA[9783] = 0.0f; 
mA[9784] = 0.0f; 
mA[9785] = 0.0f; 
mA[9786] = 0.0f; 
mA[9787] = 0.0f; 
mA[9788] = 0.0f; 
mA[9789] = 0.0f; 
mA[9790] = 0.0f; 
mA[9791] = 0.0f; 
mA[9792] = 0.0f; 
mA[9793] = 0.0f; 
mA[9794] = 0.0f; 
mA[9795] = 0.0f; 
mA[9796] = 0.0f; 
mA[9797] = 0.0f; 
mA[9798] = 0.0f; 
mA[9799] = 0.0f; 
mA[9800] =  v_v44_aa_bw ; 
mA[9801] = 0.0f; 
mA[9802] = 0.0f; 
mA[9803] = 0.0f; 
mA[9804] = 0.0f; 
mA[9805] = 0.0f; 
mA[9806] = 0.0f; 
mA[9807] = 0.0f; 
mA[9808] = 0.0f; 
mA[9809] = 0.0f; 
mA[9810] = 0.0f; 
mA[9811] = 0.0f; 
mA[9812] = 0.0f; 
mA[9813] = 0.0f; 
mA[9814] = 0.0f; 
mA[9815] = 0.0f; 
mA[9816] = 0.0f; 
mA[9817] = 0.0f; 
mA[9818] = 0.0f; 
mA[9819] = 0.0f; 
mA[9820] = 0.0f; 
mA[9821] = 0.0f; 
mA[9822] = 0.0f; 
mA[9823] = 0.0f; 
mA[9824] = 0.0f; 
mA[9825] = 0.0f; 
mA[9826] = 0.0f; 
mA[9827] = 0.0f; 
mA[9828] = 0.0f; 
mA[9829] = 0.0f; 
mA[9830] = 0.0f; 
mA[9831] = 0.0f; 
mA[9832] = 0.0f; 
mA[9833] = 0.0f; 
mA[9834] = 0.0f; 
mA[9835] = 0.0f; 
mA[9836] = 0.0f; 
mA[9837] = 0.0f; 
mA[9838] = 0.0f; 
mA[9839] = 0.0f; 
mA[9840] = 0.0f; 
mA[9841] = 0.0f; 
mA[9842] = 0.0f; 
mA[9843] = 0.0f; 
mA[9844] = 0.0f; 
mA[9845] = 0.0f; 
mA[9846] = 0.0f; 
mA[9847] = 0.0f; 
mA[9848] = 0.0f; 
mA[9849] = 0.0f; 
mA[9850] = 0.0f; 
mA[9851] = 0.0f; 
mA[9852] = 0.0f; 
mA[9853] = 0.0f; 
mA[9854] = 0.0f; 
mA[9855] = 0.0f; 
mA[9856] = 0.0f; 
mA[9857] = 0.0f; 
mA[9858] = 0.0f; 
mA[9859] = 0.0f; 
mA[9860] = 0.0f; 
mA[9861] = 0.0f; 
mA[9862] = 0.0f; 
mA[9863] = 0.0f; 
mA[9864] = 0.0f; 
mA[9865] = 0.0f; 
mA[9866] = 0.0f; 
mA[9867] = 0.0f; 
mA[9868] = 0.0f; 
mA[9869] = 0.0f; 
mA[9870] = 0.0f; 
mA[9871] = 0.0f; 
mA[9872] = 0.0f; 
mA[9873] = 0.0f; 
mA[9874] = 0.0f; 
mA[9875] = 0.0f; 
mA[9876] = 0.0f; 
mA[9877] = 0.0f; 
mA[9878] = 0.0f; 
mA[9879] = 0.0f; 
mA[9880] = 0.0f; 
mA[9881] = 0.0f; 
mA[9882] = 0.0f; 
mA[9883] = 0.0f; 
mA[9884] = 0.0f; 
mA[9885] = 0.0f; 
mA[9886] = 0.0f; 
mA[9887] = 0.0f; 
mA[9888] = 0.0f; 
mA[9889] = 0.0f; 
mA[9890] = 0.0f; 
mA[9891] = 0.0f; 
mA[9892] = 0.0f; 
mA[9893] = 0.0f; 
mA[9894] = 0.0f; 
mA[9895] = 0.0f; 
mA[9896] = 0.0f; 
mA[9897] = 0.0f; 
mA[9898] = 0.0f; 
mA[9899] = 0.0f; 
mA[9900] = ( (  -1.0f  * v_v44_aa_fw   )  +(  -1.0f  * v_v46_aa_fw   )  +(  -1.0f  * v_v45_aa_bw   )   ) ; 
mA[9901] = 0.0f; 
mA[9902] = 0.0f; 
mA[9903] = 0.0f; 
mA[9904] = 0.0f; 
mA[9905] = 0.0f; 
mA[9906] = 0.0f; 
mA[9907] = 0.0f; 
mA[9908] = 0.0f; 
mA[9909] = 0.0f; 
mA[9910] = 0.0f; 
mA[9911] = 0.0f; 
mA[9912] = 0.0f; 
mA[9913] = 0.0f; 
mA[9914] = 0.0f; 
mA[9915] = 0.0f; 
mA[9916] = 0.0f; 
mA[9917] =  v_v45_aa_fw ; 
mA[9918] = 0.0f; 
mA[9919] = 0.0f; 
mA[9920] = 0.0f; 
mA[9921] = 0.0f; 
mA[9922] = 0.0f; 
mA[9923] = 0.0f; 
mA[9924] = 0.0f; 
mA[9925] = 0.0f; 
mA[9926] = 0.0f; 
mA[9927] = 0.0f; 
mA[9928] = 0.0f; 
mA[9929] = 0.0f; 
mA[9930] = 0.0f; 
mA[9931] = 0.0f; 
mA[9932] = 0.0f; 
mA[9933] = 0.0f; 
mA[9934] = 0.0f; 
mA[9935] = 0.0f; 
mA[9936] = 0.0f; 
mA[9937] = 0.0f; 
mA[9938] = 0.0f; 
mA[9939] = 0.0f; 
mA[9940] = 0.0f; 
mA[9941] = 0.0f; 
mA[9942] = 0.0f; 
mA[9943] = 0.0f; 
mA[9944] = 0.0f; 
mA[9945] = 0.0f; 
mA[9946] = 0.0f; 
mA[9947] = 0.0f; 
mA[9948] = 0.0f; 
mA[9949] = 0.0f; 
mA[9950] =  v_v44_aa_bw ; 
mA[9951] = 0.0f; 
mA[9952] = 0.0f; 
mA[9953] = 0.0f; 
mA[9954] = 0.0f; 
mA[9955] = 0.0f; 
mA[9956] = 0.0f; 
mA[9957] = 0.0f; 
mA[9958] = 0.0f; 
mA[9959] = 0.0f; 
mA[9960] = 0.0f; 
mA[9961] = 0.0f; 
mA[9962] = 0.0f; 
mA[9963] = 0.0f; 
mA[9964] = 0.0f; 
mA[9965] = 0.0f; 
mA[9966] = 0.0f; 
mA[9967] = 0.0f; 
mA[9968] = 0.0f; 
mA[9969] = 0.0f; 
mA[9970] = 0.0f; 
mA[9971] = 0.0f; 
mA[9972] = 0.0f; 
mA[9973] = 0.0f; 
mA[9974] = 0.0f; 
mA[9975] = 0.0f; 
mA[9976] = 0.0f; 
mA[9977] = 0.0f; 
mA[9978] = 0.0f; 
mA[9979] = 0.0f; 
mA[9980] = 0.0f; 
mA[9981] = 0.0f; 
mA[9982] = 0.0f; 
mA[9983] = 0.0f; 
mA[9984] = 0.0f; 
mA[9985] = 0.0f; 
mA[9986] = 0.0f; 
mA[9987] = 0.0f; 
mA[9988] = 0.0f; 
mA[9989] = 0.0f; 
mA[9990] = 0.0f; 
mA[9991] = 0.0f; 
mA[9992] = 0.0f; 
mA[9993] = 0.0f; 
mA[9994] = 0.0f; 
mA[9995] = 0.0f; 
mA[9996] = 0.0f; 
mA[9997] = 0.0f; 
mA[9998] = 0.0f; 
mA[9999] = 0.0f; 
mA[10000] = 0.0f; 
mA[10001] = 0.0f; 
mA[10002] = 0.0f; 
mA[10003] = 0.0f; 
mA[10004] = 0.0f; 
mA[10005] = 0.0f; 
mA[10006] = 0.0f; 
mA[10007] = 0.0f; 
mA[10008] = 0.0f; 
mA[10009] = 0.0f; 
mA[10010] = 0.0f; 
mA[10011] = 0.0f; 
mA[10012] = 0.0f; 
mA[10013] = 0.0f; 
mA[10014] = 0.0f; 
mA[10015] = 0.0f; 
mA[10016] = 0.0f; 
mA[10017] = 0.0f; 
mA[10018] = 0.0f; 
mA[10019] = 0.0f; 
mA[10020] = 0.0f; 
mA[10021] = 0.0f; 
mA[10022] = 0.0f; 
mA[10023] = 0.0f; 
mA[10024] = 0.0f; 
mA[10025] = 0.0f; 
mA[10026] = 0.0f; 
mA[10027] = 0.0f; 
mA[10028] = 0.0f; 
mA[10029] = 0.0f; 
mA[10030] = 0.0f; 
mA[10031] = 0.0f; 
mA[10032] = 0.0f; 
mA[10033] = 0.0f; 
mA[10034] = 0.0f; 
mA[10035] = 0.0f; 
mA[10036] = 0.0f; 
mA[10037] = 0.0f; 
mA[10038] = 0.0f; 
mA[10039] = 0.0f; 
mA[10040] = 0.0f; 
mA[10041] = 0.0f; 
mA[10042] = 0.0f; 
mA[10043] = 0.0f; 
mA[10044] = 0.0f; 
mA[10045] = 0.0f; 
mA[10046] = 0.0f; 
mA[10047] = 0.0f; 
mA[10048] = 0.0f; 
mA[10049] = 0.0f; 
mA[10050] = ( (  -1.0f  * v_v29_glyox_fw_a   )  +(  -1.0f  * v_v29_glyox_fw_b   )   ) ; 
mA[10051] = 0.0f; 
mA[10052] = 0.0f; 
mA[10053] = 0.0f; 
mA[10054] = 0.0f; 
mA[10055] = 0.0f; 
mA[10056] = 0.0f; 
mA[10057] = 0.0f; 
mA[10058] = 0.0f; 
mA[10059] = 0.0f; 
mA[10060] = 0.0f; 
mA[10061] = 0.0f; 
mA[10062] = 0.0f; 
mA[10063] = 0.0f; 
mA[10064] = 0.0f; 
mA[10065] = 0.0f; 
mA[10066] = 0.0f; 
mA[10067] =  v_v30_glyox_fw ; 
mA[10068] = 0.0f; 
mA[10069] = 0.0f; 
mA[10070] = 0.0f; 
mA[10071] = 0.0f; 
mA[10072] = 0.0f; 
mA[10073] = 0.0f; 
mA[10074] = 0.0f; 
mA[10075] = 0.0f; 
mA[10076] = 0.0f; 
mA[10077] = 0.0f; 
mA[10078] = 0.0f; 
mA[10079] = 0.0f; 
mA[10080] = 0.0f; 
mA[10081] = 0.0f; 
mA[10082] = 0.0f; 
mA[10083] = 0.0f; 
mA[10084] = 0.0f; 
mA[10085] = 0.0f; 
mA[10086] = 0.0f; 
mA[10087] = 0.0f; 
mA[10088] = 0.0f; 
mA[10089] = 0.0f; 
mA[10090] = 0.0f; 
mA[10091] = 0.0f; 
mA[10092] = 0.0f; 
mA[10093] = 0.0f; 
mA[10094] = 0.0f; 
mA[10095] = 0.0f; 
mA[10096] = 0.0f; 
mA[10097] = 0.0f; 
mA[10098] = 0.0f; 
mA[10099] = 0.0f; 
mA[10100] = 0.0f; 
mA[10101] = 0.0f; 
mA[10102] = 0.0f; 
mA[10103] = 0.0f; 
mA[10104] = 0.0f; 
mA[10105] = 0.0f; 
mA[10106] = 0.0f; 
mA[10107] = 0.0f; 
mA[10108] = 0.0f; 
mA[10109] = 0.0f; 
mA[10110] = 0.0f; 
mA[10111] = 0.0f; 
mA[10112] = 0.0f; 
mA[10113] = 0.0f; 
mA[10114] = 0.0f; 
mA[10115] = 0.0f; 
mA[10116] = 0.0f; 
mA[10117] = 0.0f; 
mA[10118] = 0.0f; 
mA[10119] = 0.0f; 
mA[10120] = 0.0f; 
mA[10121] = 0.0f; 
mA[10122] = 0.0f; 
mA[10123] = 0.0f; 
mA[10124] = 0.0f; 
mA[10125] = 0.0f; 
mA[10126] = 0.0f; 
mA[10127] = 0.0f; 
mA[10128] = 0.0f; 
mA[10129] = 0.0f; 
mA[10130] = 0.0f; 
mA[10131] = 0.0f; 
mA[10132] = 0.0f; 
mA[10133] = 0.0f; 
mA[10134] = 0.0f; 
mA[10135] = 0.0f; 
mA[10136] = 0.0f; 
mA[10137] = 0.0f; 
mA[10138] = 0.0f; 
mA[10139] = 0.0f; 
mA[10140] = 0.0f; 
mA[10141] = 0.0f; 
mA[10142] = 0.0f; 
mA[10143] = 0.0f; 
mA[10144] = 0.0f; 
mA[10145] = 0.0f; 
mA[10146] = 0.0f; 
mA[10147] = 0.0f; 
mA[10148] = 0.0f; 
mA[10149] = 0.0f; 
mA[10150] = 0.0f; 
mA[10151] = 0.0f; 
mA[10152] = 0.0f; 
mA[10153] = 0.0f; 
mA[10154] = 0.0f; 
mA[10155] = 0.0f; 
mA[10156] = 0.0f; 
mA[10157] = 0.0f; 
mA[10158] = 0.0f; 
mA[10159] = 0.0f; 
mA[10160] = 0.0f; 
mA[10161] = 0.0f; 
mA[10162] = 0.0f; 
mA[10163] = 0.0f; 
mA[10164] = 0.0f; 
mA[10165] = 0.0f; 
mA[10166] = 0.0f; 
mA[10167] = 0.0f; 
mA[10168] = 0.0f; 
mA[10169] = 0.0f; 
mA[10170] = 0.0f; 
mA[10171] = 0.0f; 
mA[10172] = 0.0f; 
mA[10173] = 0.0f; 
mA[10174] = 0.0f; 
mA[10175] = 0.0f; 
mA[10176] = 0.0f; 
mA[10177] = 0.0f; 
mA[10178] = 0.0f; 
mA[10179] = 0.0f; 
mA[10180] = 0.0f; 
mA[10181] = 0.0f; 
mA[10182] = 0.0f; 
mA[10183] = 0.0f; 
mA[10184] = 0.0f; 
mA[10185] = 0.0f; 
mA[10186] = 0.0f; 
mA[10187] = 0.0f; 
mA[10188] = 0.0f; 
mA[10189] = 0.0f; 
mA[10190] = 0.0f; 
mA[10191] = 0.0f; 
mA[10192] = 0.0f; 
mA[10193] = 0.0f; 
mA[10194] = 0.0f; 
mA[10195] = 0.0f; 
mA[10196] = 0.0f; 
mA[10197] = 0.0f; 
mA[10198] = 0.0f; 
mA[10199] = 0.0f; 
mA[10200] = ( (  -1.0f  * v_v29_glyox_fw_a   )  +(  -1.0f  * v_v29_glyox_fw_b   )   ) ; 
mA[10201] = 0.0f; 
mA[10202] = 0.0f; 
mA[10203] = 0.0f; 
mA[10204] = 0.0f; 
mA[10205] = 0.0f; 
mA[10206] = 0.0f; 
mA[10207] = 0.0f; 
mA[10208] = 0.0f; 
mA[10209] = 0.0f; 
mA[10210] = 0.0f; 
mA[10211] = 0.0f; 
mA[10212] = 0.0f; 
mA[10213] = 0.0f; 
mA[10214] = 0.0f; 
mA[10215] = 0.0f; 
mA[10216] = 0.0f; 
mA[10217] =  v_v30_glyox_fw ; 
mA[10218] = 0.0f; 
mA[10219] = 0.0f; 
mA[10220] = 0.0f; 
mA[10221] = 0.0f; 
mA[10222] = 0.0f; 
mA[10223] = 0.0f; 
mA[10224] = 0.0f; 
mA[10225] = 0.0f; 
mA[10226] = 0.0f; 
mA[10227] = 0.0f; 
mA[10228] = 0.0f; 
mA[10229] = 0.0f; 
mA[10230] = 0.0f; 
mA[10231] = 0.0f; 
mA[10232] = 0.0f; 
mA[10233] = 0.0f; 
mA[10234] = 0.0f; 
mA[10235] = 0.0f; 
mA[10236] = 0.0f; 
mA[10237] = 0.0f; 
mA[10238] = 0.0f; 
mA[10239] = 0.0f; 
mA[10240] = 0.0f; 
mA[10241] = 0.0f; 
mA[10242] = 0.0f; 
mA[10243] = 0.0f; 
mA[10244] = 0.0f; 
mA[10245] = 0.0f; 
mA[10246] = 0.0f; 
mA[10247] = 0.0f; 
mA[10248] = 0.0f; 
mA[10249] = 0.0f; 
mA[10250] = 0.0f; 
mA[10251] = 0.0f; 
mA[10252] = 0.0f; 
mA[10253] = 0.0f; 
mA[10254] = 0.0f; 
mA[10255] = 0.0f; 
mA[10256] = 0.0f; 
mA[10257] = 0.0f; 
mA[10258] = 0.0f; 
mA[10259] = 0.0f; 
mA[10260] = 0.0f; 
mA[10261] = 0.0f; 
mA[10262] = 0.0f; 
mA[10263] = 0.0f; 
mA[10264] = 0.0f; 
mA[10265] = 0.0f; 
mA[10266] = 0.0f; 
mA[10267] = 0.0f; 
mA[10268] = 0.0f; 
mA[10269] = 0.0f; 
mA[10270] = 0.0f; 
mA[10271] = 0.0f; 
mA[10272] = 0.0f; 
mA[10273] = 0.0f; 
mA[10274] = 0.0f; 
mA[10275] = 0.0f; 
mA[10276] = 0.0f; 
mA[10277] = 0.0f; 
mA[10278] = 0.0f; 
mA[10279] = 0.0f; 
mA[10280] = 0.0f; 
mA[10281] =  v_v23_tca_fw ; 
mA[10282] = 0.0f; 
mA[10283] = 0.0f; 
mA[10284] = 0.0f; 
mA[10285] = 0.0f; 
mA[10286] = 0.0f; 
mA[10287] = 0.0f; 
mA[10288] = 0.0f; 
mA[10289] = 0.0f; 
mA[10290] = 0.0f; 
mA[10291] = 0.0f; 
mA[10292] = 0.0f; 
mA[10293] = 0.0f; 
mA[10294] = 0.0f; 
mA[10295] =  v_v22_tca_bw ; 
mA[10296] = 0.0f; 
mA[10297] = 0.0f; 
mA[10298] = 0.0f; 
mA[10299] = 0.0f; 
mA[10300] = 0.0f; 
mA[10301] = 0.0f; 
mA[10302] = 0.0f; 
mA[10303] = 0.0f; 
mA[10304] = 0.0f; 
mA[10305] = 0.0f; 
mA[10306] = 0.0f; 
mA[10307] = 0.0f; 
mA[10308] = 0.0f; 
mA[10309] = 0.0f; 
mA[10310] = 0.0f; 
mA[10311] = 0.0f; 
mA[10312] = 0.0f; 
mA[10313] = 0.0f; 
mA[10314] = 0.0f; 
mA[10315] = 0.0f; 
mA[10316] = 0.0f; 
mA[10317] = 0.0f; 
mA[10318] = 0.0f; 
mA[10319] = 0.0f; 
mA[10320] = 0.0f; 
mA[10321] = 0.0f; 
mA[10322] = 0.0f; 
mA[10323] = 0.0f; 
mA[10324] = 0.0f; 
mA[10325] = 0.0f; 
mA[10326] = 0.0f; 
mA[10327] = 0.0f; 
mA[10328] = 0.0f; 
mA[10329] = 0.0f; 
mA[10330] = 0.0f; 
mA[10331] = 0.0f; 
mA[10332] = 0.0f; 
mA[10333] = 0.0f; 
mA[10334] = 0.0f; 
mA[10335] = 0.0f; 
mA[10336] = 0.0f; 
mA[10337] = 0.0f; 
mA[10338] = 0.0f; 
mA[10339] = 0.0f; 
mA[10340] = 0.0f; 
mA[10341] = 0.0f; 
mA[10342] = 0.0f; 
mA[10343] = 0.0f; 
mA[10344] = 0.0f; 
mA[10345] = 0.0f; 
mA[10346] = 0.0f; 
mA[10347] = 0.0f; 
mA[10348] = (  v_v29_glyox_fw_a  + v_v29_glyox_fw_b   ) ; 
mA[10349] = 0.0f; 
mA[10350] = ( (  -1.0f  * v_v23_tca_bw   )  +(  -1.0f  * v_v22_tca_fw   )   ) ; 
mA[10351] = 0.0f; 
mA[10352] = 0.0f; 
mA[10353] = 0.0f; 
mA[10354] = 0.0f; 
mA[10355] = 0.0f; 
mA[10356] = 0.0f; 
mA[10357] = 0.0f; 
mA[10358] = 0.0f; 
mA[10359] = 0.0f; 
mA[10360] = 0.0f; 
mA[10361] = 0.0f; 
mA[10362] = 0.0f; 
mA[10363] = 0.0f; 
mA[10364] = 0.0f; 
mA[10365] = 0.0f; 
mA[10366] = 0.0f; 
mA[10367] = 0.0f; 
mA[10368] = 0.0f; 
mA[10369] = 0.0f; 
mA[10370] = 0.0f; 
mA[10371] = 0.0f; 
mA[10372] = 0.0f; 
mA[10373] = 0.0f; 
mA[10374] = 0.0f; 
mA[10375] = 0.0f; 
mA[10376] = 0.0f; 
mA[10377] = 0.0f; 
mA[10378] = 0.0f; 
mA[10379] = 0.0f; 
mA[10380] = 0.0f; 
mA[10381] = 0.0f; 
mA[10382] = 0.0f; 
mA[10383] = 0.0f; 
mA[10384] = 0.0f; 
mA[10385] = 0.0f; 
mA[10386] = 0.0f; 
mA[10387] = 0.0f; 
mA[10388] = 0.0f; 
mA[10389] = 0.0f; 
mA[10390] = 0.0f; 
mA[10391] = 0.0f; 
mA[10392] = 0.0f; 
mA[10393] = 0.0f; 
mA[10394] = 0.0f; 
mA[10395] = 0.0f; 
mA[10396] = 0.0f; 
mA[10397] = 0.0f; 
mA[10398] = 0.0f; 
mA[10399] = 0.0f; 
mA[10400] = 0.0f; 
mA[10401] = 0.0f; 
mA[10402] = 0.0f; 
mA[10403] = 0.0f; 
mA[10404] = 0.0f; 
mA[10405] = 0.0f; 
mA[10406] = 0.0f; 
mA[10407] = 0.0f; 
mA[10408] = 0.0f; 
mA[10409] = 0.0f; 
mA[10410] = 0.0f; 
mA[10411] = 0.0f; 
mA[10412] = 0.0f; 
mA[10413] = 0.0f; 
mA[10414] = 0.0f; 
mA[10415] = 0.0f; 
mA[10416] = 0.0f; 
mA[10417] = 0.0f; 
mA[10418] = 0.0f; 
mA[10419] = 0.0f; 
mA[10420] = 0.0f; 
mA[10421] = 0.0f; 
mA[10422] = 0.0f; 
mA[10423] = 0.0f; 
mA[10424] = 0.0f; 
mA[10425] = 0.0f; 
mA[10426] = 0.0f; 
mA[10427] = 0.0f; 
mA[10428] = 0.0f; 
mA[10429] = 0.0f; 
mA[10430] = 0.0f; 
mA[10431] =  v_v23_tca_fw ; 
mA[10432] = 0.0f; 
mA[10433] = 0.0f; 
mA[10434] = 0.0f; 
mA[10435] = 0.0f; 
mA[10436] = 0.0f; 
mA[10437] = 0.0f; 
mA[10438] = 0.0f; 
mA[10439] = 0.0f; 
mA[10440] = 0.0f; 
mA[10441] = 0.0f; 
mA[10442] = 0.0f; 
mA[10443] = 0.0f; 
mA[10444] = 0.0f; 
mA[10445] =  v_v22_tca_bw ; 
mA[10446] = 0.0f; 
mA[10447] = 0.0f; 
mA[10448] = 0.0f; 
mA[10449] = 0.0f; 
mA[10450] = 0.0f; 
mA[10451] = 0.0f; 
mA[10452] = 0.0f; 
mA[10453] = 0.0f; 
mA[10454] = 0.0f; 
mA[10455] = 0.0f; 
mA[10456] = 0.0f; 
mA[10457] = 0.0f; 
mA[10458] = 0.0f; 
mA[10459] = 0.0f; 
mA[10460] = 0.0f; 
mA[10461] = 0.0f; 
mA[10462] = 0.0f; 
mA[10463] = 0.0f; 
mA[10464] = 0.0f; 
mA[10465] = 0.0f; 
mA[10466] = 0.0f; 
mA[10467] = 0.0f; 
mA[10468] = 0.0f; 
mA[10469] = 0.0f; 
mA[10470] = 0.0f; 
mA[10471] = 0.0f; 
mA[10472] = 0.0f; 
mA[10473] = 0.0f; 
mA[10474] = 0.0f; 
mA[10475] = 0.0f; 
mA[10476] = 0.0f; 
mA[10477] = 0.0f; 
mA[10478] = 0.0f; 
mA[10479] = 0.0f; 
mA[10480] = 0.0f; 
mA[10481] = 0.0f; 
mA[10482] = 0.0f; 
mA[10483] = 0.0f; 
mA[10484] = 0.0f; 
mA[10485] = 0.0f; 
mA[10486] = 0.0f; 
mA[10487] = 0.0f; 
mA[10488] = 0.0f; 
mA[10489] = 0.0f; 
mA[10490] = 0.0f; 
mA[10491] = 0.0f; 
mA[10492] = 0.0f; 
mA[10493] = 0.0f; 
mA[10494] = 0.0f; 
mA[10495] = 0.0f; 
mA[10496] = 0.0f; 
mA[10497] = 0.0f; 
mA[10498] = (  v_v29_glyox_fw_a  + v_v29_glyox_fw_b   ) ; 
mA[10499] = 0.0f; 
mA[10500] = ( (  -1.0f  * v_v23_tca_bw   )  +(  -1.0f  * v_v22_tca_fw   )   ) ; 
mA[10501] = 0.0f; 
mA[10502] = 0.0f; 
mA[10503] = 0.0f; 
mA[10504] = 0.0f; 
mA[10505] = 0.0f; 
mA[10506] = 0.0f; 
mA[10507] = 0.0f; 
mA[10508] = 0.0f; 
mA[10509] = 0.0f; 
mA[10510] = 0.0f; 
mA[10511] = 0.0f; 
mA[10512] = 0.0f; 
mA[10513] = 0.0f; 
mA[10514] = 0.0f; 
mA[10515] = 0.0f; 
mA[10516] = 0.0f; 
mA[10517] = 0.0f; 
mA[10518] = 0.0f; 
mA[10519] = 0.0f; 
mA[10520] = 0.0f; 
mA[10521] = 0.0f; 
mA[10522] = 0.0f; 
mA[10523] = 0.0f; 
mA[10524] = 0.0f; 
mA[10525] = 0.0f; 
mA[10526] = 0.0f; 
mA[10527] = 0.0f; 
mA[10528] = 0.0f; 
mA[10529] = 0.0f; 
mA[10530] = 0.0f; 
mA[10531] = 0.0f; 
mA[10532] = 0.0f; 
mA[10533] = 0.0f; 
mA[10534] = 0.0f; 
mA[10535] = 0.0f; 
mA[10536] = 0.0f; 
mA[10537] = 0.0f; 
mA[10538] = 0.0f; 
mA[10539] = 0.0f; 
mA[10540] = 0.0f; 
mA[10541] = 0.0f; 
mA[10542] = 0.0f; 
mA[10543] = 0.0f; 
mA[10544] = 0.0f; 
mA[10545] = 0.0f; 
mA[10546] = 0.0f; 
mA[10547] = 0.0f; 
mA[10548] = 0.0f; 
mA[10549] = 0.0f; 
mA[10550] = 0.0f; 
mA[10551] = 0.0f; 
mA[10552] = 0.0f; 
mA[10553] = 0.0f; 
mA[10554] = 0.0f; 
mA[10555] = 0.0f; 
mA[10556] = 0.0f; 
mA[10557] = 0.0f; 
mA[10558] = 0.0f; 
mA[10559] = 0.0f; 
mA[10560] = 0.0f; 
mA[10561] = 0.0f; 
mA[10562] = 0.0f; 
mA[10563] = 0.0f; 
mA[10564] = 0.0f; 
mA[10565] = 0.0f; 
mA[10566] = 0.0f; 
mA[10567] = 0.0f; 
mA[10568] = 0.0f; 
mA[10569] = 0.0f; 
mA[10570] = 0.0f; 
mA[10571] = 0.0f; 
mA[10572] = 0.0f; 
mA[10573] = 0.0f; 
mA[10574] = 0.0f; 
mA[10575] = 0.0f; 
mA[10576] = 0.0f; 
mA[10577] = 0.0f; 
mA[10578] = 0.0f; 
mA[10579] = 0.0f; 
mA[10580] = 0.0f; 
mA[10581] =  v_v23_tca_fw ; 
mA[10582] = 0.0f; 
mA[10583] = 0.0f; 
mA[10584] = 0.0f; 
mA[10585] = 0.0f; 
mA[10586] = 0.0f; 
mA[10587] = 0.0f; 
mA[10588] = 0.0f; 
mA[10589] = 0.0f; 
mA[10590] = 0.0f; 
mA[10591] = 0.0f; 
mA[10592] = 0.0f; 
mA[10593] = 0.0f; 
mA[10594] = 0.0f; 
mA[10595] =  v_v22_tca_bw ; 
mA[10596] = 0.0f; 
mA[10597] = 0.0f; 
mA[10598] = 0.0f; 
mA[10599] = 0.0f; 
mA[10600] = 0.0f; 
mA[10601] = 0.0f; 
mA[10602] = 0.0f; 
mA[10603] = 0.0f; 
mA[10604] = 0.0f; 
mA[10605] = 0.0f; 
mA[10606] = 0.0f; 
mA[10607] = 0.0f; 
mA[10608] = 0.0f; 
mA[10609] = 0.0f; 
mA[10610] = 0.0f; 
mA[10611] = 0.0f; 
mA[10612] = 0.0f; 
mA[10613] = 0.0f; 
mA[10614] = 0.0f; 
mA[10615] = 0.0f; 
mA[10616] = 0.0f; 
mA[10617] = 0.0f; 
mA[10618] = 0.0f; 
mA[10619] = 0.0f; 
mA[10620] = 0.0f; 
mA[10621] = 0.0f; 
mA[10622] = 0.0f; 
mA[10623] = 0.0f; 
mA[10624] = 0.0f; 
mA[10625] = 0.0f; 
mA[10626] = 0.0f; 
mA[10627] = 0.0f; 
mA[10628] = 0.0f; 
mA[10629] = 0.0f; 
mA[10630] = 0.0f; 
mA[10631] = 0.0f; 
mA[10632] = 0.0f; 
mA[10633] = 0.0f; 
mA[10634] = 0.0f; 
mA[10635] = 0.0f; 
mA[10636] = 0.0f; 
mA[10637] = 0.0f; 
mA[10638] = 0.0f; 
mA[10639] = 0.0f; 
mA[10640] = 0.0f; 
mA[10641] = 0.0f; 
mA[10642] = 0.0f; 
mA[10643] = 0.0f; 
mA[10644] = 0.0f; 
mA[10645] = 0.0f; 
mA[10646] = 0.0f; 
mA[10647] = 0.0f; 
mA[10648] = 0.0f; 
mA[10649] = 0.0f; 
mA[10650] = ( (  -1.0f  * v_v22_tca_fw   )  +(  -1.0f  * v_v23_tca_bw   )   ) ; 
mA[10651] = 0.0f; 
mA[10652] = 0.0f; 
mA[10653] = 0.0f; 
mA[10654] = 0.0f; 
mA[10655] = 0.0f; 
mA[10656] = 0.0f; 
mA[10657] = 0.0f; 
mA[10658] = 0.0f; 
mA[10659] = 0.0f; 
mA[10660] = 0.0f; 
mA[10661] = 0.0f; 
mA[10662] = 0.0f; 
mA[10663] = 0.0f; 
mA[10664] = 0.0f; 
mA[10665] = 0.0f; 
mA[10666] = 0.0f; 
mA[10667] = 0.0f; 
mA[10668] = 0.0f; 
mA[10669] = 0.0f; 
mA[10670] = 0.0f; 
mA[10671] = 0.0f; 
mA[10672] = 0.0f; 
mA[10673] = 0.0f; 
mA[10674] = 0.0f; 
mA[10675] = 0.0f; 
mA[10676] = 0.0f; 
mA[10677] = 0.0f; 
mA[10678] = 0.0f; 
mA[10679] = 0.0f; 
mA[10680] = 0.0f; 
mA[10681] = 0.0f; 
mA[10682] = 0.0f; 
mA[10683] = 0.0f; 
mA[10684] = 0.0f; 
mA[10685] = 0.0f; 
mA[10686] = 0.0f; 
mA[10687] = 0.0f; 
mA[10688] = 0.0f; 
mA[10689] = 0.0f; 
mA[10690] = 0.0f; 
mA[10691] = 0.0f; 
mA[10692] = 0.0f; 
mA[10693] = 0.0f; 
mA[10694] = 0.0f; 
mA[10695] = 0.0f; 
mA[10696] = 0.0f; 
mA[10697] = 0.0f; 
mA[10698] =  v_v29_glyox_fw_b ; 
mA[10699] =  v_v29_glyox_fw_a ; 
mA[10700] = 0.0f; 
mA[10701] = 0.0f; 
mA[10702] = 0.0f; 
mA[10703] = 0.0f; 
mA[10704] = 0.0f; 
mA[10705] = 0.0f; 
mA[10706] = 0.0f; 
mA[10707] = 0.0f; 
mA[10708] = 0.0f; 
mA[10709] = 0.0f; 
mA[10710] = 0.0f; 
mA[10711] = 0.0f; 
mA[10712] = 0.0f; 
mA[10713] = 0.0f; 
mA[10714] = 0.0f; 
mA[10715] = 0.0f; 
mA[10716] = 0.0f; 
mA[10717] = 0.0f; 
mA[10718] = 0.0f; 
mA[10719] = 0.0f; 
mA[10720] = 0.0f; 
mA[10721] = 0.0f; 
mA[10722] = 0.0f; 
mA[10723] = 0.0f; 
mA[10724] = 0.0f; 
mA[10725] = 0.0f; 
mA[10726] = 0.0f; 
mA[10727] = 0.0f; 
mA[10728] = 0.0f; 
mA[10729] = 0.0f; 
mA[10730] = 0.0f; 
mA[10731] =  v_v23_tca_fw ; 
mA[10732] = 0.0f; 
mA[10733] = 0.0f; 
mA[10734] = 0.0f; 
mA[10735] = 0.0f; 
mA[10736] = 0.0f; 
mA[10737] = 0.0f; 
mA[10738] = 0.0f; 
mA[10739] = 0.0f; 
mA[10740] = 0.0f; 
mA[10741] = 0.0f; 
mA[10742] = 0.0f; 
mA[10743] = 0.0f; 
mA[10744] = 0.0f; 
mA[10745] =  v_v22_tca_bw ; 
mA[10746] = 0.0f; 
mA[10747] = 0.0f; 
mA[10748] = 0.0f; 
mA[10749] = 0.0f; 
mA[10750] = 0.0f; 
mA[10751] = 0.0f; 
mA[10752] = 0.0f; 
mA[10753] = 0.0f; 
mA[10754] = 0.0f; 
mA[10755] = 0.0f; 
mA[10756] = 0.0f; 
mA[10757] = 0.0f; 
mA[10758] = 0.0f; 
mA[10759] = 0.0f; 
mA[10760] = 0.0f; 
mA[10761] = 0.0f; 
mA[10762] = 0.0f; 
mA[10763] = 0.0f; 
mA[10764] = 0.0f; 
mA[10765] = 0.0f; 
mA[10766] = 0.0f; 
mA[10767] = 0.0f; 
mA[10768] = 0.0f; 
mA[10769] = 0.0f; 
mA[10770] = 0.0f; 
mA[10771] = 0.0f; 
mA[10772] = 0.0f; 
mA[10773] = 0.0f; 
mA[10774] = 0.0f; 
mA[10775] = 0.0f; 
mA[10776] = 0.0f; 
mA[10777] = 0.0f; 
mA[10778] = 0.0f; 
mA[10779] = 0.0f; 
mA[10780] = 0.0f; 
mA[10781] = 0.0f; 
mA[10782] = 0.0f; 
mA[10783] = 0.0f; 
mA[10784] = 0.0f; 
mA[10785] = 0.0f; 
mA[10786] = 0.0f; 
mA[10787] = 0.0f; 
mA[10788] = 0.0f; 
mA[10789] = 0.0f; 
mA[10790] = 0.0f; 
mA[10791] = 0.0f; 
mA[10792] = 0.0f; 
mA[10793] = 0.0f; 
mA[10794] = 0.0f; 
mA[10795] = 0.0f; 
mA[10796] = 0.0f; 
mA[10797] = 0.0f; 
mA[10798] = 0.0f; 
mA[10799] = 0.0f; 
mA[10800] = ( (  -1.0f  * v_v23_tca_bw   )  +(  -1.0f  * v_v22_tca_fw   )   ) ; 
mA[10801] = 0.0f; 
mA[10802] = 0.0f; 
mA[10803] = 0.0f; 
mA[10804] = 0.0f; 
mA[10805] = 0.0f; 
mA[10806] = 0.0f; 
mA[10807] = 0.0f; 
mA[10808] = 0.0f; 
mA[10809] = 0.0f; 
mA[10810] = 0.0f; 
mA[10811] = 0.0f; 
mA[10812] = 0.0f; 
mA[10813] = 0.0f; 
mA[10814] = 0.0f; 
mA[10815] = 0.0f; 
mA[10816] = 0.0f; 
mA[10817] = 0.0f; 
mA[10818] = 0.0f; 
mA[10819] = 0.0f; 
mA[10820] = 0.0f; 
mA[10821] = 0.0f; 
mA[10822] = 0.0f; 
mA[10823] = 0.0f; 
mA[10824] = 0.0f; 
mA[10825] = 0.0f; 
mA[10826] = 0.0f; 
mA[10827] = 0.0f; 
mA[10828] = 0.0f; 
mA[10829] = 0.0f; 
mA[10830] = 0.0f; 
mA[10831] = 0.0f; 
mA[10832] = 0.0f; 
mA[10833] = 0.0f; 
mA[10834] = 0.0f; 
mA[10835] = 0.0f; 
mA[10836] = 0.0f; 
mA[10837] = 0.0f; 
mA[10838] = 0.0f; 
mA[10839] = 0.0f; 
mA[10840] = 0.0f; 
mA[10841] = 0.0f; 
mA[10842] = 0.0f; 
mA[10843] = 0.0f; 
mA[10844] = 0.0f; 
mA[10845] = 0.0f; 
mA[10846] = 0.0f; 
mA[10847] =  v_v29_glyox_fw_a ; 
mA[10848] =  v_v29_glyox_fw_b ; 
mA[10849] = 0.0f; 
mA[10850] = 0.0f; 
mA[10851] = 0.0f; 
mA[10852] = 0.0f; 
mA[10853] = 0.0f; 
mA[10854] = 0.0f; 
mA[10855] = 0.0f; 
mA[10856] = 0.0f; 
mA[10857] = 0.0f; 
mA[10858] = 0.0f; 
mA[10859] = 0.0f; 
mA[10860] = 0.0f; 
mA[10861] = 0.0f; 
mA[10862] = 0.0f; 
mA[10863] = 0.0f; 
mA[10864] = 0.0f; 
mA[10865] = 0.0f; 
mA[10866] = 0.0f; 
mA[10867] = 0.0f; 
mA[10868] = 0.0f; 
mA[10869] = 0.0f; 
mA[10870] = 0.0f; 
mA[10871] = 0.0f; 
mA[10872] = 0.0f; 
mA[10873] = 0.0f; 
mA[10874] = 0.0f; 
mA[10875] = 0.0f; 
mA[10876] = 0.0f; 
mA[10877] = 0.0f; 
mA[10878] = 0.0f; 
mA[10879] = 0.0f; 
mA[10880] = 0.0f; 
mA[10881] =  v_v23_tca_fw ; 
mA[10882] = 0.0f; 
mA[10883] = 0.0f; 
mA[10884] = 0.0f; 
mA[10885] = 0.0f; 
mA[10886] = 0.0f; 
mA[10887] = 0.0f; 
mA[10888] = 0.0f; 
mA[10889] = 0.0f; 
mA[10890] = 0.0f; 
mA[10891] = 0.0f; 
mA[10892] = 0.0f; 
mA[10893] = 0.0f; 
mA[10894] = 0.0f; 
mA[10895] =  v_v22_tca_bw ; 
mA[10896] = 0.0f; 
mA[10897] = 0.0f; 
mA[10898] = 0.0f; 
mA[10899] = 0.0f; 
mA[10900] = 0.0f; 
mA[10901] = 0.0f; 
mA[10902] = 0.0f; 
mA[10903] = 0.0f; 
mA[10904] = 0.0f; 
mA[10905] = 0.0f; 
mA[10906] = 0.0f; 
mA[10907] = 0.0f; 
mA[10908] = 0.0f; 
mA[10909] = 0.0f; 
mA[10910] = 0.0f; 
mA[10911] = 0.0f; 
mA[10912] = 0.0f; 
mA[10913] = 0.0f; 
mA[10914] = 0.0f; 
mA[10915] = 0.0f; 
mA[10916] = 0.0f; 
mA[10917] = 0.0f; 
mA[10918] = 0.0f; 
mA[10919] = 0.0f; 
mA[10920] = 0.0f; 
mA[10921] = 0.0f; 
mA[10922] = 0.0f; 
mA[10923] = 0.0f; 
mA[10924] = 0.0f; 
mA[10925] = 0.0f; 
mA[10926] = 0.0f; 
mA[10927] = 0.0f; 
mA[10928] = 0.0f; 
mA[10929] = 0.0f; 
mA[10930] = 0.0f; 
mA[10931] = 0.0f; 
mA[10932] = 0.0f; 
mA[10933] = 0.0f; 
mA[10934] = 0.0f; 
mA[10935] = 0.0f; 
mA[10936] = 0.0f; 
mA[10937] = 0.0f; 
mA[10938] = 0.0f; 
mA[10939] = 0.0f; 
mA[10940] = 0.0f; 
mA[10941] = 0.0f; 
mA[10942] = 0.0f; 
mA[10943] = 0.0f; 
mA[10944] = 0.0f; 
mA[10945] = 0.0f; 
mA[10946] = 0.0f; 
mA[10947] = 0.0f; 
mA[10948] = 0.0f; 
mA[10949] = 0.0f; 
mA[10950] = ( (  -1.0f  * v_v22_tca_fw   )  +(  -1.0f  * v_v23_tca_bw   )   ) ; 
mA[10951] = 0.0f; 
mA[10952] = 0.0f; 
mA[10953] = 0.0f; 
mA[10954] = 0.0f; 
mA[10955] = 0.0f; 
mA[10956] = 0.0f; 
mA[10957] = 0.0f; 
mA[10958] = 0.0f; 
mA[10959] = 0.0f; 
mA[10960] = 0.0f; 
mA[10961] = 0.0f; 
mA[10962] = 0.0f; 
mA[10963] = 0.0f; 
mA[10964] = 0.0f; 
mA[10965] = 0.0f; 
mA[10966] = 0.0f; 
mA[10967] = 0.0f; 
mA[10968] = 0.0f; 
mA[10969] = 0.0f; 
mA[10970] = 0.0f; 
mA[10971] = 0.0f; 
mA[10972] = 0.0f; 
mA[10973] = 0.0f; 
mA[10974] = 0.0f; 
mA[10975] = 0.0f; 
mA[10976] = 0.0f; 
mA[10977] = 0.0f; 
mA[10978] = 0.0f; 
mA[10979] = 0.0f; 
mA[10980] = 0.0f; 
mA[10981] = 0.0f; 
mA[10982] = 0.0f; 
mA[10983] = 0.0f; 
mA[10984] = 0.0f; 
mA[10985] = 0.0f; 
mA[10986] = 0.0f; 
mA[10987] = 0.0f; 
mA[10988] = 0.0f; 
mA[10989] = 0.0f; 
mA[10990] = 0.0f; 
mA[10991] = 0.0f; 
mA[10992] = 0.0f; 
mA[10993] = 0.0f; 
mA[10994] = 0.0f; 
mA[10995] =  v_v29_glyox_fw_a ; 
mA[10996] = 0.0f; 
mA[10997] = 0.0f; 
mA[10998] =  v_v29_glyox_fw_b ; 
mA[10999] = 0.0f; 
mA[11000] = 0.0f; 
mA[11001] = 0.0f; 
mA[11002] = 0.0f; 
mA[11003] = 0.0f; 
mA[11004] = 0.0f; 
mA[11005] = 0.0f; 
mA[11006] = 0.0f; 
mA[11007] = 0.0f; 
mA[11008] = 0.0f; 
mA[11009] = 0.0f; 
mA[11010] = 0.0f; 
mA[11011] = 0.0f; 
mA[11012] = 0.0f; 
mA[11013] = 0.0f; 
mA[11014] = 0.0f; 
mA[11015] = 0.0f; 
mA[11016] = 0.0f; 
mA[11017] = 0.0f; 
mA[11018] = 0.0f; 
mA[11019] = 0.0f; 
mA[11020] = 0.0f; 
mA[11021] = 0.0f; 
mA[11022] = 0.0f; 
mA[11023] = 0.0f; 
mA[11024] = 0.0f; 
mA[11025] = 0.0f; 
mA[11026] = 0.0f; 
mA[11027] = 0.0f; 
mA[11028] = 0.0f; 
mA[11029] = 0.0f; 
mA[11030] = 0.0f; 
mA[11031] = 0.0f; 
mA[11032] = 0.0f; 
mA[11033] = 0.0f; 
mA[11034] = 0.0f; 
mA[11035] = 0.0f; 
mA[11036] = 0.0f; 
mA[11037] = 0.0f; 
mA[11038] = 0.0f; 
mA[11039] =  v_v23_tca_fw ; 
mA[11040] = 0.0f; 
mA[11041] = 0.0f; 
mA[11042] = 0.0f; 
mA[11043] = 0.0f; 
mA[11044] = 0.0f; 
mA[11045] =  v_v22_tca_bw ; 
mA[11046] = 0.0f; 
mA[11047] = 0.0f; 
mA[11048] = 0.0f; 
mA[11049] = 0.0f; 
mA[11050] = 0.0f; 
mA[11051] = 0.0f; 
mA[11052] = 0.0f; 
mA[11053] = 0.0f; 
mA[11054] = 0.0f; 
mA[11055] = 0.0f; 
mA[11056] = 0.0f; 
mA[11057] = 0.0f; 
mA[11058] = 0.0f; 
mA[11059] = 0.0f; 
mA[11060] = 0.0f; 
mA[11061] = 0.0f; 
mA[11062] = 0.0f; 
mA[11063] = 0.0f; 
mA[11064] = 0.0f; 
mA[11065] = 0.0f; 
mA[11066] = 0.0f; 
mA[11067] = 0.0f; 
mA[11068] = 0.0f; 
mA[11069] = 0.0f; 
mA[11070] = 0.0f; 
mA[11071] = 0.0f; 
mA[11072] = 0.0f; 
mA[11073] = 0.0f; 
mA[11074] = 0.0f; 
mA[11075] = 0.0f; 
mA[11076] = 0.0f; 
mA[11077] = 0.0f; 
mA[11078] = 0.0f; 
mA[11079] = 0.0f; 
mA[11080] = 0.0f; 
mA[11081] = 0.0f; 
mA[11082] = 0.0f; 
mA[11083] = 0.0f; 
mA[11084] = 0.0f; 
mA[11085] = 0.0f; 
mA[11086] = 0.0f; 
mA[11087] = 0.0f; 
mA[11088] = 0.0f; 
mA[11089] = 0.0f; 
mA[11090] = 0.0f; 
mA[11091] = 0.0f; 
mA[11092] = 0.0f; 
mA[11093] = 0.0f; 
mA[11094] = 0.0f; 
mA[11095] = 0.0f; 
mA[11096] = 0.0f; 
mA[11097] = 0.0f; 
mA[11098] = 0.0f; 
mA[11099] = 0.0f; 
mA[11100] = ( (  -1.0f  * v_v23_tca_bw   )  +(  -1.0f  * v_v22_tca_fw   )   ) ; 
mA[11101] = 0.0f; 
mA[11102] = 0.0f; 
mA[11103] = 0.0f; 
mA[11104] = 0.0f; 
mA[11105] = 0.0f; 
mA[11106] = 0.0f; 
mA[11107] = 0.0f; 
mA[11108] = 0.0f; 
mA[11109] = 0.0f; 
mA[11110] = 0.0f; 
mA[11111] = 0.0f; 
mA[11112] = 0.0f; 
mA[11113] = 0.0f; 
mA[11114] = 0.0f; 
mA[11115] = 0.0f; 
mA[11116] = 0.0f; 
mA[11117] = 0.0f; 
mA[11118] = 0.0f; 
mA[11119] = 0.0f; 
mA[11120] = 0.0f; 
mA[11121] = 0.0f; 
mA[11122] = 0.0f; 
mA[11123] = 0.0f; 
mA[11124] = 0.0f; 
mA[11125] = 0.0f; 
mA[11126] = 0.0f; 
mA[11127] = 0.0f; 
mA[11128] = 0.0f; 
mA[11129] = 0.0f; 
mA[11130] = 0.0f; 
mA[11131] = 0.0f; 
mA[11132] = 0.0f; 
mA[11133] = 0.0f; 
mA[11134] = 0.0f; 
mA[11135] = 0.0f; 
mA[11136] = 0.0f; 
mA[11137] = 0.0f; 
mA[11138] = 0.0f; 
mA[11139] = 0.0f; 
mA[11140] = 0.0f; 
mA[11141] = 0.0f; 
mA[11142] = 0.0f; 
mA[11143] = 0.0f; 
mA[11144] =  v_v29_glyox_fw_b ; 
mA[11145] = 0.0f; 
mA[11146] = 0.0f; 
mA[11147] =  v_v29_glyox_fw_a ; 
mA[11148] = 0.0f; 
mA[11149] = 0.0f; 
mA[11150] = 0.0f; 
mA[11151] = 0.0f; 
mA[11152] = 0.0f; 
mA[11153] = 0.0f; 
mA[11154] = 0.0f; 
mA[11155] = 0.0f; 
mA[11156] = 0.0f; 
mA[11157] = 0.0f; 
mA[11158] = 0.0f; 
mA[11159] = 0.0f; 
mA[11160] = 0.0f; 
mA[11161] = 0.0f; 
mA[11162] = 0.0f; 
mA[11163] = 0.0f; 
mA[11164] = 0.0f; 
mA[11165] = 0.0f; 
mA[11166] = 0.0f; 
mA[11167] = 0.0f; 
mA[11168] = 0.0f; 
mA[11169] = 0.0f; 
mA[11170] = 0.0f; 
mA[11171] = 0.0f; 
mA[11172] = 0.0f; 
mA[11173] = 0.0f; 
mA[11174] = 0.0f; 
mA[11175] = 0.0f; 
mA[11176] = 0.0f; 
mA[11177] = 0.0f; 
mA[11178] = 0.0f; 
mA[11179] = 0.0f; 
mA[11180] = 0.0f; 
mA[11181] = 0.0f; 
mA[11182] = 0.0f; 
mA[11183] = 0.0f; 
mA[11184] = 0.0f; 
mA[11185] = 0.0f; 
mA[11186] = 0.0f; 
mA[11187] = 0.0f; 
mA[11188] = 0.0f; 
mA[11189] = 0.0f; 
mA[11190] = 0.0f; 
mA[11191] = 0.0f; 
mA[11192] = 0.0f; 
mA[11193] = 0.0f; 
mA[11194] = 0.0f; 
mA[11195] = 0.0f; 
mA[11196] = 0.0f; 
mA[11197] = 0.0f; 
mA[11198] = 0.0f; 
mA[11199] = 0.0f; 
mA[11200] = 0.0f; 
mA[11201] = 0.0f; 
mA[11202] = 0.0f; 
mA[11203] = 0.0f; 
mA[11204] = 0.0f; 
mA[11205] = 0.0f; 
mA[11206] = 0.0f; 
mA[11207] = 0.0f; 
mA[11208] = 0.0f; 
mA[11209] = 0.0f; 
mA[11210] = 0.0f; 
mA[11211] = 0.0f; 
mA[11212] = 0.0f; 
mA[11213] = 0.0f; 
mA[11214] = 0.0f; 
mA[11215] = 0.0f; 
mA[11216] = 0.0f; 
mA[11217] = 0.0f; 
mA[11218] = 0.0f; 
mA[11219] = 0.0f; 
mA[11220] = 0.0f; 
mA[11221] = 0.0f; 
mA[11222] = 0.0f; 
mA[11223] = 0.0f; 
mA[11224] = 0.0f; 
mA[11225] = 0.0f; 
mA[11226] = 0.0f; 
mA[11227] = 0.0f; 
mA[11228] = 0.0f; 
mA[11229] = 0.0f; 
mA[11230] = 0.0f; 
mA[11231] = 0.0f; 
mA[11232] = 0.0f; 
mA[11233] = 0.0f; 
mA[11234] = 0.0f; 
mA[11235] = 0.0f; 
mA[11236] = 0.0f; 
mA[11237] = 0.0f; 
mA[11238] = 0.0f; 
mA[11239] = 0.0f; 
mA[11240] = 0.0f; 
mA[11241] = 0.0f; 
mA[11242] = 0.0f; 
mA[11243] = 0.0f; 
mA[11244] = 0.0f; 
mA[11245] = 0.0f; 
mA[11246] = 0.0f; 
mA[11247] = 0.0f; 
mA[11248] = 0.0f; 
mA[11249] = 0.0f; 
mA[11250] = ( (  -1.0f  * v_v18_ed_fw   )   ) ; 
mA[11251] = 0.0f; 
mA[11252] = 0.0f; 
mA[11253] = 0.0f; 
mA[11254] = 0.0f; 
mA[11255] = 0.0f; 
mA[11256] = 0.0f; 
mA[11257] = 0.0f; 
mA[11258] = 0.0f; 
mA[11259] = 0.0f; 
mA[11260] = 0.0f; 
mA[11261] = 0.0f; 
mA[11262] = 0.0f; 
mA[11263] = 0.0f; 
mA[11264] = 0.0f; 
mA[11265] = 0.0f; 
mA[11266] = 0.0f; 
mA[11267] = 0.0f; 
mA[11268] = 0.0f; 
mA[11269] = 0.0f; 
mA[11270] =  v_v19_ed_fw ; 
mA[11271] = 0.0f; 
mA[11272] = 0.0f; 
mA[11273] = 0.0f; 
mA[11274] = 0.0f; 
mA[11275] = 0.0f; 
mA[11276] = 0.0f; 
mA[11277] = 0.0f; 
mA[11278] = 0.0f; 
mA[11279] = 0.0f; 
mA[11280] = 0.0f; 
mA[11281] = 0.0f; 
mA[11282] = 0.0f; 
mA[11283] = 0.0f; 
mA[11284] = 0.0f; 
mA[11285] = 0.0f; 
mA[11286] = 0.0f; 
mA[11287] = 0.0f; 
mA[11288] = 0.0f; 
mA[11289] = 0.0f; 
mA[11290] = 0.0f; 
mA[11291] = 0.0f; 
mA[11292] = 0.0f; 
mA[11293] = 0.0f; 
mA[11294] = 0.0f; 
mA[11295] = 0.0f; 
mA[11296] = 0.0f; 
mA[11297] = 0.0f; 
mA[11298] = 0.0f; 
mA[11299] = 0.0f; 
mA[11300] = 0.0f; 
mA[11301] = 0.0f; 
mA[11302] = 0.0f; 
mA[11303] = 0.0f; 
mA[11304] = 0.0f; 
mA[11305] = 0.0f; 
mA[11306] = 0.0f; 
mA[11307] = 0.0f; 
mA[11308] = 0.0f; 
mA[11309] = 0.0f; 
mA[11310] = 0.0f; 
mA[11311] = 0.0f; 
mA[11312] = 0.0f; 
mA[11313] = 0.0f; 
mA[11314] = 0.0f; 
mA[11315] = 0.0f; 
mA[11316] = 0.0f; 
mA[11317] = 0.0f; 
mA[11318] = 0.0f; 
mA[11319] = 0.0f; 
mA[11320] = 0.0f; 
mA[11321] = 0.0f; 
mA[11322] = 0.0f; 
mA[11323] = 0.0f; 
mA[11324] = 0.0f; 
mA[11325] = 0.0f; 
mA[11326] = 0.0f; 
mA[11327] = 0.0f; 
mA[11328] = 0.0f; 
mA[11329] = 0.0f; 
mA[11330] = 0.0f; 
mA[11331] = 0.0f; 
mA[11332] = 0.0f; 
mA[11333] = 0.0f; 
mA[11334] = 0.0f; 
mA[11335] = 0.0f; 
mA[11336] = 0.0f; 
mA[11337] = 0.0f; 
mA[11338] = 0.0f; 
mA[11339] = 0.0f; 
mA[11340] = 0.0f; 
mA[11341] = 0.0f; 
mA[11342] = 0.0f; 
mA[11343] = 0.0f; 
mA[11344] = 0.0f; 
mA[11345] = 0.0f; 
mA[11346] = 0.0f; 
mA[11347] = 0.0f; 
mA[11348] = 0.0f; 
mA[11349] = 0.0f; 
mA[11350] = 0.0f; 
mA[11351] = 0.0f; 
mA[11352] = 0.0f; 
mA[11353] = 0.0f; 
mA[11354] = 0.0f; 
mA[11355] = 0.0f; 
mA[11356] = 0.0f; 
mA[11357] = 0.0f; 
mA[11358] = 0.0f; 
mA[11359] = 0.0f; 
mA[11360] = 0.0f; 
mA[11361] = 0.0f; 
mA[11362] = 0.0f; 
mA[11363] = 0.0f; 
mA[11364] = 0.0f; 
mA[11365] = 0.0f; 
mA[11366] = 0.0f; 
mA[11367] = 0.0f; 
mA[11368] = 0.0f; 
mA[11369] = 0.0f; 
mA[11370] = 0.0f; 
mA[11371] = 0.0f; 
mA[11372] = 0.0f; 
mA[11373] = 0.0f; 
mA[11374] = 0.0f; 
mA[11375] = 0.0f; 
mA[11376] = 0.0f; 
mA[11377] = 0.0f; 
mA[11378] = 0.0f; 
mA[11379] = 0.0f; 
mA[11380] = 0.0f; 
mA[11381] = 0.0f; 
mA[11382] = 0.0f; 
mA[11383] = 0.0f; 
mA[11384] = 0.0f; 
mA[11385] = 0.0f; 
mA[11386] = 0.0f; 
mA[11387] = 0.0f; 
mA[11388] = 0.0f; 
mA[11389] = 0.0f; 
mA[11390] = 0.0f; 
mA[11391] = 0.0f; 
mA[11392] = 0.0f; 
mA[11393] = 0.0f; 
mA[11394] = 0.0f; 
mA[11395] = 0.0f; 
mA[11396] = 0.0f; 
mA[11397] = 0.0f; 
mA[11398] = 0.0f; 
mA[11399] = 0.0f; 
mA[11400] = ( (  -1.0f  * v_v18_ed_fw   )   ) ; 
mA[11401] = 0.0f; 
mA[11402] = 0.0f; 
mA[11403] = 0.0f; 
mA[11404] = 0.0f; 
mA[11405] = 0.0f; 
mA[11406] = 0.0f; 
mA[11407] = 0.0f; 
mA[11408] = 0.0f; 
mA[11409] = 0.0f; 
mA[11410] = 0.0f; 
mA[11411] = 0.0f; 
mA[11412] = 0.0f; 
mA[11413] = 0.0f; 
mA[11414] = 0.0f; 
mA[11415] = 0.0f; 
mA[11416] = 0.0f; 
mA[11417] = 0.0f; 
mA[11418] = 0.0f; 
mA[11419] = 0.0f; 
mA[11420] =  v_v19_ed_fw ; 
mA[11421] = 0.0f; 
mA[11422] = 0.0f; 
mA[11423] = 0.0f; 
mA[11424] = 0.0f; 
mA[11425] = 0.0f; 
mA[11426] = 0.0f; 
mA[11427] = 0.0f; 
mA[11428] = 0.0f; 
mA[11429] = 0.0f; 
mA[11430] = 0.0f; 
mA[11431] = 0.0f; 
mA[11432] = 0.0f; 
mA[11433] = 0.0f; 
mA[11434] = 0.0f; 
mA[11435] = 0.0f; 
mA[11436] = 0.0f; 
mA[11437] = 0.0f; 
mA[11438] = 0.0f; 
mA[11439] = 0.0f; 
mA[11440] = 0.0f; 
mA[11441] = 0.0f; 
mA[11442] = 0.0f; 
mA[11443] = 0.0f; 
mA[11444] = 0.0f; 
mA[11445] = 0.0f; 
mA[11446] = 0.0f; 
mA[11447] = 0.0f; 
mA[11448] = 0.0f; 
mA[11449] = 0.0f; 
mA[11450] = 0.0f; 
mA[11451] = 0.0f; 
mA[11452] = 0.0f; 
mA[11453] = 0.0f; 
mA[11454] = 0.0f; 
mA[11455] = 0.0f; 
mA[11456] = 0.0f; 
mA[11457] = 0.0f; 
mA[11458] = 0.0f; 
mA[11459] = 0.0f; 
mA[11460] = 0.0f; 
mA[11461] = 0.0f; 
mA[11462] = 0.0f; 
mA[11463] = 0.0f; 
mA[11464] = 0.0f; 
mA[11465] = 0.0f; 
mA[11466] = 0.0f; 
mA[11467] = 0.0f; 
mA[11468] = 0.0f; 
mA[11469] = 0.0f; 
mA[11470] = 0.0f; 
mA[11471] = 0.0f; 
mA[11472] = 0.0f; 
mA[11473] = 0.0f; 
mA[11474] = 0.0f; 
mA[11475] = 0.0f; 
mA[11476] = 0.0f; 
mA[11477] = 0.0f; 
mA[11478] = 0.0f; 
mA[11479] = 0.0f; 
mA[11480] = 0.0f; 
mA[11481] = 0.0f; 
mA[11482] = 0.0f; 
mA[11483] = 0.0f; 
mA[11484] = 0.0f; 
mA[11485] = 0.0f; 
mA[11486] = 0.0f; 
mA[11487] = 0.0f; 
mA[11488] = 0.0f; 
mA[11489] = 0.0f; 
mA[11490] = 0.0f; 
mA[11491] = 0.0f; 
mA[11492] = 0.0f; 
mA[11493] = 0.0f; 
mA[11494] = 0.0f; 
mA[11495] = 0.0f; 
mA[11496] = 0.0f; 
mA[11497] = 0.0f; 
mA[11498] = 0.0f; 
mA[11499] = 0.0f; 
mA[11500] = 0.0f; 
mA[11501] = 0.0f; 
mA[11502] = 0.0f; 
mA[11503] = 0.0f; 
mA[11504] = 0.0f; 
mA[11505] = 0.0f; 
mA[11506] = 0.0f; 
mA[11507] = 0.0f; 
mA[11508] = 0.0f; 
mA[11509] = 0.0f; 
mA[11510] = 0.0f; 
mA[11511] = 0.0f; 
mA[11512] = 0.0f; 
mA[11513] = 0.0f; 
mA[11514] = 0.0f; 
mA[11515] = 0.0f; 
mA[11516] = 0.0f; 
mA[11517] = 0.0f; 
mA[11518] = 0.0f; 
mA[11519] = 0.0f; 
mA[11520] = 0.0f; 
mA[11521] = 0.0f; 
mA[11522] = 0.0f; 
mA[11523] = 0.0f; 
mA[11524] = 0.0f; 
mA[11525] = 0.0f; 
mA[11526] = 0.0f; 
mA[11527] = 0.0f; 
mA[11528] = 0.0f; 
mA[11529] = 0.0f; 
mA[11530] = 0.0f; 
mA[11531] = 0.0f; 
mA[11532] = 0.0f; 
mA[11533] = 0.0f; 
mA[11534] = 0.0f; 
mA[11535] = 0.0f; 
mA[11536] = 0.0f; 
mA[11537] = 0.0f; 
mA[11538] = 0.0f; 
mA[11539] = 0.0f; 
mA[11540] = 0.0f; 
mA[11541] = 0.0f; 
mA[11542] = 0.0f; 
mA[11543] = 0.0f; 
mA[11544] = 0.0f; 
mA[11545] = 0.0f; 
mA[11546] = 0.0f; 
mA[11547] = 0.0f; 
mA[11548] = 0.0f; 
mA[11549] = 0.0f; 
mA[11550] = ( (  -1.0f  * v_v18_ed_fw   )   ) ; 
mA[11551] = 0.0f; 
mA[11552] = 0.0f; 
mA[11553] = 0.0f; 
mA[11554] = 0.0f; 
mA[11555] = 0.0f; 
mA[11556] = 0.0f; 
mA[11557] = 0.0f; 
mA[11558] = 0.0f; 
mA[11559] = 0.0f; 
mA[11560] = 0.0f; 
mA[11561] = 0.0f; 
mA[11562] = 0.0f; 
mA[11563] = 0.0f; 
mA[11564] = 0.0f; 
mA[11565] = 0.0f; 
mA[11566] = 0.0f; 
mA[11567] = 0.0f; 
mA[11568] = 0.0f; 
mA[11569] = 0.0f; 
mA[11570] =  v_v19_ed_fw ; 
mA[11571] = 0.0f; 
mA[11572] = 0.0f; 
mA[11573] = 0.0f; 
mA[11574] = 0.0f; 
mA[11575] = 0.0f; 
mA[11576] = 0.0f; 
mA[11577] = 0.0f; 
mA[11578] = 0.0f; 
mA[11579] = 0.0f; 
mA[11580] = 0.0f; 
mA[11581] = 0.0f; 
mA[11582] = 0.0f; 
mA[11583] = 0.0f; 
mA[11584] = 0.0f; 
mA[11585] = 0.0f; 
mA[11586] = 0.0f; 
mA[11587] = 0.0f; 
mA[11588] = 0.0f; 
mA[11589] = 0.0f; 
mA[11590] = 0.0f; 
mA[11591] = 0.0f; 
mA[11592] = 0.0f; 
mA[11593] = 0.0f; 
mA[11594] = 0.0f; 
mA[11595] = 0.0f; 
mA[11596] = 0.0f; 
mA[11597] = 0.0f; 
mA[11598] = 0.0f; 
mA[11599] = 0.0f; 
mA[11600] = 0.0f; 
mA[11601] = 0.0f; 
mA[11602] = 0.0f; 
mA[11603] = 0.0f; 
mA[11604] = 0.0f; 
mA[11605] = 0.0f; 
mA[11606] = 0.0f; 
mA[11607] = 0.0f; 
mA[11608] = 0.0f; 
mA[11609] = 0.0f; 
mA[11610] = 0.0f; 
mA[11611] = 0.0f; 
mA[11612] = 0.0f; 
mA[11613] = 0.0f; 
mA[11614] = 0.0f; 
mA[11615] = 0.0f; 
mA[11616] = 0.0f; 
mA[11617] = 0.0f; 
mA[11618] = 0.0f; 
mA[11619] = 0.0f; 
mA[11620] = 0.0f; 
mA[11621] = 0.0f; 
mA[11622] = 0.0f; 
mA[11623] = 0.0f; 
mA[11624] = 0.0f; 
mA[11625] = 0.0f; 
mA[11626] = 0.0f; 
mA[11627] = 0.0f; 
mA[11628] = 0.0f; 
mA[11629] = 0.0f; 
mA[11630] = 0.0f; 
mA[11631] = 0.0f; 
mA[11632] = 0.0f; 
mA[11633] = 0.0f; 
mA[11634] = 0.0f; 
mA[11635] = 0.0f; 
mA[11636] = 0.0f; 
mA[11637] = 0.0f; 
mA[11638] = 0.0f; 
mA[11639] = 0.0f; 
mA[11640] = 0.0f; 
mA[11641] = 0.0f; 
mA[11642] = 0.0f; 
mA[11643] = 0.0f; 
mA[11644] = 0.0f; 
mA[11645] = 0.0f; 
mA[11646] = 0.0f; 
mA[11647] = 0.0f; 
mA[11648] = 0.0f; 
mA[11649] = 0.0f; 
mA[11650] = 0.0f; 
mA[11651] = 0.0f; 
mA[11652] = 0.0f; 
mA[11653] = 0.0f; 
mA[11654] = 0.0f; 
mA[11655] = 0.0f; 
mA[11656] = 0.0f; 
mA[11657] = 0.0f; 
mA[11658] = 0.0f; 
mA[11659] = 0.0f; 
mA[11660] = 0.0f; 
mA[11661] = 0.0f; 
mA[11662] = 0.0f; 
mA[11663] = 0.0f; 
mA[11664] = 0.0f; 
mA[11665] = 0.0f; 
mA[11666] = 0.0f; 
mA[11667] = 0.0f; 
mA[11668] = 0.0f; 
mA[11669] = 0.0f; 
mA[11670] = 0.0f; 
mA[11671] = 0.0f; 
mA[11672] = 0.0f; 
mA[11673] = 0.0f; 
mA[11674] =  v_v19_ed_fw ; 
mA[11675] = 0.0f; 
mA[11676] = 0.0f; 
mA[11677] = 0.0f; 
mA[11678] = 0.0f; 
mA[11679] = 0.0f; 
mA[11680] = 0.0f; 
mA[11681] = 0.0f; 
mA[11682] = 0.0f; 
mA[11683] = 0.0f; 
mA[11684] = 0.0f; 
mA[11685] = 0.0f; 
mA[11686] = 0.0f; 
mA[11687] = 0.0f; 
mA[11688] = 0.0f; 
mA[11689] = 0.0f; 
mA[11690] = 0.0f; 
mA[11691] = 0.0f; 
mA[11692] = 0.0f; 
mA[11693] = 0.0f; 
mA[11694] = 0.0f; 
mA[11695] = 0.0f; 
mA[11696] = 0.0f; 
mA[11697] = 0.0f; 
mA[11698] = 0.0f; 
mA[11699] = 0.0f; 
mA[11700] = ( (  -1.0f  * v_v18_ed_fw   )   ) ; 
mA[11701] = 0.0f; 
mA[11702] = 0.0f; 
mA[11703] = 0.0f; 
mA[11704] = 0.0f; 
mA[11705] = 0.0f; 
mA[11706] = 0.0f; 
mA[11707] = 0.0f; 
mA[11708] = 0.0f; 
mA[11709] = 0.0f; 
mA[11710] = 0.0f; 
mA[11711] = 0.0f; 
mA[11712] = 0.0f; 
mA[11713] = 0.0f; 
mA[11714] = 0.0f; 
mA[11715] = 0.0f; 
mA[11716] = 0.0f; 
mA[11717] = 0.0f; 
mA[11718] = 0.0f; 
mA[11719] = 0.0f; 
mA[11720] = 0.0f; 
mA[11721] = 0.0f; 
mA[11722] = 0.0f; 
mA[11723] = 0.0f; 
mA[11724] = 0.0f; 
mA[11725] = 0.0f; 
mA[11726] = 0.0f; 
mA[11727] = 0.0f; 
mA[11728] = 0.0f; 
mA[11729] = 0.0f; 
mA[11730] = 0.0f; 
mA[11731] = 0.0f; 
mA[11732] = 0.0f; 
mA[11733] = 0.0f; 
mA[11734] = 0.0f; 
mA[11735] = 0.0f; 
mA[11736] = 0.0f; 
mA[11737] = 0.0f; 
mA[11738] = 0.0f; 
mA[11739] = 0.0f; 
mA[11740] = 0.0f; 
mA[11741] = 0.0f; 
mA[11742] = 0.0f; 
mA[11743] = 0.0f; 
mA[11744] = 0.0f; 
mA[11745] = 0.0f; 
mA[11746] = 0.0f; 
mA[11747] = 0.0f; 
mA[11748] = 0.0f; 
mA[11749] = 0.0f; 
mA[11750] = 0.0f; 
mA[11751] = 0.0f; 
mA[11752] = 0.0f; 
mA[11753] = 0.0f; 
mA[11754] = 0.0f; 
mA[11755] = 0.0f; 
mA[11756] = 0.0f; 
mA[11757] = 0.0f; 
mA[11758] = 0.0f; 
mA[11759] = 0.0f; 
mA[11760] = 0.0f; 
mA[11761] = 0.0f; 
mA[11762] = 0.0f; 
mA[11763] = 0.0f; 
mA[11764] = 0.0f; 
mA[11765] = 0.0f; 
mA[11766] = 0.0f; 
mA[11767] = 0.0f; 
mA[11768] = 0.0f; 
mA[11769] = 0.0f; 
mA[11770] = 0.0f; 
mA[11771] = 0.0f; 
mA[11772] = 0.0f; 
mA[11773] = 0.0f; 
mA[11774] = 0.0f; 
mA[11775] = 0.0f; 
mA[11776] = 0.0f; 
mA[11777] = 0.0f; 
mA[11778] = 0.0f; 
mA[11779] = 0.0f; 
mA[11780] = 0.0f; 
mA[11781] = 0.0f; 
mA[11782] = 0.0f; 
mA[11783] = 0.0f; 
mA[11784] = 0.0f; 
mA[11785] = 0.0f; 
mA[11786] = 0.0f; 
mA[11787] = 0.0f; 
mA[11788] = 0.0f; 
mA[11789] = 0.0f; 
mA[11790] = 0.0f; 
mA[11791] = 0.0f; 
mA[11792] = 0.0f; 
mA[11793] = 0.0f; 
mA[11794] = 0.0f; 
mA[11795] = 0.0f; 
mA[11796] = 0.0f; 
mA[11797] = 0.0f; 
mA[11798] = 0.0f; 
mA[11799] = 0.0f; 
mA[11800] = 0.0f; 
mA[11801] = 0.0f; 
mA[11802] = 0.0f; 
mA[11803] = 0.0f; 
mA[11804] = 0.0f; 
mA[11805] = 0.0f; 
mA[11806] = 0.0f; 
mA[11807] = 0.0f; 
mA[11808] = 0.0f; 
mA[11809] = 0.0f; 
mA[11810] = 0.0f; 
mA[11811] = 0.0f; 
mA[11812] = 0.0f; 
mA[11813] = 0.0f; 
mA[11814] = 0.0f; 
mA[11815] = 0.0f; 
mA[11816] = 0.0f; 
mA[11817] = 0.0f; 
mA[11818] = 0.0f; 
mA[11819] = 0.0f; 
mA[11820] = 0.0f; 
mA[11821] = 0.0f; 
mA[11822] = 0.0f; 
mA[11823] = 0.0f; 
mA[11824] =  v_v19_ed_fw ; 
mA[11825] = 0.0f; 
mA[11826] = 0.0f; 
mA[11827] = 0.0f; 
mA[11828] = 0.0f; 
mA[11829] = 0.0f; 
mA[11830] = 0.0f; 
mA[11831] = 0.0f; 
mA[11832] = 0.0f; 
mA[11833] = 0.0f; 
mA[11834] = 0.0f; 
mA[11835] = 0.0f; 
mA[11836] = 0.0f; 
mA[11837] = 0.0f; 
mA[11838] = 0.0f; 
mA[11839] = 0.0f; 
mA[11840] = 0.0f; 
mA[11841] = 0.0f; 
mA[11842] = 0.0f; 
mA[11843] = 0.0f; 
mA[11844] = 0.0f; 
mA[11845] = 0.0f; 
mA[11846] = 0.0f; 
mA[11847] = 0.0f; 
mA[11848] = 0.0f; 
mA[11849] = 0.0f; 
mA[11850] = ( (  -1.0f  * v_v18_ed_fw   )   ) ; 
mA[11851] = 0.0f; 
mA[11852] = 0.0f; 
mA[11853] = 0.0f; 
mA[11854] = 0.0f; 
mA[11855] = 0.0f; 
mA[11856] = 0.0f; 
mA[11857] = 0.0f; 
mA[11858] = 0.0f; 
mA[11859] = 0.0f; 
mA[11860] = 0.0f; 
mA[11861] = 0.0f; 
mA[11862] = 0.0f; 
mA[11863] = 0.0f; 
mA[11864] = 0.0f; 
mA[11865] = 0.0f; 
mA[11866] = 0.0f; 
mA[11867] = 0.0f; 
mA[11868] = 0.0f; 
mA[11869] = 0.0f; 
mA[11870] = 0.0f; 
mA[11871] = 0.0f; 
mA[11872] = 0.0f; 
mA[11873] = 0.0f; 
mA[11874] = 0.0f; 
mA[11875] = 0.0f; 
mA[11876] = 0.0f; 
mA[11877] = 0.0f; 
mA[11878] = 0.0f; 
mA[11879] = 0.0f; 
mA[11880] = 0.0f; 
mA[11881] = 0.0f; 
mA[11882] = 0.0f; 
mA[11883] = 0.0f; 
mA[11884] = 0.0f; 
mA[11885] = 0.0f; 
mA[11886] = 0.0f; 
mA[11887] = 0.0f; 
mA[11888] = 0.0f; 
mA[11889] = 0.0f; 
mA[11890] = 0.0f; 
mA[11891] = 0.0f; 
mA[11892] = 0.0f; 
mA[11893] = 0.0f; 
mA[11894] = 0.0f; 
mA[11895] = 0.0f; 
mA[11896] = 0.0f; 
mA[11897] = 0.0f; 
mA[11898] = 0.0f; 
mA[11899] = 0.0f; 
mA[11900] = 0.0f; 
mA[11901] = 0.0f; 
mA[11902] = 0.0f; 
mA[11903] = 0.0f; 
mA[11904] = 0.0f; 
mA[11905] = 0.0f; 
mA[11906] = 0.0f; 
mA[11907] = 0.0f; 
mA[11908] = 0.0f; 
mA[11909] = 0.0f; 
mA[11910] = 0.0f; 
mA[11911] = 0.0f; 
mA[11912] = 0.0f; 
mA[11913] = 0.0f; 
mA[11914] = 0.0f; 
mA[11915] = 0.0f; 
mA[11916] = 0.0f; 
mA[11917] = 0.0f; 
mA[11918] = 0.0f; 
mA[11919] = 0.0f; 
mA[11920] = 0.0f; 
mA[11921] = 0.0f; 
mA[11922] = 0.0f; 
mA[11923] = 0.0f; 
mA[11924] = 0.0f; 
mA[11925] = 0.0f; 
mA[11926] = 0.0f; 
mA[11927] = 0.0f; 
mA[11928] = 0.0f; 
mA[11929] = 0.0f; 
mA[11930] = 0.0f; 
mA[11931] = 0.0f; 
mA[11932] = 0.0f; 
mA[11933] = 0.0f; 
mA[11934] = 0.0f; 
mA[11935] = 0.0f; 
mA[11936] = 0.0f; 
mA[11937] = 0.0f; 
mA[11938] = 0.0f; 
mA[11939] = 0.0f; 
mA[11940] = 0.0f; 
mA[11941] = 0.0f; 
mA[11942] = 0.0f; 
mA[11943] = 0.0f; 
mA[11944] = 0.0f; 
mA[11945] = 0.0f; 
mA[11946] = 0.0f; 
mA[11947] = 0.0f; 
mA[11948] = 0.0f; 
mA[11949] = 0.0f; 
mA[11950] = 0.0f; 
mA[11951] = 0.0f; 
mA[11952] = 0.0f; 
mA[11953] = 0.0f; 
mA[11954] = 0.0f; 
mA[11955] = 0.0f; 
mA[11956] = 0.0f; 
mA[11957] = 0.0f; 
mA[11958] = 0.0f; 
mA[11959] = 0.0f; 
mA[11960] = 0.0f; 
mA[11961] = 0.0f; 
mA[11962] = 0.0f; 
mA[11963] = 0.0f; 
mA[11964] = 0.0f; 
mA[11965] = 0.0f; 
mA[11966] = 0.0f; 
mA[11967] = 0.0f; 
mA[11968] = 0.0f; 
mA[11969] = 0.0f; 
mA[11970] = 0.0f; 
mA[11971] = 0.0f; 
mA[11972] = 0.0f; 
mA[11973] = 0.0f; 
mA[11974] =  v_v19_ed_fw ; 
mA[11975] = 0.0f; 
mA[11976] = 0.0f; 
mA[11977] = 0.0f; 
mA[11978] = 0.0f; 
mA[11979] = 0.0f; 
mA[11980] = 0.0f; 
mA[11981] = 0.0f; 
mA[11982] = 0.0f; 
mA[11983] = 0.0f; 
mA[11984] = 0.0f; 
mA[11985] = 0.0f; 
mA[11986] = 0.0f; 
mA[11987] = 0.0f; 
mA[11988] = 0.0f; 
mA[11989] = 0.0f; 
mA[11990] = 0.0f; 
mA[11991] = 0.0f; 
mA[11992] = 0.0f; 
mA[11993] = 0.0f; 
mA[11994] = 0.0f; 
mA[11995] = 0.0f; 
mA[11996] = 0.0f; 
mA[11997] = 0.0f; 
mA[11998] = 0.0f; 
mA[11999] = 0.0f; 
mA[12000] = ( (  -1.0f  * v_v18_ed_fw   )   ) ; 
mA[12001] = 0.0f; 
mA[12002] = 0.0f; 
mA[12003] = 0.0f; 
mA[12004] = 0.0f; 
mA[12005] = 0.0f; 
mA[12006] = 0.0f; 
mA[12007] = 0.0f; 
mA[12008] = 0.0f; 
mA[12009] = 0.0f; 
mA[12010] = 0.0f; 
mA[12011] = 0.0f; 
mA[12012] = 0.0f; 
mA[12013] = 0.0f; 
mA[12014] = 0.0f; 
mA[12015] = 0.0f; 
mA[12016] = 0.0f; 
mA[12017] = 0.0f; 
mA[12018] = 0.0f; 
mA[12019] = 0.0f; 
mA[12020] = 0.0f; 
mA[12021] = 0.0f; 
mA[12022] = 0.0f; 
mA[12023] = 0.0f; 
mA[12024] = 0.0f; 
mA[12025] = 0.0f; 
mA[12026] = 0.0f; 
mA[12027] = 0.0f; 
mA[12028] = 0.0f; 
mA[12029] = 0.0f; 
mA[12030] = 0.0f; 
mA[12031] = 0.0f; 
mA[12032] = 0.0f; 
mA[12033] = 0.0f; 
mA[12034] = 0.0f; 
mA[12035] = 0.0f; 
mA[12036] = 0.0f; 
mA[12037] = 0.0f; 
mA[12038] = 0.0f; 
mA[12039] = 0.0f; 
mA[12040] = 0.0f; 
mA[12041] = 0.0f; 
mA[12042] = 0.0f; 
mA[12043] = 0.0f; 
mA[12044] = 0.0f; 
mA[12045] = 0.0f; 
mA[12046] = 0.0f; 
mA[12047] = 0.0f; 
mA[12048] = 0.0f; 
mA[12049] = 0.0f; 
mA[12050] = 0.0f; 
mA[12051] = 0.0f; 
mA[12052] = 0.0f; 
mA[12053] = 0.0f; 
mA[12054] = 0.0f; 
mA[12055] = 0.0f; 
mA[12056] = 0.0f; 
mA[12057] = 0.0f; 
mA[12058] = 0.0f; 
mA[12059] = 0.0f; 
mA[12060] = 0.0f; 
mA[12061] = 0.0f; 
mA[12062] = 0.0f; 
mA[12063] = 0.0f; 
mA[12064] = 0.0f; 
mA[12065] = 0.0f; 
mA[12066] = 0.0f; 
mA[12067] = 0.0f; 
mA[12068] = 0.0f; 
mA[12069] = 0.0f; 
mA[12070] = 0.0f; 
mA[12071] = 0.0f; 
mA[12072] = 0.0f; 
mA[12073] = 0.0f; 
mA[12074] = 0.0f; 
mA[12075] = 0.0f; 
mA[12076] = 0.0f; 
mA[12077] = 0.0f; 
mA[12078] = 0.0f; 
mA[12079] = 0.0f; 
mA[12080] = 0.0f; 
mA[12081] = 0.0f; 
mA[12082] =  v_v49_aa_fw_b ; 
mA[12083] = 0.0f; 
mA[12084] = 0.0f; 
mA[12085] = 0.0f; 
mA[12086] = 0.0f; 
mA[12087] = 0.0f; 
mA[12088] = 0.0f; 
mA[12089] = 0.0f; 
mA[12090] = 0.0f; 
mA[12091] = 0.0f; 
mA[12092] = 0.0f; 
mA[12093] = 0.0f; 
mA[12094] = 0.0f; 
mA[12095] = 0.0f; 
mA[12096] = 0.0f; 
mA[12097] = 0.0f; 
mA[12098] = 0.0f; 
mA[12099] = 0.0f; 
mA[12100] = 0.0f; 
mA[12101] = 0.0f; 
mA[12102] = 0.0f; 
mA[12103] = 0.0f; 
mA[12104] = 0.0f; 
mA[12105] = 0.0f; 
mA[12106] = 0.0f; 
mA[12107] = 0.0f; 
mA[12108] = 0.0f; 
mA[12109] = 0.0f; 
mA[12110] = 0.0f; 
mA[12111] = 0.0f; 
mA[12112] = 0.0f; 
mA[12113] = 0.0f; 
mA[12114] = 0.0f; 
mA[12115] = 0.0f; 
mA[12116] = 0.0f; 
mA[12117] = 0.0f; 
mA[12118] = 0.0f; 
mA[12119] = 0.0f; 
mA[12120] = 0.0f; 
mA[12121] = 0.0f; 
mA[12122] = 0.0f; 
mA[12123] = 0.0f; 
mA[12124] = 0.0f; 
mA[12125] = 0.0f; 
mA[12126] = 0.0f; 
mA[12127] = 0.0f; 
mA[12128] = 0.0f; 
mA[12129] = 0.0f; 
mA[12130] = 0.0f; 
mA[12131] = 0.0f; 
mA[12132] = 0.0f; 
mA[12133] = 0.0f; 
mA[12134] = 0.0f; 
mA[12135] = 0.0f; 
mA[12136] = 0.0f; 
mA[12137] = 0.0f; 
mA[12138] = 0.0f; 
mA[12139] = 0.0f; 
mA[12140] = 0.0f; 
mA[12141] = 0.0f; 
mA[12142] = 0.0f; 
mA[12143] = 0.0f; 
mA[12144] = 0.0f; 
mA[12145] = 0.0f; 
mA[12146] = 0.0f; 
mA[12147] = 0.0f; 
mA[12148] = 0.0f; 
mA[12149] = 0.0f; 
mA[12150] = ( (  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v48_aa_fw_b   )   ) ; 
mA[12151] = 0.0f; 
mA[12152] = 0.0f; 
mA[12153] = 0.0f; 
mA[12154] = 0.0f; 
mA[12155] = 0.0f; 
mA[12156] = 0.0f; 
mA[12157] = 0.0f; 
mA[12158] = 0.0f; 
mA[12159] = 0.0f; 
mA[12160] = 0.0f; 
mA[12161] = 0.0f; 
mA[12162] = 0.0f; 
mA[12163] = 0.0f; 
mA[12164] = 0.0f; 
mA[12165] = 0.0f; 
mA[12166] = 0.0f; 
mA[12167] = 0.0f; 
mA[12168] = 0.0f; 
mA[12169] = 0.0f; 
mA[12170] = 0.0f; 
mA[12171] = 0.0f; 
mA[12172] = 0.0f; 
mA[12173] = 0.0f; 
mA[12174] = 0.0f; 
mA[12175] = 0.0f; 
mA[12176] = 0.0f; 
mA[12177] = 0.0f; 
mA[12178] = 0.0f; 
mA[12179] = 0.0f; 
mA[12180] = 0.0f; 
mA[12181] = 0.0f; 
mA[12182] = 0.0f; 
mA[12183] = 0.0f; 
mA[12184] = 0.0f; 
mA[12185] = 0.0f; 
mA[12186] = 0.0f; 
mA[12187] = 0.0f; 
mA[12188] = 0.0f; 
mA[12189] = 0.0f; 
mA[12190] = 0.0f; 
mA[12191] = 0.0f; 
mA[12192] = 0.0f; 
mA[12193] = 0.0f; 
mA[12194] = 0.0f; 
mA[12195] = 0.0f; 
mA[12196] = 0.0f; 
mA[12197] = 0.0f; 
mA[12198] = 0.0f; 
mA[12199] = 0.0f; 
mA[12200] = 0.0f; 
mA[12201] = 0.0f; 
mA[12202] = 0.0f; 
mA[12203] = 0.0f; 
mA[12204] = 0.0f; 
mA[12205] = 0.0f; 
mA[12206] = 0.0f; 
mA[12207] = 0.0f; 
mA[12208] = 0.0f; 
mA[12209] = 0.0f; 
mA[12210] = 0.0f; 
mA[12211] = 0.0f; 
mA[12212] = 0.0f; 
mA[12213] = 0.0f; 
mA[12214] = 0.0f; 
mA[12215] = 0.0f; 
mA[12216] = 0.0f; 
mA[12217] = 0.0f; 
mA[12218] = 0.0f; 
mA[12219] = 0.0f; 
mA[12220] = 0.0f; 
mA[12221] = 0.0f; 
mA[12222] = 0.0f; 
mA[12223] = 0.0f; 
mA[12224] = 0.0f; 
mA[12225] = 0.0f; 
mA[12226] = 0.0f; 
mA[12227] = 0.0f; 
mA[12228] = 0.0f; 
mA[12229] = 0.0f; 
mA[12230] = 0.0f; 
mA[12231] =  v_v49_aa_fw_a ; 
mA[12232] = 0.0f; 
mA[12233] = 0.0f; 
mA[12234] = 0.0f; 
mA[12235] = 0.0f; 
mA[12236] = 0.0f; 
mA[12237] = 0.0f; 
mA[12238] = 0.0f; 
mA[12239] = 0.0f; 
mA[12240] = 0.0f; 
mA[12241] = 0.0f; 
mA[12242] = 0.0f; 
mA[12243] = 0.0f; 
mA[12244] = 0.0f; 
mA[12245] = 0.0f; 
mA[12246] = 0.0f; 
mA[12247] = 0.0f; 
mA[12248] = 0.0f; 
mA[12249] = 0.0f; 
mA[12250] = 0.0f; 
mA[12251] = 0.0f; 
mA[12252] = 0.0f; 
mA[12253] = 0.0f; 
mA[12254] = 0.0f; 
mA[12255] = 0.0f; 
mA[12256] = 0.0f; 
mA[12257] = 0.0f; 
mA[12258] = 0.0f; 
mA[12259] = 0.0f; 
mA[12260] = 0.0f; 
mA[12261] = 0.0f; 
mA[12262] = 0.0f; 
mA[12263] = 0.0f; 
mA[12264] = 0.0f; 
mA[12265] = 0.0f; 
mA[12266] = 0.0f; 
mA[12267] = 0.0f; 
mA[12268] = 0.0f; 
mA[12269] = 0.0f; 
mA[12270] = 0.0f; 
mA[12271] = 0.0f; 
mA[12272] = 0.0f; 
mA[12273] = 0.0f; 
mA[12274] = 0.0f; 
mA[12275] = 0.0f; 
mA[12276] = 0.0f; 
mA[12277] = 0.0f; 
mA[12278] = 0.0f; 
mA[12279] = 0.0f; 
mA[12280] = 0.0f; 
mA[12281] = 0.0f; 
mA[12282] = 0.0f; 
mA[12283] = 0.0f; 
mA[12284] = 0.0f; 
mA[12285] = 0.0f; 
mA[12286] = 0.0f; 
mA[12287] = 0.0f; 
mA[12288] = 0.0f; 
mA[12289] = 0.0f; 
mA[12290] = 0.0f; 
mA[12291] = 0.0f; 
mA[12292] = 0.0f; 
mA[12293] = 0.0f; 
mA[12294] = 0.0f; 
mA[12295] = 0.0f; 
mA[12296] = 0.0f; 
mA[12297] = 0.0f; 
mA[12298] = 0.0f; 
mA[12299] = 0.0f; 
mA[12300] = ( (  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v48_aa_fw_a   )   ) ; 
mA[12301] = 0.0f; 
mA[12302] = 0.0f; 
mA[12303] = 0.0f; 
mA[12304] = 0.0f; 
mA[12305] = 0.0f; 
mA[12306] = 0.0f; 
mA[12307] = 0.0f; 
mA[12308] = 0.0f; 
mA[12309] = 0.0f; 
mA[12310] = 0.0f; 
mA[12311] = 0.0f; 
mA[12312] = 0.0f; 
mA[12313] = 0.0f; 
mA[12314] = 0.0f; 
mA[12315] = 0.0f; 
mA[12316] = 0.0f; 
mA[12317] = 0.0f; 
mA[12318] = 0.0f; 
mA[12319] = 0.0f; 
mA[12320] = 0.0f; 
mA[12321] = 0.0f; 
mA[12322] = 0.0f; 
mA[12323] = 0.0f; 
mA[12324] = 0.0f; 
mA[12325] = 0.0f; 
mA[12326] = 0.0f; 
mA[12327] = 0.0f; 
mA[12328] = 0.0f; 
mA[12329] = 0.0f; 
mA[12330] = 0.0f; 
mA[12331] = 0.0f; 
mA[12332] = 0.0f; 
mA[12333] = 0.0f; 
mA[12334] = 0.0f; 
mA[12335] = 0.0f; 
mA[12336] = 0.0f; 
mA[12337] = 0.0f; 
mA[12338] = 0.0f; 
mA[12339] = 0.0f; 
mA[12340] = 0.0f; 
mA[12341] = 0.0f; 
mA[12342] = 0.0f; 
mA[12343] = 0.0f; 
mA[12344] = 0.0f; 
mA[12345] = 0.0f; 
mA[12346] = 0.0f; 
mA[12347] = 0.0f; 
mA[12348] = 0.0f; 
mA[12349] = 0.0f; 
mA[12350] = 0.0f; 
mA[12351] = 0.0f; 
mA[12352] = 0.0f; 
mA[12353] = 0.0f; 
mA[12354] = 0.0f; 
mA[12355] = 0.0f; 
mA[12356] = 0.0f; 
mA[12357] = 0.0f; 
mA[12358] = 0.0f; 
mA[12359] = 0.0f; 
mA[12360] = 0.0f; 
mA[12361] = 0.0f; 
mA[12362] = 0.0f; 
mA[12363] = 0.0f; 
mA[12364] = 0.0f; 
mA[12365] = 0.0f; 
mA[12366] = 0.0f; 
mA[12367] = 0.0f; 
mA[12368] = 0.0f; 
mA[12369] = 0.0f; 
mA[12370] = 0.0f; 
mA[12371] = 0.0f; 
mA[12372] = 0.0f; 
mA[12373] = 0.0f; 
mA[12374] = 0.0f; 
mA[12375] = 0.0f; 
mA[12376] = 0.0f; 
mA[12377] = 0.0f; 
mA[12378] = 0.0f; 
mA[12379] = 0.0f; 
mA[12380] = 0.0f; 
mA[12381] = 0.0f; 
mA[12382] = 0.0f; 
mA[12383] = 0.0f; 
mA[12384] = 0.0f; 
mA[12385] = 0.0f; 
mA[12386] = 0.0f; 
mA[12387] = 0.0f; 
mA[12388] = 0.0f; 
mA[12389] = 0.0f; 
mA[12390] = 0.0f; 
mA[12391] = 0.0f; 
mA[12392] = 0.0f; 
mA[12393] = 0.0f; 
mA[12394] = 0.0f; 
mA[12395] = 0.0f; 
mA[12396] = 0.0f; 
mA[12397] = 0.0f; 
mA[12398] = 0.0f; 
mA[12399] = 0.0f; 
mA[12400] = 0.0f; 
mA[12401] = 0.0f; 
mA[12402] = 0.0f; 
mA[12403] = 0.0f; 
mA[12404] = 0.0f; 
mA[12405] = 0.0f; 
mA[12406] = 0.0f; 
mA[12407] = 0.0f; 
mA[12408] = 0.0f; 
mA[12409] = 0.0f; 
mA[12410] = 0.0f; 
mA[12411] = 0.0f; 
mA[12412] = 0.0f; 
mA[12413] = 0.0f; 
mA[12414] = 0.0f; 
mA[12415] = 0.0f; 
mA[12416] = 0.0f; 
mA[12417] = 0.0f; 
mA[12418] = 0.0f; 
mA[12419] = 0.0f; 
mA[12420] = 0.0f; 
mA[12421] = 0.0f; 
mA[12422] = 0.0f; 
mA[12423] = 0.0f; 
mA[12424] = 0.0f; 
mA[12425] = 0.0f; 
mA[12426] = 0.0f; 
mA[12427] = 0.0f; 
mA[12428] = 0.0f; 
mA[12429] = 0.0f; 
mA[12430] = 0.0f; 
mA[12431] = 0.0f; 
mA[12432] = 0.0f; 
mA[12433] =  v_v45_aa_bw ; 
mA[12434] = 0.0f; 
mA[12435] = 0.0f; 
mA[12436] = 0.0f; 
mA[12437] = 0.0f; 
mA[12438] = 0.0f; 
mA[12439] = 0.0f; 
mA[12440] = 0.0f; 
mA[12441] = 0.0f; 
mA[12442] = 0.0f; 
mA[12443] = 0.0f; 
mA[12444] = 0.0f; 
mA[12445] = 0.0f; 
mA[12446] = 0.0f; 
mA[12447] = 0.0f; 
mA[12448] = 0.0f; 
mA[12449] = 0.0f; 
mA[12450] = ( (  -1.0f  * v_v45_aa_fw   )  +(  -1.0f  * v_v44_aa_fw   )   ) ; 
mA[12451] = 0.0f; 
mA[12452] = 0.0f; 
mA[12453] = 0.0f; 
mA[12454] = 0.0f; 
mA[12455] = 0.0f; 
mA[12456] = 0.0f; 
mA[12457] = 0.0f; 
mA[12458] = 0.0f; 
mA[12459] = 0.0f; 
mA[12460] = 0.0f; 
mA[12461] = 0.0f; 
mA[12462] = 0.0f; 
mA[12463] = 0.0f; 
mA[12464] = 0.0f; 
mA[12465] = 0.0f; 
mA[12466] = 0.0f; 
mA[12467] = 0.0f; 
mA[12468] = 0.0f; 
mA[12469] = 0.0f; 
mA[12470] = 0.0f; 
mA[12471] = 0.0f; 
mA[12472] = 0.0f; 
mA[12473] = 0.0f; 
mA[12474] = 0.0f; 
mA[12475] = 0.0f; 
mA[12476] = 0.0f; 
mA[12477] = 0.0f; 
mA[12478] = 0.0f; 
mA[12479] = 0.0f; 
mA[12480] = 0.0f; 
mA[12481] = 0.0f; 
mA[12482] = 0.0f; 
mA[12483] = 0.0f; 
mA[12484] =  v_v44_aa_bw ; 
mA[12485] = 0.0f; 
mA[12486] = 0.0f; 
mA[12487] = 0.0f; 
mA[12488] = 0.0f; 
mA[12489] = 0.0f; 
mA[12490] = 0.0f; 
mA[12491] = 0.0f; 
mA[12492] = 0.0f; 
mA[12493] = 0.0f; 
mA[12494] = 0.0f; 
mA[12495] = 0.0f; 
mA[12496] = 0.0f; 
mA[12497] = 0.0f; 
mA[12498] = 0.0f; 
mA[12499] = 0.0f; 
mA[12500] = 0.0f; 
mA[12501] = 0.0f; 
mA[12502] = 0.0f; 
mA[12503] = 0.0f; 
mA[12504] = 0.0f; 
mA[12505] = 0.0f; 
mA[12506] = 0.0f; 
mA[12507] = 0.0f; 
mA[12508] = 0.0f; 
mA[12509] = 0.0f; 
mA[12510] = 0.0f; 
mA[12511] = 0.0f; 
mA[12512] = 0.0f; 
mA[12513] = 0.0f; 
mA[12514] = 0.0f; 
mA[12515] = 0.0f; 
mA[12516] = 0.0f; 
mA[12517] = 0.0f; 
mA[12518] = 0.0f; 
mA[12519] = 0.0f; 
mA[12520] = 0.0f; 
mA[12521] = 0.0f; 
mA[12522] = 0.0f; 
mA[12523] = 0.0f; 
mA[12524] = 0.0f; 
mA[12525] = 0.0f; 
mA[12526] = 0.0f; 
mA[12527] = 0.0f; 
mA[12528] = 0.0f; 
mA[12529] = 0.0f; 
mA[12530] = 0.0f; 
mA[12531] = 0.0f; 
mA[12532] = 0.0f; 
mA[12533] = 0.0f; 
mA[12534] = 0.0f; 
mA[12535] = 0.0f; 
mA[12536] = 0.0f; 
mA[12537] = 0.0f; 
mA[12538] = 0.0f; 
mA[12539] = 0.0f; 
mA[12540] = 0.0f; 
mA[12541] = 0.0f; 
mA[12542] = 0.0f; 
mA[12543] = 0.0f; 
mA[12544] = 0.0f; 
mA[12545] = 0.0f; 
mA[12546] = 0.0f; 
mA[12547] = 0.0f; 
mA[12548] = 0.0f; 
mA[12549] = 0.0f; 
mA[12550] = 0.0f; 
mA[12551] = 0.0f; 
mA[12552] = 0.0f; 
mA[12553] = 0.0f; 
mA[12554] = 0.0f; 
mA[12555] = 0.0f; 
mA[12556] = 0.0f; 
mA[12557] = 0.0f; 
mA[12558] =  v_v27_tca_bw_a ; 
mA[12559] = 0.0f; 
mA[12560] = 0.0f; 
mA[12561] =  v_v27_tca_bw_b ; 
mA[12562] = 0.0f; 
mA[12563] = 0.0f; 
mA[12564] = 0.0f; 
mA[12565] = 0.0f; 
mA[12566] = 0.0f; 
mA[12567] = 0.0f; 
mA[12568] = 0.0f; 
mA[12569] = 0.0f; 
mA[12570] = 0.0f; 
mA[12571] = 0.0f; 
mA[12572] = 0.0f; 
mA[12573] = 0.0f; 
mA[12574] = 0.0f; 
mA[12575] = 0.0f; 
mA[12576] = 0.0f; 
mA[12577] = 0.0f; 
mA[12578] = 0.0f; 
mA[12579] = 0.0f; 
mA[12580] = 0.0f; 
mA[12581] = 0.0f; 
mA[12582] = 0.0f; 
mA[12583] = 0.0f; 
mA[12584] = 0.0f; 
mA[12585] = 0.0f; 
mA[12586] = 0.0f; 
mA[12587] = 0.0f; 
mA[12588] = 0.0f; 
mA[12589] = 0.0f; 
mA[12590] = 0.0f; 
mA[12591] = 0.0f; 
mA[12592] = 0.0f; 
mA[12593] = 0.0f; 
mA[12594] = 0.0f; 
mA[12595] = 0.0f; 
mA[12596] = 0.0f; 
mA[12597] = 0.0f; 
mA[12598] = 0.0f; 
mA[12599] = 0.0f; 
mA[12600] = ( (  -1.0f  * v_v30_glyox_fw   )  +(  -1.0f  * v_v28_tca_bw   )  +(  -1.0f  * v_v27_tca_fw_b   )  +(  -1.0f  * v_v27_tca_fw_a   )   ) ; 
mA[12601] = 0.0f; 
mA[12602] = 0.0f; 
mA[12603] = 0.0f; 
mA[12604] =  v_v28_tca_fw ; 
mA[12605] = 0.0f; 
mA[12606] = 0.0f; 
mA[12607] = 0.0f; 
mA[12608] = 0.0f; 
mA[12609] = 0.0f; 
mA[12610] = 0.0f; 
mA[12611] = (  v_v31_amphi_fw  + v_v32_amphi_fw   ) ; 
mA[12612] = 0.0f; 
mA[12613] = 0.0f; 
mA[12614] = 0.0f; 
mA[12615] = 0.0f; 
mA[12616] = 0.0f; 
mA[12617] = 0.0f; 
mA[12618] = 0.0f; 
mA[12619] = 0.0f; 
mA[12620] = 0.0f; 
mA[12621] = 0.0f; 
mA[12622] = 0.0f; 
mA[12623] = 0.0f; 
mA[12624] = 0.0f; 
mA[12625] = 0.0f; 
mA[12626] = 0.0f; 
mA[12627] = 0.0f; 
mA[12628] = 0.0f; 
mA[12629] = 0.0f; 
mA[12630] = 0.0f; 
mA[12631] = 0.0f; 
mA[12632] = 0.0f; 
mA[12633] = 0.0f; 
mA[12634] = 0.0f; 
mA[12635] = 0.0f; 
mA[12636] = 0.0f; 
mA[12637] = 0.0f; 
mA[12638] = 0.0f; 
mA[12639] = 0.0f; 
mA[12640] = 0.0f; 
mA[12641] = 0.0f; 
mA[12642] = 0.0f; 
mA[12643] = 0.0f; 
mA[12644] = 0.0f; 
mA[12645] = 0.0f; 
mA[12646] = 0.0f; 
mA[12647] = 0.0f; 
mA[12648] = 0.0f; 
mA[12649] = 0.0f; 
mA[12650] = 0.0f; 
mA[12651] = 0.0f; 
mA[12652] = 0.0f; 
mA[12653] = 0.0f; 
mA[12654] = 0.0f; 
mA[12655] = 0.0f; 
mA[12656] = 0.0f; 
mA[12657] = 0.0f; 
mA[12658] = 0.0f; 
mA[12659] = 0.0f; 
mA[12660] = 0.0f; 
mA[12661] = 0.0f; 
mA[12662] = 0.0f; 
mA[12663] = 0.0f; 
mA[12664] = 0.0f; 
mA[12665] = 0.0f; 
mA[12666] = 0.0f; 
mA[12667] = 0.0f; 
mA[12668] = 0.0f; 
mA[12669] = 0.0f; 
mA[12670] = 0.0f; 
mA[12671] = 0.0f; 
mA[12672] = 0.0f; 
mA[12673] = 0.0f; 
mA[12674] = 0.0f; 
mA[12675] = 0.0f; 
mA[12676] = 0.0f; 
mA[12677] = 0.0f; 
mA[12678] = 0.0f; 
mA[12679] = 0.0f; 
mA[12680] = 0.0f; 
mA[12681] = 0.0f; 
mA[12682] = 0.0f; 
mA[12683] = 0.0f; 
mA[12684] = 0.0f; 
mA[12685] = 0.0f; 
mA[12686] = 0.0f; 
mA[12687] = 0.0f; 
mA[12688] = 0.0f; 
mA[12689] = 0.0f; 
mA[12690] = 0.0f; 
mA[12691] = 0.0f; 
mA[12692] = 0.0f; 
mA[12693] = 0.0f; 
mA[12694] = 0.0f; 
mA[12695] = 0.0f; 
mA[12696] = 0.0f; 
mA[12697] = 0.0f; 
mA[12698] = 0.0f; 
mA[12699] = 0.0f; 
mA[12700] = 0.0f; 
mA[12701] = 0.0f; 
mA[12702] = 0.0f; 
mA[12703] = 0.0f; 
mA[12704] = 0.0f; 
mA[12705] = 0.0f; 
mA[12706] = 0.0f; 
mA[12707] = 0.0f; 
mA[12708] =  v_v27_tca_bw_a ; 
mA[12709] =  v_v27_tca_bw_b ; 
mA[12710] = 0.0f; 
mA[12711] = 0.0f; 
mA[12712] = 0.0f; 
mA[12713] = 0.0f; 
mA[12714] = 0.0f; 
mA[12715] = 0.0f; 
mA[12716] = 0.0f; 
mA[12717] = 0.0f; 
mA[12718] = 0.0f; 
mA[12719] = 0.0f; 
mA[12720] = 0.0f; 
mA[12721] = 0.0f; 
mA[12722] = 0.0f; 
mA[12723] = 0.0f; 
mA[12724] = 0.0f; 
mA[12725] = 0.0f; 
mA[12726] = 0.0f; 
mA[12727] = 0.0f; 
mA[12728] = 0.0f; 
mA[12729] = 0.0f; 
mA[12730] = 0.0f; 
mA[12731] = 0.0f; 
mA[12732] = 0.0f; 
mA[12733] = 0.0f; 
mA[12734] = 0.0f; 
mA[12735] = 0.0f; 
mA[12736] = 0.0f; 
mA[12737] = 0.0f; 
mA[12738] = 0.0f; 
mA[12739] = 0.0f; 
mA[12740] = 0.0f; 
mA[12741] = 0.0f; 
mA[12742] = 0.0f; 
mA[12743] = 0.0f; 
mA[12744] = 0.0f; 
mA[12745] = 0.0f; 
mA[12746] = 0.0f; 
mA[12747] = 0.0f; 
mA[12748] = 0.0f; 
mA[12749] = 0.0f; 
mA[12750] = ( (  -1.0f  * v_v27_tca_fw_a   )  +(  -1.0f  * v_v27_tca_fw_b   )  +(  -1.0f  * v_v30_glyox_fw   )  +(  -1.0f  * v_v28_tca_bw   )   ) ; 
mA[12751] = 0.0f; 
mA[12752] = 0.0f; 
mA[12753] = 0.0f; 
mA[12754] =  v_v28_tca_fw ; 
mA[12755] = 0.0f; 
mA[12756] = 0.0f; 
mA[12757] = 0.0f; 
mA[12758] = 0.0f; 
mA[12759] = 0.0f; 
mA[12760] = 0.0f; 
mA[12761] = (  v_v31_amphi_fw  + v_v32_amphi_fw   ) ; 
mA[12762] = 0.0f; 
mA[12763] = 0.0f; 
mA[12764] = 0.0f; 
mA[12765] = 0.0f; 
mA[12766] = 0.0f; 
mA[12767] = 0.0f; 
mA[12768] = 0.0f; 
mA[12769] = 0.0f; 
mA[12770] = 0.0f; 
mA[12771] = 0.0f; 
mA[12772] = 0.0f; 
mA[12773] = 0.0f; 
mA[12774] = 0.0f; 
mA[12775] = 0.0f; 
mA[12776] = 0.0f; 
mA[12777] = 0.0f; 
mA[12778] = 0.0f; 
mA[12779] = 0.0f; 
mA[12780] = 0.0f; 
mA[12781] = 0.0f; 
mA[12782] = 0.0f; 
mA[12783] = 0.0f; 
mA[12784] = 0.0f; 
mA[12785] = 0.0f; 
mA[12786] = 0.0f; 
mA[12787] = 0.0f; 
mA[12788] = 0.0f; 
mA[12789] = 0.0f; 
mA[12790] = 0.0f; 
mA[12791] = 0.0f; 
mA[12792] = 0.0f; 
mA[12793] = 0.0f; 
mA[12794] = 0.0f; 
mA[12795] = 0.0f; 
mA[12796] = 0.0f; 
mA[12797] = 0.0f; 
mA[12798] = 0.0f; 
mA[12799] = 0.0f; 
mA[12800] = 0.0f; 
mA[12801] = 0.0f; 
mA[12802] = 0.0f; 
mA[12803] = 0.0f; 
mA[12804] = 0.0f; 
mA[12805] = 0.0f; 
mA[12806] = 0.0f; 
mA[12807] = 0.0f; 
mA[12808] = 0.0f; 
mA[12809] = 0.0f; 
mA[12810] = 0.0f; 
mA[12811] = 0.0f; 
mA[12812] = 0.0f; 
mA[12813] = 0.0f; 
mA[12814] = 0.0f; 
mA[12815] = 0.0f; 
mA[12816] = 0.0f; 
mA[12817] = 0.0f; 
mA[12818] = 0.0f; 
mA[12819] = 0.0f; 
mA[12820] = 0.0f; 
mA[12821] = 0.0f; 
mA[12822] = 0.0f; 
mA[12823] = 0.0f; 
mA[12824] = 0.0f; 
mA[12825] = 0.0f; 
mA[12826] = 0.0f; 
mA[12827] = 0.0f; 
mA[12828] = 0.0f; 
mA[12829] = 0.0f; 
mA[12830] = 0.0f; 
mA[12831] = 0.0f; 
mA[12832] = 0.0f; 
mA[12833] = 0.0f; 
mA[12834] = 0.0f; 
mA[12835] = 0.0f; 
mA[12836] = 0.0f; 
mA[12837] = 0.0f; 
mA[12838] = 0.0f; 
mA[12839] = 0.0f; 
mA[12840] = 0.0f; 
mA[12841] = 0.0f; 
mA[12842] = 0.0f; 
mA[12843] = 0.0f; 
mA[12844] = 0.0f; 
mA[12845] = 0.0f; 
mA[12846] = 0.0f; 
mA[12847] = 0.0f; 
mA[12848] = 0.0f; 
mA[12849] = 0.0f; 
mA[12850] = 0.0f; 
mA[12851] = 0.0f; 
mA[12852] = 0.0f; 
mA[12853] = 0.0f; 
mA[12854] = 0.0f; 
mA[12855] = 0.0f; 
mA[12856] = 0.0f; 
mA[12857] =  v_v27_tca_bw_b ; 
mA[12858] =  v_v27_tca_bw_a ; 
mA[12859] = 0.0f; 
mA[12860] = 0.0f; 
mA[12861] = 0.0f; 
mA[12862] = 0.0f; 
mA[12863] = 0.0f; 
mA[12864] = 0.0f; 
mA[12865] = 0.0f; 
mA[12866] = 0.0f; 
mA[12867] = 0.0f; 
mA[12868] = 0.0f; 
mA[12869] = 0.0f; 
mA[12870] = 0.0f; 
mA[12871] = 0.0f; 
mA[12872] = 0.0f; 
mA[12873] = 0.0f; 
mA[12874] = 0.0f; 
mA[12875] = 0.0f; 
mA[12876] = 0.0f; 
mA[12877] = 0.0f; 
mA[12878] = 0.0f; 
mA[12879] = 0.0f; 
mA[12880] = 0.0f; 
mA[12881] = 0.0f; 
mA[12882] = 0.0f; 
mA[12883] = 0.0f; 
mA[12884] = 0.0f; 
mA[12885] = 0.0f; 
mA[12886] = 0.0f; 
mA[12887] = 0.0f; 
mA[12888] = 0.0f; 
mA[12889] = 0.0f; 
mA[12890] = 0.0f; 
mA[12891] = 0.0f; 
mA[12892] = 0.0f; 
mA[12893] = 0.0f; 
mA[12894] = 0.0f; 
mA[12895] = 0.0f; 
mA[12896] = 0.0f; 
mA[12897] = 0.0f; 
mA[12898] = 0.0f; 
mA[12899] = 0.0f; 
mA[12900] = ( (  -1.0f  * v_v30_glyox_fw   )  +(  -1.0f  * v_v28_tca_bw   )  +(  -1.0f  * v_v27_tca_fw_b   )  +(  -1.0f  * v_v27_tca_fw_a   )   ) ; 
mA[12901] = 0.0f; 
mA[12902] = 0.0f; 
mA[12903] = 0.0f; 
mA[12904] =  v_v28_tca_fw ; 
mA[12905] = 0.0f; 
mA[12906] = 0.0f; 
mA[12907] = 0.0f; 
mA[12908] = 0.0f; 
mA[12909] = 0.0f; 
mA[12910] = 0.0f; 
mA[12911] = (  v_v32_amphi_fw  + v_v31_amphi_fw   ) ; 
mA[12912] = 0.0f; 
mA[12913] = 0.0f; 
mA[12914] = 0.0f; 
mA[12915] = 0.0f; 
mA[12916] = 0.0f; 
mA[12917] = 0.0f; 
mA[12918] = 0.0f; 
mA[12919] = 0.0f; 
mA[12920] = 0.0f; 
mA[12921] = 0.0f; 
mA[12922] = 0.0f; 
mA[12923] = 0.0f; 
mA[12924] = 0.0f; 
mA[12925] = 0.0f; 
mA[12926] = 0.0f; 
mA[12927] = 0.0f; 
mA[12928] = 0.0f; 
mA[12929] = 0.0f; 
mA[12930] = 0.0f; 
mA[12931] = 0.0f; 
mA[12932] = 0.0f; 
mA[12933] = 0.0f; 
mA[12934] = 0.0f; 
mA[12935] = 0.0f; 
mA[12936] = 0.0f; 
mA[12937] = 0.0f; 
mA[12938] = 0.0f; 
mA[12939] = 0.0f; 
mA[12940] = 0.0f; 
mA[12941] = 0.0f; 
mA[12942] = 0.0f; 
mA[12943] = 0.0f; 
mA[12944] = 0.0f; 
mA[12945] = 0.0f; 
mA[12946] = 0.0f; 
mA[12947] = 0.0f; 
mA[12948] = 0.0f; 
mA[12949] = 0.0f; 
mA[12950] = 0.0f; 
mA[12951] = 0.0f; 
mA[12952] = 0.0f; 
mA[12953] = 0.0f; 
mA[12954] = 0.0f; 
mA[12955] = 0.0f; 
mA[12956] = 0.0f; 
mA[12957] = 0.0f; 
mA[12958] = 0.0f; 
mA[12959] = 0.0f; 
mA[12960] = 0.0f; 
mA[12961] = 0.0f; 
mA[12962] = 0.0f; 
mA[12963] = 0.0f; 
mA[12964] = 0.0f; 
mA[12965] = 0.0f; 
mA[12966] = 0.0f; 
mA[12967] = 0.0f; 
mA[12968] = 0.0f; 
mA[12969] = 0.0f; 
mA[12970] = 0.0f; 
mA[12971] = 0.0f; 
mA[12972] = 0.0f; 
mA[12973] = 0.0f; 
mA[12974] = 0.0f; 
mA[12975] = 0.0f; 
mA[12976] = (  v_v31_amphi_fw  + v_v32_amphi_fw   ) ; 
mA[12977] = 0.0f; 
mA[12978] = 0.0f; 
mA[12979] = 0.0f; 
mA[12980] = 0.0f; 
mA[12981] = 0.0f; 
mA[12982] = 0.0f; 
mA[12983] = 0.0f; 
mA[12984] = 0.0f; 
mA[12985] = 0.0f; 
mA[12986] = 0.0f; 
mA[12987] = 0.0f; 
mA[12988] = 0.0f; 
mA[12989] = 0.0f; 
mA[12990] = 0.0f; 
mA[12991] = 0.0f; 
mA[12992] = 0.0f; 
mA[12993] = 0.0f; 
mA[12994] = 0.0f; 
mA[12995] = 0.0f; 
mA[12996] = 0.0f; 
mA[12997] = 0.0f; 
mA[12998] = 0.0f; 
mA[12999] = 0.0f; 
mA[13000] = 0.0f; 
mA[13001] = 0.0f; 
mA[13002] = 0.0f; 
mA[13003] = 0.0f; 
mA[13004] = 0.0f; 
mA[13005] =  v_v27_tca_bw_b ; 
mA[13006] = 0.0f; 
mA[13007] = 0.0f; 
mA[13008] =  v_v27_tca_bw_a ; 
mA[13009] = 0.0f; 
mA[13010] = 0.0f; 
mA[13011] = 0.0f; 
mA[13012] = 0.0f; 
mA[13013] = 0.0f; 
mA[13014] = 0.0f; 
mA[13015] = 0.0f; 
mA[13016] = 0.0f; 
mA[13017] = 0.0f; 
mA[13018] = 0.0f; 
mA[13019] = 0.0f; 
mA[13020] = 0.0f; 
mA[13021] = 0.0f; 
mA[13022] = 0.0f; 
mA[13023] = 0.0f; 
mA[13024] = 0.0f; 
mA[13025] = 0.0f; 
mA[13026] = 0.0f; 
mA[13027] = 0.0f; 
mA[13028] = 0.0f; 
mA[13029] = 0.0f; 
mA[13030] = 0.0f; 
mA[13031] = 0.0f; 
mA[13032] = 0.0f; 
mA[13033] = 0.0f; 
mA[13034] = 0.0f; 
mA[13035] = 0.0f; 
mA[13036] = 0.0f; 
mA[13037] = 0.0f; 
mA[13038] = 0.0f; 
mA[13039] = 0.0f; 
mA[13040] = 0.0f; 
mA[13041] = 0.0f; 
mA[13042] = 0.0f; 
mA[13043] = 0.0f; 
mA[13044] = 0.0f; 
mA[13045] = 0.0f; 
mA[13046] = 0.0f; 
mA[13047] = 0.0f; 
mA[13048] = 0.0f; 
mA[13049] = 0.0f; 
mA[13050] = ( (  -1.0f  * v_v30_glyox_fw   )  +(  -1.0f  * v_v27_tca_fw_b   )  +(  -1.0f  * v_v28_tca_bw   )  +(  -1.0f  * v_v27_tca_fw_a   )   ) ; 
mA[13051] = 0.0f; 
mA[13052] = 0.0f; 
mA[13053] = 0.0f; 
mA[13054] =  v_v28_tca_fw ; 
mA[13055] = 0.0f; 
mA[13056] = 0.0f; 
mA[13057] = 0.0f; 
mA[13058] = 0.0f; 
mA[13059] = 0.0f; 
mA[13060] = 0.0f; 
mA[13061] = 0.0f; 
mA[13062] = 0.0f; 
mA[13063] = 0.0f; 
mA[13064] = 0.0f; 
mA[13065] = 0.0f; 
mA[13066] = 0.0f; 
mA[13067] = 0.0f; 
mA[13068] = 0.0f; 
mA[13069] = 0.0f; 
mA[13070] = 0.0f; 
mA[13071] = 0.0f; 
mA[13072] = 0.0f; 
mA[13073] = 0.0f; 
mA[13074] = 0.0f; 
mA[13075] = 0.0f; 
mA[13076] = 0.0f; 
mA[13077] = 0.0f; 
mA[13078] = 0.0f; 
mA[13079] = 0.0f; 
mA[13080] = 0.0f; 
mA[13081] = 0.0f; 
mA[13082] = 0.0f; 
mA[13083] = 0.0f; 
mA[13084] = 0.0f; 
mA[13085] = 0.0f; 
mA[13086] = 0.0f; 
mA[13087] = 0.0f; 
mA[13088] = 0.0f; 
mA[13089] = 0.0f; 
mA[13090] = 0.0f; 
mA[13091] = 0.0f; 
mA[13092] = 0.0f; 
mA[13093] = 0.0f; 
mA[13094] = 0.0f; 
mA[13095] = 0.0f; 
mA[13096] = 0.0f; 
mA[13097] = 0.0f; 
mA[13098] = 0.0f; 
mA[13099] = 0.0f; 
mA[13100] = 0.0f; 
mA[13101] = 0.0f; 
mA[13102] = 0.0f; 
mA[13103] = 0.0f; 
mA[13104] = 0.0f; 
mA[13105] = 0.0f; 
mA[13106] = 0.0f; 
mA[13107] = 0.0f; 
mA[13108] = 0.0f; 
mA[13109] = 0.0f; 
mA[13110] = 0.0f; 
mA[13111] = 0.0f; 
mA[13112] = 0.0f; 
mA[13113] = 0.0f; 
mA[13114] = 0.0f; 
mA[13115] = 0.0f; 
mA[13116] = 0.0f; 
mA[13117] = 0.0f; 
mA[13118] = 0.0f; 
mA[13119] = 0.0f; 
mA[13120] = 0.0f; 
mA[13121] =  v_v40_aa_fw ; 
mA[13122] = 0.0f; 
mA[13123] = 0.0f; 
mA[13124] = 0.0f; 
mA[13125] = 0.0f; 
mA[13126] = 0.0f; 
mA[13127] = 0.0f; 
mA[13128] = 0.0f; 
mA[13129] = 0.0f; 
mA[13130] = 0.0f; 
mA[13131] =  v_v21_tca_fw ; 
mA[13132] = 0.0f; 
mA[13133] = 0.0f; 
mA[13134] = 0.0f; 
mA[13135] = 0.0f; 
mA[13136] = 0.0f; 
mA[13137] = 0.0f; 
mA[13138] = 0.0f; 
mA[13139] = 0.0f; 
mA[13140] = 0.0f; 
mA[13141] = 0.0f; 
mA[13142] = 0.0f; 
mA[13143] = 0.0f; 
mA[13144] = 0.0f; 
mA[13145] = 0.0f; 
mA[13146] = 0.0f; 
mA[13147] = 0.0f; 
mA[13148] = 0.0f; 
mA[13149] = 0.0f; 
mA[13150] = 0.0f; 
mA[13151] = 0.0f; 
mA[13152] = 0.0f; 
mA[13153] = 0.0f; 
mA[13154] = 0.0f; 
mA[13155] = 0.0f; 
mA[13156] = 0.0f; 
mA[13157] = 0.0f; 
mA[13158] = 0.0f; 
mA[13159] = 0.0f; 
mA[13160] = 0.0f; 
mA[13161] = 0.0f; 
mA[13162] = 0.0f; 
mA[13163] = 0.0f; 
mA[13164] = 0.0f; 
mA[13165] = 0.0f; 
mA[13166] = 0.0f; 
mA[13167] = 0.0f; 
mA[13168] = 0.0f; 
mA[13169] = 0.0f; 
mA[13170] = 0.0f; 
mA[13171] = 0.0f; 
mA[13172] = 0.0f; 
mA[13173] = 0.0f; 
mA[13174] = 0.0f; 
mA[13175] = 0.0f; 
mA[13176] = 0.0f; 
mA[13177] = 0.0f; 
mA[13178] = 0.0f; 
mA[13179] = 0.0f; 
mA[13180] = 0.0f; 
mA[13181] = 0.0f; 
mA[13182] = 0.0f; 
mA[13183] = 0.0f; 
mA[13184] = 0.0f; 
mA[13185] = 0.0f; 
mA[13186] = 0.0f; 
mA[13187] = 0.0f; 
mA[13188] = 0.0f; 
mA[13189] = 0.0f; 
mA[13190] = 0.0f; 
mA[13191] = 0.0f; 
mA[13192] = 0.0f; 
mA[13193] = 0.0f; 
mA[13194] = 0.0f; 
mA[13195] = 0.0f; 
mA[13196] =  v_v28_tca_bw ; 
mA[13197] = 0.0f; 
mA[13198] = 0.0f; 
mA[13199] = 0.0f; 
mA[13200] = ( (  -1.0f  * v_v28_tca_fw   )  +(  -1.0f  * v_v33_amphi_fw   )   ) ; 
mA[13201] = 0.0f; 
mA[13202] = 0.0f; 
mA[13203] = 0.0f; 
mA[13204] =  v_v34_amphi_fw ; 
mA[13205] = 0.0f; 
mA[13206] = 0.0f; 
mA[13207] = 0.0f; 
mA[13208] = 0.0f; 
mA[13209] = 0.0f; 
mA[13210] = 0.0f; 
mA[13211] = 0.0f; 
mA[13212] = 0.0f; 
mA[13213] = 0.0f; 
mA[13214] = 0.0f; 
mA[13215] = 0.0f; 
mA[13216] = 0.0f; 
mA[13217] = 0.0f; 
mA[13218] = 0.0f; 
mA[13219] = 0.0f; 
mA[13220] = 0.0f; 
mA[13221] = 0.0f; 
mA[13222] = 0.0f; 
mA[13223] = 0.0f; 
mA[13224] = 0.0f; 
mA[13225] = 0.0f; 
mA[13226] = 0.0f; 
mA[13227] = 0.0f; 
mA[13228] = 0.0f; 
mA[13229] = 0.0f; 
mA[13230] = 0.0f; 
mA[13231] = 0.0f; 
mA[13232] = 0.0f; 
mA[13233] = 0.0f; 
mA[13234] = 0.0f; 
mA[13235] = 0.0f; 
mA[13236] = 0.0f; 
mA[13237] = 0.0f; 
mA[13238] = 0.0f; 
mA[13239] = 0.0f; 
mA[13240] = 0.0f; 
mA[13241] = 0.0f; 
mA[13242] = 0.0f; 
mA[13243] = 0.0f; 
mA[13244] = 0.0f; 
mA[13245] = 0.0f; 
mA[13246] = 0.0f; 
mA[13247] = 0.0f; 
mA[13248] = 0.0f; 
mA[13249] = 0.0f; 
mA[13250] = 0.0f; 
mA[13251] = 0.0f; 
mA[13252] = 0.0f; 
mA[13253] = 0.0f; 
mA[13254] = 0.0f; 
mA[13255] = 0.0f; 
mA[13256] = 0.0f; 
mA[13257] = 0.0f; 
mA[13258] = 0.0f; 
mA[13259] = 0.0f; 
mA[13260] = 0.0f; 
mA[13261] = 0.0f; 
mA[13262] = 0.0f; 
mA[13263] = 0.0f; 
mA[13264] = 0.0f; 
mA[13265] = 0.0f; 
mA[13266] = 0.0f; 
mA[13267] = 0.0f; 
mA[13268] = 0.0f; 
mA[13269] = 0.0f; 
mA[13270] = 0.0f; 
mA[13271] =  v_v40_aa_fw ; 
mA[13272] = 0.0f; 
mA[13273] = 0.0f; 
mA[13274] = 0.0f; 
mA[13275] = 0.0f; 
mA[13276] = 0.0f; 
mA[13277] =  v_v21_tca_fw ; 
mA[13278] = 0.0f; 
mA[13279] = 0.0f; 
mA[13280] = 0.0f; 
mA[13281] = 0.0f; 
mA[13282] = 0.0f; 
mA[13283] = 0.0f; 
mA[13284] = 0.0f; 
mA[13285] = 0.0f; 
mA[13286] = 0.0f; 
mA[13287] = 0.0f; 
mA[13288] = 0.0f; 
mA[13289] = 0.0f; 
mA[13290] = 0.0f; 
mA[13291] = 0.0f; 
mA[13292] = 0.0f; 
mA[13293] = 0.0f; 
mA[13294] = 0.0f; 
mA[13295] = 0.0f; 
mA[13296] = 0.0f; 
mA[13297] = 0.0f; 
mA[13298] = 0.0f; 
mA[13299] = 0.0f; 
mA[13300] = 0.0f; 
mA[13301] = 0.0f; 
mA[13302] = 0.0f; 
mA[13303] = 0.0f; 
mA[13304] = 0.0f; 
mA[13305] = 0.0f; 
mA[13306] = 0.0f; 
mA[13307] = 0.0f; 
mA[13308] = 0.0f; 
mA[13309] = 0.0f; 
mA[13310] = 0.0f; 
mA[13311] = 0.0f; 
mA[13312] = 0.0f; 
mA[13313] = 0.0f; 
mA[13314] = 0.0f; 
mA[13315] = 0.0f; 
mA[13316] = 0.0f; 
mA[13317] = 0.0f; 
mA[13318] = 0.0f; 
mA[13319] = 0.0f; 
mA[13320] = 0.0f; 
mA[13321] = 0.0f; 
mA[13322] = 0.0f; 
mA[13323] = 0.0f; 
mA[13324] = 0.0f; 
mA[13325] = 0.0f; 
mA[13326] = 0.0f; 
mA[13327] = 0.0f; 
mA[13328] = 0.0f; 
mA[13329] = 0.0f; 
mA[13330] = 0.0f; 
mA[13331] = 0.0f; 
mA[13332] = 0.0f; 
mA[13333] = 0.0f; 
mA[13334] = 0.0f; 
mA[13335] = 0.0f; 
mA[13336] = 0.0f; 
mA[13337] = 0.0f; 
mA[13338] = 0.0f; 
mA[13339] = 0.0f; 
mA[13340] = 0.0f; 
mA[13341] = 0.0f; 
mA[13342] = 0.0f; 
mA[13343] = 0.0f; 
mA[13344] = 0.0f; 
mA[13345] = 0.0f; 
mA[13346] =  v_v28_tca_bw ; 
mA[13347] = 0.0f; 
mA[13348] = 0.0f; 
mA[13349] = 0.0f; 
mA[13350] = ( (  -1.0f  * v_v28_tca_fw   )  +(  -1.0f  * v_v33_amphi_fw   )   ) ; 
mA[13351] = 0.0f; 
mA[13352] = 0.0f; 
mA[13353] = 0.0f; 
mA[13354] =  v_v34_amphi_fw ; 
mA[13355] = 0.0f; 
mA[13356] = 0.0f; 
mA[13357] = 0.0f; 
mA[13358] = 0.0f; 
mA[13359] = 0.0f; 
mA[13360] = 0.0f; 
mA[13361] = 0.0f; 
mA[13362] = 0.0f; 
mA[13363] = 0.0f; 
mA[13364] = 0.0f; 
mA[13365] = 0.0f; 
mA[13366] = 0.0f; 
mA[13367] = 0.0f; 
mA[13368] = 0.0f; 
mA[13369] = 0.0f; 
mA[13370] = 0.0f; 
mA[13371] = 0.0f; 
mA[13372] = 0.0f; 
mA[13373] = 0.0f; 
mA[13374] = 0.0f; 
mA[13375] = 0.0f; 
mA[13376] = 0.0f; 
mA[13377] = 0.0f; 
mA[13378] = 0.0f; 
mA[13379] = 0.0f; 
mA[13380] = 0.0f; 
mA[13381] = 0.0f; 
mA[13382] = 0.0f; 
mA[13383] = 0.0f; 
mA[13384] = 0.0f; 
mA[13385] = 0.0f; 
mA[13386] = 0.0f; 
mA[13387] = 0.0f; 
mA[13388] = 0.0f; 
mA[13389] = 0.0f; 
mA[13390] = 0.0f; 
mA[13391] = 0.0f; 
mA[13392] = 0.0f; 
mA[13393] = 0.0f; 
mA[13394] = 0.0f; 
mA[13395] = 0.0f; 
mA[13396] = 0.0f; 
mA[13397] = 0.0f; 
mA[13398] = 0.0f; 
mA[13399] = 0.0f; 
mA[13400] = 0.0f; 
mA[13401] = 0.0f; 
mA[13402] = 0.0f; 
mA[13403] = 0.0f; 
mA[13404] = 0.0f; 
mA[13405] = 0.0f; 
mA[13406] = 0.0f; 
mA[13407] = 0.0f; 
mA[13408] = 0.0f; 
mA[13409] = 0.0f; 
mA[13410] = 0.0f; 
mA[13411] = 0.0f; 
mA[13412] = 0.0f; 
mA[13413] = 0.0f; 
mA[13414] = 0.0f; 
mA[13415] = 0.0f; 
mA[13416] = 0.0f; 
mA[13417] = 0.0f; 
mA[13418] = 0.0f; 
mA[13419] = 0.0f; 
mA[13420] = 0.0f; 
mA[13421] =  v_v40_aa_fw ; 
mA[13422] = 0.0f; 
mA[13423] = 0.0f; 
mA[13424] = 0.0f; 
mA[13425] =  v_v21_tca_fw ; 
mA[13426] = 0.0f; 
mA[13427] = 0.0f; 
mA[13428] = 0.0f; 
mA[13429] = 0.0f; 
mA[13430] = 0.0f; 
mA[13431] = 0.0f; 
mA[13432] = 0.0f; 
mA[13433] = 0.0f; 
mA[13434] = 0.0f; 
mA[13435] = 0.0f; 
mA[13436] = 0.0f; 
mA[13437] = 0.0f; 
mA[13438] = 0.0f; 
mA[13439] = 0.0f; 
mA[13440] = 0.0f; 
mA[13441] = 0.0f; 
mA[13442] = 0.0f; 
mA[13443] = 0.0f; 
mA[13444] = 0.0f; 
mA[13445] = 0.0f; 
mA[13446] = 0.0f; 
mA[13447] = 0.0f; 
mA[13448] = 0.0f; 
mA[13449] = 0.0f; 
mA[13450] = 0.0f; 
mA[13451] = 0.0f; 
mA[13452] = 0.0f; 
mA[13453] = 0.0f; 
mA[13454] = 0.0f; 
mA[13455] = 0.0f; 
mA[13456] = 0.0f; 
mA[13457] = 0.0f; 
mA[13458] = 0.0f; 
mA[13459] = 0.0f; 
mA[13460] = 0.0f; 
mA[13461] = 0.0f; 
mA[13462] = 0.0f; 
mA[13463] = 0.0f; 
mA[13464] = 0.0f; 
mA[13465] = 0.0f; 
mA[13466] = 0.0f; 
mA[13467] = 0.0f; 
mA[13468] = 0.0f; 
mA[13469] = 0.0f; 
mA[13470] = 0.0f; 
mA[13471] = 0.0f; 
mA[13472] = 0.0f; 
mA[13473] = 0.0f; 
mA[13474] = 0.0f; 
mA[13475] = 0.0f; 
mA[13476] = 0.0f; 
mA[13477] = 0.0f; 
mA[13478] = 0.0f; 
mA[13479] = 0.0f; 
mA[13480] = 0.0f; 
mA[13481] = 0.0f; 
mA[13482] = 0.0f; 
mA[13483] = 0.0f; 
mA[13484] = 0.0f; 
mA[13485] = 0.0f; 
mA[13486] = 0.0f; 
mA[13487] = 0.0f; 
mA[13488] = 0.0f; 
mA[13489] = 0.0f; 
mA[13490] = 0.0f; 
mA[13491] = 0.0f; 
mA[13492] = 0.0f; 
mA[13493] = 0.0f; 
mA[13494] = 0.0f; 
mA[13495] = 0.0f; 
mA[13496] =  v_v28_tca_bw ; 
mA[13497] = 0.0f; 
mA[13498] = 0.0f; 
mA[13499] = 0.0f; 
mA[13500] = ( (  -1.0f  * v_v33_amphi_fw   )  +(  -1.0f  * v_v28_tca_fw   )   ) ; 
mA[13501] = 0.0f; 
mA[13502] = 0.0f; 
mA[13503] = 0.0f; 
mA[13504] =  v_v34_amphi_fw ; 
mA[13505] = 0.0f; 
mA[13506] = 0.0f; 
mA[13507] = 0.0f; 
mA[13508] = 0.0f; 
mA[13509] = 0.0f; 
mA[13510] = 0.0f; 
mA[13511] = 0.0f; 
mA[13512] = 0.0f; 
mA[13513] = 0.0f; 
mA[13514] = 0.0f; 
mA[13515] = 0.0f; 
mA[13516] = 0.0f; 
mA[13517] = 0.0f; 
mA[13518] = 0.0f; 
mA[13519] = 0.0f; 
mA[13520] = 0.0f; 
mA[13521] = 0.0f; 
mA[13522] = 0.0f; 
mA[13523] = 0.0f; 
mA[13524] = 0.0f; 
mA[13525] = 0.0f; 
mA[13526] = 0.0f; 
mA[13527] = 0.0f; 
mA[13528] = 0.0f; 
mA[13529] = 0.0f; 
mA[13530] = 0.0f; 
mA[13531] = 0.0f; 
mA[13532] = 0.0f; 
mA[13533] = 0.0f; 
mA[13534] = 0.0f; 
mA[13535] = 0.0f; 
mA[13536] = 0.0f; 
mA[13537] = 0.0f; 
mA[13538] = 0.0f; 
mA[13539] = 0.0f; 
mA[13540] = 0.0f; 
mA[13541] = 0.0f; 
mA[13542] = 0.0f; 
mA[13543] = 0.0f; 
mA[13544] = 0.0f; 
mA[13545] = 0.0f; 
mA[13546] = 0.0f; 
mA[13547] = 0.0f; 
mA[13548] = 0.0f; 
mA[13549] = 0.0f; 
mA[13550] = 0.0f; 
mA[13551] = 0.0f; 
mA[13552] = 0.0f; 
mA[13553] = 0.0f; 
mA[13554] = 0.0f; 
mA[13555] = 0.0f; 
mA[13556] = 0.0f; 
mA[13557] = 0.0f; 
mA[13558] = 0.0f; 
mA[13559] = 0.0f; 
mA[13560] = 0.0f; 
mA[13561] = 0.0f; 
mA[13562] = 0.0f; 
mA[13563] = 0.0f; 
mA[13564] = 0.0f; 
mA[13565] = 0.0f; 
mA[13566] = 0.0f; 
mA[13567] = 0.0f; 
mA[13568] = 0.0f; 
mA[13569] = 0.0f; 
mA[13570] = 0.0f; 
mA[13571] =  v_v40_aa_fw ; 
mA[13572] =  v_v34_amphi_fw ; 
mA[13573] =  v_v21_tca_fw ; 
mA[13574] = 0.0f; 
mA[13575] = 0.0f; 
mA[13576] = 0.0f; 
mA[13577] = 0.0f; 
mA[13578] = 0.0f; 
mA[13579] = 0.0f; 
mA[13580] = 0.0f; 
mA[13581] = 0.0f; 
mA[13582] = 0.0f; 
mA[13583] = 0.0f; 
mA[13584] = 0.0f; 
mA[13585] = 0.0f; 
mA[13586] = 0.0f; 
mA[13587] = 0.0f; 
mA[13588] = 0.0f; 
mA[13589] = 0.0f; 
mA[13590] = 0.0f; 
mA[13591] = 0.0f; 
mA[13592] = 0.0f; 
mA[13593] = 0.0f; 
mA[13594] = 0.0f; 
mA[13595] = 0.0f; 
mA[13596] = 0.0f; 
mA[13597] = 0.0f; 
mA[13598] = 0.0f; 
mA[13599] = 0.0f; 
mA[13600] = 0.0f; 
mA[13601] = 0.0f; 
mA[13602] = 0.0f; 
mA[13603] = 0.0f; 
mA[13604] = 0.0f; 
mA[13605] = 0.0f; 
mA[13606] = 0.0f; 
mA[13607] = 0.0f; 
mA[13608] = 0.0f; 
mA[13609] = 0.0f; 
mA[13610] = 0.0f; 
mA[13611] = 0.0f; 
mA[13612] = 0.0f; 
mA[13613] = 0.0f; 
mA[13614] = 0.0f; 
mA[13615] = 0.0f; 
mA[13616] = 0.0f; 
mA[13617] = 0.0f; 
mA[13618] = 0.0f; 
mA[13619] = 0.0f; 
mA[13620] = 0.0f; 
mA[13621] = 0.0f; 
mA[13622] = 0.0f; 
mA[13623] = 0.0f; 
mA[13624] = 0.0f; 
mA[13625] = 0.0f; 
mA[13626] = 0.0f; 
mA[13627] = 0.0f; 
mA[13628] = 0.0f; 
mA[13629] = 0.0f; 
mA[13630] = 0.0f; 
mA[13631] = 0.0f; 
mA[13632] = 0.0f; 
mA[13633] = 0.0f; 
mA[13634] = 0.0f; 
mA[13635] = 0.0f; 
mA[13636] = 0.0f; 
mA[13637] = 0.0f; 
mA[13638] = 0.0f; 
mA[13639] = 0.0f; 
mA[13640] = 0.0f; 
mA[13641] = 0.0f; 
mA[13642] = 0.0f; 
mA[13643] = 0.0f; 
mA[13644] = 0.0f; 
mA[13645] = 0.0f; 
mA[13646] =  v_v28_tca_bw ; 
mA[13647] = 0.0f; 
mA[13648] = 0.0f; 
mA[13649] = 0.0f; 
mA[13650] = ( (  -1.0f  * v_v33_amphi_fw   )  +(  -1.0f  * v_v28_tca_fw   )   ) ; 
mA[13651] = 0.0f; 
mA[13652] = 0.0f; 
mA[13653] = 0.0f; 
mA[13654] = 0.0f; 
mA[13655] = 0.0f; 
mA[13656] = 0.0f; 
mA[13657] = 0.0f; 
mA[13658] = 0.0f; 
mA[13659] = 0.0f; 
mA[13660] = 0.0f; 
mA[13661] = 0.0f; 
mA[13662] = 0.0f; 
mA[13663] = 0.0f; 
mA[13664] = 0.0f; 
mA[13665] = 0.0f; 
mA[13666] = 0.0f; 
mA[13667] = 0.0f; 
mA[13668] = 0.0f; 
mA[13669] = 0.0f; 
mA[13670] = 0.0f; 
mA[13671] = 0.0f; 
mA[13672] = 0.0f; 
mA[13673] = 0.0f; 
mA[13674] = 0.0f; 
mA[13675] = 0.0f; 
mA[13676] = 0.0f; 
mA[13677] = 0.0f; 
mA[13678] = 0.0f; 
mA[13679] = 0.0f; 
mA[13680] = 0.0f; 
mA[13681] = 0.0f; 
mA[13682] = 0.0f; 
mA[13683] = 0.0f; 
mA[13684] = 0.0f; 
mA[13685] = 0.0f; 
mA[13686] = 0.0f; 
mA[13687] = 0.0f; 
mA[13688] = 0.0f; 
mA[13689] = 0.0f; 
mA[13690] = 0.0f; 
mA[13691] = 0.0f; 
mA[13692] = 0.0f; 
mA[13693] = 0.0f; 
mA[13694] = 0.0f; 
mA[13695] = 0.0f; 
mA[13696] = 0.0f; 
mA[13697] = 0.0f; 
mA[13698] = 0.0f; 
mA[13699] = 0.0f; 
mA[13700] = 0.0f; 
mA[13701] = 0.0f; 
mA[13702] = 0.0f; 
mA[13703] = 0.0f; 
mA[13704] = 0.0f; 
mA[13705] = 0.0f; 
mA[13706] = 0.0f; 
mA[13707] = 0.0f; 
mA[13708] = 0.0f; 
mA[13709] = 0.0f; 
mA[13710] = 0.0f; 
mA[13711] = 0.0f; 
mA[13712] = 0.0f; 
mA[13713] = 0.0f; 
mA[13714] = 0.0f; 
mA[13715] = 0.0f; 
mA[13716] = 0.0f; 
mA[13717] = 0.0f; 
mA[13718] = 0.0f; 
mA[13719] = 0.0f; 
mA[13720] = 0.0f; 
mA[13721] = (  v_v57_aa_fw  + v_v56_aa_fw  + v_v55_aa_fw   ) ; 
mA[13722] = 0.0f; 
mA[13723] = 0.0f; 
mA[13724] = 0.0f; 
mA[13725] = 0.0f; 
mA[13726] = 0.0f; 
mA[13727] = 0.0f; 
mA[13728] = 0.0f; 
mA[13729] = 0.0f; 
mA[13730] = 0.0f; 
mA[13731] = 0.0f; 
mA[13732] = 0.0f; 
mA[13733] = 0.0f; 
mA[13734] = 0.0f; 
mA[13735] = 0.0f; 
mA[13736] = 0.0f; 
mA[13737] = 0.0f; 
mA[13738] = 0.0f; 
mA[13739] = 0.0f; 
mA[13740] = 0.0f; 
mA[13741] = 0.0f; 
mA[13742] = 0.0f; 
mA[13743] = 0.0f; 
mA[13744] = 0.0f; 
mA[13745] = 0.0f; 
mA[13746] = 0.0f; 
mA[13747] = 0.0f; 
mA[13748] = 0.0f; 
mA[13749] = 0.0f; 
mA[13750] = 0.0f; 
mA[13751] = 0.0f; 
mA[13752] = 0.0f; 
mA[13753] = 0.0f; 
mA[13754] = 0.0f; 
mA[13755] = 0.0f; 
mA[13756] = 0.0f; 
mA[13757] = 0.0f; 
mA[13758] = 0.0f; 
mA[13759] = 0.0f; 
mA[13760] = 0.0f; 
mA[13761] = 0.0f; 
mA[13762] = 0.0f; 
mA[13763] = 0.0f; 
mA[13764] = 0.0f; 
mA[13765] = 0.0f; 
mA[13766] = 0.0f; 
mA[13767] = 0.0f; 
mA[13768] = 0.0f; 
mA[13769] = 0.0f; 
mA[13770] = 0.0f; 
mA[13771] = 0.0f; 
mA[13772] = 0.0f; 
mA[13773] = 0.0f; 
mA[13774] = 0.0f; 
mA[13775] = 0.0f; 
mA[13776] = 0.0f; 
mA[13777] = 0.0f; 
mA[13778] = 0.0f; 
mA[13779] = 0.0f; 
mA[13780] = 0.0f; 
mA[13781] = 0.0f; 
mA[13782] = 0.0f; 
mA[13783] = 0.0f; 
mA[13784] = 0.0f; 
mA[13785] = 0.0f; 
mA[13786] = 0.0f; 
mA[13787] = 0.0f; 
mA[13788] = 0.0f; 
mA[13789] = 0.0f; 
mA[13790] = 0.0f; 
mA[13791] = 0.0f; 
mA[13792] = 0.0f; 
mA[13793] = 0.0f; 
mA[13794] = 0.0f; 
mA[13795] = 0.0f; 
mA[13796] =  v_v33_amphi_fw ; 
mA[13797] = 0.0f; 
mA[13798] = 0.0f; 
mA[13799] = 0.0f; 
mA[13800] = ( (  -1.0f  * v_v34_amphi_fw   )  +(  -1.0f  * v_v07_glyc_fw   )   ) ; 
mA[13801] = 0.0f; 
mA[13802] = 0.0f; 
mA[13803] = (  v_v01_SX_Gluc_In_b  + v_v57_aa_fw  + v_v08_glyc_fw   ) ; 
mA[13804] = 0.0f; 
mA[13805] = 0.0f; 
mA[13806] = 0.0f; 
mA[13807] = 0.0f; 
mA[13808] = 0.0f; 
mA[13809] = 0.0f; 
mA[13810] = 0.0f; 
mA[13811] = 0.0f; 
mA[13812] = 0.0f; 
mA[13813] = 0.0f; 
mA[13814] = 0.0f; 
mA[13815] = 0.0f; 
mA[13816] = 0.0f; 
mA[13817] = 0.0f; 
mA[13818] = 0.0f; 
mA[13819] = 0.0f; 
mA[13820] = 0.0f; 
mA[13821] = 0.0f; 
mA[13822] = 0.0f; 
mA[13823] = 0.0f; 
mA[13824] = 0.0f; 
mA[13825] = 0.0f; 
mA[13826] = 0.0f; 
mA[13827] = 0.0f; 
mA[13828] = 0.0f; 
mA[13829] = 0.0f; 
mA[13830] = 0.0f; 
mA[13831] = 0.0f; 
mA[13832] = 0.0f; 
mA[13833] = 0.0f; 
mA[13834] = 0.0f; 
mA[13835] = 0.0f; 
mA[13836] = 0.0f; 
mA[13837] = 0.0f; 
mA[13838] = 0.0f; 
mA[13839] = 0.0f; 
mA[13840] = 0.0f; 
mA[13841] = 0.0f; 
mA[13842] = 0.0f; 
mA[13843] =  v_v07_glyc_bw ; 
mA[13844] = 0.0f; 
mA[13845] = 0.0f; 
mA[13846] = 0.0f; 
mA[13847] = 0.0f; 
mA[13848] = 0.0f; 
mA[13849] = 0.0f; 
mA[13850] = 0.0f; 
mA[13851] = 0.0f; 
mA[13852] = 0.0f; 
mA[13853] = 0.0f; 
mA[13854] = 0.0f; 
mA[13855] = 0.0f; 
mA[13856] = 0.0f; 
mA[13857] = 0.0f; 
mA[13858] = 0.0f; 
mA[13859] = 0.0f; 
mA[13860] = 0.0f; 
mA[13861] = 0.0f; 
mA[13862] = 0.0f; 
mA[13863] = 0.0f; 
mA[13864] = 0.0f; 
mA[13865] = 0.0f; 
mA[13866] = 0.0f; 
mA[13867] = 0.0f; 
mA[13868] = 0.0f; 
mA[13869] = 0.0f; 
mA[13870] = 0.0f; 
mA[13871] = 0.0f; 
mA[13872] = 0.0f; 
mA[13873] = 0.0f; 
mA[13874] = 0.0f; 
mA[13875] = 0.0f; 
mA[13876] = 0.0f; 
mA[13877] = 0.0f; 
mA[13878] = 0.0f; 
mA[13879] = 0.0f; 
mA[13880] = 0.0f; 
mA[13881] = 0.0f; 
mA[13882] = 0.0f; 
mA[13883] = 0.0f; 
mA[13884] = 0.0f; 
mA[13885] = 0.0f; 
mA[13886] = 0.0f; 
mA[13887] = 0.0f; 
mA[13888] = 0.0f; 
mA[13889] = 0.0f; 
mA[13890] = 0.0f; 
mA[13891] = 0.0f; 
mA[13892] = 0.0f; 
mA[13893] = 0.0f; 
mA[13894] = 0.0f; 
mA[13895] = 0.0f; 
mA[13896] = 0.0f; 
mA[13897] = 0.0f; 
mA[13898] = 0.0f; 
mA[13899] = 0.0f; 
mA[13900] = 0.0f; 
mA[13901] = 0.0f; 
mA[13902] = 0.0f; 
mA[13903] = 0.0f; 
mA[13904] = 0.0f; 
mA[13905] = 0.0f; 
mA[13906] = 0.0f; 
mA[13907] = 0.0f; 
mA[13908] = 0.0f; 
mA[13909] = 0.0f; 
mA[13910] = 0.0f; 
mA[13911] = 0.0f; 
mA[13912] = 0.0f; 
mA[13913] = 0.0f; 
mA[13914] = 0.0f; 
mA[13915] = 0.0f; 
mA[13916] = 0.0f; 
mA[13917] = 0.0f; 
mA[13918] = 0.0f; 
mA[13919] = 0.0f; 
mA[13920] = 0.0f; 
mA[13921] = 0.0f; 
mA[13922] = 0.0f; 
mA[13923] = 0.0f; 
mA[13924] = 0.0f; 
mA[13925] = 0.0f; 
mA[13926] = 0.0f; 
mA[13927] = 0.0f; 
mA[13928] = 0.0f; 
mA[13929] = 0.0f; 
mA[13930] = 0.0f; 
mA[13931] = 0.0f; 
mA[13932] = 0.0f; 
mA[13933] = 0.0f; 
mA[13934] = 0.0f; 
mA[13935] = 0.0f; 
mA[13936] = 0.0f; 
mA[13937] = 0.0f; 
mA[13938] = 0.0f; 
mA[13939] = 0.0f; 
mA[13940] = 0.0f; 
mA[13941] = 0.0f; 
mA[13942] = 0.0f; 
mA[13943] = 0.0f; 
mA[13944] = 0.0f; 
mA[13945] = 0.0f; 
mA[13946] =  v_v33_amphi_fw ; 
mA[13947] = 0.0f; 
mA[13948] = 0.0f; 
mA[13949] = 0.0f; 
mA[13950] = ( (  -1.0f  * v_v34_amphi_fw   )  +(  -1.0f  * v_v07_glyc_fw   )   ) ; 
mA[13951] = 0.0f; 
mA[13952] = 0.0f; 
mA[13953] = (  v_v08_glyc_fw  + v_v57_aa_fw  + v_v01_SX_Gluc_In_b   ) ; 
mA[13954] = 0.0f; 
mA[13955] = 0.0f; 
mA[13956] = 0.0f; 
mA[13957] = 0.0f; 
mA[13958] = 0.0f; 
mA[13959] = 0.0f; 
mA[13960] = 0.0f; 
mA[13961] = 0.0f; 
mA[13962] = 0.0f; 
mA[13963] = 0.0f; 
mA[13964] = 0.0f; 
mA[13965] = 0.0f; 
mA[13966] = 0.0f; 
mA[13967] = 0.0f; 
mA[13968] = 0.0f; 
mA[13969] = 0.0f; 
mA[13970] = 0.0f; 
mA[13971] = 0.0f; 
mA[13972] = 0.0f; 
mA[13973] = 0.0f; 
mA[13974] = 0.0f; 
mA[13975] = 0.0f; 
mA[13976] = 0.0f; 
mA[13977] = 0.0f; 
mA[13978] = 0.0f; 
mA[13979] = 0.0f; 
mA[13980] = 0.0f; 
mA[13981] = 0.0f; 
mA[13982] = 0.0f; 
mA[13983] = 0.0f; 
mA[13984] = 0.0f; 
mA[13985] = 0.0f; 
mA[13986] = 0.0f; 
mA[13987] = 0.0f; 
mA[13988] = 0.0f; 
mA[13989] = 0.0f; 
mA[13990] = 0.0f; 
mA[13991] = 0.0f; 
mA[13992] = 0.0f; 
mA[13993] =  v_v07_glyc_bw ; 
mA[13994] = 0.0f; 
mA[13995] = 0.0f; 
mA[13996] = 0.0f; 
mA[13997] = 0.0f; 
mA[13998] = 0.0f; 
mA[13999] = 0.0f; 
mA[14000] = 0.0f; 
mA[14001] = 0.0f; 
mA[14002] = 0.0f; 
mA[14003] = 0.0f; 
mA[14004] = 0.0f; 
mA[14005] = 0.0f; 
mA[14006] = 0.0f; 
mA[14007] = 0.0f; 
mA[14008] = 0.0f; 
mA[14009] = 0.0f; 
mA[14010] = 0.0f; 
mA[14011] = 0.0f; 
mA[14012] = 0.0f; 
mA[14013] = 0.0f; 
mA[14014] = 0.0f; 
mA[14015] = 0.0f; 
mA[14016] = 0.0f; 
mA[14017] = 0.0f; 
mA[14018] = 0.0f; 
mA[14019] = 0.0f; 
mA[14020] = 0.0f; 
mA[14021] = 0.0f; 
mA[14022] = 0.0f; 
mA[14023] = 0.0f; 
mA[14024] = 0.0f; 
mA[14025] = 0.0f; 
mA[14026] = 0.0f; 
mA[14027] = 0.0f; 
mA[14028] = 0.0f; 
mA[14029] = 0.0f; 
mA[14030] = 0.0f; 
mA[14031] = 0.0f; 
mA[14032] = 0.0f; 
mA[14033] = 0.0f; 
mA[14034] = 0.0f; 
mA[14035] = 0.0f; 
mA[14036] = 0.0f; 
mA[14037] = 0.0f; 
mA[14038] = 0.0f; 
mA[14039] = 0.0f; 
mA[14040] = 0.0f; 
mA[14041] = 0.0f; 
mA[14042] = 0.0f; 
mA[14043] = 0.0f; 
mA[14044] = 0.0f; 
mA[14045] = 0.0f; 
mA[14046] = 0.0f; 
mA[14047] = 0.0f; 
mA[14048] = 0.0f; 
mA[14049] = 0.0f; 
mA[14050] = 0.0f; 
mA[14051] = 0.0f; 
mA[14052] = 0.0f; 
mA[14053] = 0.0f; 
mA[14054] = 0.0f; 
mA[14055] = 0.0f; 
mA[14056] = 0.0f; 
mA[14057] = 0.0f; 
mA[14058] = 0.0f; 
mA[14059] = 0.0f; 
mA[14060] = 0.0f; 
mA[14061] = 0.0f; 
mA[14062] = 0.0f; 
mA[14063] = 0.0f; 
mA[14064] = 0.0f; 
mA[14065] = 0.0f; 
mA[14066] = 0.0f; 
mA[14067] = 0.0f; 
mA[14068] = 0.0f; 
mA[14069] = 0.0f; 
mA[14070] = 0.0f; 
mA[14071] = 0.0f; 
mA[14072] = 0.0f; 
mA[14073] = 0.0f; 
mA[14074] = 0.0f; 
mA[14075] = 0.0f; 
mA[14076] = 0.0f; 
mA[14077] = 0.0f; 
mA[14078] = 0.0f; 
mA[14079] = 0.0f; 
mA[14080] = 0.0f; 
mA[14081] = 0.0f; 
mA[14082] = 0.0f; 
mA[14083] = 0.0f; 
mA[14084] = 0.0f; 
mA[14085] = 0.0f; 
mA[14086] = 0.0f; 
mA[14087] = 0.0f; 
mA[14088] = 0.0f; 
mA[14089] = 0.0f; 
mA[14090] = 0.0f; 
mA[14091] = 0.0f; 
mA[14092] = 0.0f; 
mA[14093] = 0.0f; 
mA[14094] = 0.0f; 
mA[14095] = 0.0f; 
mA[14096] =  v_v33_amphi_fw ; 
mA[14097] = 0.0f; 
mA[14098] = 0.0f; 
mA[14099] = 0.0f; 
mA[14100] = ( (  -1.0f  * v_v34_amphi_fw   )  +(  -1.0f  * v_v07_glyc_fw   )   ) ; 
mA[14101] = 0.0f; 
mA[14102] = 0.0f; 
mA[14103] = (  v_v01_SX_Gluc_In_b  + v_v08_glyc_fw  + v_v57_aa_fw   ) ; 
mA[14104] = 0.0f; 
mA[14105] = 0.0f; 
mA[14106] = 0.0f; 
mA[14107] = 0.0f; 
mA[14108] = 0.0f; 
mA[14109] = 0.0f; 
mA[14110] = 0.0f; 
mA[14111] = 0.0f; 
mA[14112] = 0.0f; 
mA[14113] = 0.0f; 
mA[14114] = 0.0f; 
mA[14115] = 0.0f; 
mA[14116] = 0.0f; 
mA[14117] = 0.0f; 
mA[14118] = 0.0f; 
mA[14119] = 0.0f; 
mA[14120] = 0.0f; 
mA[14121] = 0.0f; 
mA[14122] = 0.0f; 
mA[14123] = 0.0f; 
mA[14124] = 0.0f; 
mA[14125] = 0.0f; 
mA[14126] = 0.0f; 
mA[14127] = 0.0f; 
mA[14128] = 0.0f; 
mA[14129] = 0.0f; 
mA[14130] = 0.0f; 
mA[14131] = 0.0f; 
mA[14132] = 0.0f; 
mA[14133] = 0.0f; 
mA[14134] = 0.0f; 
mA[14135] = 0.0f; 
mA[14136] = 0.0f; 
mA[14137] = 0.0f; 
mA[14138] = 0.0f; 
mA[14139] = 0.0f; 
mA[14140] = 0.0f; 
mA[14141] = 0.0f; 
mA[14142] = 0.0f; 
mA[14143] =  v_v07_glyc_bw ; 
mA[14144] = 0.0f; 
mA[14145] = 0.0f; 
mA[14146] = 0.0f; 
mA[14147] = 0.0f; 
mA[14148] = 0.0f; 
mA[14149] = 0.0f; 
mA[14150] = 0.0f; 
mA[14151] = 0.0f; 
mA[14152] = 0.0f; 
mA[14153] = 0.0f; 
mA[14154] = 0.0f; 
mA[14155] = 0.0f; 
mA[14156] = 0.0f; 
mA[14157] = 0.0f; 
mA[14158] = 0.0f; 
mA[14159] = 0.0f; 
mA[14160] = 0.0f; 
mA[14161] = 0.0f; 
mA[14162] = 0.0f; 
mA[14163] = 0.0f; 
mA[14164] = 0.0f; 
mA[14165] = 0.0f; 
mA[14166] = 0.0f; 
mA[14167] = 0.0f; 
mA[14168] = (  v_v20_tca_fw  + v_v53_aa_fw  + v_v54_aa_fw  + v_v53_aa_fw  + v_v52_aa_fw   ) ; 
mA[14169] = 0.0f; 
mA[14170] = 0.0f; 
mA[14171] = 0.0f; 
mA[14172] = 0.0f; 
mA[14173] = 0.0f; 
mA[14174] = 0.0f; 
mA[14175] = 0.0f; 
mA[14176] = 0.0f; 
mA[14177] = 0.0f; 
mA[14178] = 0.0f; 
mA[14179] = 0.0f; 
mA[14180] = 0.0f; 
mA[14181] = 0.0f; 
mA[14182] = 0.0f; 
mA[14183] = 0.0f; 
mA[14184] = 0.0f; 
mA[14185] = 0.0f; 
mA[14186] = 0.0f; 
mA[14187] = 0.0f; 
mA[14188] = 0.0f; 
mA[14189] = 0.0f; 
mA[14190] = 0.0f; 
mA[14191] = 0.0f; 
mA[14192] = 0.0f; 
mA[14193] = 0.0f; 
mA[14194] = 0.0f; 
mA[14195] = 0.0f; 
mA[14196] = 0.0f; 
mA[14197] = 0.0f; 
mA[14198] = 0.0f; 
mA[14199] = 0.0f; 
mA[14200] = 0.0f; 
mA[14201] = 0.0f; 
mA[14202] = 0.0f; 
mA[14203] = 0.0f; 
mA[14204] = 0.0f; 
mA[14205] = 0.0f; 
mA[14206] = 0.0f; 
mA[14207] = 0.0f; 
mA[14208] = 0.0f; 
mA[14209] = 0.0f; 
mA[14210] = 0.0f; 
mA[14211] = 0.0f; 
mA[14212] = 0.0f; 
mA[14213] = 0.0f; 
mA[14214] = 0.0f; 
mA[14215] = 0.0f; 
mA[14216] = 0.0f; 
mA[14217] = 0.0f; 
mA[14218] = 0.0f; 
mA[14219] = 0.0f; 
mA[14220] = 0.0f; 
mA[14221] = 0.0f; 
mA[14222] = 0.0f; 
mA[14223] = 0.0f; 
mA[14224] = 0.0f; 
mA[14225] = 0.0f; 
mA[14226] = 0.0f; 
mA[14227] = 0.0f; 
mA[14228] = 0.0f; 
mA[14229] = 0.0f; 
mA[14230] = 0.0f; 
mA[14231] = 0.0f; 
mA[14232] = 0.0f; 
mA[14233] = 0.0f; 
mA[14234] = 0.0f; 
mA[14235] = 0.0f; 
mA[14236] = (  v_v48_aa_fw_d  + v_v48_aa_fw_c   ) ; 
mA[14237] = (  v_v48_aa_fw_b  + v_v48_aa_fw_a   ) ; 
mA[14238] = 0.0f; 
mA[14239] = 0.0f; 
mA[14240] = 0.0f; 
mA[14241] = 0.0f; 
mA[14242] = 0.0f; 
mA[14243] = 0.0f; 
mA[14244] = 0.0f; 
mA[14245] = 0.0f; 
mA[14246] = 0.0f; 
mA[14247] = 0.0f; 
mA[14248] = 0.0f; 
mA[14249] = 0.0f; 
mA[14250] = ( (  -1.0f  * v_v31_amphi_fw   )  +(  -1.0f  * v_v01_SX_Gluc_In_b   )  +(  -1.0f  * v_v51_aa_fw_a   )  +(  -1.0f  * v_v57_aa_fw   )  +(  -1.0f  * v_v19_ed_fw   )  +(  -1.0f  * v_v08_glyc_fw   )  +(  -1.0f  * v_v51_aa_fw_b   )  +(  -1.0f  * v_v32_amphi_fw   )   ) ; 
mA[14251] = 0.0f; 
mA[14252] = 0.0f; 
mA[14253] = 0.0f; 
mA[14254] = 0.0f; 
mA[14255] = 0.0f; 
mA[14256] = 0.0f; 
mA[14257] = 0.0f; 
mA[14258] = 0.0f; 
mA[14259] = 0.0f; 
mA[14260] = 0.0f; 
mA[14261] = 0.0f; 
mA[14262] = 0.0f; 
mA[14263] = 0.0f; 
mA[14264] = 0.0f; 
mA[14265] = 0.0f; 
mA[14266] = 0.0f; 
mA[14267] = 0.0f; 
mA[14268] = 0.0f; 
mA[14269] = 0.0f; 
mA[14270] = 0.0f; 
mA[14271] = 0.0f; 
mA[14272] = 0.0f; 
mA[14273] = 0.0f; 
mA[14274] = 0.0f; 
mA[14275] = 0.0f; 
mA[14276] = 0.0f; 
mA[14277] = 0.0f; 
mA[14278] = 0.0f; 
mA[14279] = 0.0f; 
mA[14280] = 0.0f; 
mA[14281] = 0.0f; 
mA[14282] = 0.0f; 
mA[14283] = 0.0f; 
mA[14284] = 0.0f; 
mA[14285] = 0.0f; 
mA[14286] = 0.0f; 
mA[14287] = 0.0f; 
mA[14288] = 0.0f; 
mA[14289] = 0.0f; 
mA[14290] = 0.0f; 
mA[14291] = 0.0f; 
mA[14292] = 0.0f; 
mA[14293] = 0.0f; 
mA[14294] = 0.0f; 
mA[14295] = 0.0f; 
mA[14296] = 0.0f; 
mA[14297] = 0.0f; 
mA[14298] = 0.0f; 
mA[14299] = 0.0f; 
mA[14300] = 0.0f; 
mA[14301] = 0.0f; 
mA[14302] = 0.0f; 
mA[14303] = 0.0f; 
mA[14304] = 0.0f; 
mA[14305] = 0.0f; 
mA[14306] = 0.0f; 
mA[14307] = 0.0f; 
mA[14308] = 0.0f; 
mA[14309] = 0.0f; 
mA[14310] = 0.0f; 
mA[14311] =  v_v20_tca_fw ; 
mA[14312] = 0.0f; 
mA[14313] = 0.0f; 
mA[14314] = 0.0f; 
mA[14315] = 0.0f; 
mA[14316] = 0.0f; 
mA[14317] = 0.0f; 
mA[14318] = 0.0f; 
mA[14319] = 0.0f; 
mA[14320] = 0.0f; 
mA[14321] = 0.0f; 
mA[14322] = 0.0f; 
mA[14323] = 0.0f; 
mA[14324] = 0.0f; 
mA[14325] = 0.0f; 
mA[14326] = 0.0f; 
mA[14327] = 0.0f; 
mA[14328] = 0.0f; 
mA[14329] = 0.0f; 
mA[14330] = 0.0f; 
mA[14331] = 0.0f; 
mA[14332] = 0.0f; 
mA[14333] = 0.0f; 
mA[14334] = 0.0f; 
mA[14335] = 0.0f; 
mA[14336] = 0.0f; 
mA[14337] = 0.0f; 
mA[14338] = 0.0f; 
mA[14339] = 0.0f; 
mA[14340] = 0.0f; 
mA[14341] = 0.0f; 
mA[14342] = 0.0f; 
mA[14343] = 0.0f; 
mA[14344] = 0.0f; 
mA[14345] = 0.0f; 
mA[14346] = 0.0f; 
mA[14347] = 0.0f; 
mA[14348] = 0.0f; 
mA[14349] = 0.0f; 
mA[14350] = 0.0f; 
mA[14351] = 0.0f; 
mA[14352] = 0.0f; 
mA[14353] = 0.0f; 
mA[14354] = 0.0f; 
mA[14355] = 0.0f; 
mA[14356] = 0.0f; 
mA[14357] = 0.0f; 
mA[14358] = 0.0f; 
mA[14359] = 0.0f; 
mA[14360] = 0.0f; 
mA[14361] = 0.0f; 
mA[14362] = 0.0f; 
mA[14363] = 0.0f; 
mA[14364] = 0.0f; 
mA[14365] = 0.0f; 
mA[14366] = 0.0f; 
mA[14367] = 0.0f; 
mA[14368] = 0.0f; 
mA[14369] = 0.0f; 
mA[14370] = 0.0f; 
mA[14371] = 0.0f; 
mA[14372] = 0.0f; 
mA[14373] = 0.0f; 
mA[14374] = 0.0f; 
mA[14375] = 0.0f; 
mA[14376] = 0.0f; 
mA[14377] = 0.0f; 
mA[14378] = 0.0f; 
mA[14379] = 0.0f; 
mA[14380] = 0.0f; 
mA[14381] = 0.0f; 
mA[14382] = 0.0f; 
mA[14383] = 0.0f; 
mA[14384] = 0.0f; 
mA[14385] = 0.0f; 
mA[14386] = 0.0f; 
mA[14387] = 0.0f; 
mA[14388] = 0.0f; 
mA[14389] = 0.0f; 
mA[14390] = 0.0f; 
mA[14391] = 0.0f; 
mA[14392] = 0.0f; 
mA[14393] = 0.0f; 
mA[14394] = 0.0f; 
mA[14395] = 0.0f; 
mA[14396] = 0.0f; 
mA[14397] = 0.0f; 
mA[14398] = 0.0f; 
mA[14399] = 0.0f; 
mA[14400] = ( (  -1.0f  * v_v08_glyc_fw   )  +(  -1.0f  * v_v19_ed_fw   )  +(  -1.0f  * v_v31_amphi_fw   )  +(  -1.0f  * v_v51_aa_fw_b   )  +(  -1.0f  * v_v57_aa_fw   )  +(  -1.0f  * v_v51_aa_fw_a   )  +(  -1.0f  * v_v32_amphi_fw   )  +(  -1.0f  * v_v01_SX_Gluc_In_b   )   ) ; 
mA[14401] = 0.0f; 
mA[14402] = 0.0f; 
mA[14403] = 0.0f; 
mA[14404] = 0.0f; 
mA[14405] = 0.0f; 
mA[14406] = 0.0f; 
mA[14407] = 0.0f; 
mA[14408] = 0.0f; 
mA[14409] = 0.0f; 
mA[14410] = 0.0f; 
mA[14411] = 0.0f; 
mA[14412] = 0.0f; 
mA[14413] = 0.0f; 
mA[14414] = 0.0f; 
mA[14415] = 0.0f; 
mA[14416] = 0.0f; 
mA[14417] = 0.0f; 
mA[14418] = 0.0f; 
mA[14419] = 0.0f; 
mA[14420] = 0.0f; 
mA[14421] = 0.0f; 
mA[14422] = 0.0f; 
mA[14423] = 0.0f; 
mA[14424] = 0.0f; 
mA[14425] = 0.0f; 
mA[14426] = 0.0f; 
mA[14427] = 0.0f; 
mA[14428] = 0.0f; 
mA[14429] = 0.0f; 
mA[14430] = 0.0f; 
mA[14431] = 0.0f; 
mA[14432] = 0.0f; 
mA[14433] = 0.0f; 
mA[14434] = 0.0f; 
mA[14435] = 0.0f; 
mA[14436] = 0.0f; 
mA[14437] = 0.0f; 
mA[14438] = 0.0f; 
mA[14439] = 0.0f; 
mA[14440] = 0.0f; 
mA[14441] = 0.0f; 
mA[14442] = 0.0f; 
mA[14443] = 0.0f; 
mA[14444] = 0.0f; 
mA[14445] = 0.0f; 
mA[14446] = 0.0f; 
mA[14447] = 0.0f; 
mA[14448] = 0.0f; 
mA[14449] = 0.0f; 
mA[14450] = 0.0f; 
mA[14451] = 0.0f; 
mA[14452] = 0.0f; 
mA[14453] = 0.0f; 
mA[14454] = 0.0f; 
mA[14455] = 0.0f; 
mA[14456] = 0.0f; 
mA[14457] = 0.0f; 
mA[14458] = 0.0f; 
mA[14459] = 0.0f; 
mA[14460] = 0.0f; 
mA[14461] =  v_v20_tca_fw ; 
mA[14462] = 0.0f; 
mA[14463] = 0.0f; 
mA[14464] = 0.0f; 
mA[14465] = 0.0f; 
mA[14466] = 0.0f; 
mA[14467] = 0.0f; 
mA[14468] = 0.0f; 
mA[14469] = 0.0f; 
mA[14470] = 0.0f; 
mA[14471] = 0.0f; 
mA[14472] = 0.0f; 
mA[14473] = 0.0f; 
mA[14474] = 0.0f; 
mA[14475] = 0.0f; 
mA[14476] = 0.0f; 
mA[14477] = 0.0f; 
mA[14478] = 0.0f; 
mA[14479] = 0.0f; 
mA[14480] = 0.0f; 
mA[14481] = 0.0f; 
mA[14482] = 0.0f; 
mA[14483] = 0.0f; 
mA[14484] = 0.0f; 
mA[14485] = 0.0f; 
mA[14486] = 0.0f; 
mA[14487] = 0.0f; 
mA[14488] = 0.0f; 
mA[14489] = 0.0f; 
mA[14490] = 0.0f; 
mA[14491] = 0.0f; 
mA[14492] = 0.0f; 
mA[14493] = 0.0f; 
mA[14494] = 0.0f; 
mA[14495] = 0.0f; 
mA[14496] = 0.0f; 
mA[14497] = 0.0f; 
mA[14498] = 0.0f; 
mA[14499] = 0.0f; 
mA[14500] = 0.0f; 
mA[14501] = 0.0f; 
mA[14502] = 0.0f; 
mA[14503] = 0.0f; 
mA[14504] = 0.0f; 
mA[14505] = 0.0f; 
mA[14506] = 0.0f; 
mA[14507] = 0.0f; 
mA[14508] = 0.0f; 
mA[14509] = 0.0f; 
mA[14510] = 0.0f; 
mA[14511] = 0.0f; 
mA[14512] = 0.0f; 
mA[14513] = 0.0f; 
mA[14514] = 0.0f; 
mA[14515] = 0.0f; 
mA[14516] = 0.0f; 
mA[14517] = 0.0f; 
mA[14518] = 0.0f; 
mA[14519] = 0.0f; 
mA[14520] = 0.0f; 
mA[14521] = 0.0f; 
mA[14522] = 0.0f; 
mA[14523] = 0.0f; 
mA[14524] = 0.0f; 
mA[14525] = 0.0f; 
mA[14526] = 0.0f; 
mA[14527] = 0.0f; 
mA[14528] = 0.0f; 
mA[14529] = 0.0f; 
mA[14530] = 0.0f; 
mA[14531] = 0.0f; 
mA[14532] = 0.0f; 
mA[14533] = 0.0f; 
mA[14534] = 0.0f; 
mA[14535] = 0.0f; 
mA[14536] = 0.0f; 
mA[14537] = 0.0f; 
mA[14538] = 0.0f; 
mA[14539] = 0.0f; 
mA[14540] = 0.0f; 
mA[14541] = 0.0f; 
mA[14542] = 0.0f; 
mA[14543] = 0.0f; 
mA[14544] = 0.0f; 
mA[14545] = 0.0f; 
mA[14546] = 0.0f; 
mA[14547] = 0.0f; 
mA[14548] = 0.0f; 
mA[14549] = 0.0f; 
mA[14550] = ( (  -1.0f  * v_v01_SX_Gluc_In_b   )  +(  -1.0f  * v_v32_amphi_fw   )  +(  -1.0f  * v_v08_glyc_fw   )  +(  -1.0f  * v_v51_aa_fw_a   )  +(  -1.0f  * v_v19_ed_fw   )  +(  -1.0f  * v_v51_aa_fw_b   )  +(  -1.0f  * v_v31_amphi_fw   )  +(  -1.0f  * v_v57_aa_fw   )   ) ; 
mA[14551] = 0.0f; 
mA[14552] = 0.0f; 
mA[14553] = 0.0f; 
mA[14554] = 0.0f; 
mA[14555] = 0.0f; 
mA[14556] = 0.0f; 
mA[14557] = 0.0f; 
mA[14558] = 0.0f; 
mA[14559] = 0.0f; 
mA[14560] = 0.0f; 
mA[14561] = 0.0f; 
mA[14562] = 0.0f; 
mA[14563] = 0.0f; 
mA[14564] = 0.0f; 
mA[14565] = 0.0f; 
mA[14566] = 0.0f; 
mA[14567] = 0.0f; 
mA[14568] = 0.0f; 
mA[14569] = 0.0f; 
mA[14570] = 0.0f; 
mA[14571] = 0.0f; 
mA[14572] = 0.0f; 
mA[14573] = 0.0f; 
mA[14574] = 0.0f; 
mA[14575] = 0.0f; 
mA[14576] = 0.0f; 
mA[14577] = 0.0f; 
mA[14578] = 0.0f; 
mA[14579] = 0.0f; 
mA[14580] = 0.0f; 
mA[14581] = 0.0f; 
mA[14582] = 0.0f; 
mA[14583] = 0.0f; 
mA[14584] = 0.0f; 
mA[14585] = 0.0f; 
mA[14586] = 0.0f; 
mA[14587] = 0.0f; 
mA[14588] = 0.0f; 
mA[14589] = 0.0f; 
mA[14590] = 0.0f; 
mA[14591] = 0.0f; 
mA[14592] = 0.0f; 
mA[14593] = 0.0f; 
mA[14594] = 0.0f; 
mA[14595] = 0.0f; 
mA[14596] = 0.0f; 
mA[14597] = 0.0f; 
mA[14598] = 0.0f; 
mA[14599] = 0.0f; 
mA[14600] = 0.0f; 
mA[14601] = 0.0f; 
mA[14602] = 0.0f; 
mA[14603] = 0.0f; 
mA[14604] = 0.0f; 
mA[14605] = 0.0f; 
mA[14606] = 0.0f; 
mA[14607] = 0.0f; 
mA[14608] = 0.0f; 
mA[14609] = 0.0f; 
mA[14610] = 0.0f; 
mA[14611] = 0.0f; 
mA[14612] = 0.0f; 
mA[14613] = 0.0f; 
mA[14614] = 0.0f; 
mA[14615] = 0.0f; 
mA[14616] = 0.0f; 
mA[14617] = 0.0f; 
mA[14618] = 0.0f; 
mA[14619] = 0.0f; 
mA[14620] = 0.0f; 
mA[14621] = 0.0f; 
mA[14622] = 0.0f; 
mA[14623] = 0.0f; 
mA[14624] = 0.0f; 
mA[14625] = 0.0f; 
mA[14626] = 0.0f; 
mA[14627] = 0.0f; 
mA[14628] = 0.0f; 
mA[14629] = 0.0f; 
mA[14630] = 0.0f; 
mA[14631] = 0.0f; 
mA[14632] = 0.0f; 
mA[14633] = 0.0f; 
mA[14634] = 0.0f; 
mA[14635] = 0.0f; 
mA[14636] = 0.0f; 
mA[14637] = 0.0f; 
mA[14638] = 0.0f; 
mA[14639] = 0.0f; 
mA[14640] = 0.0f; 
mA[14641] = 0.0f; 
mA[14642] = 0.0f; 
mA[14643] = 0.0f; 
mA[14644] = 0.0f; 
mA[14645] = 0.0f; 
mA[14646] = 0.0f; 
mA[14647] = 0.0f; 
mA[14648] = 0.0f; 
mA[14649] = 0.0f; 
mA[14650] = 0.0f; 
mA[14651] = 0.0f; 
mA[14652] = 0.0f; 
mA[14653] = 0.0f; 
mA[14654] = 0.0f; 
mA[14655] = 0.0f; 
mA[14656] = 0.0f; 
mA[14657] = 0.0f; 
mA[14658] = 0.0f; 
mA[14659] = 0.0f; 
mA[14660] = 0.0f; 
mA[14661] = 0.0f; 
mA[14662] = 0.0f; 
mA[14663] = 0.0f; 
mA[14664] = 0.0f; 
mA[14665] = 0.0f; 
mA[14666] = 0.0f; 
mA[14667] = 0.0f; 
mA[14668] = 0.0f; 
mA[14669] = 0.0f; 
mA[14670] = 0.0f; 
mA[14671] = 0.0f; 
mA[14672] = 0.0f; 
mA[14673] = 0.0f; 
mA[14674] = 0.0f; 
mA[14675] = 0.0f; 
mA[14676] = 0.0f; 
mA[14677] = 0.0f; 
mA[14678] = 0.0f; 
mA[14679] = 0.0f; 
mA[14680] = 0.0f; 
mA[14681] = 0.0f; 
mA[14682] = 0.0f; 
mA[14683] = 0.0f; 
mA[14684] = 0.0f; 
mA[14685] = 0.0f; 
mA[14686] = 0.0f; 
mA[14687] = 0.0f; 
mA[14688] = 0.0f; 
mA[14689] = 0.0f; 
mA[14690] = 0.0f; 
mA[14691] = 0.0f; 
mA[14692] = 0.0f; 
mA[14693] = 0.0f; 
mA[14694] = 0.0f; 
mA[14695] = 0.0f; 
mA[14696] = 0.0f; 
mA[14697] = 0.0f; 
mA[14698] = 0.0f; 
mA[14699] = 0.0f; 
mA[14700] = ( (  -1.0f  * v_v15_ppp_fw   )  +(  -1.0f  * v_v12_ppp_fw   )   ) ; 
mA[14701] = 0.0f; 
mA[14702] = 0.0f; 
mA[14703] = 0.0f; 
mA[14704] = 0.0f; 
mA[14705] =  v_v12_ppp_bw ; 
mA[14706] = 0.0f; 
mA[14707] = 0.0f; 
mA[14708] = 0.0f; 
mA[14709] = 0.0f; 
mA[14710] = 0.0f; 
mA[14711] = 0.0f; 
mA[14712] =  v_v15_ppp_bw ; 
mA[14713] = 0.0f; 
mA[14714] = 0.0f; 
mA[14715] = 0.0f; 
mA[14716] = 0.0f; 
mA[14717] = 0.0f; 
mA[14718] = 0.0f; 
mA[14719] = 0.0f; 
mA[14720] = 0.0f; 
mA[14721] = 0.0f; 
mA[14722] = 0.0f; 
mA[14723] = 0.0f; 
mA[14724] = 0.0f; 
mA[14725] = 0.0f; 
mA[14726] = 0.0f; 
mA[14727] = 0.0f; 
mA[14728] = 0.0f; 
mA[14729] = 0.0f; 
mA[14730] = 0.0f; 
mA[14731] = 0.0f; 
mA[14732] = 0.0f; 
mA[14733] = 0.0f; 
mA[14734] = 0.0f; 
mA[14735] = 0.0f; 
mA[14736] = 0.0f; 
mA[14737] = 0.0f; 
mA[14738] = 0.0f; 
mA[14739] = 0.0f; 
mA[14740] = 0.0f; 
mA[14741] = 0.0f; 
mA[14742] = 0.0f; 
mA[14743] = 0.0f; 
mA[14744] = 0.0f; 
mA[14745] = 0.0f; 
mA[14746] = 0.0f; 
mA[14747] = 0.0f; 
mA[14748] = 0.0f; 
mA[14749] = 0.0f; 
mA[14750] = 0.0f; 
mA[14751] = 0.0f; 
mA[14752] = 0.0f; 
mA[14753] = 0.0f; 
mA[14754] = 0.0f; 
mA[14755] = 0.0f; 
mA[14756] = 0.0f; 
mA[14757] = 0.0f; 
mA[14758] = 0.0f; 
mA[14759] = 0.0f; 
mA[14760] = 0.0f; 
mA[14761] = 0.0f; 
mA[14762] = 0.0f; 
mA[14763] = 0.0f; 
mA[14764] = 0.0f; 
mA[14765] = 0.0f; 
mA[14766] = 0.0f; 
mA[14767] = 0.0f; 
mA[14768] = 0.0f; 
mA[14769] = 0.0f; 
mA[14770] = 0.0f; 
mA[14771] = 0.0f; 
mA[14772] = 0.0f; 
mA[14773] = 0.0f; 
mA[14774] = 0.0f; 
mA[14775] = 0.0f; 
mA[14776] = 0.0f; 
mA[14777] = 0.0f; 
mA[14778] = 0.0f; 
mA[14779] = 0.0f; 
mA[14780] = 0.0f; 
mA[14781] = 0.0f; 
mA[14782] = 0.0f; 
mA[14783] = 0.0f; 
mA[14784] = 0.0f; 
mA[14785] = 0.0f; 
mA[14786] = 0.0f; 
mA[14787] = 0.0f; 
mA[14788] = 0.0f; 
mA[14789] = 0.0f; 
mA[14790] = 0.0f; 
mA[14791] = 0.0f; 
mA[14792] = 0.0f; 
mA[14793] = 0.0f; 
mA[14794] = 0.0f; 
mA[14795] = 0.0f; 
mA[14796] = 0.0f; 
mA[14797] = 0.0f; 
mA[14798] = 0.0f; 
mA[14799] = 0.0f; 
mA[14800] = 0.0f; 
mA[14801] = 0.0f; 
mA[14802] = 0.0f; 
mA[14803] = 0.0f; 
mA[14804] = 0.0f; 
mA[14805] = 0.0f; 
mA[14806] = 0.0f; 
mA[14807] = 0.0f; 
mA[14808] = 0.0f; 
mA[14809] = 0.0f; 
mA[14810] = 0.0f; 
mA[14811] = 0.0f; 
mA[14812] = 0.0f; 
mA[14813] = 0.0f; 
mA[14814] = 0.0f; 
mA[14815] = 0.0f; 
mA[14816] = 0.0f; 
mA[14817] = 0.0f; 
mA[14818] = 0.0f; 
mA[14819] = 0.0f; 
mA[14820] = 0.0f; 
mA[14821] = 0.0f; 
mA[14822] = 0.0f; 
mA[14823] = 0.0f; 
mA[14824] = 0.0f; 
mA[14825] = 0.0f; 
mA[14826] = 0.0f; 
mA[14827] = 0.0f; 
mA[14828] = 0.0f; 
mA[14829] = 0.0f; 
mA[14830] = 0.0f; 
mA[14831] = 0.0f; 
mA[14832] = 0.0f; 
mA[14833] = 0.0f; 
mA[14834] = 0.0f; 
mA[14835] = 0.0f; 
mA[14836] = 0.0f; 
mA[14837] = 0.0f; 
mA[14838] = 0.0f; 
mA[14839] = 0.0f; 
mA[14840] = 0.0f; 
mA[14841] = 0.0f; 
mA[14842] = 0.0f; 
mA[14843] = 0.0f; 
mA[14844] = 0.0f; 
mA[14845] = 0.0f; 
mA[14846] = 0.0f; 
mA[14847] = 0.0f; 
mA[14848] = 0.0f; 
mA[14849] = 0.0f; 
mA[14850] = ( (  -1.0f  * v_v15_ppp_fw   )  +(  -1.0f  * v_v12_ppp_fw   )   ) ; 
mA[14851] = 0.0f; 
mA[14852] = 0.0f; 
mA[14853] = 0.0f; 
mA[14854] = 0.0f; 
mA[14855] =  v_v12_ppp_bw ; 
mA[14856] = 0.0f; 
mA[14857] = 0.0f; 
mA[14858] = 0.0f; 
mA[14859] = 0.0f; 
mA[14860] = 0.0f; 
mA[14861] = 0.0f; 
mA[14862] =  v_v15_ppp_bw ; 
mA[14863] = 0.0f; 
mA[14864] = 0.0f; 
mA[14865] = 0.0f; 
mA[14866] = 0.0f; 
mA[14867] = 0.0f; 
mA[14868] = 0.0f; 
mA[14869] = 0.0f; 
mA[14870] = 0.0f; 
mA[14871] = 0.0f; 
mA[14872] = 0.0f; 
mA[14873] = 0.0f; 
mA[14874] = 0.0f; 
mA[14875] = 0.0f; 
mA[14876] = 0.0f; 
mA[14877] = 0.0f; 
mA[14878] = 0.0f; 
mA[14879] = 0.0f; 
mA[14880] = 0.0f; 
mA[14881] = 0.0f; 
mA[14882] = 0.0f; 
mA[14883] = 0.0f; 
mA[14884] = 0.0f; 
mA[14885] = 0.0f; 
mA[14886] = 0.0f; 
mA[14887] = 0.0f; 
mA[14888] = 0.0f; 
mA[14889] = 0.0f; 
mA[14890] = 0.0f; 
mA[14891] = 0.0f; 
mA[14892] = 0.0f; 
mA[14893] = 0.0f; 
mA[14894] = 0.0f; 
mA[14895] = 0.0f; 
mA[14896] = 0.0f; 
mA[14897] = 0.0f; 
mA[14898] = 0.0f; 
mA[14899] = 0.0f; 
mA[14900] = 0.0f; 
mA[14901] = 0.0f; 
mA[14902] = 0.0f; 
mA[14903] = 0.0f; 
mA[14904] = 0.0f; 
mA[14905] = 0.0f; 
mA[14906] = 0.0f; 
mA[14907] = 0.0f; 
mA[14908] = 0.0f; 
mA[14909] = 0.0f; 
mA[14910] = 0.0f; 
mA[14911] = 0.0f; 
mA[14912] = 0.0f; 
mA[14913] = 0.0f; 
mA[14914] = 0.0f; 
mA[14915] = 0.0f; 
mA[14916] = 0.0f; 
mA[14917] = 0.0f; 
mA[14918] = 0.0f; 
mA[14919] = 0.0f; 
mA[14920] = 0.0f; 
mA[14921] = 0.0f; 
mA[14922] = 0.0f; 
mA[14923] = 0.0f; 
mA[14924] = 0.0f; 
mA[14925] = 0.0f; 
mA[14926] = 0.0f; 
mA[14927] = 0.0f; 
mA[14928] = 0.0f; 
mA[14929] = 0.0f; 
mA[14930] = 0.0f; 
mA[14931] = 0.0f; 
mA[14932] = 0.0f; 
mA[14933] = 0.0f; 
mA[14934] = 0.0f; 
mA[14935] = 0.0f; 
mA[14936] = 0.0f; 
mA[14937] = 0.0f; 
mA[14938] = 0.0f; 
mA[14939] = 0.0f; 
mA[14940] = 0.0f; 
mA[14941] = 0.0f; 
mA[14942] = 0.0f; 
mA[14943] = 0.0f; 
mA[14944] = 0.0f; 
mA[14945] = 0.0f; 
mA[14946] = 0.0f; 
mA[14947] = 0.0f; 
mA[14948] = 0.0f; 
mA[14949] = 0.0f; 
mA[14950] = 0.0f; 
mA[14951] = 0.0f; 
mA[14952] =  v_v57_aa_fw ; 
mA[14953] = 0.0f; 
mA[14954] = 0.0f; 
mA[14955] = 0.0f; 
mA[14956] = 0.0f; 
mA[14957] = 0.0f; 
mA[14958] = 0.0f; 
mA[14959] = 0.0f; 
mA[14960] = 0.0f; 
mA[14961] = 0.0f; 
mA[14962] = 0.0f; 
mA[14963] = 0.0f; 
mA[14964] = 0.0f; 
mA[14965] = 0.0f; 
mA[14966] = 0.0f; 
mA[14967] = 0.0f; 
mA[14968] = 0.0f; 
mA[14969] = 0.0f; 
mA[14970] = 0.0f; 
mA[14971] = 0.0f; 
mA[14972] = 0.0f; 
mA[14973] = 0.0f; 
mA[14974] = 0.0f; 
mA[14975] = 0.0f; 
mA[14976] = 0.0f; 
mA[14977] = 0.0f; 
mA[14978] = 0.0f; 
mA[14979] = 0.0f; 
mA[14980] = 0.0f; 
mA[14981] = 0.0f; 
mA[14982] = 0.0f; 
mA[14983] = 0.0f; 
mA[14984] = 0.0f; 
mA[14985] = 0.0f; 
mA[14986] = 0.0f; 
mA[14987] = 0.0f; 
mA[14988] = 0.0f; 
mA[14989] = 0.0f; 
mA[14990] = 0.0f; 
mA[14991] = 0.0f; 
mA[14992] = 0.0f; 
mA[14993] = 0.0f; 
mA[14994] = 0.0f; 
mA[14995] = 0.0f; 
mA[14996] = 0.0f; 
mA[14997] = 0.0f; 
mA[14998] = 0.0f; 
mA[14999] = 0.0f; 
mA[15000] = ( (  -1.0f  * v_v12_ppp_fw   )  +(  -1.0f  * v_v15_ppp_fw   )   ) ; 
mA[15001] = 0.0f; 
mA[15002] = 0.0f; 
mA[15003] = 0.0f; 
mA[15004] = 0.0f; 
mA[15005] =  v_v12_ppp_bw ; 
mA[15006] = 0.0f; 
mA[15007] = 0.0f; 
mA[15008] = 0.0f; 
mA[15009] = 0.0f; 
mA[15010] = 0.0f; 
mA[15011] = 0.0f; 
mA[15012] =  v_v15_ppp_bw ; 
mA[15013] = 0.0f; 
mA[15014] = 0.0f; 
mA[15015] = 0.0f; 
mA[15016] = 0.0f; 
mA[15017] = 0.0f; 
mA[15018] = 0.0f; 
mA[15019] = 0.0f; 
mA[15020] = 0.0f; 
mA[15021] = 0.0f; 
mA[15022] = 0.0f; 
mA[15023] = 0.0f; 
mA[15024] = 0.0f; 
mA[15025] = 0.0f; 
mA[15026] = 0.0f; 
mA[15027] = 0.0f; 
mA[15028] = 0.0f; 
mA[15029] = 0.0f; 
mA[15030] = 0.0f; 
mA[15031] = 0.0f; 
mA[15032] = 0.0f; 
mA[15033] = 0.0f; 
mA[15034] = 0.0f; 
mA[15035] = 0.0f; 
mA[15036] = 0.0f; 
mA[15037] = 0.0f; 
mA[15038] = 0.0f; 
mA[15039] = 0.0f; 
mA[15040] = 0.0f; 
mA[15041] = 0.0f; 
mA[15042] = 0.0f; 
mA[15043] = 0.0f; 
mA[15044] = 0.0f; 
mA[15045] = 0.0f; 
mA[15046] = 0.0f; 
mA[15047] = 0.0f; 
mA[15048] = 0.0f; 
mA[15049] = 0.0f; 
mA[15050] = 0.0f; 
mA[15051] = 0.0f; 
mA[15052] = 0.0f; 
mA[15053] = 0.0f; 
mA[15054] = 0.0f; 
mA[15055] = 0.0f; 
mA[15056] = 0.0f; 
mA[15057] = 0.0f; 
mA[15058] = 0.0f; 
mA[15059] = 0.0f; 
mA[15060] = 0.0f; 
mA[15061] = 0.0f; 
mA[15062] = 0.0f; 
mA[15063] = 0.0f; 
mA[15064] = 0.0f; 
mA[15065] = 0.0f; 
mA[15066] = 0.0f; 
mA[15067] = 0.0f; 
mA[15068] = 0.0f; 
mA[15069] = 0.0f; 
mA[15070] = 0.0f; 
mA[15071] = 0.0f; 
mA[15072] = 0.0f; 
mA[15073] = 0.0f; 
mA[15074] = 0.0f; 
mA[15075] = 0.0f; 
mA[15076] = 0.0f; 
mA[15077] = 0.0f; 
mA[15078] = 0.0f; 
mA[15079] = 0.0f; 
mA[15080] = 0.0f; 
mA[15081] = 0.0f; 
mA[15082] = 0.0f; 
mA[15083] = 0.0f; 
mA[15084] = 0.0f; 
mA[15085] = 0.0f; 
mA[15086] = 0.0f; 
mA[15087] = 0.0f; 
mA[15088] = 0.0f; 
mA[15089] = 0.0f; 
mA[15090] = 0.0f; 
mA[15091] = 0.0f; 
mA[15092] = 0.0f; 
mA[15093] = 0.0f; 
mA[15094] = 0.0f; 
mA[15095] = 0.0f; 
mA[15096] = 0.0f; 
mA[15097] = 0.0f; 
mA[15098] = 0.0f; 
mA[15099] = 0.0f; 
mA[15100] = 0.0f; 
mA[15101] = 0.0f; 
mA[15102] =  v_v57_aa_fw ; 
mA[15103] = 0.0f; 
mA[15104] = 0.0f; 
mA[15105] = 0.0f; 
mA[15106] = 0.0f; 
mA[15107] = 0.0f; 
mA[15108] = 0.0f; 
mA[15109] = 0.0f; 
mA[15110] = 0.0f; 
mA[15111] = 0.0f; 
mA[15112] = 0.0f; 
mA[15113] = 0.0f; 
mA[15114] = 0.0f; 
mA[15115] = 0.0f; 
mA[15116] = 0.0f; 
mA[15117] = 0.0f; 
mA[15118] = 0.0f; 
mA[15119] = 0.0f; 
mA[15120] = 0.0f; 
mA[15121] = 0.0f; 
mA[15122] = 0.0f; 
mA[15123] = 0.0f; 
mA[15124] = 0.0f; 
mA[15125] = 0.0f; 
mA[15126] = 0.0f; 
mA[15127] = 0.0f; 
mA[15128] = 0.0f; 
mA[15129] = 0.0f; 
mA[15130] = 0.0f; 
mA[15131] = 0.0f; 
mA[15132] = 0.0f; 
mA[15133] = 0.0f; 
mA[15134] = 0.0f; 
mA[15135] = 0.0f; 
mA[15136] = 0.0f; 
mA[15137] = 0.0f; 
mA[15138] = 0.0f; 
mA[15139] = 0.0f; 
mA[15140] = 0.0f; 
mA[15141] = 0.0f; 
mA[15142] = 0.0f; 
mA[15143] = 0.0f; 
mA[15144] = 0.0f; 
mA[15145] = 0.0f; 
mA[15146] = 0.0f; 
mA[15147] = 0.0f; 
mA[15148] = 0.0f; 
mA[15149] = 0.0f; 
mA[15150] = ( (  -1.0f  * v_v12_ppp_fw   )  +(  -1.0f  * v_v15_ppp_fw   )   ) ; 
mA[15151] = 0.0f; 
mA[15152] = 0.0f; 
mA[15153] = 0.0f; 
mA[15154] = 0.0f; 
mA[15155] =  v_v12_ppp_bw ; 
mA[15156] = 0.0f; 
mA[15157] = 0.0f; 
mA[15158] = 0.0f; 
mA[15159] = 0.0f; 
mA[15160] = 0.0f; 
mA[15161] = 0.0f; 
mA[15162] =  v_v15_ppp_bw ; 
mA[15163] = 0.0f; 
mA[15164] = 0.0f; 
mA[15165] = 0.0f; 
mA[15166] = 0.0f; 
mA[15167] = 0.0f; 
mA[15168] = 0.0f; 
mA[15169] = 0.0f; 
mA[15170] = 0.0f; 
mA[15171] = 0.0f; 
mA[15172] = 0.0f; 
mA[15173] = 0.0f; 
mA[15174] = 0.0f; 
mA[15175] = 0.0f; 
mA[15176] = 0.0f; 
mA[15177] = 0.0f; 
mA[15178] = 0.0f; 
mA[15179] = 0.0f; 
mA[15180] = 0.0f; 
mA[15181] = 0.0f; 
mA[15182] = 0.0f; 
mA[15183] = 0.0f; 
mA[15184] = 0.0f; 
mA[15185] = 0.0f; 
mA[15186] = 0.0f; 
mA[15187] = 0.0f; 
mA[15188] = 0.0f; 
mA[15189] = 0.0f; 
mA[15190] = 0.0f; 
mA[15191] = 0.0f; 
mA[15192] = 0.0f; 
mA[15193] = 0.0f; 
mA[15194] = 0.0f; 
mA[15195] = 0.0f; 
mA[15196] = 0.0f; 
mA[15197] = 0.0f; 
mA[15198] = 0.0f; 
mA[15199] = 0.0f; 
mA[15200] = 0.0f; 
mA[15201] = 0.0f; 
mA[15202] = 0.0f; 
mA[15203] = 0.0f; 
mA[15204] = 0.0f; 
mA[15205] = 0.0f; 
mA[15206] = 0.0f; 
mA[15207] = 0.0f; 
mA[15208] = 0.0f; 
mA[15209] = 0.0f; 
mA[15210] = 0.0f; 
mA[15211] = 0.0f; 
mA[15212] = 0.0f; 
mA[15213] = 0.0f; 
mA[15214] = 0.0f; 
mA[15215] = 0.0f; 
mA[15216] = 0.0f; 
mA[15217] = 0.0f; 
mA[15218] = 0.0f; 
mA[15219] = 0.0f; 
mA[15220] = 0.0f; 
mA[15221] = 0.0f; 
mA[15222] = 0.0f; 
mA[15223] = 0.0f; 
mA[15224] = 0.0f; 
mA[15225] = 0.0f; 
mA[15226] = 0.0f; 
mA[15227] = 0.0f; 
mA[15228] = 0.0f; 
mA[15229] = 0.0f; 
mA[15230] = 0.0f; 
mA[15231] = 0.0f; 
mA[15232] = 0.0f; 
mA[15233] = 0.0f; 
mA[15234] = 0.0f; 
mA[15235] = 0.0f; 
mA[15236] = 0.0f; 
mA[15237] = 0.0f; 
mA[15238] = 0.0f; 
mA[15239] = 0.0f; 
mA[15240] = 0.0f; 
mA[15241] = 0.0f; 
mA[15242] = 0.0f; 
mA[15243] = 0.0f; 
mA[15244] = 0.0f; 
mA[15245] = 0.0f; 
mA[15246] = 0.0f; 
mA[15247] = 0.0f; 
mA[15248] = 0.0f; 
mA[15249] = 0.0f; 
mA[15250] = 0.0f; 
mA[15251] = 0.0f; 
mA[15252] =  v_v57_aa_fw ; 
mA[15253] = 0.0f; 
mA[15254] = 0.0f; 
mA[15255] = 0.0f; 
mA[15256] = 0.0f; 
mA[15257] = 0.0f; 
mA[15258] = 0.0f; 
mA[15259] = 0.0f; 
mA[15260] = 0.0f; 
mA[15261] = 0.0f; 
mA[15262] = 0.0f; 
mA[15263] = 0.0f; 
mA[15264] = 0.0f; 
mA[15265] = 0.0f; 
mA[15266] = 0.0f; 
mA[15267] = 0.0f; 
mA[15268] = 0.0f; 
mA[15269] = 0.0f; 
mA[15270] = 0.0f; 
mA[15271] = 0.0f; 
mA[15272] = 0.0f; 
mA[15273] = 0.0f; 
mA[15274] = 0.0f; 
mA[15275] = 0.0f; 
mA[15276] = 0.0f; 
mA[15277] = 0.0f; 
mA[15278] = 0.0f; 
mA[15279] = 0.0f; 
mA[15280] = 0.0f; 
mA[15281] = 0.0f; 
mA[15282] = 0.0f; 
mA[15283] = 0.0f; 
mA[15284] = 0.0f; 
mA[15285] = 0.0f; 
mA[15286] = 0.0f; 
mA[15287] = 0.0f; 
mA[15288] = 0.0f; 
mA[15289] = 0.0f; 
mA[15290] = 0.0f; 
mA[15291] = 0.0f; 
mA[15292] = 0.0f; 
mA[15293] = 0.0f; 
mA[15294] = 0.0f; 
mA[15295] = 0.0f; 
mA[15296] = 0.0f; 
mA[15297] = 0.0f; 
mA[15298] = 0.0f; 
mA[15299] = 0.0f; 
mA[15300] = ( (  -1.0f  * v_v15_ppp_fw   )  +(  -1.0f  * v_v12_ppp_fw   )   ) ; 
mA[15301] = 0.0f; 
mA[15302] = 0.0f; 
mA[15303] = 0.0f; 
mA[15304] = 0.0f; 
mA[15305] =  v_v12_ppp_bw ; 
mA[15306] = 0.0f; 
mA[15307] = 0.0f; 
mA[15308] = 0.0f; 
mA[15309] = 0.0f; 
mA[15310] = 0.0f; 
mA[15311] = 0.0f; 
mA[15312] =  v_v15_ppp_bw ; 
mA[15313] = 0.0f; 
mA[15314] = 0.0f; 
mA[15315] = 0.0f; 
mA[15316] = 0.0f; 
mA[15317] = 0.0f; 
mA[15318] = 0.0f; 
mA[15319] = 0.0f; 
mA[15320] = 0.0f; 
mA[15321] = 0.0f; 
mA[15322] = 0.0f; 
mA[15323] = 0.0f; 
mA[15324] = 0.0f; 
mA[15325] = 0.0f; 
mA[15326] = 0.0f; 
mA[15327] = 0.0f; 
mA[15328] = 0.0f; 
mA[15329] = 0.0f; 
mA[15330] = 0.0f; 
mA[15331] = 0.0f; 
mA[15332] = 0.0f; 
mA[15333] = 0.0f; 
mA[15334] = 0.0f; 
mA[15335] = 0.0f; 
mA[15336] = 0.0f; 
mA[15337] = 0.0f; 
mA[15338] = 0.0f; 
mA[15339] = 0.0f; 
mA[15340] = 0.0f; 
mA[15341] = 0.0f; 
mA[15342] = 0.0f; 
mA[15343] = 0.0f; 
mA[15344] = 0.0f; 
mA[15345] = 0.0f; 
mA[15346] = 0.0f; 
mA[15347] = 0.0f; 
mA[15348] = 0.0f; 
mA[15349] = 0.0f; 
mA[15350] = 0.0f; 
mA[15351] = 0.0f; 
mA[15352] = 0.0f; 
mA[15353] = 0.0f; 
mA[15354] = 0.0f; 
mA[15355] = 0.0f; 
mA[15356] = 0.0f; 
mA[15357] = 0.0f; 
mA[15358] = 0.0f; 
mA[15359] = 0.0f; 
mA[15360] = 0.0f; 
mA[15361] = 0.0f; 
mA[15362] = 0.0f; 
mA[15363] = 0.0f; 
mA[15364] = 0.0f; 
mA[15365] = 0.0f; 
mA[15366] = 0.0f; 
mA[15367] = 0.0f; 
mA[15368] = 0.0f; 
mA[15369] = 0.0f; 
mA[15370] = 0.0f; 
mA[15371] = 0.0f; 
mA[15372] = 0.0f; 
mA[15373] = 0.0f; 
mA[15374] = 0.0f; 
mA[15375] = 0.0f; 
mA[15376] = 0.0f; 
mA[15377] = 0.0f; 
mA[15378] = 0.0f; 
mA[15379] = 0.0f; 
mA[15380] = 0.0f; 
mA[15381] = 0.0f; 
mA[15382] = 0.0f; 
mA[15383] = 0.0f; 
mA[15384] = 0.0f; 
mA[15385] = 0.0f; 
mA[15386] = 0.0f; 
mA[15387] = 0.0f; 
mA[15388] = 0.0f; 
mA[15389] = 0.0f; 
mA[15390] = 0.0f; 
mA[15391] = 0.0f; 
mA[15392] = 0.0f; 
mA[15393] = 0.0f; 
mA[15394] = 0.0f; 
mA[15395] = 0.0f; 
mA[15396] = 0.0f; 
mA[15397] = 0.0f; 
mA[15398] = 0.0f; 
mA[15399] = 0.0f; 
mA[15400] = 0.0f; 
mA[15401] = 0.0f; 
mA[15402] = 0.0f; 
mA[15403] = 0.0f; 
mA[15404] = 0.0f; 
mA[15405] = 0.0f; 
mA[15406] = 0.0f; 
mA[15407] = 0.0f; 
mA[15408] = 0.0f; 
mA[15409] = 0.0f; 
mA[15410] = 0.0f; 
mA[15411] = 0.0f; 
mA[15412] = 0.0f; 
mA[15413] = 0.0f; 
mA[15414] = 0.0f; 
mA[15415] = 0.0f; 
mA[15416] = 0.0f; 
mA[15417] = 0.0f; 
mA[15418] = 0.0f; 
mA[15419] = 0.0f; 
mA[15420] = 0.0f; 
mA[15421] = 0.0f; 
mA[15422] = 0.0f; 
mA[15423] = 0.0f; 
mA[15424] = 0.0f; 
mA[15425] = 0.0f; 
mA[15426] = 0.0f; 
mA[15427] = 0.0f; 
mA[15428] = 0.0f; 
mA[15429] = 0.0f; 
mA[15430] = 0.0f; 
mA[15431] = 0.0f; 
mA[15432] = 0.0f; 
mA[15433] = 0.0f; 
mA[15434] = 0.0f; 
mA[15435] = 0.0f; 
mA[15436] = 0.0f; 
mA[15437] = 0.0f; 
mA[15438] = 0.0f; 
mA[15439] = 0.0f; 
mA[15440] = 0.0f; 
mA[15441] = 0.0f; 
mA[15442] = 0.0f; 
mA[15443] = 0.0f; 
mA[15444] = 0.0f; 
mA[15445] =  v_v12_ppp_fw ; 
mA[15446] = 0.0f; 
mA[15447] = 0.0f; 
mA[15448] = 0.0f; 
mA[15449] = 0.0f; 
mA[15450] = ( (  -1.0f  * v_v11_ppp_bw   )  +(  -1.0f  * v_v12_ppp_bw   )  +(  -1.0f  * v_v10_ppp_fw   )   ) ; 
mA[15451] = 0.0f; 
mA[15452] = 0.0f; 
mA[15453] = 0.0f; 
mA[15454] = 0.0f; 
mA[15455] = 0.0f; 
mA[15456] = 0.0f; 
mA[15457] = 0.0f; 
mA[15458] = 0.0f; 
mA[15459] = 0.0f; 
mA[15460] = 0.0f; 
mA[15461] = 0.0f; 
mA[15462] = 0.0f; 
mA[15463] = 0.0f; 
mA[15464] = 0.0f; 
mA[15465] = 0.0f; 
mA[15466] = 0.0f; 
mA[15467] = 0.0f; 
mA[15468] = 0.0f; 
mA[15469] = 0.0f; 
mA[15470] = 0.0f; 
mA[15471] = 0.0f; 
mA[15472] = 0.0f; 
mA[15473] = 0.0f; 
mA[15474] = 0.0f; 
mA[15475] = 0.0f; 
mA[15476] = 0.0f; 
mA[15477] = 0.0f; 
mA[15478] = 0.0f; 
mA[15479] = 0.0f; 
mA[15480] = 0.0f; 
mA[15481] = 0.0f; 
mA[15482] = 0.0f; 
mA[15483] = 0.0f; 
mA[15484] = 0.0f; 
mA[15485] =  v_v11_ppp_fw ; 
mA[15486] = 0.0f; 
mA[15487] = 0.0f; 
mA[15488] = 0.0f; 
mA[15489] = 0.0f; 
mA[15490] = 0.0f; 
mA[15491] = 0.0f; 
mA[15492] = 0.0f; 
mA[15493] = 0.0f; 
mA[15494] = 0.0f; 
mA[15495] = 0.0f; 
mA[15496] = 0.0f; 
mA[15497] = 0.0f; 
mA[15498] = 0.0f; 
mA[15499] = 0.0f; 
mA[15500] = 0.0f; 
mA[15501] = 0.0f; 
mA[15502] = 0.0f; 
mA[15503] = 0.0f; 
mA[15504] = 0.0f; 
mA[15505] = 0.0f; 
mA[15506] = 0.0f; 
mA[15507] = 0.0f; 
mA[15508] = 0.0f; 
mA[15509] = 0.0f; 
mA[15510] = 0.0f; 
mA[15511] = 0.0f; 
mA[15512] = 0.0f; 
mA[15513] = 0.0f; 
mA[15514] = 0.0f; 
mA[15515] = 0.0f; 
mA[15516] = 0.0f; 
mA[15517] = 0.0f; 
mA[15518] = 0.0f; 
mA[15519] = 0.0f; 
mA[15520] = 0.0f; 
mA[15521] = 0.0f; 
mA[15522] = 0.0f; 
mA[15523] = 0.0f; 
mA[15524] = 0.0f; 
mA[15525] = 0.0f; 
mA[15526] = 0.0f; 
mA[15527] = 0.0f; 
mA[15528] = 0.0f; 
mA[15529] = 0.0f; 
mA[15530] = 0.0f; 
mA[15531] = 0.0f; 
mA[15532] = 0.0f; 
mA[15533] = 0.0f; 
mA[15534] = 0.0f; 
mA[15535] = 0.0f; 
mA[15536] = 0.0f; 
mA[15537] = 0.0f; 
mA[15538] = 0.0f; 
mA[15539] = 0.0f; 
mA[15540] = 0.0f; 
mA[15541] = 0.0f; 
mA[15542] = 0.0f; 
mA[15543] = 0.0f; 
mA[15544] = 0.0f; 
mA[15545] = 0.0f; 
mA[15546] = 0.0f; 
mA[15547] = 0.0f; 
mA[15548] = 0.0f; 
mA[15549] = 0.0f; 
mA[15550] = 0.0f; 
mA[15551] = 0.0f; 
mA[15552] = 0.0f; 
mA[15553] = 0.0f; 
mA[15554] = 0.0f; 
mA[15555] = 0.0f; 
mA[15556] = 0.0f; 
mA[15557] = 0.0f; 
mA[15558] = 0.0f; 
mA[15559] = 0.0f; 
mA[15560] = 0.0f; 
mA[15561] = 0.0f; 
mA[15562] = 0.0f; 
mA[15563] = 0.0f; 
mA[15564] = 0.0f; 
mA[15565] = 0.0f; 
mA[15566] = 0.0f; 
mA[15567] = 0.0f; 
mA[15568] = 0.0f; 
mA[15569] = 0.0f; 
mA[15570] = 0.0f; 
mA[15571] = 0.0f; 
mA[15572] = 0.0f; 
mA[15573] = 0.0f; 
mA[15574] = 0.0f; 
mA[15575] = 0.0f; 
mA[15576] = 0.0f; 
mA[15577] = 0.0f; 
mA[15578] = 0.0f; 
mA[15579] = 0.0f; 
mA[15580] = 0.0f; 
mA[15581] = 0.0f; 
mA[15582] = 0.0f; 
mA[15583] = 0.0f; 
mA[15584] = 0.0f; 
mA[15585] = 0.0f; 
mA[15586] = 0.0f; 
mA[15587] = 0.0f; 
mA[15588] = 0.0f; 
mA[15589] = 0.0f; 
mA[15590] = 0.0f; 
mA[15591] = 0.0f; 
mA[15592] = 0.0f; 
mA[15593] = 0.0f; 
mA[15594] = 0.0f; 
mA[15595] =  v_v12_ppp_fw ; 
mA[15596] = 0.0f; 
mA[15597] = 0.0f; 
mA[15598] = 0.0f; 
mA[15599] = 0.0f; 
mA[15600] = ( (  -1.0f  * v_v11_ppp_bw   )  +(  -1.0f  * v_v12_ppp_bw   )  +(  -1.0f  * v_v10_ppp_fw   )   ) ; 
mA[15601] = 0.0f; 
mA[15602] = 0.0f; 
mA[15603] = 0.0f; 
mA[15604] = 0.0f; 
mA[15605] = 0.0f; 
mA[15606] = 0.0f; 
mA[15607] = 0.0f; 
mA[15608] = 0.0f; 
mA[15609] = 0.0f; 
mA[15610] = 0.0f; 
mA[15611] = 0.0f; 
mA[15612] = 0.0f; 
mA[15613] = 0.0f; 
mA[15614] = 0.0f; 
mA[15615] = 0.0f; 
mA[15616] = 0.0f; 
mA[15617] = 0.0f; 
mA[15618] = 0.0f; 
mA[15619] = 0.0f; 
mA[15620] = 0.0f; 
mA[15621] = 0.0f; 
mA[15622] = 0.0f; 
mA[15623] = 0.0f; 
mA[15624] = 0.0f; 
mA[15625] = 0.0f; 
mA[15626] = 0.0f; 
mA[15627] = 0.0f; 
mA[15628] = 0.0f; 
mA[15629] = 0.0f; 
mA[15630] = 0.0f; 
mA[15631] = 0.0f; 
mA[15632] = 0.0f; 
mA[15633] = 0.0f; 
mA[15634] = 0.0f; 
mA[15635] =  v_v11_ppp_fw ; 
mA[15636] = 0.0f; 
mA[15637] = 0.0f; 
mA[15638] = 0.0f; 
mA[15639] = 0.0f; 
mA[15640] = 0.0f; 
mA[15641] = 0.0f; 
mA[15642] = 0.0f; 
mA[15643] = 0.0f; 
mA[15644] = 0.0f; 
mA[15645] = 0.0f; 
mA[15646] = 0.0f; 
mA[15647] = 0.0f; 
mA[15648] = 0.0f; 
mA[15649] = 0.0f; 
mA[15650] = 0.0f; 
mA[15651] = 0.0f; 
mA[15652] = 0.0f; 
mA[15653] = 0.0f; 
mA[15654] = 0.0f; 
mA[15655] = 0.0f; 
mA[15656] = 0.0f; 
mA[15657] = 0.0f; 
mA[15658] = 0.0f; 
mA[15659] = 0.0f; 
mA[15660] = 0.0f; 
mA[15661] = 0.0f; 
mA[15662] = 0.0f; 
mA[15663] = 0.0f; 
mA[15664] = 0.0f; 
mA[15665] = 0.0f; 
mA[15666] = 0.0f; 
mA[15667] = 0.0f; 
mA[15668] = 0.0f; 
mA[15669] = 0.0f; 
mA[15670] = 0.0f; 
mA[15671] = 0.0f; 
mA[15672] = 0.0f; 
mA[15673] = 0.0f; 
mA[15674] = 0.0f; 
mA[15675] = 0.0f; 
mA[15676] = 0.0f; 
mA[15677] = 0.0f; 
mA[15678] = 0.0f; 
mA[15679] = 0.0f; 
mA[15680] = 0.0f; 
mA[15681] = 0.0f; 
mA[15682] = 0.0f; 
mA[15683] = 0.0f; 
mA[15684] = 0.0f; 
mA[15685] = 0.0f; 
mA[15686] = 0.0f; 
mA[15687] = 0.0f; 
mA[15688] = 0.0f; 
mA[15689] = 0.0f; 
mA[15690] = 0.0f; 
mA[15691] = 0.0f; 
mA[15692] = 0.0f; 
mA[15693] = 0.0f; 
mA[15694] = 0.0f; 
mA[15695] = 0.0f; 
mA[15696] = 0.0f; 
mA[15697] = 0.0f; 
mA[15698] = 0.0f; 
mA[15699] = 0.0f; 
mA[15700] = 0.0f; 
mA[15701] = 0.0f; 
mA[15702] = 0.0f; 
mA[15703] = 0.0f; 
mA[15704] = 0.0f; 
mA[15705] = 0.0f; 
mA[15706] = 0.0f; 
mA[15707] = 0.0f; 
mA[15708] = 0.0f; 
mA[15709] = 0.0f; 
mA[15710] = 0.0f; 
mA[15711] = 0.0f; 
mA[15712] = 0.0f; 
mA[15713] = 0.0f; 
mA[15714] = 0.0f; 
mA[15715] = 0.0f; 
mA[15716] = 0.0f; 
mA[15717] = 0.0f; 
mA[15718] = 0.0f; 
mA[15719] = 0.0f; 
mA[15720] = 0.0f; 
mA[15721] = 0.0f; 
mA[15722] = 0.0f; 
mA[15723] = 0.0f; 
mA[15724] = 0.0f; 
mA[15725] = 0.0f; 
mA[15726] = 0.0f; 
mA[15727] = 0.0f; 
mA[15728] = 0.0f; 
mA[15729] = 0.0f; 
mA[15730] = 0.0f; 
mA[15731] = 0.0f; 
mA[15732] = 0.0f; 
mA[15733] = 0.0f; 
mA[15734] = 0.0f; 
mA[15735] = 0.0f; 
mA[15736] = 0.0f; 
mA[15737] = 0.0f; 
mA[15738] = 0.0f; 
mA[15739] = 0.0f; 
mA[15740] = 0.0f; 
mA[15741] = 0.0f; 
mA[15742] = 0.0f; 
mA[15743] = 0.0f; 
mA[15744] = 0.0f; 
mA[15745] =  v_v12_ppp_fw ; 
mA[15746] = 0.0f; 
mA[15747] = 0.0f; 
mA[15748] = 0.0f; 
mA[15749] = 0.0f; 
mA[15750] = ( (  -1.0f  * v_v11_ppp_bw   )  +(  -1.0f  * v_v10_ppp_fw   )  +(  -1.0f  * v_v12_ppp_bw   )   ) ; 
mA[15751] = 0.0f; 
mA[15752] = 0.0f; 
mA[15753] = 0.0f; 
mA[15754] = 0.0f; 
mA[15755] = 0.0f; 
mA[15756] = 0.0f; 
mA[15757] = 0.0f; 
mA[15758] = 0.0f; 
mA[15759] = 0.0f; 
mA[15760] = 0.0f; 
mA[15761] = 0.0f; 
mA[15762] = 0.0f; 
mA[15763] = 0.0f; 
mA[15764] = 0.0f; 
mA[15765] = 0.0f; 
mA[15766] = 0.0f; 
mA[15767] = 0.0f; 
mA[15768] = 0.0f; 
mA[15769] = 0.0f; 
mA[15770] = 0.0f; 
mA[15771] = 0.0f; 
mA[15772] = 0.0f; 
mA[15773] = 0.0f; 
mA[15774] = 0.0f; 
mA[15775] = 0.0f; 
mA[15776] = 0.0f; 
mA[15777] = 0.0f; 
mA[15778] = 0.0f; 
mA[15779] = 0.0f; 
mA[15780] = 0.0f; 
mA[15781] = 0.0f; 
mA[15782] = 0.0f; 
mA[15783] = 0.0f; 
mA[15784] = 0.0f; 
mA[15785] =  v_v11_ppp_fw ; 
mA[15786] = 0.0f; 
mA[15787] = 0.0f; 
mA[15788] = 0.0f; 
mA[15789] = 0.0f; 
mA[15790] = 0.0f; 
mA[15791] = 0.0f; 
mA[15792] = 0.0f; 
mA[15793] = 0.0f; 
mA[15794] = 0.0f; 
mA[15795] = 0.0f; 
mA[15796] = 0.0f; 
mA[15797] = 0.0f; 
mA[15798] = 0.0f; 
mA[15799] = 0.0f; 
mA[15800] = 0.0f; 
mA[15801] = 0.0f; 
mA[15802] = 0.0f; 
mA[15803] = 0.0f; 
mA[15804] = 0.0f; 
mA[15805] = 0.0f; 
mA[15806] = 0.0f; 
mA[15807] = 0.0f; 
mA[15808] = 0.0f; 
mA[15809] = 0.0f; 
mA[15810] = 0.0f; 
mA[15811] = 0.0f; 
mA[15812] = 0.0f; 
mA[15813] = 0.0f; 
mA[15814] = 0.0f; 
mA[15815] = 0.0f; 
mA[15816] = 0.0f; 
mA[15817] = 0.0f; 
mA[15818] = 0.0f; 
mA[15819] = 0.0f; 
mA[15820] = 0.0f; 
mA[15821] = 0.0f; 
mA[15822] = 0.0f; 
mA[15823] = 0.0f; 
mA[15824] = 0.0f; 
mA[15825] = 0.0f; 
mA[15826] = 0.0f; 
mA[15827] = 0.0f; 
mA[15828] = 0.0f; 
mA[15829] = 0.0f; 
mA[15830] = 0.0f; 
mA[15831] = 0.0f; 
mA[15832] = 0.0f; 
mA[15833] = 0.0f; 
mA[15834] = 0.0f; 
mA[15835] = 0.0f; 
mA[15836] = 0.0f; 
mA[15837] = 0.0f; 
mA[15838] = 0.0f; 
mA[15839] = 0.0f; 
mA[15840] = 0.0f; 
mA[15841] = 0.0f; 
mA[15842] = 0.0f; 
mA[15843] = 0.0f; 
mA[15844] = 0.0f; 
mA[15845] = 0.0f; 
mA[15846] = 0.0f; 
mA[15847] = 0.0f; 
mA[15848] = 0.0f; 
mA[15849] = 0.0f; 
mA[15850] = 0.0f; 
mA[15851] = 0.0f; 
mA[15852] = 0.0f; 
mA[15853] = 0.0f; 
mA[15854] = 0.0f; 
mA[15855] = 0.0f; 
mA[15856] = 0.0f; 
mA[15857] = 0.0f; 
mA[15858] = 0.0f; 
mA[15859] = 0.0f; 
mA[15860] = 0.0f; 
mA[15861] = 0.0f; 
mA[15862] = 0.0f; 
mA[15863] = 0.0f; 
mA[15864] = 0.0f; 
mA[15865] = 0.0f; 
mA[15866] = 0.0f; 
mA[15867] = 0.0f; 
mA[15868] = 0.0f; 
mA[15869] = 0.0f; 
mA[15870] = 0.0f; 
mA[15871] = 0.0f; 
mA[15872] = 0.0f; 
mA[15873] = 0.0f; 
mA[15874] = 0.0f; 
mA[15875] = 0.0f; 
mA[15876] = 0.0f; 
mA[15877] = 0.0f; 
mA[15878] = 0.0f; 
mA[15879] = 0.0f; 
mA[15880] = 0.0f; 
mA[15881] = 0.0f; 
mA[15882] = 0.0f; 
mA[15883] = 0.0f; 
mA[15884] = 0.0f; 
mA[15885] = 0.0f; 
mA[15886] = 0.0f; 
mA[15887] = 0.0f; 
mA[15888] = 0.0f; 
mA[15889] = 0.0f; 
mA[15890] = 0.0f; 
mA[15891] = 0.0f; 
mA[15892] = 0.0f; 
mA[15893] = 0.0f; 
mA[15894] = 0.0f; 
mA[15895] =  v_v12_ppp_fw ; 
mA[15896] = 0.0f; 
mA[15897] = 0.0f; 
mA[15898] = 0.0f; 
mA[15899] = 0.0f; 
mA[15900] = ( (  -1.0f  * v_v11_ppp_bw   )  +(  -1.0f  * v_v10_ppp_fw   )  +(  -1.0f  * v_v12_ppp_bw   )   ) ; 
mA[15901] = 0.0f; 
mA[15902] = 0.0f; 
mA[15903] = 0.0f; 
mA[15904] = 0.0f; 
mA[15905] = 0.0f; 
mA[15906] = 0.0f; 
mA[15907] = 0.0f; 
mA[15908] = 0.0f; 
mA[15909] = 0.0f; 
mA[15910] = 0.0f; 
mA[15911] = 0.0f; 
mA[15912] = 0.0f; 
mA[15913] = 0.0f; 
mA[15914] = 0.0f; 
mA[15915] = 0.0f; 
mA[15916] = 0.0f; 
mA[15917] = 0.0f; 
mA[15918] = 0.0f; 
mA[15919] = 0.0f; 
mA[15920] = 0.0f; 
mA[15921] = 0.0f; 
mA[15922] = 0.0f; 
mA[15923] = 0.0f; 
mA[15924] = 0.0f; 
mA[15925] = 0.0f; 
mA[15926] = 0.0f; 
mA[15927] = 0.0f; 
mA[15928] = 0.0f; 
mA[15929] = 0.0f; 
mA[15930] = 0.0f; 
mA[15931] = 0.0f; 
mA[15932] = 0.0f; 
mA[15933] = 0.0f; 
mA[15934] = 0.0f; 
mA[15935] =  v_v11_ppp_fw ; 
mA[15936] = 0.0f; 
mA[15937] = 0.0f; 
mA[15938] = 0.0f; 
mA[15939] = 0.0f; 
mA[15940] = 0.0f; 
mA[15941] = 0.0f; 
mA[15942] = 0.0f; 
mA[15943] = 0.0f; 
mA[15944] = 0.0f; 
mA[15945] = 0.0f; 
mA[15946] = 0.0f; 
mA[15947] = 0.0f; 
mA[15948] = 0.0f; 
mA[15949] = 0.0f; 
mA[15950] = 0.0f; 
mA[15951] = 0.0f; 
mA[15952] = 0.0f; 
mA[15953] = 0.0f; 
mA[15954] = 0.0f; 
mA[15955] = 0.0f; 
mA[15956] = 0.0f; 
mA[15957] = 0.0f; 
mA[15958] = 0.0f; 
mA[15959] = 0.0f; 
mA[15960] = 0.0f; 
mA[15961] = 0.0f; 
mA[15962] = 0.0f; 
mA[15963] = 0.0f; 
mA[15964] = 0.0f; 
mA[15965] = 0.0f; 
mA[15966] = 0.0f; 
mA[15967] = 0.0f; 
mA[15968] = 0.0f; 
mA[15969] = 0.0f; 
mA[15970] = 0.0f; 
mA[15971] = 0.0f; 
mA[15972] = 0.0f; 
mA[15973] = 0.0f; 
mA[15974] = 0.0f; 
mA[15975] = 0.0f; 
mA[15976] = 0.0f; 
mA[15977] = 0.0f; 
mA[15978] = 0.0f; 
mA[15979] = 0.0f; 
mA[15980] = 0.0f; 
mA[15981] = 0.0f; 
mA[15982] = 0.0f; 
mA[15983] = 0.0f; 
mA[15984] = 0.0f; 
mA[15985] = 0.0f; 
mA[15986] = 0.0f; 
mA[15987] = 0.0f; 
mA[15988] = 0.0f; 
mA[15989] = 0.0f; 
mA[15990] = 0.0f; 
mA[15991] = 0.0f; 
mA[15992] = 0.0f; 
mA[15993] = 0.0f; 
mA[15994] = 0.0f; 
mA[15995] = 0.0f; 
mA[15996] = 0.0f; 
mA[15997] = 0.0f; 
mA[15998] = 0.0f; 
mA[15999] = 0.0f; 
mA[16000] = 0.0f; 
mA[16001] = 0.0f; 
mA[16002] = 0.0f; 
mA[16003] = 0.0f; 
mA[16004] = 0.0f; 
mA[16005] = 0.0f; 
mA[16006] = 0.0f; 
mA[16007] = 0.0f; 
mA[16008] = 0.0f; 
mA[16009] = 0.0f; 
mA[16010] = 0.0f; 
mA[16011] = 0.0f; 
mA[16012] = 0.0f; 
mA[16013] = 0.0f; 
mA[16014] = 0.0f; 
mA[16015] = 0.0f; 
mA[16016] = 0.0f; 
mA[16017] = 0.0f; 
mA[16018] = 0.0f; 
mA[16019] = 0.0f; 
mA[16020] = 0.0f; 
mA[16021] = 0.0f; 
mA[16022] = 0.0f; 
mA[16023] = 0.0f; 
mA[16024] = 0.0f; 
mA[16025] = 0.0f; 
mA[16026] = 0.0f; 
mA[16027] = 0.0f; 
mA[16028] = 0.0f; 
mA[16029] = 0.0f; 
mA[16030] = 0.0f; 
mA[16031] = 0.0f; 
mA[16032] = 0.0f; 
mA[16033] = 0.0f; 
mA[16034] = 0.0f; 
mA[16035] = 0.0f; 
mA[16036] = 0.0f; 
mA[16037] = 0.0f; 
mA[16038] = 0.0f; 
mA[16039] = 0.0f; 
mA[16040] = 0.0f; 
mA[16041] = 0.0f; 
mA[16042] = 0.0f; 
mA[16043] = 0.0f; 
mA[16044] = 0.0f; 
mA[16045] =  v_v12_ppp_fw ; 
mA[16046] = 0.0f; 
mA[16047] = 0.0f; 
mA[16048] = 0.0f; 
mA[16049] = 0.0f; 
mA[16050] = ( (  -1.0f  * v_v11_ppp_bw   )  +(  -1.0f  * v_v10_ppp_fw   )  +(  -1.0f  * v_v12_ppp_bw   )   ) ; 
mA[16051] = 0.0f; 
mA[16052] = 0.0f; 
mA[16053] = 0.0f; 
mA[16054] = 0.0f; 
mA[16055] = 0.0f; 
mA[16056] = 0.0f; 
mA[16057] = 0.0f; 
mA[16058] = 0.0f; 
mA[16059] = 0.0f; 
mA[16060] = 0.0f; 
mA[16061] = 0.0f; 
mA[16062] = 0.0f; 
mA[16063] = 0.0f; 
mA[16064] = 0.0f; 
mA[16065] = 0.0f; 
mA[16066] = 0.0f; 
mA[16067] = 0.0f; 
mA[16068] = 0.0f; 
mA[16069] = 0.0f; 
mA[16070] = 0.0f; 
mA[16071] = 0.0f; 
mA[16072] = 0.0f; 
mA[16073] = 0.0f; 
mA[16074] = 0.0f; 
mA[16075] = 0.0f; 
mA[16076] = 0.0f; 
mA[16077] = 0.0f; 
mA[16078] = 0.0f; 
mA[16079] = 0.0f; 
mA[16080] = 0.0f; 
mA[16081] = 0.0f; 
mA[16082] = 0.0f; 
mA[16083] = 0.0f; 
mA[16084] = 0.0f; 
mA[16085] =  v_v11_ppp_fw ; 
mA[16086] = 0.0f; 
mA[16087] = 0.0f; 
mA[16088] = 0.0f; 
mA[16089] = 0.0f; 
mA[16090] = 0.0f; 
mA[16091] = 0.0f; 
mA[16092] = 0.0f; 
mA[16093] = 0.0f; 
mA[16094] = 0.0f; 
mA[16095] = 0.0f; 
mA[16096] = 0.0f; 
mA[16097] = 0.0f; 
mA[16098] = 0.0f; 
mA[16099] = 0.0f; 
mA[16100] = 0.0f; 
mA[16101] = 0.0f; 
mA[16102] = 0.0f; 
mA[16103] = 0.0f; 
mA[16104] = 0.0f; 
mA[16105] = 0.0f; 
mA[16106] = 0.0f; 
mA[16107] = 0.0f; 
mA[16108] = 0.0f; 
mA[16109] = 0.0f; 
mA[16110] = 0.0f; 
mA[16111] = 0.0f; 
mA[16112] = 0.0f; 
mA[16113] = 0.0f; 
mA[16114] = 0.0f; 
mA[16115] = 0.0f; 
mA[16116] = 0.0f; 
mA[16117] = 0.0f; 
mA[16118] = 0.0f; 
mA[16119] = 0.0f; 
mA[16120] = 0.0f; 
mA[16121] = 0.0f; 
mA[16122] = 0.0f; 
mA[16123] = 0.0f; 
mA[16124] = 0.0f; 
mA[16125] = 0.0f; 
mA[16126] = 0.0f; 
mA[16127] = 0.0f; 
mA[16128] = 0.0f; 
mA[16129] = 0.0f; 
mA[16130] = 0.0f; 
mA[16131] = 0.0f; 
mA[16132] = 0.0f; 
mA[16133] = 0.0f; 
mA[16134] = 0.0f; 
mA[16135] = 0.0f; 
mA[16136] = 0.0f; 
mA[16137] = 0.0f; 
mA[16138] = 0.0f; 
mA[16139] = 0.0f; 
mA[16140] = 0.0f; 
mA[16141] = 0.0f; 
mA[16142] = 0.0f; 
mA[16143] = 0.0f; 
mA[16144] = 0.0f; 
mA[16145] = 0.0f; 
mA[16146] = 0.0f; 
mA[16147] = 0.0f; 
mA[16148] = 0.0f; 
mA[16149] = 0.0f; 
mA[16150] = 0.0f; 
mA[16151] = 0.0f; 
mA[16152] = 0.0f; 
mA[16153] = 0.0f; 
mA[16154] = 0.0f; 
mA[16155] = 0.0f; 
mA[16156] = 0.0f; 
mA[16157] = 0.0f; 
mA[16158] = 0.0f; 
mA[16159] = 0.0f; 
mA[16160] = 0.0f; 
mA[16161] = 0.0f; 
mA[16162] = 0.0f; 
mA[16163] = 0.0f; 
mA[16164] = 0.0f; 
mA[16165] = 0.0f; 
mA[16166] = 0.0f; 
mA[16167] = 0.0f; 
mA[16168] = 0.0f; 
mA[16169] = 0.0f; 
mA[16170] = 0.0f; 
mA[16171] = 0.0f; 
mA[16172] = 0.0f; 
mA[16173] = 0.0f; 
mA[16174] = 0.0f; 
mA[16175] = 0.0f; 
mA[16176] = 0.0f; 
mA[16177] = 0.0f; 
mA[16178] = 0.0f; 
mA[16179] = 0.0f; 
mA[16180] = 0.0f; 
mA[16181] = 0.0f; 
mA[16182] = 0.0f; 
mA[16183] = 0.0f; 
mA[16184] = 0.0f; 
mA[16185] = 0.0f; 
mA[16186] = 0.0f; 
mA[16187] = 0.0f; 
mA[16188] = 0.0f; 
mA[16189] = 0.0f; 
mA[16190] = 0.0f; 
mA[16191] = 0.0f; 
mA[16192] = 0.0f; 
mA[16193] = 0.0f; 
mA[16194] = 0.0f; 
mA[16195] = 0.0f; 
mA[16196] = 0.0f; 
mA[16197] = 0.0f; 
mA[16198] = 0.0f; 
mA[16199] = 0.0f; 
mA[16200] = ( (  -1.0f  * v_v17_ppp_bw   )  +(  -1.0f  * v_v15_ppp_bw   )   ) ; 
mA[16201] = 0.0f; 
mA[16202] = 0.0f; 
mA[16203] = 0.0f; 
mA[16204] = 0.0f; 
mA[16205] = 0.0f; 
mA[16206] = 0.0f; 
mA[16207] = 0.0f; 
mA[16208] = 0.0f; 
mA[16209] = 0.0f; 
mA[16210] = 0.0f; 
mA[16211] = 0.0f; 
mA[16212] = 0.0f; 
mA[16213] = 0.0f; 
mA[16214] = 0.0f; 
mA[16215] = 0.0f; 
mA[16216] = 0.0f; 
mA[16217] = 0.0f; 
mA[16218] =  v_v17_ppp_fw ; 
mA[16219] = 0.0f; 
mA[16220] = 0.0f; 
mA[16221] =  v_v15_ppp_fw ; 
mA[16222] = 0.0f; 
mA[16223] = 0.0f; 
mA[16224] = 0.0f; 
mA[16225] = 0.0f; 
mA[16226] = 0.0f; 
mA[16227] = 0.0f; 
mA[16228] = 0.0f; 
mA[16229] = 0.0f; 
mA[16230] = 0.0f; 
mA[16231] = 0.0f; 
mA[16232] = 0.0f; 
mA[16233] = 0.0f; 
mA[16234] = 0.0f; 
mA[16235] = 0.0f; 
mA[16236] = 0.0f; 
mA[16237] = 0.0f; 
mA[16238] = 0.0f; 
mA[16239] = 0.0f; 
mA[16240] = 0.0f; 
mA[16241] = 0.0f; 
mA[16242] = 0.0f; 
mA[16243] = 0.0f; 
mA[16244] = 0.0f; 
mA[16245] = 0.0f; 
mA[16246] = 0.0f; 
mA[16247] = 0.0f; 
mA[16248] = 0.0f; 
mA[16249] = 0.0f; 
mA[16250] = 0.0f; 
mA[16251] = 0.0f; 
mA[16252] = 0.0f; 
mA[16253] = 0.0f; 
mA[16254] = 0.0f; 
mA[16255] = 0.0f; 
mA[16256] = 0.0f; 
mA[16257] = 0.0f; 
mA[16258] = 0.0f; 
mA[16259] = 0.0f; 
mA[16260] = 0.0f; 
mA[16261] = 0.0f; 
mA[16262] = 0.0f; 
mA[16263] = 0.0f; 
mA[16264] = 0.0f; 
mA[16265] = 0.0f; 
mA[16266] = 0.0f; 
mA[16267] = 0.0f; 
mA[16268] = 0.0f; 
mA[16269] = 0.0f; 
mA[16270] = 0.0f; 
mA[16271] = 0.0f; 
mA[16272] = 0.0f; 
mA[16273] = 0.0f; 
mA[16274] = 0.0f; 
mA[16275] = 0.0f; 
mA[16276] = 0.0f; 
mA[16277] = 0.0f; 
mA[16278] = 0.0f; 
mA[16279] = 0.0f; 
mA[16280] = 0.0f; 
mA[16281] = 0.0f; 
mA[16282] = 0.0f; 
mA[16283] = 0.0f; 
mA[16284] = 0.0f; 
mA[16285] = 0.0f; 
mA[16286] = 0.0f; 
mA[16287] = 0.0f; 
mA[16288] = 0.0f; 
mA[16289] = 0.0f; 
mA[16290] = 0.0f; 
mA[16291] = 0.0f; 
mA[16292] = 0.0f; 
mA[16293] = 0.0f; 
mA[16294] = 0.0f; 
mA[16295] = 0.0f; 
mA[16296] = 0.0f; 
mA[16297] = 0.0f; 
mA[16298] = 0.0f; 
mA[16299] = 0.0f; 
mA[16300] = 0.0f; 
mA[16301] = 0.0f; 
mA[16302] = 0.0f; 
mA[16303] = 0.0f; 
mA[16304] = 0.0f; 
mA[16305] = 0.0f; 
mA[16306] = 0.0f; 
mA[16307] = 0.0f; 
mA[16308] = 0.0f; 
mA[16309] = 0.0f; 
mA[16310] = 0.0f; 
mA[16311] = 0.0f; 
mA[16312] = 0.0f; 
mA[16313] = 0.0f; 
mA[16314] = 0.0f; 
mA[16315] = 0.0f; 
mA[16316] = 0.0f; 
mA[16317] = 0.0f; 
mA[16318] = 0.0f; 
mA[16319] = 0.0f; 
mA[16320] = 0.0f; 
mA[16321] = 0.0f; 
mA[16322] = 0.0f; 
mA[16323] = 0.0f; 
mA[16324] = 0.0f; 
mA[16325] = 0.0f; 
mA[16326] = 0.0f; 
mA[16327] = 0.0f; 
mA[16328] = 0.0f; 
mA[16329] = 0.0f; 
mA[16330] = 0.0f; 
mA[16331] = 0.0f; 
mA[16332] = 0.0f; 
mA[16333] = 0.0f; 
mA[16334] = 0.0f; 
mA[16335] = 0.0f; 
mA[16336] = 0.0f; 
mA[16337] = 0.0f; 
mA[16338] = 0.0f; 
mA[16339] = 0.0f; 
mA[16340] = 0.0f; 
mA[16341] = 0.0f; 
mA[16342] = 0.0f; 
mA[16343] = 0.0f; 
mA[16344] = 0.0f; 
mA[16345] = 0.0f; 
mA[16346] = 0.0f; 
mA[16347] = 0.0f; 
mA[16348] = 0.0f; 
mA[16349] = 0.0f; 
mA[16350] = ( (  -1.0f  * v_v15_ppp_bw   )  +(  -1.0f  * v_v17_ppp_bw   )   ) ; 
mA[16351] = 0.0f; 
mA[16352] = 0.0f; 
mA[16353] = 0.0f; 
mA[16354] = 0.0f; 
mA[16355] = 0.0f; 
mA[16356] = 0.0f; 
mA[16357] = 0.0f; 
mA[16358] = 0.0f; 
mA[16359] = 0.0f; 
mA[16360] = 0.0f; 
mA[16361] = 0.0f; 
mA[16362] = 0.0f; 
mA[16363] = 0.0f; 
mA[16364] = 0.0f; 
mA[16365] = 0.0f; 
mA[16366] = 0.0f; 
mA[16367] = 0.0f; 
mA[16368] =  v_v17_ppp_fw ; 
mA[16369] = 0.0f; 
mA[16370] = 0.0f; 
mA[16371] =  v_v15_ppp_fw ; 
mA[16372] = 0.0f; 
mA[16373] = 0.0f; 
mA[16374] = 0.0f; 
mA[16375] = 0.0f; 
mA[16376] = 0.0f; 
mA[16377] = 0.0f; 
mA[16378] = 0.0f; 
mA[16379] = 0.0f; 
mA[16380] = 0.0f; 
mA[16381] = 0.0f; 
mA[16382] = 0.0f; 
mA[16383] = 0.0f; 
mA[16384] = 0.0f; 
mA[16385] = 0.0f; 
mA[16386] = 0.0f; 
mA[16387] = 0.0f; 
mA[16388] = 0.0f; 
mA[16389] = 0.0f; 
mA[16390] = 0.0f; 
mA[16391] = 0.0f; 
mA[16392] = 0.0f; 
mA[16393] = 0.0f; 
mA[16394] = 0.0f; 
mA[16395] = 0.0f; 
mA[16396] = 0.0f; 
mA[16397] = 0.0f; 
mA[16398] = 0.0f; 
mA[16399] = 0.0f; 
mA[16400] = 0.0f; 
mA[16401] = 0.0f; 
mA[16402] = 0.0f; 
mA[16403] = 0.0f; 
mA[16404] = 0.0f; 
mA[16405] = 0.0f; 
mA[16406] = 0.0f; 
mA[16407] = 0.0f; 
mA[16408] = 0.0f; 
mA[16409] = 0.0f; 
mA[16410] = 0.0f; 
mA[16411] = 0.0f; 
mA[16412] = 0.0f; 
mA[16413] = 0.0f; 
mA[16414] = 0.0f; 
mA[16415] = 0.0f; 
mA[16416] = 0.0f; 
mA[16417] = 0.0f; 
mA[16418] = 0.0f; 
mA[16419] = 0.0f; 
mA[16420] = 0.0f; 
mA[16421] = 0.0f; 
mA[16422] = 0.0f; 
mA[16423] = 0.0f; 
mA[16424] = 0.0f; 
mA[16425] = 0.0f; 
mA[16426] = 0.0f; 
mA[16427] = 0.0f; 
mA[16428] = 0.0f; 
mA[16429] = 0.0f; 
mA[16430] = 0.0f; 
mA[16431] = 0.0f; 
mA[16432] = 0.0f; 
mA[16433] = 0.0f; 
mA[16434] = 0.0f; 
mA[16435] = 0.0f; 
mA[16436] = 0.0f; 
mA[16437] = 0.0f; 
mA[16438] = 0.0f; 
mA[16439] = 0.0f; 
mA[16440] = 0.0f; 
mA[16441] = 0.0f; 
mA[16442] = 0.0f; 
mA[16443] = 0.0f; 
mA[16444] = 0.0f; 
mA[16445] = 0.0f; 
mA[16446] = 0.0f; 
mA[16447] = 0.0f; 
mA[16448] = 0.0f; 
mA[16449] = 0.0f; 
mA[16450] = 0.0f; 
mA[16451] = 0.0f; 
mA[16452] = 0.0f; 
mA[16453] = 0.0f; 
mA[16454] = 0.0f; 
mA[16455] = 0.0f; 
mA[16456] = 0.0f; 
mA[16457] = 0.0f; 
mA[16458] = 0.0f; 
mA[16459] = 0.0f; 
mA[16460] = 0.0f; 
mA[16461] = 0.0f; 
mA[16462] = 0.0f; 
mA[16463] = 0.0f; 
mA[16464] = 0.0f; 
mA[16465] = 0.0f; 
mA[16466] = 0.0f; 
mA[16467] = 0.0f; 
mA[16468] = 0.0f; 
mA[16469] = 0.0f; 
mA[16470] = 0.0f; 
mA[16471] = 0.0f; 
mA[16472] = 0.0f; 
mA[16473] = 0.0f; 
mA[16474] = 0.0f; 
mA[16475] = 0.0f; 
mA[16476] = 0.0f; 
mA[16477] = 0.0f; 
mA[16478] = 0.0f; 
mA[16479] = 0.0f; 
mA[16480] = 0.0f; 
mA[16481] = 0.0f; 
mA[16482] = 0.0f; 
mA[16483] = 0.0f; 
mA[16484] = 0.0f; 
mA[16485] = 0.0f; 
mA[16486] = 0.0f; 
mA[16487] = 0.0f; 
mA[16488] =  v_v15_ppp_fw ; 
mA[16489] = 0.0f; 
mA[16490] = 0.0f; 
mA[16491] = 0.0f; 
mA[16492] = 0.0f; 
mA[16493] = 0.0f; 
mA[16494] = 0.0f; 
mA[16495] = 0.0f; 
mA[16496] = 0.0f; 
mA[16497] = 0.0f; 
mA[16498] = 0.0f; 
mA[16499] = 0.0f; 
mA[16500] = ( (  -1.0f  * v_v17_ppp_bw   )  +(  -1.0f  * v_v15_ppp_bw   )   ) ; 
mA[16501] = 0.0f; 
mA[16502] = 0.0f; 
mA[16503] = 0.0f; 
mA[16504] = 0.0f; 
mA[16505] = 0.0f; 
mA[16506] = 0.0f; 
mA[16507] = 0.0f; 
mA[16508] = 0.0f; 
mA[16509] = 0.0f; 
mA[16510] = 0.0f; 
mA[16511] = 0.0f; 
mA[16512] = 0.0f; 
mA[16513] = 0.0f; 
mA[16514] = 0.0f; 
mA[16515] = 0.0f; 
mA[16516] = 0.0f; 
mA[16517] = 0.0f; 
mA[16518] =  v_v17_ppp_fw ; 
mA[16519] = 0.0f; 
mA[16520] = 0.0f; 
mA[16521] = 0.0f; 
mA[16522] = 0.0f; 
mA[16523] = 0.0f; 
mA[16524] = 0.0f; 
mA[16525] = 0.0f; 
mA[16526] = 0.0f; 
mA[16527] = 0.0f; 
mA[16528] = 0.0f; 
mA[16529] = 0.0f; 
mA[16530] = 0.0f; 
mA[16531] = 0.0f; 
mA[16532] = 0.0f; 
mA[16533] = 0.0f; 
mA[16534] = 0.0f; 
mA[16535] = 0.0f; 
mA[16536] = 0.0f; 
mA[16537] = 0.0f; 
mA[16538] = 0.0f; 
mA[16539] = 0.0f; 
mA[16540] = 0.0f; 
mA[16541] = 0.0f; 
mA[16542] = 0.0f; 
mA[16543] = 0.0f; 
mA[16544] = 0.0f; 
mA[16545] = 0.0f; 
mA[16546] = 0.0f; 
mA[16547] = 0.0f; 
mA[16548] = 0.0f; 
mA[16549] = 0.0f; 
mA[16550] = 0.0f; 
mA[16551] = 0.0f; 
mA[16552] = 0.0f; 
mA[16553] = 0.0f; 
mA[16554] = 0.0f; 
mA[16555] = 0.0f; 
mA[16556] = 0.0f; 
mA[16557] = 0.0f; 
mA[16558] = 0.0f; 
mA[16559] = 0.0f; 
mA[16560] = 0.0f; 
mA[16561] = 0.0f; 
mA[16562] = 0.0f; 
mA[16563] = 0.0f; 
mA[16564] = 0.0f; 
mA[16565] =  v_v17_ppp_fw ; 
mA[16566] = 0.0f; 
mA[16567] = 0.0f; 
mA[16568] = 0.0f; 
mA[16569] = 0.0f; 
mA[16570] = 0.0f; 
mA[16571] = 0.0f; 
mA[16572] = 0.0f; 
mA[16573] = 0.0f; 
mA[16574] = 0.0f; 
mA[16575] = 0.0f; 
mA[16576] = 0.0f; 
mA[16577] = 0.0f; 
mA[16578] = 0.0f; 
mA[16579] = 0.0f; 
mA[16580] = 0.0f; 
mA[16581] = 0.0f; 
mA[16582] = 0.0f; 
mA[16583] = 0.0f; 
mA[16584] = 0.0f; 
mA[16585] = 0.0f; 
mA[16586] = 0.0f; 
mA[16587] = 0.0f; 
mA[16588] = 0.0f; 
mA[16589] = 0.0f; 
mA[16590] = 0.0f; 
mA[16591] = 0.0f; 
mA[16592] = 0.0f; 
mA[16593] = 0.0f; 
mA[16594] = 0.0f; 
mA[16595] = 0.0f; 
mA[16596] = 0.0f; 
mA[16597] = 0.0f; 
mA[16598] = 0.0f; 
mA[16599] = 0.0f; 
mA[16600] = 0.0f; 
mA[16601] = 0.0f; 
mA[16602] = 0.0f; 
mA[16603] = 0.0f; 
mA[16604] = 0.0f; 
mA[16605] = 0.0f; 
mA[16606] = 0.0f; 
mA[16607] = 0.0f; 
mA[16608] = 0.0f; 
mA[16609] = 0.0f; 
mA[16610] = 0.0f; 
mA[16611] = 0.0f; 
mA[16612] = 0.0f; 
mA[16613] = 0.0f; 
mA[16614] = 0.0f; 
mA[16615] = 0.0f; 
mA[16616] = 0.0f; 
mA[16617] = 0.0f; 
mA[16618] = 0.0f; 
mA[16619] = 0.0f; 
mA[16620] = 0.0f; 
mA[16621] = 0.0f; 
mA[16622] = 0.0f; 
mA[16623] = 0.0f; 
mA[16624] = 0.0f; 
mA[16625] = 0.0f; 
mA[16626] = 0.0f; 
mA[16627] = 0.0f; 
mA[16628] = 0.0f; 
mA[16629] = 0.0f; 
mA[16630] = 0.0f; 
mA[16631] = 0.0f; 
mA[16632] = 0.0f; 
mA[16633] = 0.0f; 
mA[16634] = 0.0f; 
mA[16635] = 0.0f; 
mA[16636] = 0.0f; 
mA[16637] = 0.0f; 
mA[16638] =  v_v15_ppp_fw ; 
mA[16639] = 0.0f; 
mA[16640] = 0.0f; 
mA[16641] = 0.0f; 
mA[16642] = 0.0f; 
mA[16643] = 0.0f; 
mA[16644] = 0.0f; 
mA[16645] = 0.0f; 
mA[16646] = 0.0f; 
mA[16647] = 0.0f; 
mA[16648] = 0.0f; 
mA[16649] = 0.0f; 
mA[16650] = ( (  -1.0f  * v_v17_ppp_bw   )  +(  -1.0f  * v_v15_ppp_bw   )   ) ; 
mA[16651] = 0.0f; 
mA[16652] = 0.0f; 
mA[16653] = 0.0f; 
mA[16654] = 0.0f; 
mA[16655] = 0.0f; 
mA[16656] = 0.0f; 
mA[16657] = 0.0f; 
mA[16658] = 0.0f; 
mA[16659] = 0.0f; 
mA[16660] = 0.0f; 
mA[16661] = 0.0f; 
mA[16662] = 0.0f; 
mA[16663] = 0.0f; 
mA[16664] = 0.0f; 
mA[16665] = 0.0f; 
mA[16666] = 0.0f; 
mA[16667] = 0.0f; 
mA[16668] = 0.0f; 
mA[16669] = 0.0f; 
mA[16670] = 0.0f; 
mA[16671] = 0.0f; 
mA[16672] = 0.0f; 
mA[16673] = 0.0f; 
mA[16674] = 0.0f; 
mA[16675] = 0.0f; 
mA[16676] = 0.0f; 
mA[16677] = 0.0f; 
mA[16678] = 0.0f; 
mA[16679] = 0.0f; 
mA[16680] = 0.0f; 
mA[16681] = 0.0f; 
mA[16682] = 0.0f; 
mA[16683] = 0.0f; 
mA[16684] = 0.0f; 
mA[16685] = 0.0f; 
mA[16686] = 0.0f; 
mA[16687] = 0.0f; 
mA[16688] = 0.0f; 
mA[16689] = 0.0f; 
mA[16690] = 0.0f; 
mA[16691] = 0.0f; 
mA[16692] = 0.0f; 
mA[16693] = 0.0f; 
mA[16694] = 0.0f; 
mA[16695] = 0.0f; 
mA[16696] = 0.0f; 
mA[16697] = 0.0f; 
mA[16698] = 0.0f; 
mA[16699] = 0.0f; 
mA[16700] = 0.0f; 
mA[16701] = 0.0f; 
mA[16702] = 0.0f; 
mA[16703] = 0.0f; 
mA[16704] = 0.0f; 
mA[16705] = 0.0f; 
mA[16706] = 0.0f; 
mA[16707] = 0.0f; 
mA[16708] = 0.0f; 
mA[16709] = 0.0f; 
mA[16710] = 0.0f; 
mA[16711] = 0.0f; 
mA[16712] = 0.0f; 
mA[16713] = 0.0f; 
mA[16714] = 0.0f; 
mA[16715] =  v_v17_ppp_fw ; 
mA[16716] = 0.0f; 
mA[16717] = 0.0f; 
mA[16718] = 0.0f; 
mA[16719] = 0.0f; 
mA[16720] = 0.0f; 
mA[16721] = 0.0f; 
mA[16722] = 0.0f; 
mA[16723] = 0.0f; 
mA[16724] = 0.0f; 
mA[16725] = 0.0f; 
mA[16726] = 0.0f; 
mA[16727] = 0.0f; 
mA[16728] = 0.0f; 
mA[16729] = 0.0f; 
mA[16730] = 0.0f; 
mA[16731] = 0.0f; 
mA[16732] = 0.0f; 
mA[16733] = 0.0f; 
mA[16734] = 0.0f; 
mA[16735] = 0.0f; 
mA[16736] = 0.0f; 
mA[16737] = 0.0f; 
mA[16738] = 0.0f; 
mA[16739] = 0.0f; 
mA[16740] = 0.0f; 
mA[16741] = 0.0f; 
mA[16742] = 0.0f; 
mA[16743] = 0.0f; 
mA[16744] = 0.0f; 
mA[16745] = 0.0f; 
mA[16746] = 0.0f; 
mA[16747] = 0.0f; 
mA[16748] = 0.0f; 
mA[16749] = 0.0f; 
mA[16750] = 0.0f; 
mA[16751] = 0.0f; 
mA[16752] = 0.0f; 
mA[16753] = 0.0f; 
mA[16754] = 0.0f; 
mA[16755] = 0.0f; 
mA[16756] = 0.0f; 
mA[16757] = 0.0f; 
mA[16758] = 0.0f; 
mA[16759] = 0.0f; 
mA[16760] = 0.0f; 
mA[16761] = 0.0f; 
mA[16762] = 0.0f; 
mA[16763] = 0.0f; 
mA[16764] = 0.0f; 
mA[16765] = 0.0f; 
mA[16766] = 0.0f; 
mA[16767] = 0.0f; 
mA[16768] = 0.0f; 
mA[16769] = 0.0f; 
mA[16770] = 0.0f; 
mA[16771] = 0.0f; 
mA[16772] = 0.0f; 
mA[16773] = 0.0f; 
mA[16774] = 0.0f; 
mA[16775] = 0.0f; 
mA[16776] = 0.0f; 
mA[16777] = 0.0f; 
mA[16778] = 0.0f; 
mA[16779] = 0.0f; 
mA[16780] = 0.0f; 
mA[16781] = 0.0f; 
mA[16782] = 0.0f; 
mA[16783] = 0.0f; 
mA[16784] = 0.0f; 
mA[16785] = 0.0f; 
mA[16786] = 0.0f; 
mA[16787] = 0.0f; 
mA[16788] =  v_v15_ppp_fw ; 
mA[16789] = 0.0f; 
mA[16790] = 0.0f; 
mA[16791] = 0.0f; 
mA[16792] = 0.0f; 
mA[16793] = 0.0f; 
mA[16794] = 0.0f; 
mA[16795] = 0.0f; 
mA[16796] = 0.0f; 
mA[16797] = 0.0f; 
mA[16798] = 0.0f; 
mA[16799] = 0.0f; 
mA[16800] = ( (  -1.0f  * v_v17_ppp_bw   )  +(  -1.0f  * v_v15_ppp_bw   )   ) ; 
mA[16801] = 0.0f; 
mA[16802] = 0.0f; 
mA[16803] = 0.0f; 
mA[16804] = 0.0f; 
mA[16805] = 0.0f; 
mA[16806] = 0.0f; 
mA[16807] = 0.0f; 
mA[16808] = 0.0f; 
mA[16809] = 0.0f; 
mA[16810] = 0.0f; 
mA[16811] = 0.0f; 
mA[16812] = 0.0f; 
mA[16813] = 0.0f; 
mA[16814] = 0.0f; 
mA[16815] = 0.0f; 
mA[16816] = 0.0f; 
mA[16817] = 0.0f; 
mA[16818] = 0.0f; 
mA[16819] = 0.0f; 
mA[16820] = 0.0f; 
mA[16821] = 0.0f; 
mA[16822] = 0.0f; 
mA[16823] = 0.0f; 
mA[16824] = 0.0f; 
mA[16825] = 0.0f; 
mA[16826] = 0.0f; 
mA[16827] = 0.0f; 
mA[16828] = 0.0f; 
mA[16829] = 0.0f; 
mA[16830] = 0.0f; 
mA[16831] = 0.0f; 
mA[16832] = 0.0f; 
mA[16833] = 0.0f; 
mA[16834] = 0.0f; 
mA[16835] = 0.0f; 
mA[16836] = 0.0f; 
mA[16837] = 0.0f; 
mA[16838] = 0.0f; 
mA[16839] = 0.0f; 
mA[16840] = 0.0f; 
mA[16841] = 0.0f; 
mA[16842] = 0.0f; 
mA[16843] = 0.0f; 
mA[16844] = 0.0f; 
mA[16845] = 0.0f; 
mA[16846] = 0.0f; 
mA[16847] = 0.0f; 
mA[16848] = 0.0f; 
mA[16849] = 0.0f; 
mA[16850] = 0.0f; 
mA[16851] = 0.0f; 
mA[16852] = 0.0f; 
mA[16853] = 0.0f; 
mA[16854] = 0.0f; 
mA[16855] = 0.0f; 
mA[16856] = 0.0f; 
mA[16857] = 0.0f; 
mA[16858] = 0.0f; 
mA[16859] = 0.0f; 
mA[16860] = 0.0f; 
mA[16861] = 0.0f; 
mA[16862] = 0.0f; 
mA[16863] = 0.0f; 
mA[16864] = 0.0f; 
mA[16865] =  v_v17_ppp_fw ; 
mA[16866] = 0.0f; 
mA[16867] = 0.0f; 
mA[16868] = 0.0f; 
mA[16869] = 0.0f; 
mA[16870] = 0.0f; 
mA[16871] = 0.0f; 
mA[16872] = 0.0f; 
mA[16873] = 0.0f; 
mA[16874] = 0.0f; 
mA[16875] = 0.0f; 
mA[16876] = 0.0f; 
mA[16877] = 0.0f; 
mA[16878] = 0.0f; 
mA[16879] = 0.0f; 
mA[16880] = 0.0f; 
mA[16881] = 0.0f; 
mA[16882] = 0.0f; 
mA[16883] = 0.0f; 
mA[16884] = 0.0f; 
mA[16885] = 0.0f; 
mA[16886] = 0.0f; 
mA[16887] = 0.0f; 
mA[16888] = 0.0f; 
mA[16889] = 0.0f; 
mA[16890] = 0.0f; 
mA[16891] = 0.0f; 
mA[16892] = 0.0f; 
mA[16893] = 0.0f; 
mA[16894] = 0.0f; 
mA[16895] = 0.0f; 
mA[16896] = 0.0f; 
mA[16897] = 0.0f; 
mA[16898] = 0.0f; 
mA[16899] = 0.0f; 
mA[16900] = 0.0f; 
mA[16901] = 0.0f; 
mA[16902] = 0.0f; 
mA[16903] = 0.0f; 
mA[16904] = 0.0f; 
mA[16905] = 0.0f; 
mA[16906] = 0.0f; 
mA[16907] = 0.0f; 
mA[16908] = 0.0f; 
mA[16909] = 0.0f; 
mA[16910] = 0.0f; 
mA[16911] = 0.0f; 
mA[16912] = 0.0f; 
mA[16913] = 0.0f; 
mA[16914] = 0.0f; 
mA[16915] = 0.0f; 
mA[16916] = 0.0f; 
mA[16917] = 0.0f; 
mA[16918] = 0.0f; 
mA[16919] = 0.0f; 
mA[16920] = 0.0f; 
mA[16921] = 0.0f; 
mA[16922] = 0.0f; 
mA[16923] = 0.0f; 
mA[16924] = 0.0f; 
mA[16925] = 0.0f; 
mA[16926] = 0.0f; 
mA[16927] = 0.0f; 
mA[16928] = 0.0f; 
mA[16929] = 0.0f; 
mA[16930] = 0.0f; 
mA[16931] = 0.0f; 
mA[16932] = 0.0f; 
mA[16933] = 0.0f; 
mA[16934] = 0.0f; 
mA[16935] = 0.0f; 
mA[16936] = 0.0f; 
mA[16937] = 0.0f; 
mA[16938] =  v_v15_ppp_fw ; 
mA[16939] = 0.0f; 
mA[16940] = 0.0f; 
mA[16941] = 0.0f; 
mA[16942] = 0.0f; 
mA[16943] = 0.0f; 
mA[16944] = 0.0f; 
mA[16945] = 0.0f; 
mA[16946] = 0.0f; 
mA[16947] = 0.0f; 
mA[16948] = 0.0f; 
mA[16949] = 0.0f; 
mA[16950] = ( (  -1.0f  * v_v17_ppp_bw   )  +(  -1.0f  * v_v15_ppp_bw   )   ) ; 
mA[16951] = 0.0f; 
mA[16952] = 0.0f; 
mA[16953] = 0.0f; 
mA[16954] = 0.0f; 
mA[16955] = 0.0f; 
mA[16956] = 0.0f; 
mA[16957] = 0.0f; 
mA[16958] = 0.0f; 
mA[16959] = 0.0f; 
mA[16960] = 0.0f; 
mA[16961] = 0.0f; 
mA[16962] = 0.0f; 
mA[16963] = 0.0f; 
mA[16964] = 0.0f; 
mA[16965] = 0.0f; 
mA[16966] = 0.0f; 
mA[16967] = 0.0f; 
mA[16968] = 0.0f; 
mA[16969] = 0.0f; 
mA[16970] = 0.0f; 
mA[16971] = 0.0f; 
mA[16972] = 0.0f; 
mA[16973] = 0.0f; 
mA[16974] = 0.0f; 
mA[16975] = 0.0f; 
mA[16976] = 0.0f; 
mA[16977] = 0.0f; 
mA[16978] = 0.0f; 
mA[16979] = 0.0f; 
mA[16980] = 0.0f; 
mA[16981] = 0.0f; 
mA[16982] = 0.0f; 
mA[16983] = 0.0f; 
mA[16984] = 0.0f; 
mA[16985] = 0.0f; 
mA[16986] = 0.0f; 
mA[16987] = 0.0f; 
mA[16988] = 0.0f; 
mA[16989] = 0.0f; 
mA[16990] = 0.0f; 
mA[16991] = 0.0f; 
mA[16992] = 0.0f; 
mA[16993] = 0.0f; 
mA[16994] = 0.0f; 
mA[16995] = 0.0f; 
mA[16996] = 0.0f; 
mA[16997] = 0.0f; 
mA[16998] = 0.0f; 
mA[16999] = 0.0f; 
mA[17000] = 0.0f; 
mA[17001] = 0.0f; 
mA[17002] = 0.0f; 
mA[17003] = 0.0f; 
mA[17004] = 0.0f; 
mA[17005] = 0.0f; 
mA[17006] = 0.0f; 
mA[17007] = 0.0f; 
mA[17008] = 0.0f; 
mA[17009] = 0.0f; 
mA[17010] = 0.0f; 
mA[17011] = 0.0f; 
mA[17012] = 0.0f; 
mA[17013] = 0.0f; 
mA[17014] = 0.0f; 
mA[17015] =  v_v17_ppp_fw ; 
mA[17016] = 0.0f; 
mA[17017] = 0.0f; 
mA[17018] = 0.0f; 
mA[17019] = 0.0f; 
mA[17020] = 0.0f; 
mA[17021] = 0.0f; 
mA[17022] = 0.0f; 
mA[17023] = 0.0f; 
mA[17024] = 0.0f; 
mA[17025] = 0.0f; 
mA[17026] = 0.0f; 
mA[17027] = 0.0f; 
mA[17028] = 0.0f; 
mA[17029] = 0.0f; 
mA[17030] = 0.0f; 
mA[17031] = 0.0f; 
mA[17032] = 0.0f; 
mA[17033] = 0.0f; 
mA[17034] = 0.0f; 
mA[17035] = 0.0f; 
mA[17036] = 0.0f; 
mA[17037] = 0.0f; 
mA[17038] = 0.0f; 
mA[17039] = 0.0f; 
mA[17040] = 0.0f; 
mA[17041] = 0.0f; 
mA[17042] = 0.0f; 
mA[17043] = 0.0f; 
mA[17044] = 0.0f; 
mA[17045] = 0.0f; 
mA[17046] = 0.0f; 
mA[17047] = 0.0f; 
mA[17048] = 0.0f; 
mA[17049] = 0.0f; 
mA[17050] = 0.0f; 
mA[17051] = 0.0f; 
mA[17052] = 0.0f; 
mA[17053] = 0.0f; 
mA[17054] = 0.0f; 
mA[17055] = 0.0f; 
mA[17056] = 0.0f; 
mA[17057] = 0.0f; 
mA[17058] = 0.0f; 
mA[17059] = 0.0f; 
mA[17060] = 0.0f; 
mA[17061] = 0.0f; 
mA[17062] = 0.0f; 
mA[17063] = 0.0f; 
mA[17064] = 0.0f; 
mA[17065] = 0.0f; 
mA[17066] = 0.0f; 
mA[17067] = 0.0f; 
mA[17068] = 0.0f; 
mA[17069] = 0.0f; 
mA[17070] = 0.0f; 
mA[17071] = 0.0f; 
mA[17072] = 0.0f; 
mA[17073] = 0.0f; 
mA[17074] = 0.0f; 
mA[17075] = 0.0f; 
mA[17076] = 0.0f; 
mA[17077] = 0.0f; 
mA[17078] = 0.0f; 
mA[17079] = 0.0f; 
mA[17080] = 0.0f; 
mA[17081] = 0.0f; 
mA[17082] = 0.0f; 
mA[17083] = 0.0f; 
mA[17084] = 0.0f; 
mA[17085] = 0.0f; 
mA[17086] = 0.0f; 
mA[17087] = 0.0f; 
mA[17088] =  v_v15_ppp_fw ; 
mA[17089] = 0.0f; 
mA[17090] = 0.0f; 
mA[17091] = 0.0f; 
mA[17092] = 0.0f; 
mA[17093] = 0.0f; 
mA[17094] = 0.0f; 
mA[17095] = 0.0f; 
mA[17096] = 0.0f; 
mA[17097] = 0.0f; 
mA[17098] = 0.0f; 
mA[17099] = 0.0f; 
mA[17100] = ( (  -1.0f  * v_v15_ppp_bw   )  +(  -1.0f  * v_v17_ppp_bw   )   ) ; 
mA[17101] = 0.0f; 
mA[17102] = 0.0f; 
mA[17103] = 0.0f; 
mA[17104] = 0.0f; 
mA[17105] = 0.0f; 
mA[17106] = 0.0f; 
mA[17107] = 0.0f; 
mA[17108] = 0.0f; 
mA[17109] = 0.0f; 
mA[17110] = 0.0f; 
mA[17111] = 0.0f; 
mA[17112] = 0.0f; 
mA[17113] = 0.0f; 
mA[17114] = 0.0f; 
mA[17115] = 0.0f; 
mA[17116] = 0.0f; 
mA[17117] = 0.0f; 
mA[17118] = 0.0f; 
mA[17119] = 0.0f; 
mA[17120] = 0.0f; 
mA[17121] = 0.0f; 
mA[17122] = 0.0f; 
mA[17123] = 0.0f; 
mA[17124] = 0.0f; 
mA[17125] = 0.0f; 
mA[17126] = 0.0f; 
mA[17127] = 0.0f; 
mA[17128] = 0.0f; 
mA[17129] = 0.0f; 
mA[17130] = 0.0f; 
mA[17131] = 0.0f; 
mA[17132] = 0.0f; 
mA[17133] = 0.0f; 
mA[17134] = 0.0f; 
mA[17135] = 0.0f; 
mA[17136] = 0.0f; 
mA[17137] = 0.0f; 
mA[17138] = 0.0f; 
mA[17139] = 0.0f; 
mA[17140] = 0.0f; 
mA[17141] = 0.0f; 
mA[17142] = 0.0f; 
mA[17143] = 0.0f; 
mA[17144] = 0.0f; 
mA[17145] = 0.0f; 
mA[17146] = 0.0f; 
mA[17147] = 0.0f; 
mA[17148] = 0.0f; 
mA[17149] = 0.0f; 
mA[17150] = 0.0f; 
mA[17151] = 0.0f; 
mA[17152] = 0.0f; 
mA[17153] = 0.0f; 
mA[17154] = 0.0f; 
mA[17155] =  v_v47_aa_fw ; 
mA[17156] = 0.0f; 
mA[17157] = 0.0f; 
mA[17158] = 0.0f; 
mA[17159] = 0.0f; 
mA[17160] = 0.0f; 
mA[17161] = 0.0f; 
mA[17162] = 0.0f; 
mA[17163] = 0.0f; 
mA[17164] = 0.0f; 
mA[17165] = 0.0f; 
mA[17166] = 0.0f; 
mA[17167] = 0.0f; 
mA[17168] = 0.0f; 
mA[17169] = 0.0f; 
mA[17170] = 0.0f; 
mA[17171] = 0.0f; 
mA[17172] = 0.0f; 
mA[17173] = 0.0f; 
mA[17174] = 0.0f; 
mA[17175] = 0.0f; 
mA[17176] = 0.0f; 
mA[17177] = 0.0f; 
mA[17178] = 0.0f; 
mA[17179] = 0.0f; 
mA[17180] = 0.0f; 
mA[17181] = 0.0f; 
mA[17182] = 0.0f; 
mA[17183] = 0.0f; 
mA[17184] = 0.0f; 
mA[17185] = 0.0f; 
mA[17186] = 0.0f; 
mA[17187] = 0.0f; 
mA[17188] = 0.0f; 
mA[17189] = 0.0f; 
mA[17190] = 0.0f; 
mA[17191] = 0.0f; 
mA[17192] = 0.0f; 
mA[17193] = 0.0f; 
mA[17194] = 0.0f; 
mA[17195] = 0.0f; 
mA[17196] = 0.0f; 
mA[17197] = 0.0f; 
mA[17198] = 0.0f; 
mA[17199] = 0.0f; 
mA[17200] =  v_v44_aa_fw ; 
mA[17201] = 0.0f; 
mA[17202] = 0.0f; 
mA[17203] = 0.0f; 
mA[17204] = 0.0f; 
mA[17205] = 0.0f; 
mA[17206] = 0.0f; 
mA[17207] = 0.0f; 
mA[17208] = 0.0f; 
mA[17209] = 0.0f; 
mA[17210] = 0.0f; 
mA[17211] = 0.0f; 
mA[17212] = 0.0f; 
mA[17213] = 0.0f; 
mA[17214] = 0.0f; 
mA[17215] = 0.0f; 
mA[17216] = 0.0f; 
mA[17217] = 0.0f; 
mA[17218] = 0.0f; 
mA[17219] = 0.0f; 
mA[17220] = 0.0f; 
mA[17221] = 0.0f; 
mA[17222] = 0.0f; 
mA[17223] = 0.0f; 
mA[17224] = 0.0f; 
mA[17225] = 0.0f; 
mA[17226] = 0.0f; 
mA[17227] = 0.0f; 
mA[17228] = 0.0f; 
mA[17229] = 0.0f; 
mA[17230] = 0.0f; 
mA[17231] = 0.0f; 
mA[17232] = 0.0f; 
mA[17233] = 0.0f; 
mA[17234] = 0.0f; 
mA[17235] = 0.0f; 
mA[17236] = 0.0f; 
mA[17237] = 0.0f; 
mA[17238] = 0.0f; 
mA[17239] = 0.0f; 
mA[17240] = 0.0f; 
mA[17241] = 0.0f; 
mA[17242] = 0.0f; 
mA[17243] = 0.0f; 
mA[17244] = 0.0f; 
mA[17245] = 0.0f; 
mA[17246] = 0.0f; 
mA[17247] = 0.0f; 
mA[17248] = 0.0f; 
mA[17249] = 0.0f; 
mA[17250] = ( (  -1.0f  * v_v44_aa_bw   )  +(  -1.0f  * v_v43_aa_fw   )   ) ; 
mA[17251] = 0.0f; 
mA[17252] = 0.0f; 
mA[17253] = 0.0f; 
mA[17254] = 0.0f; 
mA[17255] = 0.0f; 
mA[17256] = 0.0f; 
mA[17257] = 0.0f; 
mA[17258] = 0.0f; 
mA[17259] = 0.0f; 
mA[17260] = 0.0f; 
mA[17261] = 0.0f; 
mA[17262] = 0.0f; 
mA[17263] = 0.0f; 
mA[17264] = 0.0f; 
mA[17265] = 0.0f; 
mA[17266] = 0.0f; 
mA[17267] = 0.0f; 
mA[17268] = 0.0f; 
mA[17269] = 0.0f; 
mA[17270] = 0.0f; 
mA[17271] = 0.0f; 
mA[17272] = 0.0f; 
mA[17273] = 0.0f; 
mA[17274] = 0.0f; 
mA[17275] = 0.0f; 
mA[17276] = 0.0f; 
mA[17277] = 0.0f; 
mA[17278] = 0.0f; 
mA[17279] = 0.0f; 
mA[17280] = 0.0f; 
mA[17281] = 0.0f; 
mA[17282] = 0.0f; 
mA[17283] = 0.0f; 
mA[17284] = 0.0f; 
mA[17285] = 0.0f; 
mA[17286] = 0.0f; 
mA[17287] = 0.0f; 
mA[17288] = 0.0f; 
mA[17289] = 0.0f; 
mA[17290] = 0.0f; 
mA[17291] = 0.0f; 
mA[17292] = 0.0f; 
mA[17293] = 0.0f; 
mA[17294] = 0.0f; 
mA[17295] = 0.0f; 
mA[17296] = 0.0f; 
mA[17297] = 0.0f; 
mA[17298] = 0.0f; 
mA[17299] = 0.0f; 
mA[17300] = 0.0f; 
mA[17301] = 0.0f; 
mA[17302] = 0.0f; 
mA[17303] = 0.0f; 
mA[17304] = 0.0f; 
mA[17305] =  v_v47_aa_fw ; 
mA[17306] = 0.0f; 
mA[17307] = 0.0f; 
mA[17308] = 0.0f; 
mA[17309] = 0.0f; 
mA[17310] = 0.0f; 
mA[17311] = 0.0f; 
mA[17312] = 0.0f; 
mA[17313] = 0.0f; 
mA[17314] = 0.0f; 
mA[17315] = 0.0f; 
mA[17316] = 0.0f; 
mA[17317] = 0.0f; 
mA[17318] = 0.0f; 
mA[17319] = 0.0f; 
mA[17320] = 0.0f; 
mA[17321] = 0.0f; 
mA[17322] = 0.0f; 
mA[17323] = 0.0f; 
mA[17324] = 0.0f; 
mA[17325] = 0.0f; 
mA[17326] = 0.0f; 
mA[17327] = 0.0f; 
mA[17328] = 0.0f; 
mA[17329] = 0.0f; 
mA[17330] = 0.0f; 
mA[17331] = 0.0f; 
mA[17332] = 0.0f; 
mA[17333] = 0.0f; 
mA[17334] = 0.0f; 
mA[17335] = 0.0f; 
mA[17336] = 0.0f; 
mA[17337] = 0.0f; 
mA[17338] = 0.0f; 
mA[17339] = 0.0f; 
mA[17340] = 0.0f; 
mA[17341] = 0.0f; 
mA[17342] = 0.0f; 
mA[17343] = 0.0f; 
mA[17344] = 0.0f; 
mA[17345] = 0.0f; 
mA[17346] = 0.0f; 
mA[17347] = 0.0f; 
mA[17348] = 0.0f; 
mA[17349] = 0.0f; 
mA[17350] =  v_v44_aa_fw ; 
mA[17351] = 0.0f; 
mA[17352] = 0.0f; 
mA[17353] = 0.0f; 
mA[17354] = 0.0f; 
mA[17355] = 0.0f; 
mA[17356] = 0.0f; 
mA[17357] = 0.0f; 
mA[17358] = 0.0f; 
mA[17359] = 0.0f; 
mA[17360] = 0.0f; 
mA[17361] = 0.0f; 
mA[17362] = 0.0f; 
mA[17363] = 0.0f; 
mA[17364] = 0.0f; 
mA[17365] = 0.0f; 
mA[17366] = 0.0f; 
mA[17367] = 0.0f; 
mA[17368] = 0.0f; 
mA[17369] = 0.0f; 
mA[17370] = 0.0f; 
mA[17371] = 0.0f; 
mA[17372] = 0.0f; 
mA[17373] = 0.0f; 
mA[17374] = 0.0f; 
mA[17375] = 0.0f; 
mA[17376] = 0.0f; 
mA[17377] = 0.0f; 
mA[17378] = 0.0f; 
mA[17379] = 0.0f; 
mA[17380] = 0.0f; 
mA[17381] = 0.0f; 
mA[17382] = 0.0f; 
mA[17383] = 0.0f; 
mA[17384] = 0.0f; 
mA[17385] = 0.0f; 
mA[17386] = 0.0f; 
mA[17387] = 0.0f; 
mA[17388] = 0.0f; 
mA[17389] = 0.0f; 
mA[17390] = 0.0f; 
mA[17391] = 0.0f; 
mA[17392] = 0.0f; 
mA[17393] = 0.0f; 
mA[17394] = 0.0f; 
mA[17395] = 0.0f; 
mA[17396] = 0.0f; 
mA[17397] = 0.0f; 
mA[17398] = 0.0f; 
mA[17399] = 0.0f; 
mA[17400] = ( (  -1.0f  * v_v44_aa_bw   )  +(  -1.0f  * v_v43_aa_fw   )   ) ; 
mA[17401] = 0.0f; 
mA[17402] = 0.0f; 
mA[17403] = 0.0f; 
mA[17404] = 0.0f; 
mA[17405] = 0.0f; 
mA[17406] = 0.0f; 
mA[17407] = 0.0f; 
mA[17408] = 0.0f; 
mA[17409] = 0.0f; 
mA[17410] = 0.0f; 
mA[17411] = 0.0f; 
mA[17412] = 0.0f; 
mA[17413] = 0.0f; 
mA[17414] = 0.0f; 
mA[17415] = 0.0f; 
mA[17416] = 0.0f; 
mA[17417] = 0.0f; 
mA[17418] = 0.0f; 
mA[17419] = 0.0f; 
mA[17420] = 0.0f; 
mA[17421] = 0.0f; 
mA[17422] = 0.0f; 
mA[17423] = 0.0f; 
mA[17424] = 0.0f; 
mA[17425] = 0.0f; 
mA[17426] = 0.0f; 
mA[17427] = 0.0f; 
mA[17428] = 0.0f; 
mA[17429] = 0.0f; 
mA[17430] = 0.0f; 
mA[17431] = 0.0f; 
mA[17432] = 0.0f; 
mA[17433] = 0.0f; 
mA[17434] = 0.0f; 
mA[17435] = 0.0f; 
mA[17436] = 0.0f; 
mA[17437] = 0.0f; 
mA[17438] = 0.0f; 
mA[17439] = 0.0f; 
mA[17440] = 0.0f; 
mA[17441] = 0.0f; 
mA[17442] = 0.0f; 
mA[17443] = 0.0f; 
mA[17444] = 0.0f; 
mA[17445] = 0.0f; 
mA[17446] = 0.0f; 
mA[17447] = 0.0f; 
mA[17448] = 0.0f; 
mA[17449] = 0.0f; 
mA[17450] = 0.0f; 
mA[17451] = 0.0f; 
mA[17452] = 0.0f; 
mA[17453] = 0.0f; 
mA[17454] = 0.0f; 
mA[17455] =  v_v47_aa_fw ; 
mA[17456] = 0.0f; 
mA[17457] = 0.0f; 
mA[17458] = 0.0f; 
mA[17459] = 0.0f; 
mA[17460] = 0.0f; 
mA[17461] = 0.0f; 
mA[17462] = 0.0f; 
mA[17463] = 0.0f; 
mA[17464] = 0.0f; 
mA[17465] = 0.0f; 
mA[17466] = 0.0f; 
mA[17467] = 0.0f; 
mA[17468] = 0.0f; 
mA[17469] = 0.0f; 
mA[17470] = 0.0f; 
mA[17471] = 0.0f; 
mA[17472] = 0.0f; 
mA[17473] = 0.0f; 
mA[17474] = 0.0f; 
mA[17475] = 0.0f; 
mA[17476] = 0.0f; 
mA[17477] = 0.0f; 
mA[17478] = 0.0f; 
mA[17479] = 0.0f; 
mA[17480] = 0.0f; 
mA[17481] = 0.0f; 
mA[17482] = 0.0f; 
mA[17483] = 0.0f; 
mA[17484] = 0.0f; 
mA[17485] = 0.0f; 
mA[17486] = 0.0f; 
mA[17487] = 0.0f; 
mA[17488] = 0.0f; 
mA[17489] = 0.0f; 
mA[17490] = 0.0f; 
mA[17491] = 0.0f; 
mA[17492] = 0.0f; 
mA[17493] = 0.0f; 
mA[17494] = 0.0f; 
mA[17495] = 0.0f; 
mA[17496] = 0.0f; 
mA[17497] = 0.0f; 
mA[17498] = 0.0f; 
mA[17499] = 0.0f; 
mA[17500] = 0.0f; 
mA[17501] = 0.0f; 
mA[17502] = 0.0f; 
mA[17503] = 0.0f; 
mA[17504] = 0.0f; 
mA[17505] = 0.0f; 
mA[17506] = 0.0f; 
mA[17507] = 0.0f; 
mA[17508] = 0.0f; 
mA[17509] = 0.0f; 
mA[17510] = 0.0f; 
mA[17511] = 0.0f; 
mA[17512] = 0.0f; 
mA[17513] = 0.0f; 
mA[17514] = 0.0f; 
mA[17515] = 0.0f; 
mA[17516] =  v_v44_aa_fw ; 
mA[17517] = 0.0f; 
mA[17518] = 0.0f; 
mA[17519] = 0.0f; 
mA[17520] = 0.0f; 
mA[17521] = 0.0f; 
mA[17522] = 0.0f; 
mA[17523] = 0.0f; 
mA[17524] = 0.0f; 
mA[17525] = 0.0f; 
mA[17526] = 0.0f; 
mA[17527] = 0.0f; 
mA[17528] = 0.0f; 
mA[17529] = 0.0f; 
mA[17530] = 0.0f; 
mA[17531] = 0.0f; 
mA[17532] = 0.0f; 
mA[17533] = 0.0f; 
mA[17534] = 0.0f; 
mA[17535] = 0.0f; 
mA[17536] = 0.0f; 
mA[17537] = 0.0f; 
mA[17538] = 0.0f; 
mA[17539] = 0.0f; 
mA[17540] = 0.0f; 
mA[17541] = 0.0f; 
mA[17542] = 0.0f; 
mA[17543] = 0.0f; 
mA[17544] = 0.0f; 
mA[17545] = 0.0f; 
mA[17546] = 0.0f; 
mA[17547] = 0.0f; 
mA[17548] = 0.0f; 
mA[17549] = 0.0f; 
mA[17550] = ( (  -1.0f  * v_v44_aa_bw   )  +(  -1.0f  * v_v43_aa_fw   )   ) ; 
mA[17551] = 0.0f; 
mA[17552] = 0.0f; 
mA[17553] = 0.0f; 
mA[17554] = 0.0f; 
mA[17555] = 0.0f; 
mA[17556] = 0.0f; 
mA[17557] = 0.0f; 
mA[17558] = 0.0f; 
mA[17559] = 0.0f; 
mA[17560] = 0.0f; 
mA[17561] = 0.0f; 
mA[17562] = 0.0f; 
mA[17563] = 0.0f; 
mA[17564] = 0.0f; 
mA[17565] = 0.0f; 
mA[17566] = 0.0f; 
mA[17567] = 0.0f; 
mA[17568] = 0.0f; 
mA[17569] = 0.0f; 
mA[17570] = 0.0f; 
mA[17571] = 0.0f; 
mA[17572] = 0.0f; 
mA[17573] = 0.0f; 
mA[17574] = 0.0f; 
mA[17575] = 0.0f; 
mA[17576] = 0.0f; 
mA[17577] = 0.0f; 
mA[17578] = 0.0f; 
mA[17579] = 0.0f; 
mA[17580] = 0.0f; 
mA[17581] = 0.0f; 
mA[17582] = 0.0f; 
mA[17583] = 0.0f; 
mA[17584] = 0.0f; 
mA[17585] = 0.0f; 
mA[17586] = 0.0f; 
mA[17587] = 0.0f; 
mA[17588] = 0.0f; 
mA[17589] = 0.0f; 
mA[17590] = 0.0f; 
mA[17591] = 0.0f; 
mA[17592] = 0.0f; 
mA[17593] = 0.0f; 
mA[17594] = 0.0f; 
mA[17595] = 0.0f; 
mA[17596] = 0.0f; 
mA[17597] = 0.0f; 
mA[17598] = 0.0f; 
mA[17599] = 0.0f; 
mA[17600] = 0.0f; 
mA[17601] = 0.0f; 
mA[17602] = 0.0f; 
mA[17603] = 0.0f; 
mA[17604] = 0.0f; 
mA[17605] = 0.0f; 
mA[17606] = 0.0f; 
mA[17607] = 0.0f; 
mA[17608] = 0.0f; 
mA[17609] = 0.0f; 
mA[17610] = 0.0f; 
mA[17611] = 0.0f; 
mA[17612] = 0.0f; 
mA[17613] = 0.0f; 
mA[17614] = 0.0f; 
mA[17615] = 0.0f; 
mA[17616] = 0.0f; 
mA[17617] = 0.0f; 
mA[17618] = 0.0f; 
mA[17619] = 0.0f; 
mA[17620] = 0.0f; 
mA[17621] = 0.0f; 
mA[17622] = 0.0f; 
mA[17623] = 0.0f; 
mA[17624] =  v_v26_tca_fw_a ; 
mA[17625] = 0.0f; 
mA[17626] = 0.0f; 
mA[17627] =  v_v26_tca_fw_b ; 
mA[17628] = 0.0f; 
mA[17629] = 0.0f; 
mA[17630] = 0.0f; 
mA[17631] = 0.0f; 
mA[17632] = 0.0f; 
mA[17633] = 0.0f; 
mA[17634] = 0.0f; 
mA[17635] = 0.0f; 
mA[17636] = 0.0f; 
mA[17637] = 0.0f; 
mA[17638] = 0.0f; 
mA[17639] = 0.0f; 
mA[17640] = 0.0f; 
mA[17641] = 0.0f; 
mA[17642] = 0.0f; 
mA[17643] = 0.0f; 
mA[17644] = 0.0f; 
mA[17645] = 0.0f; 
mA[17646] = 0.0f; 
mA[17647] = 0.0f; 
mA[17648] = 0.0f; 
mA[17649] = 0.0f; 
mA[17650] = 0.0f; 
mA[17651] = 0.0f; 
mA[17652] = 0.0f; 
mA[17653] = 0.0f; 
mA[17654] = 0.0f; 
mA[17655] = 0.0f; 
mA[17656] = 0.0f; 
mA[17657] = 0.0f; 
mA[17658] = 0.0f; 
mA[17659] = 0.0f; 
mA[17660] = 0.0f; 
mA[17661] = 0.0f; 
mA[17662] = 0.0f; 
mA[17663] = 0.0f; 
mA[17664] = 0.0f; 
mA[17665] = 0.0f; 
mA[17666] = 0.0f; 
mA[17667] = 0.0f; 
mA[17668] = 0.0f; 
mA[17669] = 0.0f; 
mA[17670] = 0.0f; 
mA[17671] = 0.0f; 
mA[17672] = 0.0f; 
mA[17673] = 0.0f; 
mA[17674] = 0.0f; 
mA[17675] = 0.0f; 
mA[17676] = 0.0f; 
mA[17677] = 0.0f; 
mA[17678] = 0.0f; 
mA[17679] = 0.0f; 
mA[17680] = 0.0f; 
mA[17681] = 0.0f; 
mA[17682] = 0.0f; 
mA[17683] = 0.0f; 
mA[17684] = 0.0f; 
mA[17685] = 0.0f; 
mA[17686] = 0.0f; 
mA[17687] = 0.0f; 
mA[17688] = 0.0f; 
mA[17689] = 0.0f; 
mA[17690] = 0.0f; 
mA[17691] = 0.0f; 
mA[17692] = 0.0f; 
mA[17693] = 0.0f; 
mA[17694] = 0.0f; 
mA[17695] = 0.0f; 
mA[17696] = 0.0f; 
mA[17697] = 0.0f; 
mA[17698] = 0.0f; 
mA[17699] = 0.0f; 
mA[17700] = ( (  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v29_glyox_fw_a   )  +(  -1.0f  * v_v25_tca_fw_b   )  +(  -1.0f  * v_v25_tca_fw_a   )  +(  -1.0f  * v_v26_tca_bw_a   )  +(  -1.0f  * v_v26_tca_bw_b   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v51_aa_fw_b   )  +(  -1.0f  * v_v51_aa_fw_a   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v29_glyox_fw_b   )  +(  -1.0f  * v_v48_aa_fw_c   )   ) ; 
mA[17701] = 0.0f; 
mA[17702] = 0.0f; 
mA[17703] = 0.0f; 
mA[17704] =  v_v25_tca_bw_a ; 
mA[17705] = 0.0f; 
mA[17706] = 0.0f; 
mA[17707] =  v_v25_tca_bw_b ; 
mA[17708] = 0.0f; 
mA[17709] = 0.0f; 
mA[17710] = 0.0f; 
mA[17711] = 0.0f; 
mA[17712] = 0.0f; 
mA[17713] = 0.0f; 
mA[17714] = 0.0f; 
mA[17715] = 0.0f; 
mA[17716] = 0.0f; 
mA[17717] = 0.0f; 
mA[17718] = 0.0f; 
mA[17719] = 0.0f; 
mA[17720] = 0.0f; 
mA[17721] = 0.0f; 
mA[17722] = 0.0f; 
mA[17723] = 0.0f; 
mA[17724] = 0.0f; 
mA[17725] = 0.0f; 
mA[17726] = 0.0f; 
mA[17727] = 0.0f; 
mA[17728] = 0.0f; 
mA[17729] = 0.0f; 
mA[17730] = 0.0f; 
mA[17731] = 0.0f; 
mA[17732] = 0.0f; 
mA[17733] = 0.0f; 
mA[17734] = 0.0f; 
mA[17735] = 0.0f; 
mA[17736] = 0.0f; 
mA[17737] = 0.0f; 
mA[17738] = 0.0f; 
mA[17739] = 0.0f; 
mA[17740] = 0.0f; 
mA[17741] = 0.0f; 
mA[17742] = 0.0f; 
mA[17743] = 0.0f; 
mA[17744] = 0.0f; 
mA[17745] = 0.0f; 
mA[17746] = 0.0f; 
mA[17747] = 0.0f; 
mA[17748] = 0.0f; 
mA[17749] = 0.0f; 
mA[17750] = 0.0f; 
mA[17751] = 0.0f; 
mA[17752] = 0.0f; 
mA[17753] = 0.0f; 
mA[17754] = 0.0f; 
mA[17755] = 0.0f; 
mA[17756] = 0.0f; 
mA[17757] = 0.0f; 
mA[17758] = 0.0f; 
mA[17759] = 0.0f; 
mA[17760] = 0.0f; 
mA[17761] = 0.0f; 
mA[17762] = 0.0f; 
mA[17763] = 0.0f; 
mA[17764] = 0.0f; 
mA[17765] = 0.0f; 
mA[17766] = 0.0f; 
mA[17767] = 0.0f; 
mA[17768] = 0.0f; 
mA[17769] = 0.0f; 
mA[17770] = 0.0f; 
mA[17771] = 0.0f; 
mA[17772] = 0.0f; 
mA[17773] = 0.0f; 
mA[17774] =  v_v26_tca_fw_a ; 
mA[17775] =  v_v26_tca_fw_b ; 
mA[17776] = 0.0f; 
mA[17777] = 0.0f; 
mA[17778] = 0.0f; 
mA[17779] = 0.0f; 
mA[17780] = 0.0f; 
mA[17781] = 0.0f; 
mA[17782] = 0.0f; 
mA[17783] = 0.0f; 
mA[17784] = 0.0f; 
mA[17785] = 0.0f; 
mA[17786] = 0.0f; 
mA[17787] = 0.0f; 
mA[17788] = 0.0f; 
mA[17789] = 0.0f; 
mA[17790] = 0.0f; 
mA[17791] = 0.0f; 
mA[17792] = 0.0f; 
mA[17793] = 0.0f; 
mA[17794] = 0.0f; 
mA[17795] = 0.0f; 
mA[17796] = 0.0f; 
mA[17797] = 0.0f; 
mA[17798] = 0.0f; 
mA[17799] = 0.0f; 
mA[17800] = 0.0f; 
mA[17801] = 0.0f; 
mA[17802] = 0.0f; 
mA[17803] = 0.0f; 
mA[17804] = 0.0f; 
mA[17805] = 0.0f; 
mA[17806] = 0.0f; 
mA[17807] = 0.0f; 
mA[17808] = 0.0f; 
mA[17809] = 0.0f; 
mA[17810] = 0.0f; 
mA[17811] = 0.0f; 
mA[17812] = 0.0f; 
mA[17813] = 0.0f; 
mA[17814] = 0.0f; 
mA[17815] = 0.0f; 
mA[17816] = 0.0f; 
mA[17817] = 0.0f; 
mA[17818] = 0.0f; 
mA[17819] = 0.0f; 
mA[17820] = 0.0f; 
mA[17821] = 0.0f; 
mA[17822] = 0.0f; 
mA[17823] = 0.0f; 
mA[17824] = 0.0f; 
mA[17825] = 0.0f; 
mA[17826] = 0.0f; 
mA[17827] = 0.0f; 
mA[17828] = 0.0f; 
mA[17829] = 0.0f; 
mA[17830] = 0.0f; 
mA[17831] = 0.0f; 
mA[17832] = 0.0f; 
mA[17833] = 0.0f; 
mA[17834] = 0.0f; 
mA[17835] = 0.0f; 
mA[17836] = 0.0f; 
mA[17837] = 0.0f; 
mA[17838] = 0.0f; 
mA[17839] = 0.0f; 
mA[17840] = 0.0f; 
mA[17841] = 0.0f; 
mA[17842] = 0.0f; 
mA[17843] = 0.0f; 
mA[17844] = 0.0f; 
mA[17845] = 0.0f; 
mA[17846] = 0.0f; 
mA[17847] = 0.0f; 
mA[17848] = 0.0f; 
mA[17849] = 0.0f; 
mA[17850] = ( (  -1.0f  * v_v29_glyox_fw_b   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v25_tca_fw_a   )  +(  -1.0f  * v_v25_tca_fw_b   )  +(  -1.0f  * v_v51_aa_fw_b   )  +(  -1.0f  * v_v29_glyox_fw_a   )  +(  -1.0f  * v_v26_tca_bw_b   )  +(  -1.0f  * v_v26_tca_bw_a   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v51_aa_fw_a   )  +(  -1.0f  * v_v48_aa_fw_a   )   ) ; 
mA[17851] = 0.0f; 
mA[17852] = 0.0f; 
mA[17853] = 0.0f; 
mA[17854] =  v_v25_tca_bw_a ; 
mA[17855] =  v_v25_tca_bw_b ; 
mA[17856] = 0.0f; 
mA[17857] = 0.0f; 
mA[17858] = 0.0f; 
mA[17859] = 0.0f; 
mA[17860] = 0.0f; 
mA[17861] = 0.0f; 
mA[17862] = 0.0f; 
mA[17863] = 0.0f; 
mA[17864] = 0.0f; 
mA[17865] = 0.0f; 
mA[17866] = 0.0f; 
mA[17867] = 0.0f; 
mA[17868] = 0.0f; 
mA[17869] = 0.0f; 
mA[17870] = 0.0f; 
mA[17871] = 0.0f; 
mA[17872] = 0.0f; 
mA[17873] = 0.0f; 
mA[17874] = 0.0f; 
mA[17875] = 0.0f; 
mA[17876] = 0.0f; 
mA[17877] = 0.0f; 
mA[17878] = 0.0f; 
mA[17879] = 0.0f; 
mA[17880] = 0.0f; 
mA[17881] = 0.0f; 
mA[17882] = 0.0f; 
mA[17883] = 0.0f; 
mA[17884] = 0.0f; 
mA[17885] = 0.0f; 
mA[17886] = 0.0f; 
mA[17887] = 0.0f; 
mA[17888] = 0.0f; 
mA[17889] = 0.0f; 
mA[17890] = 0.0f; 
mA[17891] = 0.0f; 
mA[17892] = 0.0f; 
mA[17893] = 0.0f; 
mA[17894] = 0.0f; 
mA[17895] = 0.0f; 
mA[17896] = 0.0f; 
mA[17897] = 0.0f; 
mA[17898] = 0.0f; 
mA[17899] = 0.0f; 
mA[17900] = 0.0f; 
mA[17901] = 0.0f; 
mA[17902] = 0.0f; 
mA[17903] = 0.0f; 
mA[17904] = 0.0f; 
mA[17905] = 0.0f; 
mA[17906] = 0.0f; 
mA[17907] = 0.0f; 
mA[17908] = 0.0f; 
mA[17909] = 0.0f; 
mA[17910] = 0.0f; 
mA[17911] = 0.0f; 
mA[17912] = 0.0f; 
mA[17913] = 0.0f; 
mA[17914] = 0.0f; 
mA[17915] = 0.0f; 
mA[17916] = 0.0f; 
mA[17917] = 0.0f; 
mA[17918] = 0.0f; 
mA[17919] = 0.0f; 
mA[17920] = 0.0f; 
mA[17921] = 0.0f; 
mA[17922] = 0.0f; 
mA[17923] =  v_v26_tca_fw_b ; 
mA[17924] =  v_v26_tca_fw_a ; 
mA[17925] = 0.0f; 
mA[17926] = 0.0f; 
mA[17927] = 0.0f; 
mA[17928] = 0.0f; 
mA[17929] = 0.0f; 
mA[17930] = 0.0f; 
mA[17931] = 0.0f; 
mA[17932] = 0.0f; 
mA[17933] = 0.0f; 
mA[17934] = 0.0f; 
mA[17935] = 0.0f; 
mA[17936] = 0.0f; 
mA[17937] = 0.0f; 
mA[17938] = 0.0f; 
mA[17939] = 0.0f; 
mA[17940] = 0.0f; 
mA[17941] = 0.0f; 
mA[17942] = 0.0f; 
mA[17943] = 0.0f; 
mA[17944] = 0.0f; 
mA[17945] = 0.0f; 
mA[17946] = 0.0f; 
mA[17947] = 0.0f; 
mA[17948] = 0.0f; 
mA[17949] = 0.0f; 
mA[17950] = 0.0f; 
mA[17951] = 0.0f; 
mA[17952] = 0.0f; 
mA[17953] = 0.0f; 
mA[17954] = 0.0f; 
mA[17955] = 0.0f; 
mA[17956] = 0.0f; 
mA[17957] = 0.0f; 
mA[17958] = 0.0f; 
mA[17959] = 0.0f; 
mA[17960] = 0.0f; 
mA[17961] = 0.0f; 
mA[17962] = 0.0f; 
mA[17963] = 0.0f; 
mA[17964] = 0.0f; 
mA[17965] = 0.0f; 
mA[17966] = 0.0f; 
mA[17967] = 0.0f; 
mA[17968] = 0.0f; 
mA[17969] = 0.0f; 
mA[17970] = 0.0f; 
mA[17971] = 0.0f; 
mA[17972] = 0.0f; 
mA[17973] = 0.0f; 
mA[17974] = 0.0f; 
mA[17975] = 0.0f; 
mA[17976] = 0.0f; 
mA[17977] = 0.0f; 
mA[17978] = 0.0f; 
mA[17979] = 0.0f; 
mA[17980] = 0.0f; 
mA[17981] = 0.0f; 
mA[17982] = 0.0f; 
mA[17983] = 0.0f; 
mA[17984] = 0.0f; 
mA[17985] = 0.0f; 
mA[17986] = 0.0f; 
mA[17987] = 0.0f; 
mA[17988] = 0.0f; 
mA[17989] = 0.0f; 
mA[17990] = 0.0f; 
mA[17991] = 0.0f; 
mA[17992] = 0.0f; 
mA[17993] = 0.0f; 
mA[17994] = 0.0f; 
mA[17995] = 0.0f; 
mA[17996] = 0.0f; 
mA[17997] = 0.0f; 
mA[17998] = 0.0f; 
mA[17999] = 0.0f; 
mA[18000] = ( (  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v51_aa_fw_a   )  +(  -1.0f  * v_v26_tca_bw_b   )  +(  -1.0f  * v_v29_glyox_fw_b   )  +(  -1.0f  * v_v25_tca_fw_a   )  +(  -1.0f  * v_v26_tca_bw_a   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v29_glyox_fw_a   )  +(  -1.0f  * v_v25_tca_fw_b   )  +(  -1.0f  * v_v51_aa_fw_b   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v48_aa_fw_b   )   ) ; 
mA[18001] = 0.0f; 
mA[18002] = 0.0f; 
mA[18003] =  v_v25_tca_bw_b ; 
mA[18004] =  v_v25_tca_bw_a ; 
mA[18005] = 0.0f; 
mA[18006] = 0.0f; 
mA[18007] = 0.0f; 
mA[18008] = 0.0f; 
mA[18009] = 0.0f; 
mA[18010] = 0.0f; 
mA[18011] = 0.0f; 
mA[18012] = 0.0f; 
mA[18013] = 0.0f; 
mA[18014] = 0.0f; 
mA[18015] = 0.0f; 
mA[18016] = 0.0f; 
mA[18017] = 0.0f; 
mA[18018] = 0.0f; 
mA[18019] = 0.0f; 
mA[18020] = 0.0f; 
mA[18021] = 0.0f; 
mA[18022] = 0.0f; 
mA[18023] = 0.0f; 
mA[18024] = 0.0f; 
mA[18025] = 0.0f; 
mA[18026] = 0.0f; 
mA[18027] = 0.0f; 
mA[18028] = 0.0f; 
mA[18029] = 0.0f; 
mA[18030] = 0.0f; 
mA[18031] = 0.0f; 
mA[18032] = 0.0f; 
mA[18033] = 0.0f; 
mA[18034] = 0.0f; 
mA[18035] = 0.0f; 
mA[18036] = 0.0f; 
mA[18037] = 0.0f; 
mA[18038] = 0.0f; 
mA[18039] = 0.0f; 
mA[18040] = 0.0f; 
mA[18041] = 0.0f; 
mA[18042] = 0.0f; 
mA[18043] = 0.0f; 
mA[18044] = 0.0f; 
mA[18045] = 0.0f; 
mA[18046] = 0.0f; 
mA[18047] = 0.0f; 
mA[18048] = 0.0f; 
mA[18049] = 0.0f; 
mA[18050] = 0.0f; 
mA[18051] = 0.0f; 
mA[18052] = 0.0f; 
mA[18053] = 0.0f; 
mA[18054] = 0.0f; 
mA[18055] = 0.0f; 
mA[18056] = 0.0f; 
mA[18057] = 0.0f; 
mA[18058] = 0.0f; 
mA[18059] = 0.0f; 
mA[18060] = 0.0f; 
mA[18061] = 0.0f; 
mA[18062] = 0.0f; 
mA[18063] = 0.0f; 
mA[18064] = 0.0f; 
mA[18065] = 0.0f; 
mA[18066] = 0.0f; 
mA[18067] = 0.0f; 
mA[18068] = 0.0f; 
mA[18069] = 0.0f; 
mA[18070] = 0.0f; 
mA[18071] =  v_v26_tca_fw_b ; 
mA[18072] = 0.0f; 
mA[18073] = 0.0f; 
mA[18074] =  v_v26_tca_fw_a ; 
mA[18075] = 0.0f; 
mA[18076] = 0.0f; 
mA[18077] = 0.0f; 
mA[18078] = 0.0f; 
mA[18079] = 0.0f; 
mA[18080] = 0.0f; 
mA[18081] = 0.0f; 
mA[18082] = 0.0f; 
mA[18083] = 0.0f; 
mA[18084] = 0.0f; 
mA[18085] = 0.0f; 
mA[18086] = 0.0f; 
mA[18087] = 0.0f; 
mA[18088] = 0.0f; 
mA[18089] = 0.0f; 
mA[18090] = 0.0f; 
mA[18091] = 0.0f; 
mA[18092] = 0.0f; 
mA[18093] = 0.0f; 
mA[18094] = 0.0f; 
mA[18095] = 0.0f; 
mA[18096] = 0.0f; 
mA[18097] = 0.0f; 
mA[18098] = 0.0f; 
mA[18099] = 0.0f; 
mA[18100] = 0.0f; 
mA[18101] = 0.0f; 
mA[18102] = 0.0f; 
mA[18103] = 0.0f; 
mA[18104] = 0.0f; 
mA[18105] = 0.0f; 
mA[18106] = 0.0f; 
mA[18107] = 0.0f; 
mA[18108] = 0.0f; 
mA[18109] = 0.0f; 
mA[18110] = 0.0f; 
mA[18111] = 0.0f; 
mA[18112] = 0.0f; 
mA[18113] = 0.0f; 
mA[18114] = 0.0f; 
mA[18115] = 0.0f; 
mA[18116] = 0.0f; 
mA[18117] = 0.0f; 
mA[18118] = 0.0f; 
mA[18119] = 0.0f; 
mA[18120] = 0.0f; 
mA[18121] = 0.0f; 
mA[18122] = 0.0f; 
mA[18123] = 0.0f; 
mA[18124] = 0.0f; 
mA[18125] = 0.0f; 
mA[18126] = 0.0f; 
mA[18127] = 0.0f; 
mA[18128] = 0.0f; 
mA[18129] = 0.0f; 
mA[18130] = 0.0f; 
mA[18131] = 0.0f; 
mA[18132] = 0.0f; 
mA[18133] = 0.0f; 
mA[18134] = 0.0f; 
mA[18135] = 0.0f; 
mA[18136] = 0.0f; 
mA[18137] = 0.0f; 
mA[18138] = 0.0f; 
mA[18139] = 0.0f; 
mA[18140] = 0.0f; 
mA[18141] = 0.0f; 
mA[18142] = 0.0f; 
mA[18143] = 0.0f; 
mA[18144] = 0.0f; 
mA[18145] = 0.0f; 
mA[18146] = 0.0f; 
mA[18147] = 0.0f; 
mA[18148] = 0.0f; 
mA[18149] = 0.0f; 
mA[18150] = ( (  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v29_glyox_fw_b   )  +(  -1.0f  * v_v51_aa_fw_b   )  +(  -1.0f  * v_v25_tca_fw_a   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v51_aa_fw_a   )  +(  -1.0f  * v_v25_tca_fw_b   )  +(  -1.0f  * v_v29_glyox_fw_a   )  +(  -1.0f  * v_v26_tca_bw_a   )  +(  -1.0f  * v_v26_tca_bw_b   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v48_aa_fw_d   )   ) ; 
mA[18151] =  v_v25_tca_bw_b ; 
mA[18152] = 0.0f; 
mA[18153] = 0.0f; 
mA[18154] =  v_v25_tca_bw_a ; 
mA[18155] = 0.0f; 
mA[18156] = 0.0f; 
mA[18157] = 0.0f; 
mA[18158] = 0.0f; 
mA[18159] = 0.0f; 
mA[18160] = 0.0f; 
mA[18161] = 0.0f; 
mA[18162] = 0.0f; 
mA[18163] = 0.0f; 
mA[18164] = 0.0f; 
mA[18165] = 0.0f; 
mA[18166] = 0.0f; 
mA[18167] = 0.0f; 
mA[18168] = 0.0f; 
mA[18169] = 0.0f; 
mA[18170] = 0.0f; 
mA[18171] = 0.0f; 
mA[18172] = 0.0f; 
mA[18173] = 0.0f; 
mA[18174] = 0.0f; 
mA[18175] = 0.0f; 
mA[18176] = 0.0f; 
mA[18177] = 0.0f; 
mA[18178] = 0.0f; 
mA[18179] = 0.0f; 
mA[18180] = 0.0f; 
mA[18181] = 0.0f; 
mA[18182] = 0.0f; 
mA[18183] = 0.0f; 
mA[18184] = 0.0f; 
mA[18185] = 0.0f; 
mA[18186] = 0.0f; 
mA[18187] = 0.0f; 
mA[18188] = 0.0f; 
mA[18189] = 0.0f; 
mA[18190] = 0.0f; 
mA[18191] = 0.0f; 
mA[18192] = 0.0f; 
mA[18193] = 0.0f; 
mA[18194] = 0.0f; 
mA[18195] = 0.0f; 
mA[18196] = 0.0f; 
mA[18197] = 0.0f; 
mA[18198] = 0.0f; 
mA[18199] = 0.0f; 
mA[18200] = 0.0f; 
mA[18201] = 0.0f; 
mA[18202] = 0.0f; 
mA[18203] = 0.0f; 
mA[18204] = 0.0f; 
mA[18205] = 0.0f; 
mA[18206] = 0.0f; 
mA[18207] = 0.0f; 
mA[18208] = 0.0f; 
mA[18209] = 0.0f; 
mA[18210] = 0.0f; 
mA[18211] = 0.0f; 
mA[18212] = 0.0f; 
mA[18213] = 0.0f; 
mA[18214] = 0.0f; 
mA[18215] = 0.0f; 
mA[18216] = 0.0f; 
mA[18217] = 0.0f; 
mA[18218] = 0.0f; 
mA[18219] = 0.0f; 
mA[18220] = 0.0f; 
mA[18221] = 0.0f; 
mA[18222] = 0.0f; 
mA[18223] = 0.0f; 
mA[18224] = 0.0f; 
mA[18225] = 0.0f; 
mA[18226] = 0.0f; 
mA[18227] = 0.0f; 
mA[18228] = 0.0f; 
mA[18229] = 0.0f; 
mA[18230] = 0.0f; 
mA[18231] = 0.0f; 
mA[18232] = 0.0f; 
mA[18233] = 0.0f; 
mA[18234] = 0.0f; 
mA[18235] = 0.0f; 
mA[18236] = 0.0f; 
mA[18237] = 0.0f; 
mA[18238] = 0.0f; 
mA[18239] = 0.0f; 
mA[18240] = 0.0f; 
mA[18241] = 0.0f; 
mA[18242] = 0.0f; 
mA[18243] = 0.0f; 
mA[18244] = 0.0f; 
mA[18245] = 0.0f; 
mA[18246] = 0.0f; 
mA[18247] = 0.0f; 
mA[18248] = 0.0f; 
mA[18249] = 0.0f; 
mA[18250] = 0.0f; 
mA[18251] = 0.0f; 
mA[18252] = 0.0f; 
mA[18253] = 0.0f; 
mA[18254] = 0.0f; 
mA[18255] = 0.0f; 
mA[18256] = 0.0f; 
mA[18257] = 0.0f; 
mA[18258] = 0.0f; 
mA[18259] = 0.0f; 
mA[18260] = 0.0f; 
mA[18261] = 0.0f; 
mA[18262] = 0.0f; 
mA[18263] = 0.0f; 
mA[18264] = 0.0f; 
mA[18265] = 0.0f; 
mA[18266] = 0.0f; 
mA[18267] = 0.0f; 
mA[18268] = 0.0f; 
mA[18269] = 0.0f; 
mA[18270] = 0.0f; 
mA[18271] = 0.0f; 
mA[18272] = 0.0f; 
mA[18273] = 0.0f; 
mA[18274] = 0.0f; 
mA[18275] = 0.0f; 
mA[18276] = 0.0f; 
mA[18277] = 0.0f; 
mA[18278] = 0.0f; 
mA[18279] = 0.0f; 
mA[18280] = 0.0f; 
mA[18281] = 0.0f; 
mA[18282] = 0.0f; 
mA[18283] = 0.0f; 
mA[18284] = 0.0f; 
mA[18285] = 0.0f; 
mA[18286] = 0.0f; 
mA[18287] = 0.0f; 
mA[18288] = 0.0f; 
mA[18289] = 0.0f; 
mA[18290] = 0.0f; 
mA[18291] = 0.0f; 
mA[18292] = 0.0f; 
mA[18293] = 0.0f; 
mA[18294] = 0.0f; 
mA[18295] = 0.0f; 
mA[18296] = (  v_v25_tca_fw_a  + v_v51_aa_fw_a  + v_v48_aa_fw_a  + v_v48_aa_fw_c   ) ; 
mA[18297] = 0.0f; 
mA[18298] = 0.0f; 
mA[18299] = (  v_v51_aa_fw_b  + v_v25_tca_fw_b  + v_v48_aa_fw_b  + v_v48_aa_fw_d   ) ; 
mA[18300] = ( (  -1.0f  * v_v25_tca_bw_b   )  +(  -1.0f  * v_v24_tca_fw   )  +(  -1.0f  * v_v25_tca_bw_a   )   ) ; 
mA[18301] = 0.0f; 
mA[18302] = 0.0f; 
mA[18303] = 0.0f; 
mA[18304] = 0.0f; 
mA[18305] = 0.0f; 
mA[18306] = 0.0f; 
mA[18307] = 0.0f; 
mA[18308] = 0.0f; 
mA[18309] = 0.0f; 
mA[18310] = 0.0f; 
mA[18311] = 0.0f; 
mA[18312] = 0.0f; 
mA[18313] = 0.0f; 
mA[18314] = 0.0f; 
mA[18315] = 0.0f; 
mA[18316] = 0.0f; 
mA[18317] = 0.0f; 
mA[18318] = 0.0f; 
mA[18319] = 0.0f; 
mA[18320] = 0.0f; 
mA[18321] = 0.0f; 
mA[18322] = 0.0f; 
mA[18323] = 0.0f; 
mA[18324] = 0.0f; 
mA[18325] = 0.0f; 
mA[18326] = 0.0f; 
mA[18327] = 0.0f; 
mA[18328] = 0.0f; 
mA[18329] = 0.0f; 
mA[18330] = 0.0f; 
mA[18331] = 0.0f; 
mA[18332] = 0.0f; 
mA[18333] = 0.0f; 
mA[18334] = 0.0f; 
mA[18335] = 0.0f; 
mA[18336] = 0.0f; 
mA[18337] = 0.0f; 
mA[18338] = 0.0f; 
mA[18339] = 0.0f; 
mA[18340] = 0.0f; 
mA[18341] = 0.0f; 
mA[18342] = 0.0f; 
mA[18343] = 0.0f; 
mA[18344] = 0.0f; 
mA[18345] = 0.0f; 
mA[18346] = 0.0f; 
mA[18347] = 0.0f; 
mA[18348] = 0.0f; 
mA[18349] = 0.0f; 
mA[18350] = 0.0f; 
mA[18351] = 0.0f; 
mA[18352] = 0.0f; 
mA[18353] = 0.0f; 
mA[18354] = 0.0f; 
mA[18355] = 0.0f; 
mA[18356] = 0.0f; 
mA[18357] = 0.0f; 
mA[18358] = 0.0f; 
mA[18359] = 0.0f; 
mA[18360] = 0.0f; 
mA[18361] = 0.0f; 
mA[18362] = 0.0f; 
mA[18363] = 0.0f; 
mA[18364] = 0.0f; 
mA[18365] = 0.0f; 
mA[18366] = 0.0f; 
mA[18367] = 0.0f; 
mA[18368] = 0.0f; 
mA[18369] = 0.0f; 
mA[18370] = 0.0f; 
mA[18371] = 0.0f; 
mA[18372] = 0.0f; 
mA[18373] = 0.0f; 
mA[18374] = 0.0f; 
mA[18375] = 0.0f; 
mA[18376] = 0.0f; 
mA[18377] = 0.0f; 
mA[18378] = 0.0f; 
mA[18379] = 0.0f; 
mA[18380] = 0.0f; 
mA[18381] = 0.0f; 
mA[18382] = 0.0f; 
mA[18383] = 0.0f; 
mA[18384] = 0.0f; 
mA[18385] = 0.0f; 
mA[18386] = 0.0f; 
mA[18387] = 0.0f; 
mA[18388] = 0.0f; 
mA[18389] = 0.0f; 
mA[18390] = 0.0f; 
mA[18391] = 0.0f; 
mA[18392] = 0.0f; 
mA[18393] = 0.0f; 
mA[18394] = 0.0f; 
mA[18395] = 0.0f; 
mA[18396] = 0.0f; 
mA[18397] = 0.0f; 
mA[18398] = 0.0f; 
mA[18399] = 0.0f; 
mA[18400] = 0.0f; 
mA[18401] = 0.0f; 
mA[18402] = 0.0f; 
mA[18403] = 0.0f; 
mA[18404] = 0.0f; 
mA[18405] = 0.0f; 
mA[18406] = 0.0f; 
mA[18407] = 0.0f; 
mA[18408] = 0.0f; 
mA[18409] = 0.0f; 
mA[18410] = 0.0f; 
mA[18411] = 0.0f; 
mA[18412] = 0.0f; 
mA[18413] = 0.0f; 
mA[18414] = 0.0f; 
mA[18415] = 0.0f; 
mA[18416] = 0.0f; 
mA[18417] = 0.0f; 
mA[18418] = 0.0f; 
mA[18419] = 0.0f; 
mA[18420] = 0.0f; 
mA[18421] = 0.0f; 
mA[18422] = 0.0f; 
mA[18423] = 0.0f; 
mA[18424] = 0.0f; 
mA[18425] = 0.0f; 
mA[18426] = 0.0f; 
mA[18427] = 0.0f; 
mA[18428] = 0.0f; 
mA[18429] = 0.0f; 
mA[18430] = 0.0f; 
mA[18431] = 0.0f; 
mA[18432] = 0.0f; 
mA[18433] = 0.0f; 
mA[18434] = 0.0f; 
mA[18435] = 0.0f; 
mA[18436] = 0.0f; 
mA[18437] = 0.0f; 
mA[18438] = 0.0f; 
mA[18439] = 0.0f; 
mA[18440] = 0.0f; 
mA[18441] = 0.0f; 
mA[18442] = 0.0f; 
mA[18443] = 0.0f; 
mA[18444] = 0.0f; 
mA[18445] = 0.0f; 
mA[18446] = (  v_v25_tca_fw_a  + v_v48_aa_fw_c  + v_v51_aa_fw_a  + v_v48_aa_fw_a   ) ; 
mA[18447] = (  v_v25_tca_fw_b  + v_v51_aa_fw_b  + v_v48_aa_fw_d  + v_v48_aa_fw_b   ) ; 
mA[18448] = 0.0f; 
mA[18449] = 0.0f; 
mA[18450] = ( (  -1.0f  * v_v24_tca_fw   )  +(  -1.0f  * v_v25_tca_bw_a   )  +(  -1.0f  * v_v25_tca_bw_b   )   ) ; 
mA[18451] = 0.0f; 
mA[18452] = 0.0f; 
mA[18453] = 0.0f; 
mA[18454] = 0.0f; 
mA[18455] = 0.0f; 
mA[18456] = 0.0f; 
mA[18457] = 0.0f; 
mA[18458] = 0.0f; 
mA[18459] = 0.0f; 
mA[18460] = 0.0f; 
mA[18461] = 0.0f; 
mA[18462] = 0.0f; 
mA[18463] = 0.0f; 
mA[18464] = 0.0f; 
mA[18465] = 0.0f; 
mA[18466] = 0.0f; 
mA[18467] = 0.0f; 
mA[18468] = 0.0f; 
mA[18469] = 0.0f; 
mA[18470] = 0.0f; 
mA[18471] = 0.0f; 
mA[18472] = 0.0f; 
mA[18473] = 0.0f; 
mA[18474] = 0.0f; 
mA[18475] = 0.0f; 
mA[18476] = 0.0f; 
mA[18477] = 0.0f; 
mA[18478] = 0.0f; 
mA[18479] = 0.0f; 
mA[18480] = 0.0f; 
mA[18481] = 0.0f; 
mA[18482] = 0.0f; 
mA[18483] = 0.0f; 
mA[18484] = 0.0f; 
mA[18485] = 0.0f; 
mA[18486] = 0.0f; 
mA[18487] = 0.0f; 
mA[18488] = 0.0f; 
mA[18489] = 0.0f; 
mA[18490] = 0.0f; 
mA[18491] = 0.0f; 
mA[18492] = 0.0f; 
mA[18493] = 0.0f; 
mA[18494] = 0.0f; 
mA[18495] = 0.0f; 
mA[18496] = 0.0f; 
mA[18497] = 0.0f; 
mA[18498] = 0.0f; 
mA[18499] = 0.0f; 
mA[18500] = 0.0f; 
mA[18501] = 0.0f; 
mA[18502] = 0.0f; 
mA[18503] = 0.0f; 
mA[18504] = 0.0f; 
mA[18505] = 0.0f; 
mA[18506] = 0.0f; 
mA[18507] = 0.0f; 
mA[18508] = 0.0f; 
mA[18509] = 0.0f; 
mA[18510] = 0.0f; 
mA[18511] = 0.0f; 
mA[18512] = 0.0f; 
mA[18513] = 0.0f; 
mA[18514] = 0.0f; 
mA[18515] = 0.0f; 
mA[18516] = 0.0f; 
mA[18517] = 0.0f; 
mA[18518] = 0.0f; 
mA[18519] = 0.0f; 
mA[18520] = 0.0f; 
mA[18521] = 0.0f; 
mA[18522] = 0.0f; 
mA[18523] = 0.0f; 
mA[18524] = 0.0f; 
mA[18525] = 0.0f; 
mA[18526] = 0.0f; 
mA[18527] = 0.0f; 
mA[18528] = 0.0f; 
mA[18529] = 0.0f; 
mA[18530] = 0.0f; 
mA[18531] = 0.0f; 
mA[18532] = 0.0f; 
mA[18533] = 0.0f; 
mA[18534] = 0.0f; 
mA[18535] = 0.0f; 
mA[18536] = 0.0f; 
mA[18537] = 0.0f; 
mA[18538] = 0.0f; 
mA[18539] = 0.0f; 
mA[18540] = 0.0f; 
mA[18541] = 0.0f; 
mA[18542] = 0.0f; 
mA[18543] = 0.0f; 
mA[18544] = 0.0f; 
mA[18545] = 0.0f; 
mA[18546] = 0.0f; 
mA[18547] = 0.0f; 
mA[18548] = 0.0f; 
mA[18549] = 0.0f; 
mA[18550] = 0.0f; 
mA[18551] = 0.0f; 
mA[18552] = 0.0f; 
mA[18553] = 0.0f; 
mA[18554] = 0.0f; 
mA[18555] = 0.0f; 
mA[18556] = 0.0f; 
mA[18557] = 0.0f; 
mA[18558] = 0.0f; 
mA[18559] = 0.0f; 
mA[18560] = 0.0f; 
mA[18561] = 0.0f; 
mA[18562] = 0.0f; 
mA[18563] = 0.0f; 
mA[18564] = 0.0f; 
mA[18565] = 0.0f; 
mA[18566] = 0.0f; 
mA[18567] = 0.0f; 
mA[18568] = 0.0f; 
mA[18569] = 0.0f; 
mA[18570] = 0.0f; 
mA[18571] = 0.0f; 
mA[18572] = 0.0f; 
mA[18573] = 0.0f; 
mA[18574] = 0.0f; 
mA[18575] = 0.0f; 
mA[18576] = 0.0f; 
mA[18577] = 0.0f; 
mA[18578] = 0.0f; 
mA[18579] = 0.0f; 
mA[18580] = 0.0f; 
mA[18581] = 0.0f; 
mA[18582] = 0.0f; 
mA[18583] = 0.0f; 
mA[18584] = 0.0f; 
mA[18585] = 0.0f; 
mA[18586] = 0.0f; 
mA[18587] = 0.0f; 
mA[18588] = 0.0f; 
mA[18589] = 0.0f; 
mA[18590] = 0.0f; 
mA[18591] = 0.0f; 
mA[18592] = 0.0f; 
mA[18593] = 0.0f; 
mA[18594] = 0.0f; 
mA[18595] = (  v_v48_aa_fw_d  + v_v25_tca_fw_b  + v_v51_aa_fw_b  + v_v48_aa_fw_b   ) ; 
mA[18596] = (  v_v48_aa_fw_a  + v_v51_aa_fw_a  + v_v25_tca_fw_a  + v_v48_aa_fw_c   ) ; 
mA[18597] = 0.0f; 
mA[18598] = 0.0f; 
mA[18599] = 0.0f; 
mA[18600] = ( (  -1.0f  * v_v24_tca_fw   )  +(  -1.0f  * v_v25_tca_bw_a   )  +(  -1.0f  * v_v25_tca_bw_b   )   ) ; 
mA[18601] = 0.0f; 
mA[18602] = 0.0f; 
mA[18603] = 0.0f; 
mA[18604] = 0.0f; 
mA[18605] = 0.0f; 
mA[18606] = 0.0f; 
mA[18607] = 0.0f; 
mA[18608] = 0.0f; 
mA[18609] = 0.0f; 
mA[18610] = 0.0f; 
mA[18611] = 0.0f; 
mA[18612] = 0.0f; 
mA[18613] = 0.0f; 
mA[18614] = 0.0f; 
mA[18615] = 0.0f; 
mA[18616] = 0.0f; 
mA[18617] = 0.0f; 
mA[18618] = 0.0f; 
mA[18619] = 0.0f; 
mA[18620] = 0.0f; 
mA[18621] = 0.0f; 
mA[18622] = 0.0f; 
mA[18623] = 0.0f; 
mA[18624] = 0.0f; 
mA[18625] = 0.0f; 
mA[18626] = 0.0f; 
mA[18627] = 0.0f; 
mA[18628] = 0.0f; 
mA[18629] = 0.0f; 
mA[18630] = 0.0f; 
mA[18631] = 0.0f; 
mA[18632] = 0.0f; 
mA[18633] = 0.0f; 
mA[18634] = 0.0f; 
mA[18635] = 0.0f; 
mA[18636] = 0.0f; 
mA[18637] = 0.0f; 
mA[18638] = 0.0f; 
mA[18639] = 0.0f; 
mA[18640] = 0.0f; 
mA[18641] = 0.0f; 
mA[18642] = 0.0f; 
mA[18643] = 0.0f; 
mA[18644] = 0.0f; 
mA[18645] = 0.0f; 
mA[18646] = 0.0f; 
mA[18647] = 0.0f; 
mA[18648] = 0.0f; 
mA[18649] = 0.0f; 
mA[18650] = 0.0f; 
mA[18651] = 0.0f; 
mA[18652] = 0.0f; 
mA[18653] = 0.0f; 
mA[18654] = 0.0f; 
mA[18655] = 0.0f; 
mA[18656] = 0.0f; 
mA[18657] = 0.0f; 
mA[18658] = 0.0f; 
mA[18659] = 0.0f; 
mA[18660] = 0.0f; 
mA[18661] = 0.0f; 
mA[18662] = 0.0f; 
mA[18663] = 0.0f; 
mA[18664] = 0.0f; 
mA[18665] = 0.0f; 
mA[18666] = 0.0f; 
mA[18667] = 0.0f; 
mA[18668] = 0.0f; 
mA[18669] = 0.0f; 
mA[18670] = 0.0f; 
mA[18671] = 0.0f; 
mA[18672] = 0.0f; 
mA[18673] = 0.0f; 
mA[18674] = 0.0f; 
mA[18675] = 0.0f; 
mA[18676] = 0.0f; 
mA[18677] = 0.0f; 
mA[18678] = 0.0f; 
mA[18679] = 0.0f; 
mA[18680] = 0.0f; 
mA[18681] = 0.0f; 
mA[18682] = 0.0f; 
mA[18683] = 0.0f; 
mA[18684] = 0.0f; 
mA[18685] = 0.0f; 
mA[18686] = 0.0f; 
mA[18687] = 0.0f; 
mA[18688] = 0.0f; 
mA[18689] = 0.0f; 
mA[18690] = 0.0f; 
mA[18691] = 0.0f; 
mA[18692] = 0.0f; 
mA[18693] = 0.0f; 
mA[18694] = 0.0f; 
mA[18695] = 0.0f; 
mA[18696] = 0.0f; 
mA[18697] = 0.0f; 
mA[18698] = 0.0f; 
mA[18699] = 0.0f; 
mA[18700] = 0.0f; 
mA[18701] = 0.0f; 
mA[18702] = 0.0f; 
mA[18703] = 0.0f; 
mA[18704] = 0.0f; 
mA[18705] = 0.0f; 
mA[18706] = 0.0f; 
mA[18707] = 0.0f; 
mA[18708] = 0.0f; 
mA[18709] = 0.0f; 
mA[18710] = 0.0f; 
mA[18711] = 0.0f; 
mA[18712] = 0.0f; 
mA[18713] = 0.0f; 
mA[18714] = 0.0f; 
mA[18715] = 0.0f; 
mA[18716] = 0.0f; 
mA[18717] = 0.0f; 
mA[18718] = 0.0f; 
mA[18719] = 0.0f; 
mA[18720] = 0.0f; 
mA[18721] = 0.0f; 
mA[18722] = 0.0f; 
mA[18723] = 0.0f; 
mA[18724] = 0.0f; 
mA[18725] = 0.0f; 
mA[18726] = 0.0f; 
mA[18727] = 0.0f; 
mA[18728] = 0.0f; 
mA[18729] = 0.0f; 
mA[18730] = 0.0f; 
mA[18731] = 0.0f; 
mA[18732] = 0.0f; 
mA[18733] = 0.0f; 
mA[18734] = 0.0f; 
mA[18735] = 0.0f; 
mA[18736] = 0.0f; 
mA[18737] = 0.0f; 
mA[18738] = 0.0f; 
mA[18739] = 0.0f; 
mA[18740] = 0.0f; 
mA[18741] = 0.0f; 
mA[18742] = 0.0f; 
mA[18743] = (  v_v48_aa_fw_b  + v_v25_tca_fw_b  + v_v48_aa_fw_d  + v_v51_aa_fw_b   ) ; 
mA[18744] = 0.0f; 
mA[18745] = 0.0f; 
mA[18746] = (  v_v48_aa_fw_a  + v_v25_tca_fw_a  + v_v48_aa_fw_c  + v_v51_aa_fw_a   ) ; 
mA[18747] = 0.0f; 
mA[18748] = 0.0f; 
mA[18749] = 0.0f; 
mA[18750] = ( (  -1.0f  * v_v25_tca_bw_b   )  +(  -1.0f  * v_v25_tca_bw_a   )  +(  -1.0f  * v_v24_tca_fw   )   ) ; 
mA[18751] = 0.0f; 
mA[18752] = 0.0f; 
mA[18753] = 0.0f; 
mA[18754] = 0.0f; 
mA[18755] = 0.0f; 
mA[18756] = 0.0f; 
mA[18757] = 0.0f; 
mA[18758] = 0.0f; 
mA[18759] = 0.0f; 
mA[18760] = 0.0f; 
mA[18761] = 0.0f; 
mA[18762] = 0.0f; 
mA[18763] = 0.0f; 
mA[18764] = 0.0f; 
mA[18765] = 0.0f; 
mA[18766] = 0.0f; 
mA[18767] = 0.0f; 
mA[18768] = 0.0f; 
mA[18769] = 0.0f; 
mA[18770] = 0.0f; 
mA[18771] = 0.0f; 
mA[18772] = 0.0f; 
mA[18773] = 0.0f; 
mA[18774] = 0.0f; 
mA[18775] = 0.0f; 
mA[18776] = 0.0f; 
mA[18777] = 0.0f; 
mA[18778] = 0.0f; 
mA[18779] = 0.0f; 
mA[18780] = 0.0f; 
mA[18781] = 0.0f; 
mA[18782] = 0.0f; 
mA[18783] = 0.0f; 
mA[18784] = 0.0f; 
mA[18785] = 0.0f; 
mA[18786] = 0.0f; 
mA[18787] = 0.0f; 
mA[18788] = 0.0f; 
mA[18789] = 0.0f; 
mA[18790] = 0.0f; 
mA[18791] = 0.0f; 
mA[18792] = 0.0f; 
mA[18793] = 0.0f; 
mA[18794] = 0.0f; 
mA[18795] = 0.0f; 
mA[18796] = 0.0f; 
mA[18797] = 0.0f; 
mA[18798] = 0.0f; 
mA[18799] = 0.0f; 
mA[18800] = 0.0f; 
mA[18801] = 0.0f; 
mA[18802] = 0.0f; 
mA[18803] = 0.0f; 
mA[18804] =  v_v16_ppp_bw ; 
mA[18805] = 0.0f; 
mA[18806] = 0.0f; 
mA[18807] = 0.0f; 
mA[18808] = 0.0f; 
mA[18809] = 0.0f; 
mA[18810] = 0.0f; 
mA[18811] = 0.0f; 
mA[18812] = 0.0f; 
mA[18813] = 0.0f; 
mA[18814] = 0.0f; 
mA[18815] = 0.0f; 
mA[18816] = 0.0f; 
mA[18817] = 0.0f; 
mA[18818] = 0.0f; 
mA[18819] = 0.0f; 
mA[18820] = 0.0f; 
mA[18821] = 0.0f; 
mA[18822] = 0.0f; 
mA[18823] = 0.0f; 
mA[18824] = 0.0f; 
mA[18825] = 0.0f; 
mA[18826] = 0.0f; 
mA[18827] = 0.0f; 
mA[18828] = 0.0f; 
mA[18829] = 0.0f; 
mA[18830] = 0.0f; 
mA[18831] = 0.0f; 
mA[18832] = 0.0f; 
mA[18833] = 0.0f; 
mA[18834] = 0.0f; 
mA[18835] = 0.0f; 
mA[18836] = 0.0f; 
mA[18837] = 0.0f; 
mA[18838] = 0.0f; 
mA[18839] = 0.0f; 
mA[18840] = 0.0f; 
mA[18841] = 0.0f; 
mA[18842] = 0.0f; 
mA[18843] = 0.0f; 
mA[18844] = 0.0f; 
mA[18845] = 0.0f; 
mA[18846] = 0.0f; 
mA[18847] = 0.0f; 
mA[18848] = 0.0f; 
mA[18849] = 0.0f; 
mA[18850] = 0.0f; 
mA[18851] = 0.0f; 
mA[18852] = 0.0f; 
mA[18853] = 0.0f; 
mA[18854] = 0.0f; 
mA[18855] = 0.0f; 
mA[18856] = 0.0f; 
mA[18857] = 0.0f; 
mA[18858] = 0.0f; 
mA[18859] = 0.0f; 
mA[18860] = 0.0f; 
mA[18861] = 0.0f; 
mA[18862] = 0.0f; 
mA[18863] = 0.0f; 
mA[18864] = 0.0f; 
mA[18865] = 0.0f; 
mA[18866] = 0.0f; 
mA[18867] = 0.0f; 
mA[18868] = 0.0f; 
mA[18869] = 0.0f; 
mA[18870] = 0.0f; 
mA[18871] = 0.0f; 
mA[18872] = 0.0f; 
mA[18873] = 0.0f; 
mA[18874] = 0.0f; 
mA[18875] = 0.0f; 
mA[18876] = 0.0f; 
mA[18877] = 0.0f; 
mA[18878] = 0.0f; 
mA[18879] = 0.0f; 
mA[18880] = 0.0f; 
mA[18881] = 0.0f; 
mA[18882] =  v_v17_ppp_bw ; 
mA[18883] = 0.0f; 
mA[18884] = 0.0f; 
mA[18885] = 0.0f; 
mA[18886] = 0.0f; 
mA[18887] = 0.0f; 
mA[18888] = 0.0f; 
mA[18889] = 0.0f; 
mA[18890] = 0.0f; 
mA[18891] = 0.0f; 
mA[18892] = 0.0f; 
mA[18893] = 0.0f; 
mA[18894] = 0.0f; 
mA[18895] = 0.0f; 
mA[18896] = 0.0f; 
mA[18897] = 0.0f; 
mA[18898] = 0.0f; 
mA[18899] = 0.0f; 
mA[18900] = ( (  -1.0f  * v_v16_ppp_fw   )  +(  -1.0f  * v_v17_ppp_fw   )   ) ; 
mA[18901] = 0.0f; 
mA[18902] = 0.0f; 
mA[18903] = 0.0f; 
mA[18904] = 0.0f; 
mA[18905] = 0.0f; 
mA[18906] = 0.0f; 
mA[18907] = 0.0f; 
mA[18908] = 0.0f; 
mA[18909] = 0.0f; 
mA[18910] = 0.0f; 
mA[18911] = 0.0f; 
mA[18912] = 0.0f; 
mA[18913] = 0.0f; 
mA[18914] = 0.0f; 
mA[18915] = 0.0f; 
mA[18916] = 0.0f; 
mA[18917] = 0.0f; 
mA[18918] = 0.0f; 
mA[18919] = 0.0f; 
mA[18920] = 0.0f; 
mA[18921] = 0.0f; 
mA[18922] = 0.0f; 
mA[18923] = 0.0f; 
mA[18924] = 0.0f; 
mA[18925] = 0.0f; 
mA[18926] = 0.0f; 
mA[18927] = 0.0f; 
mA[18928] = 0.0f; 
mA[18929] = 0.0f; 
mA[18930] = 0.0f; 
mA[18931] = 0.0f; 
mA[18932] = 0.0f; 
mA[18933] = 0.0f; 
mA[18934] = 0.0f; 
mA[18935] = 0.0f; 
mA[18936] = 0.0f; 
mA[18937] = 0.0f; 
mA[18938] = 0.0f; 
mA[18939] = 0.0f; 
mA[18940] = 0.0f; 
mA[18941] = 0.0f; 
mA[18942] = 0.0f; 
mA[18943] = 0.0f; 
mA[18944] = 0.0f; 
mA[18945] = 0.0f; 
mA[18946] = 0.0f; 
mA[18947] = 0.0f; 
mA[18948] = 0.0f; 
mA[18949] = 0.0f; 
mA[18950] = 0.0f; 
mA[18951] = 0.0f; 
mA[18952] = 0.0f; 
mA[18953] = 0.0f; 
mA[18954] =  v_v16_ppp_bw ; 
mA[18955] = 0.0f; 
mA[18956] = 0.0f; 
mA[18957] = 0.0f; 
mA[18958] = 0.0f; 
mA[18959] = 0.0f; 
mA[18960] = 0.0f; 
mA[18961] = 0.0f; 
mA[18962] = 0.0f; 
mA[18963] = 0.0f; 
mA[18964] = 0.0f; 
mA[18965] = 0.0f; 
mA[18966] = 0.0f; 
mA[18967] = 0.0f; 
mA[18968] = 0.0f; 
mA[18969] = 0.0f; 
mA[18970] = 0.0f; 
mA[18971] = 0.0f; 
mA[18972] = 0.0f; 
mA[18973] = 0.0f; 
mA[18974] = 0.0f; 
mA[18975] = 0.0f; 
mA[18976] = 0.0f; 
mA[18977] = 0.0f; 
mA[18978] = 0.0f; 
mA[18979] = 0.0f; 
mA[18980] = 0.0f; 
mA[18981] = 0.0f; 
mA[18982] = 0.0f; 
mA[18983] = 0.0f; 
mA[18984] = 0.0f; 
mA[18985] = 0.0f; 
mA[18986] = 0.0f; 
mA[18987] = 0.0f; 
mA[18988] = 0.0f; 
mA[18989] = 0.0f; 
mA[18990] = 0.0f; 
mA[18991] = 0.0f; 
mA[18992] = 0.0f; 
mA[18993] = 0.0f; 
mA[18994] = 0.0f; 
mA[18995] = 0.0f; 
mA[18996] = 0.0f; 
mA[18997] = 0.0f; 
mA[18998] = 0.0f; 
mA[18999] = 0.0f; 
mA[19000] = 0.0f; 
mA[19001] = 0.0f; 
mA[19002] = 0.0f; 
mA[19003] = 0.0f; 
mA[19004] = 0.0f; 
mA[19005] = 0.0f; 
mA[19006] = 0.0f; 
mA[19007] = 0.0f; 
mA[19008] = 0.0f; 
mA[19009] = 0.0f; 
mA[19010] = 0.0f; 
mA[19011] = 0.0f; 
mA[19012] = 0.0f; 
mA[19013] = 0.0f; 
mA[19014] = 0.0f; 
mA[19015] = 0.0f; 
mA[19016] = 0.0f; 
mA[19017] = 0.0f; 
mA[19018] = 0.0f; 
mA[19019] = 0.0f; 
mA[19020] = 0.0f; 
mA[19021] = 0.0f; 
mA[19022] = 0.0f; 
mA[19023] = 0.0f; 
mA[19024] = 0.0f; 
mA[19025] = 0.0f; 
mA[19026] = 0.0f; 
mA[19027] = 0.0f; 
mA[19028] = 0.0f; 
mA[19029] = 0.0f; 
mA[19030] = 0.0f; 
mA[19031] = 0.0f; 
mA[19032] =  v_v17_ppp_bw ; 
mA[19033] = 0.0f; 
mA[19034] = 0.0f; 
mA[19035] = 0.0f; 
mA[19036] = 0.0f; 
mA[19037] = 0.0f; 
mA[19038] = 0.0f; 
mA[19039] = 0.0f; 
mA[19040] = 0.0f; 
mA[19041] = 0.0f; 
mA[19042] = 0.0f; 
mA[19043] = 0.0f; 
mA[19044] = 0.0f; 
mA[19045] = 0.0f; 
mA[19046] = 0.0f; 
mA[19047] = 0.0f; 
mA[19048] = 0.0f; 
mA[19049] = 0.0f; 
mA[19050] = ( (  -1.0f  * v_v17_ppp_fw   )  +(  -1.0f  * v_v16_ppp_fw   )   ) ; 
mA[19051] = 0.0f; 
mA[19052] = 0.0f; 
mA[19053] = 0.0f; 
mA[19054] = 0.0f; 
mA[19055] = 0.0f; 
mA[19056] = 0.0f; 
mA[19057] = 0.0f; 
mA[19058] = 0.0f; 
mA[19059] = 0.0f; 
mA[19060] = 0.0f; 
mA[19061] = 0.0f; 
mA[19062] = 0.0f; 
mA[19063] = 0.0f; 
mA[19064] = 0.0f; 
mA[19065] = 0.0f; 
mA[19066] = 0.0f; 
mA[19067] = 0.0f; 
mA[19068] = 0.0f; 
mA[19069] = 0.0f; 
mA[19070] = 0.0f; 
mA[19071] = 0.0f; 
mA[19072] = 0.0f; 
mA[19073] = 0.0f; 
mA[19074] = 0.0f; 
mA[19075] = 0.0f; 
mA[19076] = 0.0f; 
mA[19077] = 0.0f; 
mA[19078] = 0.0f; 
mA[19079] = 0.0f; 
mA[19080] = 0.0f; 
mA[19081] = 0.0f; 
mA[19082] = 0.0f; 
mA[19083] = 0.0f; 
mA[19084] = 0.0f; 
mA[19085] = 0.0f; 
mA[19086] = 0.0f; 
mA[19087] = 0.0f; 
mA[19088] = 0.0f; 
mA[19089] = 0.0f; 
mA[19090] = 0.0f; 
mA[19091] = 0.0f; 
mA[19092] = 0.0f; 
mA[19093] = 0.0f; 
mA[19094] = 0.0f; 
mA[19095] = 0.0f; 
mA[19096] = 0.0f; 
mA[19097] = 0.0f; 
mA[19098] = 0.0f; 
mA[19099] = 0.0f; 
mA[19100] = 0.0f; 
mA[19101] = 0.0f; 
mA[19102] = 0.0f; 
mA[19103] = 0.0f; 
mA[19104] =  v_v16_ppp_bw ; 
mA[19105] = 0.0f; 
mA[19106] = 0.0f; 
mA[19107] = 0.0f; 
mA[19108] = 0.0f; 
mA[19109] = 0.0f; 
mA[19110] = 0.0f; 
mA[19111] = 0.0f; 
mA[19112] = 0.0f; 
mA[19113] = 0.0f; 
mA[19114] = 0.0f; 
mA[19115] = 0.0f; 
mA[19116] = 0.0f; 
mA[19117] = 0.0f; 
mA[19118] = 0.0f; 
mA[19119] = 0.0f; 
mA[19120] = 0.0f; 
mA[19121] = 0.0f; 
mA[19122] = 0.0f; 
mA[19123] = 0.0f; 
mA[19124] = 0.0f; 
mA[19125] = 0.0f; 
mA[19126] = 0.0f; 
mA[19127] = 0.0f; 
mA[19128] = 0.0f; 
mA[19129] = 0.0f; 
mA[19130] = 0.0f; 
mA[19131] = 0.0f; 
mA[19132] = 0.0f; 
mA[19133] = 0.0f; 
mA[19134] = 0.0f; 
mA[19135] = 0.0f; 
mA[19136] = 0.0f; 
mA[19137] = 0.0f; 
mA[19138] = 0.0f; 
mA[19139] = 0.0f; 
mA[19140] = 0.0f; 
mA[19141] = 0.0f; 
mA[19142] = 0.0f; 
mA[19143] = 0.0f; 
mA[19144] = 0.0f; 
mA[19145] = 0.0f; 
mA[19146] = 0.0f; 
mA[19147] = 0.0f; 
mA[19148] = 0.0f; 
mA[19149] = 0.0f; 
mA[19150] = 0.0f; 
mA[19151] = 0.0f; 
mA[19152] = 0.0f; 
mA[19153] = 0.0f; 
mA[19154] = 0.0f; 
mA[19155] = 0.0f; 
mA[19156] = 0.0f; 
mA[19157] = 0.0f; 
mA[19158] = 0.0f; 
mA[19159] = 0.0f; 
mA[19160] = 0.0f; 
mA[19161] = 0.0f; 
mA[19162] = 0.0f; 
mA[19163] = 0.0f; 
mA[19164] = 0.0f; 
mA[19165] = 0.0f; 
mA[19166] = 0.0f; 
mA[19167] = 0.0f; 
mA[19168] = 0.0f; 
mA[19169] = 0.0f; 
mA[19170] = 0.0f; 
mA[19171] = 0.0f; 
mA[19172] = 0.0f; 
mA[19173] = 0.0f; 
mA[19174] = 0.0f; 
mA[19175] = 0.0f; 
mA[19176] = 0.0f; 
mA[19177] = 0.0f; 
mA[19178] = 0.0f; 
mA[19179] = 0.0f; 
mA[19180] = 0.0f; 
mA[19181] = 0.0f; 
mA[19182] =  v_v17_ppp_bw ; 
mA[19183] = 0.0f; 
mA[19184] = 0.0f; 
mA[19185] = 0.0f; 
mA[19186] = 0.0f; 
mA[19187] = 0.0f; 
mA[19188] = 0.0f; 
mA[19189] = 0.0f; 
mA[19190] = 0.0f; 
mA[19191] = 0.0f; 
mA[19192] = 0.0f; 
mA[19193] = 0.0f; 
mA[19194] = 0.0f; 
mA[19195] = 0.0f; 
mA[19196] = 0.0f; 
mA[19197] = 0.0f; 
mA[19198] = 0.0f; 
mA[19199] = 0.0f; 
mA[19200] = ( (  -1.0f  * v_v17_ppp_fw   )  +(  -1.0f  * v_v16_ppp_fw   )   ) ; 
mA[19201] = 0.0f; 
mA[19202] = 0.0f; 
mA[19203] = 0.0f; 
mA[19204] = 0.0f; 
mA[19205] = 0.0f; 
mA[19206] = 0.0f; 
mA[19207] = 0.0f; 
mA[19208] = 0.0f; 
mA[19209] = 0.0f; 
mA[19210] = 0.0f; 
mA[19211] = 0.0f; 
mA[19212] = 0.0f; 
mA[19213] = 0.0f; 
mA[19214] = 0.0f; 
mA[19215] = 0.0f; 
mA[19216] = 0.0f; 
mA[19217] = 0.0f; 
mA[19218] = 0.0f; 
mA[19219] = 0.0f; 
mA[19220] = 0.0f; 
mA[19221] = 0.0f; 
mA[19222] = 0.0f; 
mA[19223] = 0.0f; 
mA[19224] = 0.0f; 
mA[19225] = 0.0f; 
mA[19226] = 0.0f; 
mA[19227] = 0.0f; 
mA[19228] = 0.0f; 
mA[19229] = 0.0f; 
mA[19230] = 0.0f; 
mA[19231] = 0.0f; 
mA[19232] = 0.0f; 
mA[19233] = 0.0f; 
mA[19234] = 0.0f; 
mA[19235] = 0.0f; 
mA[19236] = 0.0f; 
mA[19237] = 0.0f; 
mA[19238] = 0.0f; 
mA[19239] = 0.0f; 
mA[19240] = 0.0f; 
mA[19241] = 0.0f; 
mA[19242] = 0.0f; 
mA[19243] = 0.0f; 
mA[19244] = 0.0f; 
mA[19245] = 0.0f; 
mA[19246] = 0.0f; 
mA[19247] = 0.0f; 
mA[19248] = 0.0f; 
mA[19249] = 0.0f; 
mA[19250] = 0.0f; 
mA[19251] =  v_v14_ppp_bw ; 
mA[19252] = 0.0f; 
mA[19253] = 0.0f; 
mA[19254] = 0.0f; 
mA[19255] = 0.0f; 
mA[19256] = 0.0f; 
mA[19257] = 0.0f; 
mA[19258] = 0.0f; 
mA[19259] = 0.0f; 
mA[19260] = 0.0f; 
mA[19261] = 0.0f; 
mA[19262] = 0.0f; 
mA[19263] = 0.0f; 
mA[19264] = 0.0f; 
mA[19265] = 0.0f; 
mA[19266] = 0.0f; 
mA[19267] = 0.0f; 
mA[19268] = 0.0f; 
mA[19269] = 0.0f; 
mA[19270] = 0.0f; 
mA[19271] = 0.0f; 
mA[19272] = 0.0f; 
mA[19273] = 0.0f; 
mA[19274] = 0.0f; 
mA[19275] = 0.0f; 
mA[19276] = 0.0f; 
mA[19277] = 0.0f; 
mA[19278] = 0.0f; 
mA[19279] = 0.0f; 
mA[19280] = 0.0f; 
mA[19281] = 0.0f; 
mA[19282] = 0.0f; 
mA[19283] = 0.0f; 
mA[19284] = 0.0f; 
mA[19285] = 0.0f; 
mA[19286] = 0.0f; 
mA[19287] = 0.0f; 
mA[19288] = 0.0f; 
mA[19289] = 0.0f; 
mA[19290] = 0.0f; 
mA[19291] = 0.0f; 
mA[19292] = 0.0f; 
mA[19293] = 0.0f; 
mA[19294] = 0.0f; 
mA[19295] = 0.0f; 
mA[19296] = 0.0f; 
mA[19297] = 0.0f; 
mA[19298] = 0.0f; 
mA[19299] = 0.0f; 
mA[19300] = 0.0f; 
mA[19301] = 0.0f; 
mA[19302] = 0.0f; 
mA[19303] = 0.0f; 
mA[19304] = 0.0f; 
mA[19305] = 0.0f; 
mA[19306] = 0.0f; 
mA[19307] = 0.0f; 
mA[19308] = 0.0f; 
mA[19309] = 0.0f; 
mA[19310] = 0.0f; 
mA[19311] = 0.0f; 
mA[19312] = 0.0f; 
mA[19313] = 0.0f; 
mA[19314] = 0.0f; 
mA[19315] = 0.0f; 
mA[19316] = 0.0f; 
mA[19317] = 0.0f; 
mA[19318] = 0.0f; 
mA[19319] = 0.0f; 
mA[19320] = 0.0f; 
mA[19321] = 0.0f; 
mA[19322] = 0.0f; 
mA[19323] = 0.0f; 
mA[19324] = 0.0f; 
mA[19325] = 0.0f; 
mA[19326] = 0.0f; 
mA[19327] = 0.0f; 
mA[19328] = 0.0f; 
mA[19329] =  v_v15_ppp_bw ; 
mA[19330] = 0.0f; 
mA[19331] = 0.0f; 
mA[19332] = 0.0f; 
mA[19333] = 0.0f; 
mA[19334] = 0.0f; 
mA[19335] = 0.0f; 
mA[19336] = 0.0f; 
mA[19337] = 0.0f; 
mA[19338] = 0.0f; 
mA[19339] = 0.0f; 
mA[19340] = 0.0f; 
mA[19341] = 0.0f; 
mA[19342] = 0.0f; 
mA[19343] = 0.0f; 
mA[19344] = 0.0f; 
mA[19345] = 0.0f; 
mA[19346] = 0.0f; 
mA[19347] = 0.0f; 
mA[19348] = 0.0f; 
mA[19349] = 0.0f; 
mA[19350] = ( (  -1.0f  * v_v15_ppp_fw   )  +(  -1.0f  * v_v14_ppp_fw   )  +(  -1.0f  * v_v13_ppp_fw   )   ) ; 
mA[19351] = 0.0f; 
mA[19352] = 0.0f; 
mA[19353] = 0.0f; 
mA[19354] = 0.0f; 
mA[19355] = 0.0f; 
mA[19356] = 0.0f; 
mA[19357] = 0.0f; 
mA[19358] = 0.0f; 
mA[19359] =  v_v13_ppp_bw ; 
mA[19360] = 0.0f; 
mA[19361] = 0.0f; 
mA[19362] = 0.0f; 
mA[19363] = 0.0f; 
mA[19364] = 0.0f; 
mA[19365] = 0.0f; 
mA[19366] = 0.0f; 
mA[19367] = 0.0f; 
mA[19368] = 0.0f; 
mA[19369] = 0.0f; 
mA[19370] = 0.0f; 
mA[19371] = 0.0f; 
mA[19372] = 0.0f; 
mA[19373] = 0.0f; 
mA[19374] = 0.0f; 
mA[19375] = 0.0f; 
mA[19376] = 0.0f; 
mA[19377] = 0.0f; 
mA[19378] = 0.0f; 
mA[19379] = 0.0f; 
mA[19380] = 0.0f; 
mA[19381] = 0.0f; 
mA[19382] = 0.0f; 
mA[19383] = 0.0f; 
mA[19384] = 0.0f; 
mA[19385] = 0.0f; 
mA[19386] = 0.0f; 
mA[19387] = 0.0f; 
mA[19388] = 0.0f; 
mA[19389] = 0.0f; 
mA[19390] = 0.0f; 
mA[19391] = 0.0f; 
mA[19392] = 0.0f; 
mA[19393] = 0.0f; 
mA[19394] = 0.0f; 
mA[19395] = 0.0f; 
mA[19396] = 0.0f; 
mA[19397] = 0.0f; 
mA[19398] = 0.0f; 
mA[19399] = 0.0f; 
mA[19400] = 0.0f; 
mA[19401] =  v_v14_ppp_bw ; 
mA[19402] = 0.0f; 
mA[19403] = 0.0f; 
mA[19404] = 0.0f; 
mA[19405] = 0.0f; 
mA[19406] = 0.0f; 
mA[19407] = 0.0f; 
mA[19408] = 0.0f; 
mA[19409] = 0.0f; 
mA[19410] = 0.0f; 
mA[19411] = 0.0f; 
mA[19412] = 0.0f; 
mA[19413] = 0.0f; 
mA[19414] = 0.0f; 
mA[19415] = 0.0f; 
mA[19416] = 0.0f; 
mA[19417] = 0.0f; 
mA[19418] = 0.0f; 
mA[19419] = 0.0f; 
mA[19420] = 0.0f; 
mA[19421] = 0.0f; 
mA[19422] = 0.0f; 
mA[19423] = 0.0f; 
mA[19424] = 0.0f; 
mA[19425] = 0.0f; 
mA[19426] = 0.0f; 
mA[19427] = 0.0f; 
mA[19428] = 0.0f; 
mA[19429] = 0.0f; 
mA[19430] = 0.0f; 
mA[19431] = 0.0f; 
mA[19432] = 0.0f; 
mA[19433] = 0.0f; 
mA[19434] = 0.0f; 
mA[19435] = 0.0f; 
mA[19436] = 0.0f; 
mA[19437] = 0.0f; 
mA[19438] = 0.0f; 
mA[19439] = 0.0f; 
mA[19440] = 0.0f; 
mA[19441] = 0.0f; 
mA[19442] = 0.0f; 
mA[19443] = 0.0f; 
mA[19444] = 0.0f; 
mA[19445] = 0.0f; 
mA[19446] = 0.0f; 
mA[19447] = 0.0f; 
mA[19448] = 0.0f; 
mA[19449] = 0.0f; 
mA[19450] = 0.0f; 
mA[19451] = 0.0f; 
mA[19452] = 0.0f; 
mA[19453] = 0.0f; 
mA[19454] = 0.0f; 
mA[19455] = 0.0f; 
mA[19456] = 0.0f; 
mA[19457] = 0.0f; 
mA[19458] = 0.0f; 
mA[19459] = 0.0f; 
mA[19460] = 0.0f; 
mA[19461] = 0.0f; 
mA[19462] = 0.0f; 
mA[19463] = 0.0f; 
mA[19464] = 0.0f; 
mA[19465] = 0.0f; 
mA[19466] = 0.0f; 
mA[19467] = 0.0f; 
mA[19468] = 0.0f; 
mA[19469] = 0.0f; 
mA[19470] = 0.0f; 
mA[19471] = 0.0f; 
mA[19472] = 0.0f; 
mA[19473] = 0.0f; 
mA[19474] = 0.0f; 
mA[19475] = 0.0f; 
mA[19476] = 0.0f; 
mA[19477] = 0.0f; 
mA[19478] = 0.0f; 
mA[19479] =  v_v15_ppp_bw ; 
mA[19480] = 0.0f; 
mA[19481] = 0.0f; 
mA[19482] = 0.0f; 
mA[19483] = 0.0f; 
mA[19484] = 0.0f; 
mA[19485] = 0.0f; 
mA[19486] = 0.0f; 
mA[19487] = 0.0f; 
mA[19488] = 0.0f; 
mA[19489] = 0.0f; 
mA[19490] = 0.0f; 
mA[19491] = 0.0f; 
mA[19492] = 0.0f; 
mA[19493] = 0.0f; 
mA[19494] = 0.0f; 
mA[19495] = 0.0f; 
mA[19496] = 0.0f; 
mA[19497] = 0.0f; 
mA[19498] = 0.0f; 
mA[19499] = 0.0f; 
mA[19500] = ( (  -1.0f  * v_v14_ppp_fw   )  +(  -1.0f  * v_v13_ppp_fw   )  +(  -1.0f  * v_v15_ppp_fw   )   ) ; 
mA[19501] = 0.0f; 
mA[19502] = 0.0f; 
mA[19503] = 0.0f; 
mA[19504] = 0.0f; 
mA[19505] = 0.0f; 
mA[19506] = 0.0f; 
mA[19507] = 0.0f; 
mA[19508] = 0.0f; 
mA[19509] =  v_v13_ppp_bw ; 
mA[19510] = 0.0f; 
mA[19511] = 0.0f; 
mA[19512] = 0.0f; 
mA[19513] = 0.0f; 
mA[19514] = 0.0f; 
mA[19515] = 0.0f; 
mA[19516] = 0.0f; 
mA[19517] = 0.0f; 
mA[19518] = 0.0f; 
mA[19519] = 0.0f; 
mA[19520] = 0.0f; 
mA[19521] = 0.0f; 
mA[19522] = 0.0f; 
mA[19523] = 0.0f; 
mA[19524] = 0.0f; 
mA[19525] = 0.0f; 
mA[19526] = 0.0f; 
mA[19527] = 0.0f; 
mA[19528] = 0.0f; 
mA[19529] = 0.0f; 
mA[19530] = 0.0f; 
mA[19531] = 0.0f; 
mA[19532] = 0.0f; 
mA[19533] = 0.0f; 
mA[19534] = 0.0f; 
mA[19535] = 0.0f; 
mA[19536] = 0.0f; 
mA[19537] = 0.0f; 
mA[19538] = 0.0f; 
mA[19539] = 0.0f; 
mA[19540] = 0.0f; 
mA[19541] = 0.0f; 
mA[19542] = 0.0f; 
mA[19543] = 0.0f; 
mA[19544] = 0.0f; 
mA[19545] = 0.0f; 
mA[19546] = 0.0f; 
mA[19547] = 0.0f; 
mA[19548] = 0.0f; 
mA[19549] = 0.0f; 
mA[19550] = 0.0f; 
mA[19551] = 0.0f; 
mA[19552] = 0.0f; 
mA[19553] = 0.0f; 
mA[19554] = 0.0f; 
mA[19555] = 0.0f; 
mA[19556] = 0.0f; 
mA[19557] = 0.0f; 
mA[19558] = 0.0f; 
mA[19559] = 0.0f; 
mA[19560] = 0.0f; 
mA[19561] = 0.0f; 
mA[19562] = 0.0f; 
mA[19563] = 0.0f; 
mA[19564] = 0.0f; 
mA[19565] = 0.0f; 
mA[19566] = 0.0f; 
mA[19567] = 0.0f; 
mA[19568] = 0.0f; 
mA[19569] = 0.0f; 
mA[19570] = 0.0f; 
mA[19571] = 0.0f; 
mA[19572] = 0.0f; 
mA[19573] = 0.0f; 
mA[19574] = 0.0f; 
mA[19575] = 0.0f; 
mA[19576] = 0.0f; 
mA[19577] = 0.0f; 
mA[19578] = 0.0f; 
mA[19579] = 0.0f; 
mA[19580] = 0.0f; 
mA[19581] = 0.0f; 
mA[19582] = 0.0f; 
mA[19583] = 0.0f; 
mA[19584] =  v_v46_aa_fw ; 
mA[19585] = 0.0f; 
mA[19586] = 0.0f; 
mA[19587] = 0.0f; 
mA[19588] = 0.0f; 
mA[19589] = 0.0f; 
mA[19590] = 0.0f; 
mA[19591] = 0.0f; 
mA[19592] = 0.0f; 
mA[19593] = 0.0f; 
mA[19594] = 0.0f; 
mA[19595] = 0.0f; 
mA[19596] = 0.0f; 
mA[19597] = 0.0f; 
mA[19598] = 0.0f; 
mA[19599] = 0.0f; 
mA[19600] = 0.0f; 
mA[19601] = 0.0f; 
mA[19602] = 0.0f; 
mA[19603] = 0.0f; 
mA[19604] = 0.0f; 
mA[19605] = 0.0f; 
mA[19606] = 0.0f; 
mA[19607] = 0.0f; 
mA[19608] = 0.0f; 
mA[19609] = 0.0f; 
mA[19610] = 0.0f; 
mA[19611] = 0.0f; 
mA[19612] = 0.0f; 
mA[19613] = 0.0f; 
mA[19614] = 0.0f; 
mA[19615] = 0.0f; 
mA[19616] = 0.0f; 
mA[19617] = 0.0f; 
mA[19618] = 0.0f; 
mA[19619] = 0.0f; 
mA[19620] = 0.0f; 
mA[19621] = 0.0f; 
mA[19622] = 0.0f; 
mA[19623] = 0.0f; 
mA[19624] = 0.0f; 
mA[19625] = 0.0f; 
mA[19626] = 0.0f; 
mA[19627] = 0.0f; 
mA[19628] = 0.0f; 
mA[19629] = 0.0f; 
mA[19630] = 0.0f; 
mA[19631] = 0.0f; 
mA[19632] = 0.0f; 
mA[19633] = 0.0f; 
mA[19634] = 0.0f; 
mA[19635] = 0.0f; 
mA[19636] = 0.0f; 
mA[19637] = 0.0f; 
mA[19638] = 0.0f; 
mA[19639] = 0.0f; 
mA[19640] = 0.0f; 
mA[19641] = 0.0f; 
mA[19642] = 0.0f; 
mA[19643] = 0.0f; 
mA[19644] = 0.0f; 
mA[19645] = 0.0f; 
mA[19646] = 0.0f; 
mA[19647] = 0.0f; 
mA[19648] = 0.0f; 
mA[19649] = 0.0f; 
mA[19650] = ( (  -1.0f  * v_v50_aa_fw   )   ) ; 
mA[19651] = 0.0f; 
mA[19652] = 0.0f; 
mA[19653] = 0.0f; 
mA[19654] = 0.0f; 
mA[19655] = 0.0f; 
mA[19656] = 0.0f; 
mA[19657] = 0.0f; 
mA[19658] = 0.0f; 
mA[19659] = 0.0f; 
mA[19660] = 0.0f; 
mA[19661] = 0.0f; 
mA[19662] = 0.0f; 
mA[19663] = 0.0f; 
mA[19664] = 0.0f; 
mA[19665] = 0.0f; 
mA[19666] = 0.0f; 
mA[19667] = 0.0f; 
mA[19668] = 0.0f; 
mA[19669] = 0.0f; 
mA[19670] = 0.0f; 
mA[19671] = 0.0f; 
mA[19672] = 0.0f; 
mA[19673] = 0.0f; 
mA[19674] = 0.0f; 
mA[19675] = 0.0f; 
mA[19676] = 0.0f; 
mA[19677] = 0.0f; 
mA[19678] = 0.0f; 
mA[19679] = 0.0f; 
mA[19680] = 0.0f; 
mA[19681] = 0.0f; 
mA[19682] = 0.0f; 
mA[19683] = 0.0f; 
mA[19684] = 0.0f; 
mA[19685] = 0.0f; 
mA[19686] = 0.0f; 
mA[19687] = 0.0f; 
mA[19688] = 0.0f; 
mA[19689] = 0.0f; 
mA[19690] = 0.0f; 
mA[19691] = 0.0f; 
mA[19692] = 0.0f; 
mA[19693] = 0.0f; 
mA[19694] = 0.0f; 
mA[19695] = 0.0f; 
mA[19696] = 0.0f; 
mA[19697] = 0.0f; 
mA[19698] = 0.0f; 
mA[19699] = 0.0f; 
mA[19700] = 0.0f; 
mA[19701] = 0.0f; 
mA[19702] = 0.0f; 
mA[19703] = 0.0f; 
mA[19704] = 0.0f; 
mA[19705] = 0.0f; 
mA[19706] = 0.0f; 
mA[19707] = 0.0f; 
mA[19708] = 0.0f; 
mA[19709] = 0.0f; 
mA[19710] = 0.0f; 
mA[19711] = 0.0f; 
mA[19712] = 0.0f; 
mA[19713] = 0.0f; 
mA[19714] = 0.0f; 
mA[19715] = 0.0f; 
mA[19716] = 0.0f; 
mA[19717] = 0.0f; 
mA[19718] = 0.0f; 
mA[19719] = 0.0f; 
mA[19720] = 0.0f; 
mA[19721] = 0.0f; 
mA[19722] = 0.0f; 
mA[19723] = 0.0f; 
mA[19724] = 0.0f; 
mA[19725] = 0.0f; 
mA[19726] = 0.0f; 
mA[19727] = 0.0f; 
mA[19728] = 0.0f; 
mA[19729] = 0.0f; 
mA[19730] = 0.0f; 
mA[19731] = 0.0f; 
mA[19732] = 0.0f; 
mA[19733] = 0.0f; 
mA[19734] =  v_v46_aa_fw ; 
mA[19735] = 0.0f; 
mA[19736] = 0.0f; 
mA[19737] = 0.0f; 
mA[19738] = 0.0f; 
mA[19739] = 0.0f; 
mA[19740] = 0.0f; 
mA[19741] = 0.0f; 
mA[19742] = 0.0f; 
mA[19743] = 0.0f; 
mA[19744] = 0.0f; 
mA[19745] = 0.0f; 
mA[19746] = 0.0f; 
mA[19747] = 0.0f; 
mA[19748] = 0.0f; 
mA[19749] = 0.0f; 
mA[19750] = 0.0f; 
mA[19751] = 0.0f; 
mA[19752] = 0.0f; 
mA[19753] = 0.0f; 
mA[19754] = 0.0f; 
mA[19755] = 0.0f; 
mA[19756] = 0.0f; 
mA[19757] = 0.0f; 
mA[19758] = 0.0f; 
mA[19759] = 0.0f; 
mA[19760] = 0.0f; 
mA[19761] = 0.0f; 
mA[19762] = 0.0f; 
mA[19763] = 0.0f; 
mA[19764] = 0.0f; 
mA[19765] = 0.0f; 
mA[19766] = 0.0f; 
mA[19767] = 0.0f; 
mA[19768] = 0.0f; 
mA[19769] = 0.0f; 
mA[19770] = 0.0f; 
mA[19771] = 0.0f; 
mA[19772] = 0.0f; 
mA[19773] = 0.0f; 
mA[19774] = 0.0f; 
mA[19775] = 0.0f; 
mA[19776] = 0.0f; 
mA[19777] = 0.0f; 
mA[19778] = 0.0f; 
mA[19779] = 0.0f; 
mA[19780] = 0.0f; 
mA[19781] = 0.0f; 
mA[19782] = 0.0f; 
mA[19783] = 0.0f; 
mA[19784] = 0.0f; 
mA[19785] = 0.0f; 
mA[19786] = 0.0f; 
mA[19787] = 0.0f; 
mA[19788] = 0.0f; 
mA[19789] = 0.0f; 
mA[19790] = 0.0f; 
mA[19791] = 0.0f; 
mA[19792] = 0.0f; 
mA[19793] = 0.0f; 
mA[19794] = 0.0f; 
mA[19795] = 0.0f; 
mA[19796] = 0.0f; 
mA[19797] = 0.0f; 
mA[19798] = 0.0f; 
mA[19799] = 0.0f; 
mA[19800] = ( (  -1.0f  * v_v50_aa_fw   )   ) ; 
mA[19801] = 0.0f; 
mA[19802] = 0.0f; 
mA[19803] = 0.0f; 
mA[19804] = 0.0f; 
mA[19805] = 0.0f; 
mA[19806] = 0.0f; 
mA[19807] = 0.0f; 
mA[19808] = 0.0f; 
mA[19809] = 0.0f; 
mA[19810] = 0.0f; 
mA[19811] = 0.0f; 
mA[19812] = 0.0f; 
mA[19813] = 0.0f; 
mA[19814] = 0.0f; 
mA[19815] = 0.0f; 
mA[19816] = 0.0f; 
mA[19817] = 0.0f; 
mA[19818] = 0.0f; 
mA[19819] = 0.0f; 
mA[19820] = 0.0f; 
mA[19821] = 0.0f; 
mA[19822] = 0.0f; 
mA[19823] = 0.0f; 
mA[19824] =  v_v46_aa_fw ; 
mA[19825] = 0.0f; 
mA[19826] = 0.0f; 
mA[19827] = 0.0f; 
mA[19828] = 0.0f; 
mA[19829] = 0.0f; 
mA[19830] = 0.0f; 
mA[19831] = 0.0f; 
mA[19832] = 0.0f; 
mA[19833] = 0.0f; 
mA[19834] = 0.0f; 
mA[19835] = 0.0f; 
mA[19836] = 0.0f; 
mA[19837] = 0.0f; 
mA[19838] = 0.0f; 
mA[19839] = 0.0f; 
mA[19840] = 0.0f; 
mA[19841] = 0.0f; 
mA[19842] = 0.0f; 
mA[19843] = 0.0f; 
mA[19844] = 0.0f; 
mA[19845] = 0.0f; 
mA[19846] = 0.0f; 
mA[19847] = 0.0f; 
mA[19848] = 0.0f; 
mA[19849] = 0.0f; 
mA[19850] = 0.0f; 
mA[19851] = 0.0f; 
mA[19852] = 0.0f; 
mA[19853] = 0.0f; 
mA[19854] = 0.0f; 
mA[19855] = 0.0f; 
mA[19856] = 0.0f; 
mA[19857] = 0.0f; 
mA[19858] = 0.0f; 
mA[19859] = 0.0f; 
mA[19860] = 0.0f; 
mA[19861] = 0.0f; 
mA[19862] = 0.0f; 
mA[19863] = 0.0f; 
mA[19864] = 0.0f; 
mA[19865] = 0.0f; 
mA[19866] = 0.0f; 
mA[19867] = 0.0f; 
mA[19868] = 0.0f; 
mA[19869] = 0.0f; 
mA[19870] = 0.0f; 
mA[19871] = 0.0f; 
mA[19872] = 0.0f; 
mA[19873] = 0.0f; 
mA[19874] = 0.0f; 
mA[19875] = 0.0f; 
mA[19876] = 0.0f; 
mA[19877] = 0.0f; 
mA[19878] = 0.0f; 
mA[19879] = 0.0f; 
mA[19880] = 0.0f; 
mA[19881] = 0.0f; 
mA[19882] = 0.0f; 
mA[19883] = 0.0f; 
mA[19884] = 0.0f; 
mA[19885] = 0.0f; 
mA[19886] = 0.0f; 
mA[19887] = 0.0f; 
mA[19888] = 0.0f; 
mA[19889] = 0.0f; 
mA[19890] = 0.0f; 
mA[19891] = 0.0f; 
mA[19892] = 0.0f; 
mA[19893] = 0.0f; 
mA[19894] = 0.0f; 
mA[19895] = 0.0f; 
mA[19896] = 0.0f; 
mA[19897] = 0.0f; 
mA[19898] = 0.0f; 
mA[19899] = 0.0f; 
mA[19900] = 0.0f; 
mA[19901] = 0.0f; 
mA[19902] = 0.0f; 
mA[19903] = 0.0f; 
mA[19904] = 0.0f; 
mA[19905] = 0.0f; 
mA[19906] = 0.0f; 
mA[19907] = 0.0f; 
mA[19908] = 0.0f; 
mA[19909] = 0.0f; 
mA[19910] = 0.0f; 
mA[19911] = 0.0f; 
mA[19912] = 0.0f; 
mA[19913] = 0.0f; 
mA[19914] = 0.0f; 
mA[19915] = 0.0f; 
mA[19916] = 0.0f; 
mA[19917] = 0.0f; 
mA[19918] = 0.0f; 
mA[19919] = 0.0f; 
mA[19920] = 0.0f; 
mA[19921] = 0.0f; 
mA[19922] = 0.0f; 
mA[19923] = 0.0f; 
mA[19924] = 0.0f; 
mA[19925] = 0.0f; 
mA[19926] = 0.0f; 
mA[19927] = 0.0f; 
mA[19928] = 0.0f; 
mA[19929] = 0.0f; 
mA[19930] = 0.0f; 
mA[19931] = 0.0f; 
mA[19932] = 0.0f; 
mA[19933] = 0.0f; 
mA[19934] = 0.0f; 
mA[19935] = 0.0f; 
mA[19936] = 0.0f; 
mA[19937] = 0.0f; 
mA[19938] = 0.0f; 
mA[19939] = 0.0f; 
mA[19940] = 0.0f; 
mA[19941] = 0.0f; 
mA[19942] = 0.0f; 
mA[19943] = 0.0f; 
mA[19944] = 0.0f; 
mA[19945] = 0.0f; 
mA[19946] = 0.0f; 
mA[19947] = 0.0f; 
mA[19948] = 0.0f; 
mA[19949] = 0.0f; 
mA[19950] = ( (  -1.0f  * v_v50_aa_fw   )   ) ; 
mA[19951] = 0.0f; 
mA[19952] = 0.0f; 
mA[19953] = 0.0f; 
mA[19954] = 0.0f; 
mA[19955] = 0.0f; 
mA[19956] = 0.0f; 
mA[19957] = 0.0f; 
mA[19958] = 0.0f; 
mA[19959] = 0.0f; 
mA[19960] = 0.0f; 
mA[19961] = 0.0f; 
mA[19962] = 0.0f; 
mA[19963] = 0.0f; 
mA[19964] = 0.0f; 
mA[19965] = 0.0f; 
mA[19966] = 0.0f; 
mA[19967] = 0.0f; 
mA[19968] = 0.0f; 
mA[19969] = 0.0f; 
mA[19970] = 0.0f; 
mA[19971] = 0.0f; 
mA[19972] = 0.0f; 
mA[19973] = 0.0f; 
mA[19974] =  v_v46_aa_fw ; 
mA[19975] = 0.0f; 
mA[19976] = 0.0f; 
mA[19977] = 0.0f; 
mA[19978] = 0.0f; 
mA[19979] = 0.0f; 
mA[19980] = 0.0f; 
mA[19981] = 0.0f; 
mA[19982] = 0.0f; 
mA[19983] = 0.0f; 
mA[19984] = 0.0f; 
mA[19985] = 0.0f; 
mA[19986] = 0.0f; 
mA[19987] = 0.0f; 
mA[19988] = 0.0f; 
mA[19989] = 0.0f; 
mA[19990] = 0.0f; 
mA[19991] = 0.0f; 
mA[19992] = 0.0f; 
mA[19993] = 0.0f; 
mA[19994] = 0.0f; 
mA[19995] = 0.0f; 
mA[19996] = 0.0f; 
mA[19997] = 0.0f; 
mA[19998] = 0.0f; 
mA[19999] = 0.0f; 
mA[20000] = 0.0f; 
mA[20001] = 0.0f; 
mA[20002] = 0.0f; 
mA[20003] = 0.0f; 
mA[20004] = 0.0f; 
mA[20005] = 0.0f; 
mA[20006] = 0.0f; 
mA[20007] = 0.0f; 
mA[20008] = 0.0f; 
mA[20009] = 0.0f; 
mA[20010] = 0.0f; 
mA[20011] = 0.0f; 
mA[20012] = 0.0f; 
mA[20013] = 0.0f; 
mA[20014] = 0.0f; 
mA[20015] = 0.0f; 
mA[20016] = 0.0f; 
mA[20017] = 0.0f; 
mA[20018] = 0.0f; 
mA[20019] = 0.0f; 
mA[20020] = 0.0f; 
mA[20021] = 0.0f; 
mA[20022] = 0.0f; 
mA[20023] = 0.0f; 
mA[20024] = 0.0f; 
mA[20025] = 0.0f; 
mA[20026] = 0.0f; 
mA[20027] = 0.0f; 
mA[20028] = 0.0f; 
mA[20029] = 0.0f; 
mA[20030] = 0.0f; 
mA[20031] = 0.0f; 
mA[20032] = 0.0f; 
mA[20033] = 0.0f; 
mA[20034] = 0.0f; 
mA[20035] = 0.0f; 
mA[20036] = 0.0f; 
mA[20037] = 0.0f; 
mA[20038] = 0.0f; 
mA[20039] = 0.0f; 
mA[20040] = 0.0f; 
mA[20041] = 0.0f; 
mA[20042] = 0.0f; 
mA[20043] = 0.0f; 
mA[20044] = 0.0f; 
mA[20045] = 0.0f; 
mA[20046] = 0.0f; 
mA[20047] = 0.0f; 
mA[20048] = 0.0f; 
mA[20049] = 0.0f; 
mA[20050] = 0.0f; 
mA[20051] = 0.0f; 
mA[20052] = 0.0f; 
mA[20053] = 0.0f; 
mA[20054] = 0.0f; 
mA[20055] = 0.0f; 
mA[20056] = 0.0f; 
mA[20057] = 0.0f; 
mA[20058] = 0.0f; 
mA[20059] = 0.0f; 
mA[20060] = 0.0f; 
mA[20061] = 0.0f; 
mA[20062] = 0.0f; 
mA[20063] = 0.0f; 
mA[20064] = 0.0f; 
mA[20065] = 0.0f; 
mA[20066] = 0.0f; 
mA[20067] = 0.0f; 
mA[20068] = 0.0f; 
mA[20069] = 0.0f; 
mA[20070] = 0.0f; 
mA[20071] = 0.0f; 
mA[20072] = 0.0f; 
mA[20073] = 0.0f; 
mA[20074] = 0.0f; 
mA[20075] = 0.0f; 
mA[20076] = 0.0f; 
mA[20077] = 0.0f; 
mA[20078] = 0.0f; 
mA[20079] = 0.0f; 
mA[20080] = 0.0f; 
mA[20081] = 0.0f; 
mA[20082] = 0.0f; 
mA[20083] = 0.0f; 
mA[20084] = 0.0f; 
mA[20085] = 0.0f; 
mA[20086] = 0.0f; 
mA[20087] = 0.0f; 
mA[20088] = 0.0f; 
mA[20089] = 0.0f; 
mA[20090] = 0.0f; 
mA[20091] = 0.0f; 
mA[20092] = 0.0f; 
mA[20093] = 0.0f; 
mA[20094] = 0.0f; 
mA[20095] = 0.0f; 
mA[20096] = 0.0f; 
mA[20097] = 0.0f; 
mA[20098] = 0.0f; 
mA[20099] = 0.0f; 
mA[20100] = ( (  -1.0f  * v_v50_aa_fw   )   ) ; 
mA[20101] = 0.0f; 
mA[20102] = 0.0f; 
mA[20103] = 0.0f; 
mA[20104] = 0.0f; 
mA[20105] = 0.0f; 
mA[20106] = 0.0f; 
mA[20107] = 0.0f; 
mA[20108] = 0.0f; 
mA[20109] = 0.0f; 
mA[20110] = 0.0f; 
mA[20111] = 0.0f; 
mA[20112] = 0.0f; 
mA[20113] = 0.0f; 
mA[20114] = 0.0f; 
mA[20115] = 0.0f; 
mA[20116] = 0.0f; 
mA[20117] = 0.0f; 
mA[20118] = 0.0f; 
mA[20119] = 0.0f; 
mA[20120] = 0.0f; 
mA[20121] = 0.0f; 
mA[20122] = 0.0f; 
mA[20123] = 0.0f; 
mA[20124] = 0.0f; 
mA[20125] = 0.0f; 
mA[20126] = 0.0f; 
mA[20127] = 0.0f; 
mA[20128] = 0.0f; 
mA[20129] = 0.0f; 
mA[20130] = 0.0f; 
mA[20131] = 0.0f; 
mA[20132] = 0.0f; 
mA[20133] = 0.0f; 
mA[20134] = 0.0f; 
mA[20135] = 0.0f; 
mA[20136] = 0.0f; 
mA[20137] = 0.0f; 
mA[20138] = 0.0f; 
mA[20139] = 0.0f; 
mA[20140] = 0.0f; 
mA[20141] = 0.0f; 
mA[20142] = 0.0f; 
mA[20143] = 0.0f; 
mA[20144] = 0.0f; 
mA[20145] = 0.0f; 
mA[20146] = 0.0f; 
mA[20147] = 0.0f; 
mA[20148] = 0.0f; 
mA[20149] = 0.0f; 
mA[20150] = 0.0f; 
mA[20151] = 0.0f; 
mA[20152] = 0.0f; 
mA[20153] = 0.0f; 
mA[20154] = 0.0f; 
mA[20155] = 0.0f; 
mA[20156] = 0.0f; 
mA[20157] = 0.0f; 
mA[20158] = 0.0f; 
mA[20159] = 0.0f; 
mA[20160] = 0.0f; 
mA[20161] = 0.0f; 
mA[20162] = 0.0f; 
mA[20163] = 0.0f; 
mA[20164] = 0.0f; 
mA[20165] = 0.0f; 
mA[20166] = 0.0f; 
mA[20167] =  v_v06_glyc_bw ; 
mA[20168] = 0.0f; 
mA[20169] = 0.0f; 
mA[20170] = 0.0f; 
mA[20171] = 0.0f; 
mA[20172] = 0.0f; 
mA[20173] = 0.0f; 
mA[20174] = 0.0f; 
mA[20175] = 0.0f; 
mA[20176] = 0.0f; 
mA[20177] = 0.0f; 
mA[20178] = 0.0f; 
mA[20179] = 0.0f; 
mA[20180] = 0.0f; 
mA[20181] = 0.0f; 
mA[20182] = 0.0f; 
mA[20183] = 0.0f; 
mA[20184] = 0.0f; 
mA[20185] = 0.0f; 
mA[20186] = 0.0f; 
mA[20187] = 0.0f; 
mA[20188] = 0.0f; 
mA[20189] = 0.0f; 
mA[20190] = 0.0f; 
mA[20191] = 0.0f; 
mA[20192] = 0.0f; 
mA[20193] = 0.0f; 
mA[20194] = 0.0f; 
mA[20195] = 0.0f; 
mA[20196] = 0.0f; 
mA[20197] = 0.0f; 
mA[20198] = 0.0f; 
mA[20199] = 0.0f; 
mA[20200] = 0.0f; 
mA[20201] = 0.0f; 
mA[20202] = 0.0f; 
mA[20203] = 0.0f; 
mA[20204] = 0.0f; 
mA[20205] = 0.0f; 
mA[20206] = 0.0f; 
mA[20207] =  v_v07_glyc_fw ; 
mA[20208] = 0.0f; 
mA[20209] = 0.0f; 
mA[20210] = 0.0f; 
mA[20211] = 0.0f; 
mA[20212] = 0.0f; 
mA[20213] = 0.0f; 
mA[20214] = 0.0f; 
mA[20215] = 0.0f; 
mA[20216] = 0.0f; 
mA[20217] = 0.0f; 
mA[20218] = 0.0f; 
mA[20219] = 0.0f; 
mA[20220] = 0.0f; 
mA[20221] = 0.0f; 
mA[20222] = 0.0f; 
mA[20223] = 0.0f; 
mA[20224] = 0.0f; 
mA[20225] = 0.0f; 
mA[20226] = 0.0f; 
mA[20227] = 0.0f; 
mA[20228] = 0.0f; 
mA[20229] = 0.0f; 
mA[20230] =  v_v43_aa_fw ; 
mA[20231] = 0.0f; 
mA[20232] = 0.0f; 
mA[20233] = 0.0f; 
mA[20234] = 0.0f; 
mA[20235] = 0.0f; 
mA[20236] = 0.0f; 
mA[20237] = 0.0f; 
mA[20238] = 0.0f; 
mA[20239] = 0.0f; 
mA[20240] = 0.0f; 
mA[20241] = 0.0f; 
mA[20242] = 0.0f; 
mA[20243] = 0.0f; 
mA[20244] = 0.0f; 
mA[20245] = 0.0f; 
mA[20246] = 0.0f; 
mA[20247] = 0.0f; 
mA[20248] = 0.0f; 
mA[20249] = 0.0f; 
mA[20250] = ( (  -1.0f  * v_v07_glyc_bw   )  +(  -1.0f  * v_v06_glyc_fw   )   ) ; 
mA[20251] = 0.0f; 
mA[20252] = 0.0f; 
mA[20253] = 0.0f; 
mA[20254] = 0.0f; 
mA[20255] = 0.0f; 
mA[20256] = 0.0f; 
mA[20257] = 0.0f; 
mA[20258] = 0.0f; 
mA[20259] = 0.0f; 
mA[20260] = 0.0f; 
mA[20261] = 0.0f; 
mA[20262] = 0.0f; 
mA[20263] = 0.0f; 
mA[20264] = 0.0f; 
mA[20265] = 0.0f; 
mA[20266] = 0.0f; 
mA[20267] = 0.0f; 
mA[20268] = 0.0f; 
mA[20269] = 0.0f; 
mA[20270] = 0.0f; 
mA[20271] = 0.0f; 
mA[20272] = 0.0f; 
mA[20273] = 0.0f; 
mA[20274] = 0.0f; 
mA[20275] = 0.0f; 
mA[20276] = 0.0f; 
mA[20277] = 0.0f; 
mA[20278] = 0.0f; 
mA[20279] = 0.0f; 
mA[20280] = 0.0f; 
mA[20281] = 0.0f; 
mA[20282] = 0.0f; 
mA[20283] = 0.0f; 
mA[20284] = 0.0f; 
mA[20285] = 0.0f; 
mA[20286] = 0.0f; 
mA[20287] = 0.0f; 
mA[20288] = 0.0f; 
mA[20289] = 0.0f; 
mA[20290] = 0.0f; 
mA[20291] = 0.0f; 
mA[20292] = 0.0f; 
mA[20293] = 0.0f; 
mA[20294] = 0.0f; 
mA[20295] = 0.0f; 
mA[20296] = 0.0f; 
mA[20297] = 0.0f; 
mA[20298] = 0.0f; 
mA[20299] = 0.0f; 
mA[20300] = 0.0f; 
mA[20301] = 0.0f; 
mA[20302] = 0.0f; 
mA[20303] = 0.0f; 
mA[20304] = 0.0f; 
mA[20305] = 0.0f; 
mA[20306] = 0.0f; 
mA[20307] = 0.0f; 
mA[20308] = 0.0f; 
mA[20309] = 0.0f; 
mA[20310] = 0.0f; 
mA[20311] = 0.0f; 
mA[20312] = 0.0f; 
mA[20313] = 0.0f; 
mA[20314] = 0.0f; 
mA[20315] = 0.0f; 
mA[20316] = 0.0f; 
mA[20317] =  v_v06_glyc_bw ; 
mA[20318] = 0.0f; 
mA[20319] = 0.0f; 
mA[20320] = 0.0f; 
mA[20321] = 0.0f; 
mA[20322] = 0.0f; 
mA[20323] = 0.0f; 
mA[20324] = 0.0f; 
mA[20325] = 0.0f; 
mA[20326] = 0.0f; 
mA[20327] = 0.0f; 
mA[20328] = 0.0f; 
mA[20329] = 0.0f; 
mA[20330] = 0.0f; 
mA[20331] = 0.0f; 
mA[20332] = 0.0f; 
mA[20333] = 0.0f; 
mA[20334] = 0.0f; 
mA[20335] = 0.0f; 
mA[20336] = 0.0f; 
mA[20337] = 0.0f; 
mA[20338] = 0.0f; 
mA[20339] = 0.0f; 
mA[20340] = 0.0f; 
mA[20341] = 0.0f; 
mA[20342] = 0.0f; 
mA[20343] = 0.0f; 
mA[20344] = 0.0f; 
mA[20345] = 0.0f; 
mA[20346] = 0.0f; 
mA[20347] = 0.0f; 
mA[20348] = 0.0f; 
mA[20349] = 0.0f; 
mA[20350] = 0.0f; 
mA[20351] = 0.0f; 
mA[20352] = 0.0f; 
mA[20353] = 0.0f; 
mA[20354] = 0.0f; 
mA[20355] = 0.0f; 
mA[20356] = 0.0f; 
mA[20357] =  v_v07_glyc_fw ; 
mA[20358] = 0.0f; 
mA[20359] = 0.0f; 
mA[20360] = 0.0f; 
mA[20361] = 0.0f; 
mA[20362] = 0.0f; 
mA[20363] = 0.0f; 
mA[20364] = 0.0f; 
mA[20365] = 0.0f; 
mA[20366] = 0.0f; 
mA[20367] = 0.0f; 
mA[20368] = 0.0f; 
mA[20369] = 0.0f; 
mA[20370] = 0.0f; 
mA[20371] = 0.0f; 
mA[20372] = 0.0f; 
mA[20373] = 0.0f; 
mA[20374] = 0.0f; 
mA[20375] = 0.0f; 
mA[20376] = 0.0f; 
mA[20377] = 0.0f; 
mA[20378] = 0.0f; 
mA[20379] = 0.0f; 
mA[20380] =  v_v43_aa_fw ; 
mA[20381] = 0.0f; 
mA[20382] = 0.0f; 
mA[20383] = 0.0f; 
mA[20384] = 0.0f; 
mA[20385] = 0.0f; 
mA[20386] = 0.0f; 
mA[20387] = 0.0f; 
mA[20388] = 0.0f; 
mA[20389] = 0.0f; 
mA[20390] = 0.0f; 
mA[20391] = 0.0f; 
mA[20392] = 0.0f; 
mA[20393] = 0.0f; 
mA[20394] = 0.0f; 
mA[20395] = 0.0f; 
mA[20396] = 0.0f; 
mA[20397] = 0.0f; 
mA[20398] = 0.0f; 
mA[20399] = 0.0f; 
mA[20400] = ( (  -1.0f  * v_v07_glyc_bw   )  +(  -1.0f  * v_v06_glyc_fw   )   ) ; 
mA[20401] = 0.0f; 
mA[20402] = 0.0f; 
mA[20403] = 0.0f; 
mA[20404] = 0.0f; 
mA[20405] = 0.0f; 
mA[20406] = 0.0f; 
mA[20407] = 0.0f; 
mA[20408] = 0.0f; 
mA[20409] = 0.0f; 
mA[20410] = 0.0f; 
mA[20411] = 0.0f; 
mA[20412] = 0.0f; 
mA[20413] = 0.0f; 
mA[20414] = 0.0f; 
mA[20415] = 0.0f; 
mA[20416] = 0.0f; 
mA[20417] = 0.0f; 
mA[20418] = 0.0f; 
mA[20419] = 0.0f; 
mA[20420] = 0.0f; 
mA[20421] = 0.0f; 
mA[20422] = 0.0f; 
mA[20423] = 0.0f; 
mA[20424] = 0.0f; 
mA[20425] = 0.0f; 
mA[20426] = 0.0f; 
mA[20427] = 0.0f; 
mA[20428] = 0.0f; 
mA[20429] = 0.0f; 
mA[20430] = 0.0f; 
mA[20431] = 0.0f; 
mA[20432] = 0.0f; 
mA[20433] = 0.0f; 
mA[20434] = 0.0f; 
mA[20435] = 0.0f; 
mA[20436] = 0.0f; 
mA[20437] = 0.0f; 
mA[20438] = 0.0f; 
mA[20439] = 0.0f; 
mA[20440] = 0.0f; 
mA[20441] = 0.0f; 
mA[20442] = 0.0f; 
mA[20443] = 0.0f; 
mA[20444] = 0.0f; 
mA[20445] = 0.0f; 
mA[20446] = 0.0f; 
mA[20447] = 0.0f; 
mA[20448] = 0.0f; 
mA[20449] = 0.0f; 
mA[20450] = 0.0f; 
mA[20451] = 0.0f; 
mA[20452] = 0.0f; 
mA[20453] = 0.0f; 
mA[20454] = 0.0f; 
mA[20455] = 0.0f; 
mA[20456] = 0.0f; 
mA[20457] = 0.0f; 
mA[20458] = 0.0f; 
mA[20459] = 0.0f; 
mA[20460] = 0.0f; 
mA[20461] = 0.0f; 
mA[20462] = 0.0f; 
mA[20463] = 0.0f; 
mA[20464] = 0.0f; 
mA[20465] = 0.0f; 
mA[20466] = 0.0f; 
mA[20467] =  v_v06_glyc_bw ; 
mA[20468] = 0.0f; 
mA[20469] = 0.0f; 
mA[20470] = 0.0f; 
mA[20471] = 0.0f; 
mA[20472] = 0.0f; 
mA[20473] = 0.0f; 
mA[20474] = 0.0f; 
mA[20475] = 0.0f; 
mA[20476] = 0.0f; 
mA[20477] = 0.0f; 
mA[20478] = 0.0f; 
mA[20479] = 0.0f; 
mA[20480] = 0.0f; 
mA[20481] = 0.0f; 
mA[20482] = 0.0f; 
mA[20483] = 0.0f; 
mA[20484] = 0.0f; 
mA[20485] = 0.0f; 
mA[20486] = 0.0f; 
mA[20487] = 0.0f; 
mA[20488] = 0.0f; 
mA[20489] = 0.0f; 
mA[20490] = 0.0f; 
mA[20491] = 0.0f; 
mA[20492] = 0.0f; 
mA[20493] = 0.0f; 
mA[20494] = 0.0f; 
mA[20495] = 0.0f; 
mA[20496] = 0.0f; 
mA[20497] = 0.0f; 
mA[20498] = 0.0f; 
mA[20499] = 0.0f; 
mA[20500] = 0.0f; 
mA[20501] = 0.0f; 
mA[20502] = 0.0f; 
mA[20503] = 0.0f; 
mA[20504] = 0.0f; 
mA[20505] = 0.0f; 
mA[20506] = 0.0f; 
mA[20507] =  v_v07_glyc_fw ; 
mA[20508] = 0.0f; 
mA[20509] = 0.0f; 
mA[20510] = 0.0f; 
mA[20511] = 0.0f; 
mA[20512] = 0.0f; 
mA[20513] = 0.0f; 
mA[20514] = 0.0f; 
mA[20515] = 0.0f; 
mA[20516] = 0.0f; 
mA[20517] = 0.0f; 
mA[20518] = 0.0f; 
mA[20519] = 0.0f; 
mA[20520] = 0.0f; 
mA[20521] = 0.0f; 
mA[20522] = 0.0f; 
mA[20523] = 0.0f; 
mA[20524] = 0.0f; 
mA[20525] = 0.0f; 
mA[20526] = 0.0f; 
mA[20527] = 0.0f; 
mA[20528] = 0.0f; 
mA[20529] = 0.0f; 
mA[20530] =  v_v43_aa_fw ; 
mA[20531] = 0.0f; 
mA[20532] = 0.0f; 
mA[20533] = 0.0f; 
mA[20534] = 0.0f; 
mA[20535] = 0.0f; 
mA[20536] = 0.0f; 
mA[20537] = 0.0f; 
mA[20538] = 0.0f; 
mA[20539] = 0.0f; 
mA[20540] = 0.0f; 
mA[20541] = 0.0f; 
mA[20542] = 0.0f; 
mA[20543] = 0.0f; 
mA[20544] = 0.0f; 
mA[20545] = 0.0f; 
mA[20546] = 0.0f; 
mA[20547] = 0.0f; 
mA[20548] = 0.0f; 
mA[20549] = 0.0f; 
mA[20550] = ( (  -1.0f  * v_v06_glyc_fw   )  +(  -1.0f  * v_v07_glyc_bw   )   ) ; 
mA[20551] = 0.0f; 
mA[20552] = 0.0f; 
mA[20553] = 0.0f; 
mA[20554] = 0.0f; 
mA[20555] = 0.0f; 
mA[20556] = 0.0f; 
mA[20557] = 0.0f; 
mA[20558] = 0.0f; 
mA[20559] = 0.0f; 
mA[20560] = 0.0f; 
mA[20561] = 0.0f; 
mA[20562] = 0.0f; 
mA[20563] = 0.0f; 
mA[20564] = 0.0f; 
mA[20565] = 0.0f; 
mA[20566] = 0.0f; 
mA[20567] = 0.0f; 
mA[20568] = 0.0f; 
mA[20569] = 0.0f; 
mA[20570] = 0.0f; 
mA[20571] = 0.0f; 
mA[20572] = 0.0f; 
mA[20573] = 0.0f; 
mA[20574] = 0.0f; 
mA[20575] = 0.0f; 
mA[20576] = 0.0f; 
mA[20577] = 0.0f; 
mA[20578] = 0.0f; 
mA[20579] = 0.0f; 
mA[20580] = 0.0f; 
mA[20581] = 0.0f; 
mA[20582] = 0.0f; 
mA[20583] = 0.0f; 
mA[20584] = 0.0f; 
mA[20585] = 0.0f; 
mA[20586] = 0.0f; 
mA[20587] = 0.0f; 
mA[20588] = 0.0f; 
mA[20589] = 0.0f; 
mA[20590] = 0.0f; 
mA[20591] = 0.0f; 
mA[20592] = 0.0f; 
mA[20593] = 0.0f; 
mA[20594] = 0.0f; 
mA[20595] = 0.0f; 
mA[20596] = 0.0f; 
mA[20597] = 0.0f; 
mA[20598] = 0.0f; 
mA[20599] = 0.0f; 
mA[20600] = 0.0f; 
mA[20601] = 0.0f; 
mA[20602] = 0.0f; 
mA[20603] = 0.0f; 
mA[20604] = 0.0f; 
mA[20605] = 0.0f; 
mA[20606] = 0.0f; 
mA[20607] = 0.0f; 
mA[20608] = 0.0f; 
mA[20609] = 0.0f; 
mA[20610] = 0.0f; 
mA[20611] = 0.0f; 
mA[20612] = 0.0f; 
mA[20613] = 0.0f; 
mA[20614] = 0.0f; 
mA[20615] = 0.0f; 
mA[20616] = 0.0f; 
mA[20617] = 0.0f; 
mA[20618] = 0.0f; 
mA[20619] = 0.0f; 
mA[20620] = 0.0f; 
mA[20621] = 0.0f; 
mA[20622] = 0.0f; 
mA[20623] = 0.0f; 
mA[20624] = 0.0f; 
mA[20625] = 0.0f; 
mA[20626] = 0.0f; 
mA[20627] = 0.0f; 
mA[20628] = 0.0f; 
mA[20629] = 0.0f; 
mA[20630] = 0.0f; 
mA[20631] = 0.0f; 
mA[20632] = 0.0f; 
mA[20633] = 0.0f; 
mA[20634] = 0.0f; 
mA[20635] = 0.0f; 
mA[20636] = 0.0f; 
mA[20637] = 0.0f; 
mA[20638] = 0.0f; 
mA[20639] = 0.0f; 
mA[20640] = 0.0f; 
mA[20641] = 0.0f; 
mA[20642] = 0.0f; 
mA[20643] = 0.0f; 
mA[20644] = 0.0f; 
mA[20645] = 0.0f; 
mA[20646] = 0.0f; 
mA[20647] = 0.0f; 
mA[20648] = 0.0f; 
mA[20649] = 0.0f; 
mA[20650] = 0.0f; 
mA[20651] = 0.0f; 
mA[20652] = 0.0f; 
mA[20653] = 0.0f; 
mA[20654] = 0.0f; 
mA[20655] = 0.0f; 
mA[20656] = 0.0f; 
mA[20657] = 0.0f; 
mA[20658] = 0.0f; 
mA[20659] = 0.0f; 
mA[20660] = 0.0f; 
mA[20661] = 0.0f; 
mA[20662] = 0.0f; 
mA[20663] = 0.0f; 
mA[20664] = 0.0f; 
mA[20665] =  v_v11_ppp_bw ; 
mA[20666] = 0.0f; 
mA[20667] = 0.0f; 
mA[20668] = 0.0f; 
mA[20669] = 0.0f; 
mA[20670] = 0.0f; 
mA[20671] = 0.0f; 
mA[20672] = 0.0f; 
mA[20673] = 0.0f; 
mA[20674] = 0.0f; 
mA[20675] = 0.0f; 
mA[20676] = 0.0f; 
mA[20677] = 0.0f; 
mA[20678] = 0.0f; 
mA[20679] = 0.0f; 
mA[20680] = 0.0f; 
mA[20681] = 0.0f; 
mA[20682] = 0.0f; 
mA[20683] = 0.0f; 
mA[20684] = 0.0f; 
mA[20685] = 0.0f; 
mA[20686] = 0.0f; 
mA[20687] = 0.0f; 
mA[20688] = 0.0f; 
mA[20689] = 0.0f; 
mA[20690] = 0.0f; 
mA[20691] =  v_v13_ppp_fw ; 
mA[20692] = 0.0f; 
mA[20693] = 0.0f; 
mA[20694] = 0.0f; 
mA[20695] = 0.0f; 
mA[20696] = 0.0f; 
mA[20697] = 0.0f; 
mA[20698] = 0.0f; 
mA[20699] = 0.0f; 
mA[20700] = ( (  -1.0f  * v_v13_ppp_bw   )  +(  -1.0f  * v_v11_ppp_fw   )   ) ; 
mA[20701] = 0.0f; 
mA[20702] = 0.0f; 
mA[20703] = 0.0f; 
mA[20704] = 0.0f; 
mA[20705] = 0.0f; 
mA[20706] = 0.0f; 
mA[20707] = 0.0f; 
mA[20708] = 0.0f; 
mA[20709] = 0.0f; 
mA[20710] = 0.0f; 
mA[20711] = 0.0f; 
mA[20712] = 0.0f; 
mA[20713] = 0.0f; 
mA[20714] = 0.0f; 
mA[20715] = 0.0f; 
mA[20716] = 0.0f; 
mA[20717] = 0.0f; 
mA[20718] = 0.0f; 
mA[20719] = 0.0f; 
mA[20720] = 0.0f; 
mA[20721] = 0.0f; 
mA[20722] = 0.0f; 
mA[20723] = 0.0f; 
mA[20724] = 0.0f; 
mA[20725] = 0.0f; 
mA[20726] = 0.0f; 
mA[20727] = 0.0f; 
mA[20728] = 0.0f; 
mA[20729] = 0.0f; 
mA[20730] = 0.0f; 
mA[20731] = 0.0f; 
mA[20732] = 0.0f; 
mA[20733] = 0.0f; 
mA[20734] = 0.0f; 
mA[20735] = 0.0f; 
mA[20736] = 0.0f; 
mA[20737] = 0.0f; 
mA[20738] = 0.0f; 
mA[20739] = 0.0f; 
mA[20740] = 0.0f; 
mA[20741] = 0.0f; 
mA[20742] = 0.0f; 
mA[20743] = 0.0f; 
mA[20744] = 0.0f; 
mA[20745] = 0.0f; 
mA[20746] = 0.0f; 
mA[20747] = 0.0f; 
mA[20748] = 0.0f; 
mA[20749] = 0.0f; 
mA[20750] = 0.0f; 
mA[20751] = 0.0f; 
mA[20752] = 0.0f; 
mA[20753] = 0.0f; 
mA[20754] = 0.0f; 
mA[20755] = 0.0f; 
mA[20756] = 0.0f; 
mA[20757] = 0.0f; 
mA[20758] = 0.0f; 
mA[20759] = 0.0f; 
mA[20760] = 0.0f; 
mA[20761] = 0.0f; 
mA[20762] = 0.0f; 
mA[20763] = 0.0f; 
mA[20764] = 0.0f; 
mA[20765] = 0.0f; 
mA[20766] = 0.0f; 
mA[20767] = 0.0f; 
mA[20768] = 0.0f; 
mA[20769] = 0.0f; 
mA[20770] = 0.0f; 
mA[20771] = 0.0f; 
mA[20772] = 0.0f; 
mA[20773] = 0.0f; 
mA[20774] = 0.0f; 
mA[20775] = 0.0f; 
mA[20776] = 0.0f; 
mA[20777] = 0.0f; 
mA[20778] = 0.0f; 
mA[20779] = 0.0f; 
mA[20780] = 0.0f; 
mA[20781] = 0.0f; 
mA[20782] = 0.0f; 
mA[20783] = 0.0f; 
mA[20784] = 0.0f; 
mA[20785] = 0.0f; 
mA[20786] = 0.0f; 
mA[20787] = 0.0f; 
mA[20788] = 0.0f; 
mA[20789] = 0.0f; 
mA[20790] = 0.0f; 
mA[20791] = 0.0f; 
mA[20792] = 0.0f; 
mA[20793] = 0.0f; 
mA[20794] = 0.0f; 
mA[20795] = 0.0f; 
mA[20796] = 0.0f; 
mA[20797] = 0.0f; 
mA[20798] = 0.0f; 
mA[20799] = 0.0f; 
mA[20800] = 0.0f; 
mA[20801] = 0.0f; 
mA[20802] = 0.0f; 
mA[20803] = 0.0f; 
mA[20804] = 0.0f; 
mA[20805] = 0.0f; 
mA[20806] = 0.0f; 
mA[20807] = 0.0f; 
mA[20808] = 0.0f; 
mA[20809] = 0.0f; 
mA[20810] = 0.0f; 
mA[20811] = 0.0f; 
mA[20812] = 0.0f; 
mA[20813] = 0.0f; 
mA[20814] = 0.0f; 
mA[20815] =  v_v11_ppp_bw ; 
mA[20816] = 0.0f; 
mA[20817] = 0.0f; 
mA[20818] = 0.0f; 
mA[20819] = 0.0f; 
mA[20820] = 0.0f; 
mA[20821] = 0.0f; 
mA[20822] = 0.0f; 
mA[20823] = 0.0f; 
mA[20824] = 0.0f; 
mA[20825] = 0.0f; 
mA[20826] = 0.0f; 
mA[20827] = 0.0f; 
mA[20828] = 0.0f; 
mA[20829] = 0.0f; 
mA[20830] = 0.0f; 
mA[20831] = 0.0f; 
mA[20832] = 0.0f; 
mA[20833] = 0.0f; 
mA[20834] = 0.0f; 
mA[20835] = 0.0f; 
mA[20836] = 0.0f; 
mA[20837] = 0.0f; 
mA[20838] = 0.0f; 
mA[20839] = 0.0f; 
mA[20840] = 0.0f; 
mA[20841] =  v_v13_ppp_fw ; 
mA[20842] = 0.0f; 
mA[20843] = 0.0f; 
mA[20844] = 0.0f; 
mA[20845] = 0.0f; 
mA[20846] = 0.0f; 
mA[20847] = 0.0f; 
mA[20848] = 0.0f; 
mA[20849] = 0.0f; 
mA[20850] = ( (  -1.0f  * v_v11_ppp_fw   )  +(  -1.0f  * v_v13_ppp_bw   )   ) ; 
mA[20851] = 0.0f; 
mA[20852] = 0.0f; 
mA[20853] = 0.0f; 
mA[20854] = 0.0f; 
mA[20855] = 0.0f; 
mA[20856] = 0.0f; 
mA[20857] = 0.0f; 
mA[20858] = 0.0f; 
mA[20859] = 0.0f; 
mA[20860] = 0.0f; 
mA[20861] = 0.0f; 
mA[20862] = 0.0f; 
mA[20863] = 0.0f; 
mA[20864] = 0.0f; 
mA[20865] = 0.0f; 
mA[20866] = 0.0f; 
mA[20867] = 0.0f; 
mA[20868] = 0.0f; 
mA[20869] = 0.0f; 
mA[20870] = 0.0f; 
mA[20871] = 0.0f; 
mA[20872] = 0.0f; 
mA[20873] = 0.0f; 
mA[20874] = 0.0f; 
mA[20875] = 0.0f; 
mA[20876] = 0.0f; 
mA[20877] = 0.0f; 
mA[20878] = 0.0f; 
mA[20879] = 0.0f; 
mA[20880] = 0.0f; 
mA[20881] = 0.0f; 
mA[20882] = 0.0f; 
mA[20883] = 0.0f; 
mA[20884] = 0.0f; 
mA[20885] = 0.0f; 
mA[20886] = 0.0f; 
mA[20887] = 0.0f; 
mA[20888] = 0.0f; 
mA[20889] = 0.0f; 
mA[20890] = 0.0f; 
mA[20891] = 0.0f; 
mA[20892] = 0.0f; 
mA[20893] = 0.0f; 
mA[20894] = 0.0f; 
mA[20895] = 0.0f; 
mA[20896] = 0.0f; 
mA[20897] = 0.0f; 
mA[20898] = 0.0f; 
mA[20899] = 0.0f; 
mA[20900] = 0.0f; 
mA[20901] = 0.0f; 
mA[20902] = 0.0f; 
mA[20903] = 0.0f; 
mA[20904] = 0.0f; 
mA[20905] = 0.0f; 
mA[20906] = 0.0f; 
mA[20907] = 0.0f; 
mA[20908] = 0.0f; 
mA[20909] = 0.0f; 
mA[20910] = 0.0f; 
mA[20911] = 0.0f; 
mA[20912] =  v_v13_ppp_fw ; 
mA[20913] = 0.0f; 
mA[20914] = 0.0f; 
mA[20915] = 0.0f; 
mA[20916] = 0.0f; 
mA[20917] = 0.0f; 
mA[20918] = 0.0f; 
mA[20919] = 0.0f; 
mA[20920] = 0.0f; 
mA[20921] = 0.0f; 
mA[20922] = 0.0f; 
mA[20923] = 0.0f; 
mA[20924] = 0.0f; 
mA[20925] = 0.0f; 
mA[20926] = 0.0f; 
mA[20927] = 0.0f; 
mA[20928] = 0.0f; 
mA[20929] = 0.0f; 
mA[20930] = 0.0f; 
mA[20931] = 0.0f; 
mA[20932] = 0.0f; 
mA[20933] = 0.0f; 
mA[20934] = 0.0f; 
mA[20935] = 0.0f; 
mA[20936] = 0.0f; 
mA[20937] = 0.0f; 
mA[20938] = 0.0f; 
mA[20939] = 0.0f; 
mA[20940] = 0.0f; 
mA[20941] = 0.0f; 
mA[20942] = 0.0f; 
mA[20943] = 0.0f; 
mA[20944] = 0.0f; 
mA[20945] = 0.0f; 
mA[20946] = 0.0f; 
mA[20947] = 0.0f; 
mA[20948] = 0.0f; 
mA[20949] = 0.0f; 
mA[20950] = 0.0f; 
mA[20951] = 0.0f; 
mA[20952] = 0.0f; 
mA[20953] = 0.0f; 
mA[20954] = 0.0f; 
mA[20955] = 0.0f; 
mA[20956] = 0.0f; 
mA[20957] = 0.0f; 
mA[20958] = 0.0f; 
mA[20959] = 0.0f; 
mA[20960] = 0.0f; 
mA[20961] = 0.0f; 
mA[20962] = 0.0f; 
mA[20963] = 0.0f; 
mA[20964] = 0.0f; 
mA[20965] =  v_v11_ppp_bw ; 
mA[20966] = 0.0f; 
mA[20967] = 0.0f; 
mA[20968] = 0.0f; 
mA[20969] = 0.0f; 
mA[20970] = 0.0f; 
mA[20971] = 0.0f; 
mA[20972] = 0.0f; 
mA[20973] = 0.0f; 
mA[20974] = 0.0f; 
mA[20975] = 0.0f; 
mA[20976] = 0.0f; 
mA[20977] = 0.0f; 
mA[20978] = 0.0f; 
mA[20979] = 0.0f; 
mA[20980] = 0.0f; 
mA[20981] = 0.0f; 
mA[20982] = 0.0f; 
mA[20983] = 0.0f; 
mA[20984] = 0.0f; 
mA[20985] = 0.0f; 
mA[20986] = 0.0f; 
mA[20987] = 0.0f; 
mA[20988] = 0.0f; 
mA[20989] = 0.0f; 
mA[20990] = 0.0f; 
mA[20991] = 0.0f; 
mA[20992] = 0.0f; 
mA[20993] = 0.0f; 
mA[20994] = 0.0f; 
mA[20995] = 0.0f; 
mA[20996] = 0.0f; 
mA[20997] = 0.0f; 
mA[20998] = 0.0f; 
mA[20999] = 0.0f; 
mA[21000] = ( (  -1.0f  * v_v11_ppp_fw   )  +(  -1.0f  * v_v13_ppp_bw   )   ) ; 
mA[21001] = 0.0f; 
mA[21002] = 0.0f; 
mA[21003] = 0.0f; 
mA[21004] = 0.0f; 
mA[21005] = 0.0f; 
mA[21006] = 0.0f; 
mA[21007] = 0.0f; 
mA[21008] = 0.0f; 
mA[21009] = 0.0f; 
mA[21010] = 0.0f; 
mA[21011] = 0.0f; 
mA[21012] = 0.0f; 
mA[21013] = 0.0f; 
mA[21014] = 0.0f; 
mA[21015] = 0.0f; 
mA[21016] = 0.0f; 
mA[21017] = 0.0f; 
mA[21018] = 0.0f; 
mA[21019] = 0.0f; 
mA[21020] = 0.0f; 
mA[21021] = 0.0f; 
mA[21022] = 0.0f; 
mA[21023] = 0.0f; 
mA[21024] = 0.0f; 
mA[21025] = 0.0f; 
mA[21026] = 0.0f; 
mA[21027] = 0.0f; 
mA[21028] = 0.0f; 
mA[21029] = 0.0f; 
mA[21030] = 0.0f; 
mA[21031] = 0.0f; 
mA[21032] = 0.0f; 
mA[21033] = 0.0f; 
mA[21034] = 0.0f; 
mA[21035] = 0.0f; 
mA[21036] = 0.0f; 
mA[21037] = 0.0f; 
mA[21038] = 0.0f; 
mA[21039] = 0.0f; 
mA[21040] = 0.0f; 
mA[21041] = 0.0f; 
mA[21042] = 0.0f; 
mA[21043] = 0.0f; 
mA[21044] = 0.0f; 
mA[21045] = 0.0f; 
mA[21046] = 0.0f; 
mA[21047] = 0.0f; 
mA[21048] = 0.0f; 
mA[21049] = 0.0f; 
mA[21050] = 0.0f; 
mA[21051] = 0.0f; 
mA[21052] = 0.0f; 
mA[21053] = 0.0f; 
mA[21054] = 0.0f; 
mA[21055] = 0.0f; 
mA[21056] = 0.0f; 
mA[21057] = 0.0f; 
mA[21058] = 0.0f; 
mA[21059] = 0.0f; 
mA[21060] = 0.0f; 
mA[21061] = 0.0f; 
mA[21062] =  v_v13_ppp_fw ; 
mA[21063] = 0.0f; 
mA[21064] = 0.0f; 
mA[21065] = 0.0f; 
mA[21066] = 0.0f; 
mA[21067] = 0.0f; 
mA[21068] = 0.0f; 
mA[21069] = 0.0f; 
mA[21070] = 0.0f; 
mA[21071] = 0.0f; 
mA[21072] = 0.0f; 
mA[21073] = 0.0f; 
mA[21074] = 0.0f; 
mA[21075] = 0.0f; 
mA[21076] = 0.0f; 
mA[21077] = 0.0f; 
mA[21078] = 0.0f; 
mA[21079] = 0.0f; 
mA[21080] = 0.0f; 
mA[21081] = 0.0f; 
mA[21082] = 0.0f; 
mA[21083] = 0.0f; 
mA[21084] = 0.0f; 
mA[21085] = 0.0f; 
mA[21086] = 0.0f; 
mA[21087] = 0.0f; 
mA[21088] = 0.0f; 
mA[21089] = 0.0f; 
mA[21090] = 0.0f; 
mA[21091] = 0.0f; 
mA[21092] = 0.0f; 
mA[21093] = 0.0f; 
mA[21094] = 0.0f; 
mA[21095] = 0.0f; 
mA[21096] = 0.0f; 
mA[21097] = 0.0f; 
mA[21098] = 0.0f; 
mA[21099] = 0.0f; 
mA[21100] = 0.0f; 
mA[21101] = 0.0f; 
mA[21102] = 0.0f; 
mA[21103] = 0.0f; 
mA[21104] = 0.0f; 
mA[21105] = 0.0f; 
mA[21106] = 0.0f; 
mA[21107] = 0.0f; 
mA[21108] = 0.0f; 
mA[21109] = 0.0f; 
mA[21110] = 0.0f; 
mA[21111] = 0.0f; 
mA[21112] = 0.0f; 
mA[21113] = 0.0f; 
mA[21114] = 0.0f; 
mA[21115] =  v_v11_ppp_bw ; 
mA[21116] = 0.0f; 
mA[21117] = 0.0f; 
mA[21118] = 0.0f; 
mA[21119] = 0.0f; 
mA[21120] = 0.0f; 
mA[21121] = 0.0f; 
mA[21122] = 0.0f; 
mA[21123] = 0.0f; 
mA[21124] = 0.0f; 
mA[21125] = 0.0f; 
mA[21126] = 0.0f; 
mA[21127] = 0.0f; 
mA[21128] = 0.0f; 
mA[21129] = 0.0f; 
mA[21130] = 0.0f; 
mA[21131] = 0.0f; 
mA[21132] = 0.0f; 
mA[21133] = 0.0f; 
mA[21134] = 0.0f; 
mA[21135] = 0.0f; 
mA[21136] = 0.0f; 
mA[21137] = 0.0f; 
mA[21138] = 0.0f; 
mA[21139] = 0.0f; 
mA[21140] = 0.0f; 
mA[21141] = 0.0f; 
mA[21142] = 0.0f; 
mA[21143] = 0.0f; 
mA[21144] = 0.0f; 
mA[21145] = 0.0f; 
mA[21146] = 0.0f; 
mA[21147] = 0.0f; 
mA[21148] = 0.0f; 
mA[21149] = 0.0f; 
mA[21150] = ( (  -1.0f  * v_v11_ppp_fw   )  +(  -1.0f  * v_v13_ppp_bw   )   ) ; 
mA[21151] = 0.0f; 
mA[21152] = 0.0f; 
mA[21153] = 0.0f; 
mA[21154] = 0.0f; 
mA[21155] = 0.0f; 
mA[21156] = 0.0f; 
mA[21157] = 0.0f; 
mA[21158] = 0.0f; 
mA[21159] = 0.0f; 
mA[21160] = 0.0f; 
mA[21161] = 0.0f; 
mA[21162] = 0.0f; 
mA[21163] = 0.0f; 
mA[21164] = 0.0f; 
mA[21165] = 0.0f; 
mA[21166] = 0.0f; 
mA[21167] = 0.0f; 
mA[21168] = 0.0f; 
mA[21169] = 0.0f; 
mA[21170] = 0.0f; 
mA[21171] = 0.0f; 
mA[21172] = 0.0f; 
mA[21173] = 0.0f; 
mA[21174] = 0.0f; 
mA[21175] = 0.0f; 
mA[21176] = 0.0f; 
mA[21177] = 0.0f; 
mA[21178] = 0.0f; 
mA[21179] = 0.0f; 
mA[21180] = 0.0f; 
mA[21181] = 0.0f; 
mA[21182] = 0.0f; 
mA[21183] = 0.0f; 
mA[21184] = 0.0f; 
mA[21185] = 0.0f; 
mA[21186] = 0.0f; 
mA[21187] = 0.0f; 
mA[21188] = 0.0f; 
mA[21189] = 0.0f; 
mA[21190] = 0.0f; 
mA[21191] = 0.0f; 
mA[21192] = 0.0f; 
mA[21193] = 0.0f; 
mA[21194] = 0.0f; 
mA[21195] = 0.0f; 
mA[21196] = 0.0f; 
mA[21197] = 0.0f; 
mA[21198] = 0.0f; 
mA[21199] = 0.0f; 
mA[21200] = 0.0f; 
mA[21201] = 0.0f; 
mA[21202] = 0.0f; 
mA[21203] = 0.0f; 
mA[21204] = 0.0f; 
mA[21205] = 0.0f; 
mA[21206] = 0.0f; 
mA[21207] = 0.0f; 
mA[21208] = 0.0f; 
mA[21209] = 0.0f; 
mA[21210] = 0.0f; 
mA[21211] = 0.0f; 
mA[21212] =  v_v13_ppp_fw ; 
mA[21213] = 0.0f; 
mA[21214] = 0.0f; 
mA[21215] = 0.0f; 
mA[21216] = 0.0f; 
mA[21217] = 0.0f; 
mA[21218] = 0.0f; 
mA[21219] = 0.0f; 
mA[21220] = 0.0f; 
mA[21221] = 0.0f; 
mA[21222] = 0.0f; 
mA[21223] = 0.0f; 
mA[21224] = 0.0f; 
mA[21225] = 0.0f; 
mA[21226] = 0.0f; 
mA[21227] = 0.0f; 
mA[21228] = 0.0f; 
mA[21229] = 0.0f; 
mA[21230] = 0.0f; 
mA[21231] = 0.0f; 
mA[21232] = 0.0f; 
mA[21233] = 0.0f; 
mA[21234] = 0.0f; 
mA[21235] = 0.0f; 
mA[21236] = 0.0f; 
mA[21237] = 0.0f; 
mA[21238] = 0.0f; 
mA[21239] = 0.0f; 
mA[21240] = 0.0f; 
mA[21241] = 0.0f; 
mA[21242] = 0.0f; 
mA[21243] = 0.0f; 
mA[21244] = 0.0f; 
mA[21245] = 0.0f; 
mA[21246] = 0.0f; 
mA[21247] = 0.0f; 
mA[21248] = 0.0f; 
mA[21249] = 0.0f; 
mA[21250] = 0.0f; 
mA[21251] = 0.0f; 
mA[21252] = 0.0f; 
mA[21253] = 0.0f; 
mA[21254] = 0.0f; 
mA[21255] = 0.0f; 
mA[21256] = 0.0f; 
mA[21257] = 0.0f; 
mA[21258] = 0.0f; 
mA[21259] = 0.0f; 
mA[21260] = 0.0f; 
mA[21261] = 0.0f; 
mA[21262] = 0.0f; 
mA[21263] = 0.0f; 
mA[21264] = 0.0f; 
mA[21265] =  v_v11_ppp_bw ; 
mA[21266] = 0.0f; 
mA[21267] = 0.0f; 
mA[21268] = 0.0f; 
mA[21269] = 0.0f; 
mA[21270] = 0.0f; 
mA[21271] = 0.0f; 
mA[21272] = 0.0f; 
mA[21273] = 0.0f; 
mA[21274] = 0.0f; 
mA[21275] = 0.0f; 
mA[21276] = 0.0f; 
mA[21277] = 0.0f; 
mA[21278] = 0.0f; 
mA[21279] = 0.0f; 
mA[21280] = 0.0f; 
mA[21281] = 0.0f; 
mA[21282] = 0.0f; 
mA[21283] = 0.0f; 
mA[21284] = 0.0f; 
mA[21285] = 0.0f; 
mA[21286] = 0.0f; 
mA[21287] = 0.0f; 
mA[21288] = 0.0f; 
mA[21289] = 0.0f; 
mA[21290] = 0.0f; 
mA[21291] = 0.0f; 
mA[21292] = 0.0f; 
mA[21293] = 0.0f; 
mA[21294] = 0.0f; 
mA[21295] = 0.0f; 
mA[21296] = 0.0f; 
mA[21297] = 0.0f; 
mA[21298] = 0.0f; 
mA[21299] = 0.0f; 
mA[21300] = ( (  -1.0f  * v_v13_ppp_bw   )  +(  -1.0f  * v_v11_ppp_fw   )   ) ; 
mA[21301] = 0.0f; 
mA[21302] = 0.0f; 
mA[21303] = 0.0f; 
mA[21304] = 0.0f; 
mA[21305] = 0.0f; 
mA[21306] = 0.0f; 
mA[21307] = 0.0f; 
mA[21308] = 0.0f; 
mA[21309] = 0.0f; 
mA[21310] = 0.0f; 
mA[21311] = 0.0f; 
mA[21312] = 0.0f; 
mA[21313] = 0.0f; 
mA[21314] = 0.0f; 
mA[21315] = 0.0f; 
mA[21316] = 0.0f; 
mA[21317] = 0.0f; 
mA[21318] = 0.0f; 
mA[21319] = 0.0f; 
mA[21320] =  v_v10_ppp_fw ; 
mA[21321] = 0.0f; 
mA[21322] = 0.0f; 
mA[21323] = 0.0f; 
mA[21324] = 0.0f; 
mA[21325] = 0.0f; 
mA[21326] = 0.0f; 
mA[21327] = 0.0f; 
mA[21328] = 0.0f; 
mA[21329] = 0.0f; 
mA[21330] = 0.0f; 
mA[21331] = 0.0f; 
mA[21332] = 0.0f; 
mA[21333] = 0.0f; 
mA[21334] = 0.0f; 
mA[21335] = 0.0f; 
mA[21336] = 0.0f; 
mA[21337] = 0.0f; 
mA[21338] = 0.0f; 
mA[21339] = 0.0f; 
mA[21340] = 0.0f; 
mA[21341] = 0.0f; 
mA[21342] = 0.0f; 
mA[21343] = 0.0f; 
mA[21344] = 0.0f; 
mA[21345] = 0.0f; 
mA[21346] = 0.0f; 
mA[21347] = 0.0f; 
mA[21348] = 0.0f; 
mA[21349] = 0.0f; 
mA[21350] = 0.0f; 
mA[21351] = 0.0f; 
mA[21352] = 0.0f; 
mA[21353] = 0.0f; 
mA[21354] = 0.0f; 
mA[21355] = 0.0f; 
mA[21356] = 0.0f; 
mA[21357] = 0.0f; 
mA[21358] = 0.0f; 
mA[21359] = 0.0f; 
mA[21360] = 0.0f; 
mA[21361] = 0.0f; 
mA[21362] = 0.0f; 
mA[21363] = 0.0f; 
mA[21364] = 0.0f; 
mA[21365] = 0.0f; 
mA[21366] = 0.0f; 
mA[21367] = 0.0f; 
mA[21368] = 0.0f; 
mA[21369] = 0.0f; 
mA[21370] = 0.0f; 
mA[21371] = 0.0f; 
mA[21372] = 0.0f; 
mA[21373] = 0.0f; 
mA[21374] = 0.0f; 
mA[21375] = 0.0f; 
mA[21376] = 0.0f; 
mA[21377] = 0.0f; 
mA[21378] = 0.0f; 
mA[21379] = 0.0f; 
mA[21380] = 0.0f; 
mA[21381] = 0.0f; 
mA[21382] =  v_v18_ed_fw ; 
mA[21383] = 0.0f; 
mA[21384] = 0.0f; 
mA[21385] = 0.0f; 
mA[21386] = 0.0f; 
mA[21387] = 0.0f; 
mA[21388] = 0.0f; 
mA[21389] = 0.0f; 
mA[21390] = 0.0f; 
mA[21391] = 0.0f; 
mA[21392] = 0.0f; 
mA[21393] = 0.0f; 
mA[21394] = 0.0f; 
mA[21395] = 0.0f; 
mA[21396] = 0.0f; 
mA[21397] = 0.0f; 
mA[21398] = 0.0f; 
mA[21399] = 0.0f; 
mA[21400] = 0.0f; 
mA[21401] = 0.0f; 
mA[21402] = 0.0f; 
mA[21403] = 0.0f; 
mA[21404] = 0.0f; 
mA[21405] = 0.0f; 
mA[21406] = 0.0f; 
mA[21407] = 0.0f; 
mA[21408] = 0.0f; 
mA[21409] = 0.0f; 
mA[21410] = 0.0f; 
mA[21411] = 0.0f; 
mA[21412] = 0.0f; 
mA[21413] = 0.0f; 
mA[21414] = 0.0f; 
mA[21415] = 0.0f; 
mA[21416] = 0.0f; 
mA[21417] = 0.0f; 
mA[21418] = 0.0f; 
mA[21419] = 0.0f; 
mA[21420] = 0.0f; 
mA[21421] = 0.0f; 
mA[21422] = 0.0f; 
mA[21423] = 0.0f; 
mA[21424] = 0.0f; 
mA[21425] = 0.0f; 
mA[21426] = 0.0f; 
mA[21427] = 0.0f; 
mA[21428] = 0.0f; 
mA[21429] = 0.0f; 
mA[21430] = 0.0f; 
mA[21431] = 0.0f; 
mA[21432] = 0.0f; 
mA[21433] = 0.0f; 
mA[21434] = 0.0f; 
mA[21435] = 0.0f; 
mA[21436] = 0.0f; 
mA[21437] = 0.0f; 
mA[21438] = 0.0f; 
mA[21439] = 0.0f; 
mA[21440] = 0.0f; 
mA[21441] = 0.0f; 
mA[21442] = 0.0f; 
mA[21443] = 0.0f; 
mA[21444] = 0.0f; 
mA[21445] = 0.0f; 
mA[21446] = 0.0f; 
mA[21447] = 0.0f; 
mA[21448] = 0.0f; 
mA[21449] = 0.0f; 
mA[21450] = ( (  -1.0f  * v_v09_ppp_fw   )   ) ; 
mA[21451] = 0.0f; 
mA[21452] = 0.0f; 
mA[21453] = 0.0f; 
mA[21454] = 0.0f; 
mA[21455] = 0.0f; 
mA[21456] = 0.0f; 
mA[21457] = 0.0f; 
mA[21458] = 0.0f; 
mA[21459] = 0.0f; 
mA[21460] = 0.0f; 
mA[21461] = 0.0f; 
mA[21462] = 0.0f; 
mA[21463] = 0.0f; 
mA[21464] = 0.0f; 
mA[21465] = 0.0f; 
mA[21466] = 0.0f; 
mA[21467] = 0.0f; 
mA[21468] = 0.0f; 
mA[21469] = 0.0f; 
mA[21470] = 0.0f; 
mA[21471] = 0.0f; 
mA[21472] = 0.0f; 
mA[21473] = 0.0f; 
mA[21474] = 0.0f; 
mA[21475] = 0.0f; 
mA[21476] = 0.0f; 
mA[21477] = 0.0f; 
mA[21478] = 0.0f; 
mA[21479] = 0.0f; 
mA[21480] = 0.0f; 
mA[21481] = 0.0f; 
mA[21482] = 0.0f; 
mA[21483] = 0.0f; 
mA[21484] = 0.0f; 
mA[21485] = 0.0f; 
mA[21486] = 0.0f; 
mA[21487] = 0.0f; 
mA[21488] = 0.0f; 
mA[21489] = 0.0f; 
mA[21490] = 0.0f; 
mA[21491] = 0.0f; 
mA[21492] = 0.0f; 
mA[21493] = 0.0f; 
mA[21494] = 0.0f; 
mA[21495] = 0.0f; 
mA[21496] = 0.0f; 
mA[21497] = 0.0f; 
mA[21498] = 0.0f; 
mA[21499] = 0.0f; 
mA[21500] = 0.0f; 
mA[21501] = 0.0f; 
mA[21502] = 0.0f; 
mA[21503] = 0.0f; 
mA[21504] = 0.0f; 
mA[21505] = 0.0f; 
mA[21506] = 0.0f; 
mA[21507] = 0.0f; 
mA[21508] = 0.0f; 
mA[21509] = 0.0f; 
mA[21510] = 0.0f; 
mA[21511] = 0.0f; 
mA[21512] = 0.0f; 
mA[21513] = 0.0f; 
mA[21514] = 0.0f; 
mA[21515] = 0.0f; 
mA[21516] = 0.0f; 
mA[21517] = 0.0f; 
mA[21518] = 0.0f; 
mA[21519] = 0.0f; 
mA[21520] = 0.0f; 
mA[21521] = 0.0f; 
mA[21522] = 0.0f; 
mA[21523] = 0.0f; 
mA[21524] = 0.0f; 
mA[21525] = 0.0f; 
mA[21526] = 0.0f; 
mA[21527] = 0.0f; 
mA[21528] = 0.0f; 
mA[21529] = 0.0f; 
mA[21530] = 0.0f; 
mA[21531] = 0.0f; 
mA[21532] =  v_v18_ed_fw ; 
mA[21533] = 0.0f; 
mA[21534] = 0.0f; 
mA[21535] = 0.0f; 
mA[21536] = 0.0f; 
mA[21537] = 0.0f; 
mA[21538] = 0.0f; 
mA[21539] = 0.0f; 
mA[21540] = 0.0f; 
mA[21541] = 0.0f; 
mA[21542] = 0.0f; 
mA[21543] = 0.0f; 
mA[21544] = 0.0f; 
mA[21545] = 0.0f; 
mA[21546] = 0.0f; 
mA[21547] = 0.0f; 
mA[21548] = 0.0f; 
mA[21549] = 0.0f; 
mA[21550] = 0.0f; 
mA[21551] = 0.0f; 
mA[21552] = 0.0f; 
mA[21553] = 0.0f; 
mA[21554] = 0.0f; 
mA[21555] = 0.0f; 
mA[21556] = 0.0f; 
mA[21557] = 0.0f; 
mA[21558] = 0.0f; 
mA[21559] =  v_v10_ppp_fw ; 
mA[21560] = 0.0f; 
mA[21561] = 0.0f; 
mA[21562] = 0.0f; 
mA[21563] = 0.0f; 
mA[21564] = 0.0f; 
mA[21565] = 0.0f; 
mA[21566] = 0.0f; 
mA[21567] = 0.0f; 
mA[21568] = 0.0f; 
mA[21569] = 0.0f; 
mA[21570] = 0.0f; 
mA[21571] = 0.0f; 
mA[21572] = 0.0f; 
mA[21573] = 0.0f; 
mA[21574] = 0.0f; 
mA[21575] = 0.0f; 
mA[21576] = 0.0f; 
mA[21577] = 0.0f; 
mA[21578] = 0.0f; 
mA[21579] = 0.0f; 
mA[21580] = 0.0f; 
mA[21581] = 0.0f; 
mA[21582] = 0.0f; 
mA[21583] = 0.0f; 
mA[21584] = 0.0f; 
mA[21585] = 0.0f; 
mA[21586] = 0.0f; 
mA[21587] = 0.0f; 
mA[21588] = 0.0f; 
mA[21589] = 0.0f; 
mA[21590] = 0.0f; 
mA[21591] = 0.0f; 
mA[21592] = 0.0f; 
mA[21593] = 0.0f; 
mA[21594] = 0.0f; 
mA[21595] = 0.0f; 
mA[21596] = 0.0f; 
mA[21597] = 0.0f; 
mA[21598] = 0.0f; 
mA[21599] = 0.0f; 
mA[21600] = ( (  -1.0f  * v_v09_ppp_fw   )   ) ; 
mA[21601] = 0.0f; 
mA[21602] = 0.0f; 
mA[21603] = 0.0f; 
mA[21604] = 0.0f; 
mA[21605] = 0.0f; 
mA[21606] = 0.0f; 
mA[21607] = 0.0f; 
mA[21608] = 0.0f; 
mA[21609] = 0.0f; 
mA[21610] = 0.0f; 
mA[21611] = 0.0f; 
mA[21612] = 0.0f; 
mA[21613] = 0.0f; 
mA[21614] = 0.0f; 
mA[21615] = 0.0f; 
mA[21616] = 0.0f; 
mA[21617] = 0.0f; 
mA[21618] = 0.0f; 
mA[21619] = 0.0f; 
mA[21620] = 0.0f; 
mA[21621] = 0.0f; 
mA[21622] = 0.0f; 
mA[21623] = 0.0f; 
mA[21624] = 0.0f; 
mA[21625] = 0.0f; 
mA[21626] = 0.0f; 
mA[21627] = 0.0f; 
mA[21628] = 0.0f; 
mA[21629] = 0.0f; 
mA[21630] = 0.0f; 
mA[21631] = 0.0f; 
mA[21632] = 0.0f; 
mA[21633] = 0.0f; 
mA[21634] = 0.0f; 
mA[21635] = 0.0f; 
mA[21636] = 0.0f; 
mA[21637] = 0.0f; 
mA[21638] = 0.0f; 
mA[21639] = 0.0f; 
mA[21640] = 0.0f; 
mA[21641] = 0.0f; 
mA[21642] = 0.0f; 
mA[21643] = 0.0f; 
mA[21644] = 0.0f; 
mA[21645] = 0.0f; 
mA[21646] = 0.0f; 
mA[21647] = 0.0f; 
mA[21648] = 0.0f; 
mA[21649] = 0.0f; 
mA[21650] = 0.0f; 
mA[21651] = 0.0f; 
mA[21652] = 0.0f; 
mA[21653] = 0.0f; 
mA[21654] = 0.0f; 
mA[21655] = 0.0f; 
mA[21656] = 0.0f; 
mA[21657] = 0.0f; 
mA[21658] = 0.0f; 
mA[21659] = 0.0f; 
mA[21660] = 0.0f; 
mA[21661] = 0.0f; 
mA[21662] = 0.0f; 
mA[21663] = 0.0f; 
mA[21664] = 0.0f; 
mA[21665] = 0.0f; 
mA[21666] = 0.0f; 
mA[21667] = 0.0f; 
mA[21668] = 0.0f; 
mA[21669] = 0.0f; 
mA[21670] = 0.0f; 
mA[21671] = 0.0f; 
mA[21672] = 0.0f; 
mA[21673] = 0.0f; 
mA[21674] = 0.0f; 
mA[21675] = 0.0f; 
mA[21676] = 0.0f; 
mA[21677] = 0.0f; 
mA[21678] = 0.0f; 
mA[21679] = 0.0f; 
mA[21680] = 0.0f; 
mA[21681] = 0.0f; 
mA[21682] =  v_v18_ed_fw ; 
mA[21683] = 0.0f; 
mA[21684] = 0.0f; 
mA[21685] = 0.0f; 
mA[21686] = 0.0f; 
mA[21687] = 0.0f; 
mA[21688] = 0.0f; 
mA[21689] = 0.0f; 
mA[21690] = 0.0f; 
mA[21691] = 0.0f; 
mA[21692] = 0.0f; 
mA[21693] = 0.0f; 
mA[21694] = 0.0f; 
mA[21695] = 0.0f; 
mA[21696] = 0.0f; 
mA[21697] = 0.0f; 
mA[21698] = 0.0f; 
mA[21699] = 0.0f; 
mA[21700] = 0.0f; 
mA[21701] = 0.0f; 
mA[21702] = 0.0f; 
mA[21703] = 0.0f; 
mA[21704] = 0.0f; 
mA[21705] = 0.0f; 
mA[21706] = 0.0f; 
mA[21707] = 0.0f; 
mA[21708] = 0.0f; 
mA[21709] =  v_v10_ppp_fw ; 
mA[21710] = 0.0f; 
mA[21711] = 0.0f; 
mA[21712] = 0.0f; 
mA[21713] = 0.0f; 
mA[21714] = 0.0f; 
mA[21715] = 0.0f; 
mA[21716] = 0.0f; 
mA[21717] = 0.0f; 
mA[21718] = 0.0f; 
mA[21719] = 0.0f; 
mA[21720] = 0.0f; 
mA[21721] = 0.0f; 
mA[21722] = 0.0f; 
mA[21723] = 0.0f; 
mA[21724] = 0.0f; 
mA[21725] = 0.0f; 
mA[21726] = 0.0f; 
mA[21727] = 0.0f; 
mA[21728] = 0.0f; 
mA[21729] = 0.0f; 
mA[21730] = 0.0f; 
mA[21731] = 0.0f; 
mA[21732] = 0.0f; 
mA[21733] = 0.0f; 
mA[21734] = 0.0f; 
mA[21735] = 0.0f; 
mA[21736] = 0.0f; 
mA[21737] = 0.0f; 
mA[21738] = 0.0f; 
mA[21739] = 0.0f; 
mA[21740] = 0.0f; 
mA[21741] = 0.0f; 
mA[21742] = 0.0f; 
mA[21743] = 0.0f; 
mA[21744] = 0.0f; 
mA[21745] = 0.0f; 
mA[21746] = 0.0f; 
mA[21747] = 0.0f; 
mA[21748] = 0.0f; 
mA[21749] = 0.0f; 
mA[21750] = ( (  -1.0f  * v_v09_ppp_fw   )   ) ; 
mA[21751] = 0.0f; 
mA[21752] = 0.0f; 
mA[21753] = 0.0f; 
mA[21754] = 0.0f; 
mA[21755] = 0.0f; 
mA[21756] = 0.0f; 
mA[21757] = 0.0f; 
mA[21758] = 0.0f; 
mA[21759] = 0.0f; 
mA[21760] = 0.0f; 
mA[21761] = 0.0f; 
mA[21762] = 0.0f; 
mA[21763] = 0.0f; 
mA[21764] = 0.0f; 
mA[21765] = 0.0f; 
mA[21766] = 0.0f; 
mA[21767] = 0.0f; 
mA[21768] = 0.0f; 
mA[21769] = 0.0f; 
mA[21770] = 0.0f; 
mA[21771] = 0.0f; 
mA[21772] = 0.0f; 
mA[21773] = 0.0f; 
mA[21774] = 0.0f; 
mA[21775] = 0.0f; 
mA[21776] = 0.0f; 
mA[21777] = 0.0f; 
mA[21778] = 0.0f; 
mA[21779] = 0.0f; 
mA[21780] = 0.0f; 
mA[21781] = 0.0f; 
mA[21782] = 0.0f; 
mA[21783] = 0.0f; 
mA[21784] = 0.0f; 
mA[21785] = 0.0f; 
mA[21786] = 0.0f; 
mA[21787] = 0.0f; 
mA[21788] = 0.0f; 
mA[21789] = 0.0f; 
mA[21790] = 0.0f; 
mA[21791] = 0.0f; 
mA[21792] = 0.0f; 
mA[21793] = 0.0f; 
mA[21794] = 0.0f; 
mA[21795] = 0.0f; 
mA[21796] = 0.0f; 
mA[21797] = 0.0f; 
mA[21798] = 0.0f; 
mA[21799] = 0.0f; 
mA[21800] = 0.0f; 
mA[21801] = 0.0f; 
mA[21802] = 0.0f; 
mA[21803] = 0.0f; 
mA[21804] = 0.0f; 
mA[21805] = 0.0f; 
mA[21806] = 0.0f; 
mA[21807] = 0.0f; 
mA[21808] = 0.0f; 
mA[21809] = 0.0f; 
mA[21810] = 0.0f; 
mA[21811] = 0.0f; 
mA[21812] = 0.0f; 
mA[21813] = 0.0f; 
mA[21814] = 0.0f; 
mA[21815] = 0.0f; 
mA[21816] = 0.0f; 
mA[21817] = 0.0f; 
mA[21818] = 0.0f; 
mA[21819] = 0.0f; 
mA[21820] = 0.0f; 
mA[21821] = 0.0f; 
mA[21822] = 0.0f; 
mA[21823] = 0.0f; 
mA[21824] = 0.0f; 
mA[21825] = 0.0f; 
mA[21826] = 0.0f; 
mA[21827] = 0.0f; 
mA[21828] = 0.0f; 
mA[21829] = 0.0f; 
mA[21830] = 0.0f; 
mA[21831] = 0.0f; 
mA[21832] =  v_v18_ed_fw ; 
mA[21833] = 0.0f; 
mA[21834] = 0.0f; 
mA[21835] = 0.0f; 
mA[21836] = 0.0f; 
mA[21837] = 0.0f; 
mA[21838] = 0.0f; 
mA[21839] = 0.0f; 
mA[21840] = 0.0f; 
mA[21841] = 0.0f; 
mA[21842] = 0.0f; 
mA[21843] = 0.0f; 
mA[21844] = 0.0f; 
mA[21845] = 0.0f; 
mA[21846] = 0.0f; 
mA[21847] = 0.0f; 
mA[21848] = 0.0f; 
mA[21849] = 0.0f; 
mA[21850] = 0.0f; 
mA[21851] = 0.0f; 
mA[21852] = 0.0f; 
mA[21853] = 0.0f; 
mA[21854] = 0.0f; 
mA[21855] = 0.0f; 
mA[21856] = 0.0f; 
mA[21857] = 0.0f; 
mA[21858] = 0.0f; 
mA[21859] =  v_v10_ppp_fw ; 
mA[21860] = 0.0f; 
mA[21861] = 0.0f; 
mA[21862] = 0.0f; 
mA[21863] = 0.0f; 
mA[21864] = 0.0f; 
mA[21865] = 0.0f; 
mA[21866] = 0.0f; 
mA[21867] = 0.0f; 
mA[21868] = 0.0f; 
mA[21869] = 0.0f; 
mA[21870] = 0.0f; 
mA[21871] = 0.0f; 
mA[21872] = 0.0f; 
mA[21873] = 0.0f; 
mA[21874] = 0.0f; 
mA[21875] = 0.0f; 
mA[21876] = 0.0f; 
mA[21877] = 0.0f; 
mA[21878] = 0.0f; 
mA[21879] = 0.0f; 
mA[21880] = 0.0f; 
mA[21881] = 0.0f; 
mA[21882] = 0.0f; 
mA[21883] = 0.0f; 
mA[21884] = 0.0f; 
mA[21885] = 0.0f; 
mA[21886] = 0.0f; 
mA[21887] = 0.0f; 
mA[21888] = 0.0f; 
mA[21889] = 0.0f; 
mA[21890] = 0.0f; 
mA[21891] = 0.0f; 
mA[21892] = 0.0f; 
mA[21893] = 0.0f; 
mA[21894] = 0.0f; 
mA[21895] = 0.0f; 
mA[21896] = 0.0f; 
mA[21897] = 0.0f; 
mA[21898] = 0.0f; 
mA[21899] = 0.0f; 
mA[21900] = ( (  -1.0f  * v_v09_ppp_fw   )   ) ; 
mA[21901] = 0.0f; 
mA[21902] = 0.0f; 
mA[21903] = 0.0f; 
mA[21904] = 0.0f; 
mA[21905] = 0.0f; 
mA[21906] = 0.0f; 
mA[21907] = 0.0f; 
mA[21908] = 0.0f; 
mA[21909] = 0.0f; 
mA[21910] = 0.0f; 
mA[21911] = 0.0f; 
mA[21912] = 0.0f; 
mA[21913] = 0.0f; 
mA[21914] = 0.0f; 
mA[21915] = 0.0f; 
mA[21916] = 0.0f; 
mA[21917] = 0.0f; 
mA[21918] = 0.0f; 
mA[21919] = 0.0f; 
mA[21920] = 0.0f; 
mA[21921] = 0.0f; 
mA[21922] = 0.0f; 
mA[21923] = 0.0f; 
mA[21924] = 0.0f; 
mA[21925] = 0.0f; 
mA[21926] = 0.0f; 
mA[21927] = 0.0f; 
mA[21928] = 0.0f; 
mA[21929] = 0.0f; 
mA[21930] = 0.0f; 
mA[21931] = 0.0f; 
mA[21932] = 0.0f; 
mA[21933] = 0.0f; 
mA[21934] = 0.0f; 
mA[21935] = 0.0f; 
mA[21936] = 0.0f; 
mA[21937] = 0.0f; 
mA[21938] = 0.0f; 
mA[21939] = 0.0f; 
mA[21940] = 0.0f; 
mA[21941] = 0.0f; 
mA[21942] = 0.0f; 
mA[21943] = 0.0f; 
mA[21944] = 0.0f; 
mA[21945] = 0.0f; 
mA[21946] = 0.0f; 
mA[21947] = 0.0f; 
mA[21948] = 0.0f; 
mA[21949] = 0.0f; 
mA[21950] = 0.0f; 
mA[21951] = 0.0f; 
mA[21952] = 0.0f; 
mA[21953] = 0.0f; 
mA[21954] = 0.0f; 
mA[21955] = 0.0f; 
mA[21956] = 0.0f; 
mA[21957] = 0.0f; 
mA[21958] = 0.0f; 
mA[21959] = 0.0f; 
mA[21960] = 0.0f; 
mA[21961] = 0.0f; 
mA[21962] = 0.0f; 
mA[21963] = 0.0f; 
mA[21964] = 0.0f; 
mA[21965] = 0.0f; 
mA[21966] = 0.0f; 
mA[21967] = 0.0f; 
mA[21968] = 0.0f; 
mA[21969] = 0.0f; 
mA[21970] = 0.0f; 
mA[21971] = 0.0f; 
mA[21972] = 0.0f; 
mA[21973] = 0.0f; 
mA[21974] = 0.0f; 
mA[21975] = 0.0f; 
mA[21976] = 0.0f; 
mA[21977] = 0.0f; 
mA[21978] = 0.0f; 
mA[21979] = 0.0f; 
mA[21980] = 0.0f; 
mA[21981] = 0.0f; 
mA[21982] =  v_v18_ed_fw ; 
mA[21983] = 0.0f; 
mA[21984] = 0.0f; 
mA[21985] = 0.0f; 
mA[21986] = 0.0f; 
mA[21987] = 0.0f; 
mA[21988] = 0.0f; 
mA[21989] = 0.0f; 
mA[21990] = 0.0f; 
mA[21991] = 0.0f; 
mA[21992] = 0.0f; 
mA[21993] = 0.0f; 
mA[21994] = 0.0f; 
mA[21995] = 0.0f; 
mA[21996] = 0.0f; 
mA[21997] = 0.0f; 
mA[21998] = 0.0f; 
mA[21999] = 0.0f; 
mA[22000] = 0.0f; 
mA[22001] = 0.0f; 
mA[22002] = 0.0f; 
mA[22003] = 0.0f; 
mA[22004] = 0.0f; 
mA[22005] = 0.0f; 
mA[22006] = 0.0f; 
mA[22007] = 0.0f; 
mA[22008] = 0.0f; 
mA[22009] =  v_v10_ppp_fw ; 
mA[22010] = 0.0f; 
mA[22011] = 0.0f; 
mA[22012] = 0.0f; 
mA[22013] = 0.0f; 
mA[22014] = 0.0f; 
mA[22015] = 0.0f; 
mA[22016] = 0.0f; 
mA[22017] = 0.0f; 
mA[22018] = 0.0f; 
mA[22019] = 0.0f; 
mA[22020] = 0.0f; 
mA[22021] = 0.0f; 
mA[22022] = 0.0f; 
mA[22023] = 0.0f; 
mA[22024] = 0.0f; 
mA[22025] = 0.0f; 
mA[22026] = 0.0f; 
mA[22027] = 0.0f; 
mA[22028] = 0.0f; 
mA[22029] = 0.0f; 
mA[22030] = 0.0f; 
mA[22031] = 0.0f; 
mA[22032] = 0.0f; 
mA[22033] = 0.0f; 
mA[22034] = 0.0f; 
mA[22035] = 0.0f; 
mA[22036] = 0.0f; 
mA[22037] = 0.0f; 
mA[22038] = 0.0f; 
mA[22039] = 0.0f; 
mA[22040] = 0.0f; 
mA[22041] = 0.0f; 
mA[22042] = 0.0f; 
mA[22043] = 0.0f; 
mA[22044] = 0.0f; 
mA[22045] = 0.0f; 
mA[22046] = 0.0f; 
mA[22047] = 0.0f; 
mA[22048] = 0.0f; 
mA[22049] = 0.0f; 
mA[22050] = ( (  -1.0f  * v_v09_ppp_fw   )   ) ; 
mA[22051] = 0.0f; 
mA[22052] = 0.0f; 
mA[22053] = 0.0f; 
mA[22054] = 0.0f; 
mA[22055] = 0.0f; 
mA[22056] = 0.0f; 
mA[22057] = 0.0f; 
mA[22058] = 0.0f; 
mA[22059] = 0.0f; 
mA[22060] = 0.0f; 
mA[22061] = 0.0f; 
mA[22062] = 0.0f; 
mA[22063] = 0.0f; 
mA[22064] = 0.0f; 
mA[22065] = 0.0f; 
mA[22066] = 0.0f; 
mA[22067] = 0.0f; 
mA[22068] = 0.0f; 
mA[22069] = 0.0f; 
mA[22070] = 0.0f; 
mA[22071] = 0.0f; 
mA[22072] = 0.0f; 
mA[22073] = 0.0f; 
mA[22074] = 0.0f; 
mA[22075] = 0.0f; 
mA[22076] = 0.0f; 
mA[22077] = 0.0f; 
mA[22078] = 0.0f; 
mA[22079] = 0.0f; 
mA[22080] = 0.0f; 
mA[22081] = 0.0f; 
mA[22082] = 0.0f; 
mA[22083] = 0.0f; 
mA[22084] = 0.0f; 
mA[22085] = 0.0f; 
mA[22086] = 0.0f; 
mA[22087] = 0.0f; 
mA[22088] = 0.0f; 
mA[22089] = 0.0f; 
mA[22090] = 0.0f; 
mA[22091] = 0.0f; 
mA[22092] = 0.0f; 
mA[22093] = 0.0f; 
mA[22094] = 0.0f; 
mA[22095] = 0.0f; 
mA[22096] = 0.0f; 
mA[22097] = 0.0f; 
mA[22098] = 0.0f; 
mA[22099] = 0.0f; 
mA[22100] = 0.0f; 
mA[22101] = 0.0f; 
mA[22102] = 0.0f; 
mA[22103] = 0.0f; 
mA[22104] = 0.0f; 
mA[22105] = 0.0f; 
mA[22106] = 0.0f; 
mA[22107] = 0.0f; 
mA[22108] = 0.0f; 
mA[22109] = 0.0f; 
mA[22110] = 0.0f; 
mA[22111] = 0.0f; 
mA[22112] = 0.0f; 
mA[22113] = 0.0f; 
mA[22114] = 0.0f; 
mA[22115] = 0.0f; 
mA[22116] = 0.0f; 
mA[22117] = 0.0f; 
mA[22118] = 0.0f; 
mA[22119] = 0.0f; 
mA[22120] = 0.0f; 
mA[22121] = 0.0f; 
mA[22122] = 0.0f; 
mA[22123] = 0.0f; 
mA[22124] = 0.0f; 
mA[22125] = 0.0f; 
mA[22126] = 0.0f; 
mA[22127] = 0.0f; 
mA[22128] = 0.0f; 
mA[22129] = 0.0f; 
mA[22130] = 0.0f; 
mA[22131] = 0.0f; 
mA[22132] =  v_v18_ed_fw ; 
mA[22133] = 0.0f; 
mA[22134] = 0.0f; 
mA[22135] = 0.0f; 
mA[22136] = 0.0f; 
mA[22137] = 0.0f; 
mA[22138] = 0.0f; 
mA[22139] = 0.0f; 
mA[22140] = 0.0f; 
mA[22141] = 0.0f; 
mA[22142] = 0.0f; 
mA[22143] = 0.0f; 
mA[22144] = 0.0f; 
mA[22145] = 0.0f; 
mA[22146] = 0.0f; 
mA[22147] = 0.0f; 
mA[22148] = 0.0f; 
mA[22149] = 0.0f; 
mA[22150] = 0.0f; 
mA[22151] = 0.0f; 
mA[22152] = 0.0f; 
mA[22153] = 0.0f; 
mA[22154] = 0.0f; 
mA[22155] = 0.0f; 
mA[22156] = 0.0f; 
mA[22157] = 0.0f; 
mA[22158] = 0.0f; 
mA[22159] =  v_v10_ppp_fw ; 
mA[22160] = 0.0f; 
mA[22161] = 0.0f; 
mA[22162] = 0.0f; 
mA[22163] = 0.0f; 
mA[22164] = 0.0f; 
mA[22165] = 0.0f; 
mA[22166] = 0.0f; 
mA[22167] = 0.0f; 
mA[22168] = 0.0f; 
mA[22169] = 0.0f; 
mA[22170] = 0.0f; 
mA[22171] = 0.0f; 
mA[22172] = 0.0f; 
mA[22173] = 0.0f; 
mA[22174] = 0.0f; 
mA[22175] = 0.0f; 
mA[22176] = 0.0f; 
mA[22177] = 0.0f; 
mA[22178] = 0.0f; 
mA[22179] = 0.0f; 
mA[22180] = 0.0f; 
mA[22181] = 0.0f; 
mA[22182] = 0.0f; 
mA[22183] = 0.0f; 
mA[22184] = 0.0f; 
mA[22185] = 0.0f; 
mA[22186] = 0.0f; 
mA[22187] = 0.0f; 
mA[22188] = 0.0f; 
mA[22189] = 0.0f; 
mA[22190] = 0.0f; 
mA[22191] = 0.0f; 
mA[22192] = 0.0f; 
mA[22193] = 0.0f; 
mA[22194] = 0.0f; 
mA[22195] = 0.0f; 
mA[22196] = 0.0f; 
mA[22197] = 0.0f; 
mA[22198] = 0.0f; 
mA[22199] = 0.0f; 
mA[22200] = ( (  -1.0f  * v_v09_ppp_fw   )   ) ; 
}
//----Init B---------------------------------------------------------------------------
if(idx==1 && idy==0){
mB[0] = 0.0f; 
mB[1] = 0.0f; 
mB[2] = 0.0f; 
mB[3] = 0.0f; 
mB[4] = 0.0f; 
mB[5] = 0.0f; 
mB[6] = 0.0f; 
mB[7] = 0.0f; 
mB[8] = 0.0f; 
mB[9] = 0.0f; 
mB[10] = 0.0f; 
mB[11] = 0.0f; 
mB[12] = 0.0f; 
mB[13] = 0.0f; 
mB[14] = 0.0f; 
mB[15] = 0.0f; 
mB[16] = 0.0f; 
mB[17] = 0.0f; 
mB[18] = 0.0f; 
mB[19] = 0.0f; 
mB[20] = 0.0f; 
mB[21] = 0.0f; 
mB[22] = 0.0f; 
mB[23] = 0.0f; 
mB[24] = 0.0f; 
mB[25] = 0.0f; 
mB[26] = 0.0f; 
mB[27] = 0.0f; 
mB[28] = 0.0f; 
mB[29] = 0.0f; 
mB[30] = 0.0f; 
mB[31] = 0.0f; 
mB[32] = 0.0f; 
mB[33] = 0.0f; 
mB[34] = 0.0f; 
mB[35] = 0.0f; 
mB[36] = 0.0f; 
mB[37] = 0.0f; 
mB[38] = 0.0f; 
mB[39] = 0.0f; 
mB[40] = 0.0f; 
mB[41] = 0.0f; 
mB[42] = 0.0f; 
mB[43] = 0.0f; 
mB[44] = 0.0f; 
mB[45] = 0.0f; 
mB[46] = 0.0f; 
mB[47] = 0.0f; 
mB[48] = 0.0f; 
mB[49] = 0.0f; 
mB[50] = 0.0f; 
mB[51] = (  -1.0f  * v_v01_SX_Gluc_In_b   ) ; 
mB[52] = 0.0f; 
mB[53] = 0.0f; 
mB[54] = 0.0f; 
mB[55] = 0.0f; 
mB[56] = 0.0f; 
mB[57] = 0.0f; 
mB[58] = 0.0f; 
mB[59] = 0.0f; 
mB[60] = 0.0f; 
mB[61] = 0.0f; 
mB[62] = 0.0f; 
mB[63] = 0.0f; 
mB[64] = 0.0f; 
mB[65] = 0.0f; 
mB[66] = 0.0f; 
mB[67] = 0.0f; 
mB[68] = 0.0f; 
mB[69] = 0.0f; 
mB[70] = 0.0f; 
mB[71] = 0.0f; 
mB[72] = 0.0f; 
mB[73] = 0.0f; 
mB[74] = 0.0f; 
mB[75] = 0.0f; 
mB[76] = 0.0f; 
mB[77] = 0.0f; 
mB[78] = 0.0f; 
mB[79] = 0.0f; 
mB[80] = 0.0f; 
mB[81] = 0.0f; 
mB[82] = 0.0f; 
mB[83] = 0.0f; 
mB[84] = 0.0f; 
mB[85] = 0.0f; 
mB[86] = 0.0f; 
mB[87] = 0.0f; 
mB[88] = 0.0f; 
mB[89] = 0.0f; 
mB[90] = 0.0f; 
mB[91] = 0.0f; 
mB[92] = 0.0f; 
mB[93] = 0.0f; 
mB[94] = 0.0f; 
mB[95] = 0.0f; 
mB[96] = 0.0f; 
mB[97] = 0.0f; 
mB[98] = 0.0f; 
mB[99] = 0.0f; 
mB[100] = 0.0f; 
mB[101] = 0.0f; 
mB[102] = 0.0f; 
mB[103] = 0.0f; 
mB[104] = 0.0f; 
mB[105] = 0.0f; 
mB[106] = 0.0f; 
mB[107] = 0.0f; 
mB[108] = 0.0f; 
mB[109] = 0.0f; 
mB[110] = 0.0f; 
mB[111] = 0.0f; 
mB[112] = 0.0f; 
mB[113] = 0.0f; 
mB[114] = 0.0f; 
mB[115] = 0.0f; 
mB[116] = 0.0f; 
mB[117] = 0.0f; 
mB[118] = 0.0f; 
mB[119] = 0.0f; 
mB[120] = 0.0f; 
mB[121] = 0.0f; 
mB[122] = 0.0f; 
mB[123] = 0.0f; 
mB[124] = 0.0f; 
mB[125] = 0.0f; 
mB[126] = 0.0f; 
mB[127] = 0.0f; 
mB[128] = 0.0f; 
mB[129] = 0.0f; 
mB[130] = 0.0f; 
mB[131] = 0.0f; 
mB[132] = 0.0f; 
mB[133] = 0.0f; 
mB[134] = 0.0f; 
mB[135] = 0.0f; 
mB[136] = 0.0f; 
mB[137] = 0.0f; 
mB[138] = 0.0f; 
mB[139] = 0.0f; 
mB[140] = 0.0f; 
mB[141] = 0.0f; 
mB[142] = 0.0f; 
mB[143] = 0.0f; 
mB[144] = 0.0f; 
mB[145] = 0.0f; 
mB[146] = 0.0f; 
mB[147] = 0.0f; 
mB[148] = 0.0f; 
mB[149] = 0.0f; 
mB[150] = 0.0f; 
mB[151] = 0.0f; 
mB[152] = 0.0f; 
mB[153] = 0.0f; 
mB[154] = 0.0f; 
mB[155] = 0.0f; 
mB[156] = 0.0f; 
mB[157] = 0.0f; 
mB[158] = 0.0f; 
mB[159] = 0.0f; 
mB[160] = 0.0f; 
mB[161] = 0.0f; 
mB[162] = 0.0f; 
mB[163] = 0.0f; 
mB[164] = 0.0f; 
mB[165] = 0.0f; 
mB[166] = 0.0f; 
mB[167] = 0.0f; 
mB[168] = 0.0f; 
mB[169] = 0.0f; 
mB[170] = 0.0f; 
mB[171] = 0.0f; 
mB[172] = 0.0f; 
mB[173] = 0.0f; 
mB[174] = 0.0f; 
mB[175] = 0.0f; 
mB[176] = 0.0f; 
mB[177] = 0.0f; 
mB[178] = 0.0f; 
mB[179] = 0.0f; 
mB[180] = 0.0f; 
mB[181] = 0.0f; 
mB[182] = 0.0f; 
mB[183] = 0.0f; 
mB[184] = 0.0f; 
mB[185] = 0.0f; 
mB[186] = 0.0f; 
mB[187] = 0.0f; 
mB[188] = 0.0f; 
mB[189] = 0.0f; 
mB[190] = 0.0f; 
mB[191] = 0.0f; 
mB[192] = 0.0f; 
mB[193] = 0.0f; 
mB[194] = 0.0f; 
mB[195] = 0.0f; 
mB[196] = 0.0f; 
mB[197] = 0.0f; 
mB[198] = 0.0f; 
mB[199] = (  -1.0f  * v_v01_SX_Gluc_In_b   ) ; 
mB[200] = 0.0f; 
mB[201] = 0.0f; 
mB[202] = 0.0f; 
mB[203] = 0.0f; 
mB[204] = 0.0f; 
mB[205] = 0.0f; 
mB[206] = 0.0f; 
mB[207] = 0.0f; 
mB[208] = 0.0f; 
mB[209] = 0.0f; 
mB[210] = 0.0f; 
mB[211] = 0.0f; 
mB[212] = 0.0f; 
mB[213] = 0.0f; 
mB[214] = 0.0f; 
mB[215] = 0.0f; 
mB[216] = 0.0f; 
mB[217] = 0.0f; 
mB[218] = 0.0f; 
mB[219] = 0.0f; 
mB[220] = 0.0f; 
mB[221] = 0.0f; 
mB[222] = 0.0f; 
mB[223] = 0.0f; 
mB[224] = 0.0f; 
mB[225] = 0.0f; 
mB[226] = 0.0f; 
mB[227] = 0.0f; 
mB[228] = 0.0f; 
mB[229] = 0.0f; 
mB[230] = 0.0f; 
mB[231] = 0.0f; 
mB[232] = 0.0f; 
mB[233] = 0.0f; 
mB[234] = 0.0f; 
mB[235] = 0.0f; 
mB[236] = 0.0f; 
mB[237] = 0.0f; 
mB[238] = 0.0f; 
mB[239] = 0.0f; 
mB[240] = 0.0f; 
mB[241] = 0.0f; 
mB[242] = 0.0f; 
mB[243] = 0.0f; 
mB[244] = 0.0f; 
mB[245] = 0.0f; 
mB[246] = 0.0f; 
mB[247] = 0.0f; 
mB[248] = 0.0f; 
mB[249] = 0.0f; 
mB[250] = 0.0f; 
mB[251] = 0.0f; 
mB[252] = 0.0f; 
mB[253] = 0.0f; 
mB[254] = 0.0f; 
mB[255] = 0.0f; 
mB[256] = 0.0f; 
mB[257] = 0.0f; 
mB[258] = 0.0f; 
mB[259] = 0.0f; 
mB[260] = 0.0f; 
mB[261] = 0.0f; 
mB[262] = 0.0f; 
mB[263] = 0.0f; 
mB[264] = 0.0f; 
mB[265] = 0.0f; 
mB[266] = 0.0f; 
mB[267] = 0.0f; 
mB[268] = 0.0f; 
mB[269] = 0.0f; 
mB[270] = 0.0f; 
mB[271] = 0.0f; 
mB[272] = 0.0f; 
mB[273] = 0.0f; 
mB[274] = 0.0f; 
mB[275] = 0.0f; 
mB[276] = 0.0f; 
mB[277] = 0.0f; 
mB[278] = 0.0f; 
mB[279] = 0.0f; 
mB[280] = 0.0f; 
mB[281] = 0.0f; 
mB[282] = 0.0f; 
mB[283] = 0.0f; 
mB[284] = 0.0f; 
mB[285] = 0.0f; 
mB[286] = 0.0f; 
mB[287] = 0.0f; 
mB[288] = 0.0f; 
mB[289] = 0.0f; 
mB[290] = 0.0f; 
mB[291] = 0.0f; 
mB[292] = 0.0f; 
mB[293] = 0.0f; 
mB[294] = 0.0f; 
mB[295] = 0.0f; 
mB[296] = 0.0f; 
mB[297] = 0.0f; 
mB[298] = 0.0f; 
mB[299] = 0.0f; 
mB[300] = 0.0f; 
mB[301] = 0.0f; 
mB[302] = 0.0f; 
mB[303] = 0.0f; 
mB[304] = 0.0f; 
mB[305] = 0.0f; 
mB[306] = 0.0f; 
mB[307] = 0.0f; 
mB[308] = 0.0f; 
mB[309] = 0.0f; 
mB[310] = 0.0f; 
mB[311] = 0.0f; 
mB[312] = 0.0f; 
mB[313] = 0.0f; 
mB[314] = 0.0f; 
mB[315] = 0.0f; 
mB[316] = 0.0f; 
mB[317] = 0.0f; 
mB[318] = 0.0f; 
mB[319] = 0.0f; 
mB[320] = 0.0f; 
mB[321] = 0.0f; 
mB[322] = 0.0f; 
mB[323] = 0.0f; 
mB[324] = 0.0f; 
mB[325] = 0.0f; 
mB[326] = 0.0f; 
mB[327] = 0.0f; 
mB[328] = 0.0f; 
mB[329] = 0.0f; 
mB[330] = 0.0f; 
mB[331] = 0.0f; 
mB[332] = 0.0f; 
mB[333] = 0.0f; 
mB[334] = 0.0f; 
mB[335] = 0.0f; 
mB[336] = 0.0f; 
mB[337] = 0.0f; 
mB[338] = 0.0f; 
mB[339] = 0.0f; 
mB[340] = 0.0f; 
mB[341] = 0.0f; 
mB[342] = 0.0f; 
mB[343] = 0.0f; 
mB[344] = (  -1.0f  * v_v01_SX_Gluc_In_b   ) ; 
mB[345] = 0.0f; 
mB[346] = 0.0f; 
mB[347] = 0.0f; 
mB[348] = 0.0f; 
mB[349] = 0.0f; 
mB[350] = 0.0f; 
mB[351] = 0.0f; 
mB[352] = 0.0f; 
mB[353] = 0.0f; 
mB[354] = 0.0f; 
mB[355] = 0.0f; 
mB[356] = 0.0f; 
mB[357] = 0.0f; 
mB[358] = 0.0f; 
mB[359] = 0.0f; 
mB[360] = 0.0f; 
mB[361] = 0.0f; 
mB[362] = 0.0f; 
mB[363] = 0.0f; 
mB[364] = 0.0f; 
mB[365] = 0.0f; 
mB[366] = 0.0f; 
mB[367] = 0.0f; 
mB[368] = 0.0f; 
mB[369] = 0.0f; 
mB[370] = 0.0f; 
mB[371] = 0.0f; 
mB[372] = 0.0f; 
mB[373] = 0.0f; 
mB[374] = 0.0f; 
mB[375] = 0.0f; 
mB[376] = 0.0f; 
mB[377] = 0.0f; 
mB[378] = 0.0f; 
mB[379] = 0.0f; 
mB[380] = 0.0f; 
mB[381] = 0.0f; 
mB[382] = 0.0f; 
mB[383] = 0.0f; 
mB[384] = 0.0f; 
mB[385] = 0.0f; 
mB[386] = 0.0f; 
mB[387] = 0.0f; 
mB[388] = 0.0f; 
mB[389] = 0.0f; 
mB[390] = 0.0f; 
mB[391] = 0.0f; 
mB[392] = 0.0f; 
mB[393] = 0.0f; 
mB[394] = 0.0f; 
mB[395] = 0.0f; 
mB[396] = 0.0f; 
mB[397] = 0.0f; 
mB[398] = 0.0f; 
mB[399] = 0.0f; 
mB[400] = 0.0f; 
mB[401] = 0.0f; 
mB[402] = 0.0f; 
mB[403] = 0.0f; 
mB[404] = 0.0f; 
mB[405] = 0.0f; 
mB[406] = 0.0f; 
mB[407] = 0.0f; 
mB[408] = 0.0f; 
mB[409] = 0.0f; 
mB[410] = 0.0f; 
mB[411] = 0.0f; 
mB[412] = 0.0f; 
mB[413] = 0.0f; 
mB[414] = 0.0f; 
mB[415] = 0.0f; 
mB[416] = 0.0f; 
mB[417] = 0.0f; 
mB[418] = 0.0f; 
mB[419] = 0.0f; 
mB[420] = 0.0f; 
mB[421] = 0.0f; 
mB[422] = 0.0f; 
mB[423] = 0.0f; 
mB[424] = 0.0f; 
mB[425] = 0.0f; 
mB[426] = 0.0f; 
mB[427] = 0.0f; 
mB[428] = 0.0f; 
mB[429] = 0.0f; 
mB[430] = 0.0f; 
mB[431] = 0.0f; 
mB[432] = 0.0f; 
mB[433] = 0.0f; 
mB[434] = 0.0f; 
mB[435] = 0.0f; 
mB[436] = 0.0f; 
mB[437] = 0.0f; 
mB[438] = 0.0f; 
mB[439] = 0.0f; 
mB[440] = 0.0f; 
mB[441] = 0.0f; 
mB[442] = 0.0f; 
mB[443] = 0.0f; 
mB[444] = 0.0f; 
mB[445] = 0.0f; 
mB[446] = 0.0f; 
mB[447] = 0.0f; 
mB[448] = 0.0f; 
mB[449] = 0.0f; 
mB[450] = 0.0f; 
mB[451] = 0.0f; 
mB[452] = 0.0f; 
mB[453] = 0.0f; 
mB[454] = 0.0f; 
mB[455] = 0.0f; 
mB[456] = 0.0f; 
mB[457] = 0.0f; 
mB[458] = 0.0f; 
mB[459] = 0.0f; 
mB[460] = 0.0f; 
mB[461] = 0.0f; 
mB[462] = 0.0f; 
mB[463] = 0.0f; 
mB[464] = 0.0f; 
mB[465] = 0.0f; 
mB[466] = 0.0f; 
mB[467] = 0.0f; 
mB[468] = 0.0f; 
mB[469] = 0.0f; 
mB[470] = 0.0f; 
mB[471] = 0.0f; 
mB[472] = 0.0f; 
mB[473] = 0.0f; 
mB[474] = 0.0f; 
mB[475] = 0.0f; 
mB[476] = 0.0f; 
mB[477] = 0.0f; 
mB[478] = 0.0f; 
mB[479] = 0.0f; 
mB[480] = 0.0f; 
mB[481] = 0.0f; 
mB[482] = 0.0f; 
mB[483] = 0.0f; 
mB[484] = 0.0f; 
mB[485] = 0.0f; 
mB[486] = 0.0f; 
mB[487] = 0.0f; 
mB[488] = 0.0f; 
mB[489] = 0.0f; 
mB[490] = 0.0f; 
mB[491] = 0.0f; 
mB[492] = 0.0f; 
mB[493] = 0.0f; 
mB[494] = 0.0f; 
mB[495] = 0.0f; 
mB[496] = (  -1.0f  * v_v01_SX_Gluc_In_b   ) ; 
mB[497] = 0.0f; 
mB[498] = 0.0f; 
mB[499] = 0.0f; 
mB[500] = 0.0f; 
mB[501] = 0.0f; 
mB[502] = 0.0f; 
mB[503] = 0.0f; 
mB[504] = 0.0f; 
mB[505] = 0.0f; 
mB[506] = 0.0f; 
mB[507] = 0.0f; 
mB[508] = 0.0f; 
mB[509] = 0.0f; 
mB[510] = 0.0f; 
mB[511] = 0.0f; 
mB[512] = 0.0f; 
mB[513] = 0.0f; 
mB[514] = 0.0f; 
mB[515] = 0.0f; 
mB[516] = 0.0f; 
mB[517] = 0.0f; 
mB[518] = 0.0f; 
mB[519] = 0.0f; 
mB[520] = 0.0f; 
mB[521] = 0.0f; 
mB[522] = 0.0f; 
mB[523] = 0.0f; 
mB[524] = 0.0f; 
mB[525] = 0.0f; 
mB[526] = 0.0f; 
mB[527] = 0.0f; 
mB[528] = 0.0f; 
mB[529] = 0.0f; 
mB[530] = 0.0f; 
mB[531] = 0.0f; 
mB[532] = 0.0f; 
mB[533] = 0.0f; 
mB[534] = 0.0f; 
mB[535] = 0.0f; 
mB[536] = 0.0f; 
mB[537] = 0.0f; 
mB[538] = 0.0f; 
mB[539] = 0.0f; 
mB[540] = 0.0f; 
mB[541] = 0.0f; 
mB[542] = 0.0f; 
mB[543] = 0.0f; 
mB[544] = 0.0f; 
mB[545] = 0.0f; 
mB[546] = 0.0f; 
mB[547] = 0.0f; 
mB[548] = 0.0f; 
mB[549] = 0.0f; 
mB[550] = 0.0f; 
mB[551] = 0.0f; 
mB[552] = 0.0f; 
mB[553] = 0.0f; 
mB[554] = 0.0f; 
mB[555] = 0.0f; 
mB[556] = 0.0f; 
mB[557] = 0.0f; 
mB[558] = 0.0f; 
mB[559] = 0.0f; 
mB[560] = 0.0f; 
mB[561] = 0.0f; 
mB[562] = 0.0f; 
mB[563] = 0.0f; 
mB[564] = 0.0f; 
mB[565] = 0.0f; 
mB[566] = 0.0f; 
mB[567] = 0.0f; 
mB[568] = 0.0f; 
mB[569] = 0.0f; 
mB[570] = 0.0f; 
mB[571] = 0.0f; 
mB[572] = 0.0f; 
mB[573] = 0.0f; 
mB[574] = 0.0f; 
mB[575] = 0.0f; 
mB[576] = 0.0f; 
mB[577] = 0.0f; 
mB[578] = 0.0f; 
mB[579] = 0.0f; 
mB[580] = 0.0f; 
mB[581] = 0.0f; 
mB[582] = 0.0f; 
mB[583] = 0.0f; 
mB[584] = 0.0f; 
mB[585] = 0.0f; 
mB[586] = 0.0f; 
mB[587] = 0.0f; 
mB[588] = 0.0f; 
mB[589] = 0.0f; 
mB[590] = 0.0f; 
mB[591] = 0.0f; 
mB[592] = 0.0f; 
mB[593] = 0.0f; 
mB[594] = 0.0f; 
mB[595] = 0.0f; 
mB[596] = 0.0f; 
mB[597] = 0.0f; 
mB[598] = 0.0f; 
mB[599] = 0.0f; 
mB[600] = 0.0f; 
mB[601] = 0.0f; 
mB[602] = 0.0f; 
mB[603] = 0.0f; 
mB[604] = 0.0f; 
mB[605] = 0.0f; 
mB[606] = 0.0f; 
mB[607] = 0.0f; 
mB[608] = 0.0f; 
mB[609] = (  -1.0f  * v_v71_CO2Exch_b   ) ; 
mB[610] = 0.0f; 
mB[611] = 0.0f; 
mB[612] = 0.0f; 
mB[613] = 0.0f; 
mB[614] = 0.0f; 
mB[615] = 0.0f; 
mB[616] = 0.0f; 
mB[617] = 0.0f; 
mB[618] = 0.0f; 
mB[619] = 0.0f; 
mB[620] = 0.0f; 
mB[621] = 0.0f; 
mB[622] = 0.0f; 
mB[623] = 0.0f; 
mB[624] = 0.0f; 
mB[625] = 0.0f; 
mB[626] = 0.0f; 
mB[627] = 0.0f; 
mB[628] = 0.0f; 
mB[629] = 0.0f; 
mB[630] = 0.0f; 
mB[631] = 0.0f; 
mB[632] = 0.0f; 
mB[633] = 0.0f; 
mB[634] = 0.0f; 
mB[635] = 0.0f; 
mB[636] = 0.0f; 
mB[637] = 0.0f; 
mB[638] = 0.0f; 
mB[639] = 0.0f; 
mB[640] = 0.0f; 
mB[641] = 0.0f; 
mB[642] = 0.0f; 
mB[643] = 0.0f; 
mB[644] = 0.0f; 
mB[645] = 0.0f; 
mB[646] = 0.0f; 
mB[647] = 0.0f; 
mB[648] = 0.0f; 
mB[649] = 0.0f; 
mB[650] = 0.0f; 
mB[651] = 0.0f; 
mB[652] = 0.0f; 
mB[653] = 0.0f; 
mB[654] = 0.0f; 
mB[655] = 0.0f; 
mB[656] = 0.0f; 
mB[657] = 0.0f; 
mB[658] = 0.0f; 
mB[659] = 0.0f; 
mB[660] = 0.0f; 
mB[661] = 0.0f; 
mB[662] = 0.0f; 
mB[663] = 0.0f; 
mB[664] = 0.0f; 
mB[665] = 0.0f; 
mB[666] = 0.0f; 
mB[667] = 0.0f; 
mB[668] = 0.0f; 
mB[669] = 0.0f; 
mB[670] = 0.0f; 
mB[671] = 0.0f; 
mB[672] = 0.0f; 
mB[673] = 0.0f; 
mB[674] = 0.0f; 
mB[675] = 0.0f; 
mB[676] = 0.0f; 
mB[677] = 0.0f; 
mB[678] = 0.0f; 
mB[679] = 0.0f; 
mB[680] = 0.0f; 
mB[681] = 0.0f; 
mB[682] = 0.0f; 
mB[683] = 0.0f; 
mB[684] = 0.0f; 
mB[685] = 0.0f; 
mB[686] = 0.0f; 
mB[687] = 0.0f; 
mB[688] = 0.0f; 
mB[689] = 0.0f; 
mB[690] = 0.0f; 
mB[691] = 0.0f; 
mB[692] = 0.0f; 
mB[693] = 0.0f; 
mB[694] = 0.0f; 
mB[695] = 0.0f; 
mB[696] = 0.0f; 
mB[697] = 0.0f; 
mB[698] = 0.0f; 
mB[699] = 0.0f; 
mB[700] = 0.0f; 
mB[701] = 0.0f; 
mB[702] = 0.0f; 
mB[703] = 0.0f; 
mB[704] = 0.0f; 
mB[705] = 0.0f; 
mB[706] = 0.0f; 
mB[707] = 0.0f; 
mB[708] = 0.0f; 
mB[709] = 0.0f; 
mB[710] = 0.0f; 
mB[711] = 0.0f; 
mB[712] = 0.0f; 
mB[713] = 0.0f; 
mB[714] = 0.0f; 
mB[715] = 0.0f; 
mB[716] = 0.0f; 
mB[717] = 0.0f; 
mB[718] = 0.0f; 
mB[719] = 0.0f; 
mB[720] = 0.0f; 
mB[721] = 0.0f; 
mB[722] = 0.0f; 
mB[723] = 0.0f; 
mB[724] = 0.0f; 
mB[725] = 0.0f; 
mB[726] = 0.0f; 
mB[727] = 0.0f; 
mB[728] = 0.0f; 
mB[729] = 0.0f; 
mB[730] = 0.0f; 
mB[731] = 0.0f; 
mB[732] = 0.0f; 
mB[733] = 0.0f; 
mB[734] = 0.0f; 
mB[735] = 0.0f; 
mB[736] = 0.0f; 
mB[737] = 0.0f; 
mB[738] = 0.0f; 
mB[739] = 0.0f; 
mB[740] = 0.0f; 
mB[741] = 0.0f; 
mB[742] = 0.0f; 
mB[743] = 0.0f; 
mB[744] = 0.0f; 
mB[745] = 0.0f; 
mB[746] = 0.0f; 
mB[747] = 0.0f; 
mB[748] = 0.0f; 
mB[749] = 0.0f; 
mB[750] = 0.0f; 
mB[751] = 0.0f; 
mB[752] = 0.0f; 
mB[753] = 0.0f; 
mB[754] = 0.0f; 
mB[755] = 0.0f; 
mB[756] = 0.0f; 
mB[757] = 0.0f; 
mB[758] = 0.0f; 
mB[759] = 0.0f; 
mB[760] = 0.0f; 
mB[761] = 0.0f; 
mB[762] = 0.0f; 
mB[763] = 0.0f; 
mB[764] = 0.0f; 
mB[765] = 0.0f; 
mB[766] = 0.0f; 
mB[767] = 0.0f; 
mB[768] = 0.0f; 
mB[769] = 0.0f; 
mB[770] = 0.0f; 
mB[771] = 0.0f; 
mB[772] = 0.0f; 
mB[773] = 0.0f; 
mB[774] = 0.0f; 
mB[775] = 0.0f; 
mB[776] = 0.0f; 
mB[777] = 0.0f; 
mB[778] = 0.0f; 
mB[779] = 0.0f; 
mB[780] = 0.0f; 
mB[781] = 0.0f; 
mB[782] = 0.0f; 
mB[783] = 0.0f; 
mB[784] = 0.0f; 
mB[785] = 0.0f; 
mB[786] = 0.0f; 
mB[787] = 0.0f; 
mB[788] = 0.0f; 
mB[789] = 0.0f; 
mB[790] = 0.0f; 
mB[791] = 0.0f; 
mB[792] = (  -1.0f  * v_v01_SX_Gluc_In_b   ) ; 
mB[793] = 0.0f; 
mB[794] = 0.0f; 
mB[795] = 0.0f; 
mB[796] = 0.0f; 
mB[797] = 0.0f; 
mB[798] = 0.0f; 
mB[799] = 0.0f; 
mB[800] = 0.0f; 
mB[801] = 0.0f; 
mB[802] = 0.0f; 
mB[803] = 0.0f; 
mB[804] = 0.0f; 
mB[805] = 0.0f; 
mB[806] = 0.0f; 
mB[807] = 0.0f; 
mB[808] = 0.0f; 
mB[809] = 0.0f; 
mB[810] = 0.0f; 
mB[811] = 0.0f; 
mB[812] = 0.0f; 
mB[813] = 0.0f; 
mB[814] = 0.0f; 
mB[815] = 0.0f; 
mB[816] = 0.0f; 
mB[817] = 0.0f; 
mB[818] = 0.0f; 
mB[819] = 0.0f; 
mB[820] = 0.0f; 
mB[821] = 0.0f; 
mB[822] = 0.0f; 
mB[823] = 0.0f; 
mB[824] = 0.0f; 
mB[825] = 0.0f; 
mB[826] = 0.0f; 
mB[827] = 0.0f; 
mB[828] = 0.0f; 
mB[829] = 0.0f; 
mB[830] = 0.0f; 
mB[831] = 0.0f; 
mB[832] = 0.0f; 
mB[833] = 0.0f; 
mB[834] = 0.0f; 
mB[835] = 0.0f; 
mB[836] = 0.0f; 
mB[837] = 0.0f; 
mB[838] = 0.0f; 
mB[839] = 0.0f; 
mB[840] = 0.0f; 
mB[841] = 0.0f; 
mB[842] = 0.0f; 
mB[843] = 0.0f; 
mB[844] = 0.0f; 
mB[845] = 0.0f; 
mB[846] = 0.0f; 
mB[847] = 0.0f; 
mB[848] = 0.0f; 
mB[849] = 0.0f; 
mB[850] = 0.0f; 
mB[851] = 0.0f; 
mB[852] = 0.0f; 
mB[853] = 0.0f; 
mB[854] = 0.0f; 
mB[855] = 0.0f; 
mB[856] = 0.0f; 
mB[857] = 0.0f; 
mB[858] = 0.0f; 
mB[859] = 0.0f; 
mB[860] = 0.0f; 
mB[861] = 0.0f; 
mB[862] = 0.0f; 
mB[863] = 0.0f; 
mB[864] = 0.0f; 
mB[865] = 0.0f; 
mB[866] = 0.0f; 
mB[867] = 0.0f; 
mB[868] = 0.0f; 
mB[869] = 0.0f; 
mB[870] = 0.0f; 
mB[871] = 0.0f; 
mB[872] = 0.0f; 
mB[873] = 0.0f; 
mB[874] = 0.0f; 
mB[875] = 0.0f; 
mB[876] = 0.0f; 
mB[877] = 0.0f; 
mB[878] = 0.0f; 
mB[879] = 0.0f; 
mB[880] = 0.0f; 
mB[881] = 0.0f; 
mB[882] = 0.0f; 
mB[883] = 0.0f; 
mB[884] = 0.0f; 
mB[885] = 0.0f; 
mB[886] = 0.0f; 
mB[887] = 0.0f; 
mB[888] = 0.0f; 
mB[889] = 0.0f; 
mB[890] = 0.0f; 
mB[891] = 0.0f; 
mB[892] = 0.0f; 
mB[893] = 0.0f; 
mB[894] = 0.0f; 
mB[895] = 0.0f; 
mB[896] = 0.0f; 
mB[897] = 0.0f; 
mB[898] = 0.0f; 
mB[899] = 0.0f; 
mB[900] = 0.0f; 
mB[901] = 0.0f; 
mB[902] = 0.0f; 
mB[903] = 0.0f; 
mB[904] = 0.0f; 
mB[905] = 0.0f; 
mB[906] = 0.0f; 
mB[907] = 0.0f; 
mB[908] = 0.0f; 
mB[909] = 0.0f; 
mB[910] = 0.0f; 
mB[911] = 0.0f; 
mB[912] = 0.0f; 
mB[913] = 0.0f; 
mB[914] = 0.0f; 
mB[915] = 0.0f; 
mB[916] = 0.0f; 
mB[917] = 0.0f; 
mB[918] = 0.0f; 
mB[919] = 0.0f; 
mB[920] = 0.0f; 
mB[921] = 0.0f; 
mB[922] = 0.0f; 
mB[923] = 0.0f; 
mB[924] = 0.0f; 
mB[925] = 0.0f; 
mB[926] = 0.0f; 
mB[927] = 0.0f; 
mB[928] = 0.0f; 
mB[929] = 0.0f; 
mB[930] = 0.0f; 
mB[931] = 0.0f; 
mB[932] = 0.0f; 
mB[933] = 0.0f; 
mB[934] = 0.0f; 
mB[935] = 0.0f; 
mB[936] = 0.0f; 
mB[937] = 0.0f; 
mB[938] = 0.0f; 
mB[939] = 0.0f; 
mB[940] = 0.0f; 
mB[941] = 0.0f; 
mB[942] = (  -1.0f  * v_v01_SX_Gluc_In_b   ) ; 
mB[943] = 0.0f; 
mB[944] = 0.0f; 
mB[945] = 0.0f; 
mB[946] = 0.0f; 
mB[947] = 0.0f; 
mB[948] = 0.0f; 
mB[949] = 0.0f; 
mB[950] = 0.0f; 
mB[951] = 0.0f; 
mB[952] = 0.0f; 
mB[953] = 0.0f; 
mB[954] = 0.0f; 
mB[955] = 0.0f; 
mB[956] = 0.0f; 
mB[957] = 0.0f; 
mB[958] = 0.0f; 
mB[959] = 0.0f; 
mB[960] = 0.0f; 
mB[961] = 0.0f; 
mB[962] = 0.0f; 
mB[963] = 0.0f; 
mB[964] = 0.0f; 
mB[965] = 0.0f; 
mB[966] = 0.0f; 
mB[967] = 0.0f; 
mB[968] = 0.0f; 
mB[969] = 0.0f; 
mB[970] = 0.0f; 
mB[971] = 0.0f; 
mB[972] = 0.0f; 
mB[973] = 0.0f; 
mB[974] = 0.0f; 
mB[975] = 0.0f; 
mB[976] = 0.0f; 
mB[977] = 0.0f; 
mB[978] = 0.0f; 
mB[979] = 0.0f; 
mB[980] = 0.0f; 
mB[981] = 0.0f; 
mB[982] = 0.0f; 
mB[983] = 0.0f; 
mB[984] = 0.0f; 
mB[985] = 0.0f; 
mB[986] = 0.0f; 
mB[987] = 0.0f; 
mB[988] = 0.0f; 
mB[989] = 0.0f; 
mB[990] = 0.0f; 
mB[991] = 0.0f; 
mB[992] = 0.0f; 
mB[993] = 0.0f; 
mB[994] = 0.0f; 
mB[995] = 0.0f; 
mB[996] = 0.0f; 
mB[997] = 0.0f; 
mB[998] = 0.0f; 
mB[999] = 0.0f; 
mB[1000] = 0.0f; 
mB[1001] = 0.0f; 
mB[1002] = 0.0f; 
mB[1003] = 0.0f; 
mB[1004] = 0.0f; 
mB[1005] = 0.0f; 
mB[1006] = 0.0f; 
mB[1007] = 0.0f; 
mB[1008] = 0.0f; 
mB[1009] = 0.0f; 
mB[1010] = 0.0f; 
mB[1011] = 0.0f; 
mB[1012] = 0.0f; 
mB[1013] = 0.0f; 
mB[1014] = 0.0f; 
mB[1015] = 0.0f; 
mB[1016] = 0.0f; 
mB[1017] = 0.0f; 
mB[1018] = 0.0f; 
mB[1019] = 0.0f; 
mB[1020] = 0.0f; 
mB[1021] = 0.0f; 
mB[1022] = 0.0f; 
mB[1023] = 0.0f; 
mB[1024] = 0.0f; 
mB[1025] = 0.0f; 
mB[1026] = 0.0f; 
mB[1027] = 0.0f; 
mB[1028] = 0.0f; 
mB[1029] = 0.0f; 
mB[1030] = 0.0f; 
mB[1031] = 0.0f; 
mB[1032] = 0.0f; 
mB[1033] = 0.0f; 
mB[1034] = 0.0f; 
mB[1035] = 0.0f; 
mB[1036] = 0.0f; 
mB[1037] = 0.0f; 
mB[1038] = 0.0f; 
mB[1039] = 0.0f; 
mB[1040] = 0.0f; 
mB[1041] = 0.0f; 
mB[1042] = 0.0f; 
}
//----Init Y---------------------------------------------------------------------------
if(idx==2 && idy==0){
mY[0] = ( (  mr_Gluc_ext_6_M_0   )   ) ; 
mY[1] = ( (  mr_Gluc_ext_5_M_0   )   ) ; 
mY[2] = ( (  mr_Gluc_ext_1_M_0   )   ) ; 
mY[3] = ( (  mr_Gluc_ext_4_M_0   )   ) ; 
mY[4] = ( (  mr_CO2_unlabeled_1_M_0   )   ) ; 
mY[5] = ( (  mr_Gluc_ext_2_M_0   )   ) ; 
mY[6] = ( (  mr_Gluc_ext_3_M_0   )   ) ; 
mY[7] = ( (  mr_Gluc_ext_6_M_1   )   ) ; 
mY[8] = ( (  mr_Gluc_ext_5_M_1   )   ) ; 
mY[9] = ( (  mr_Gluc_ext_1_M_1   )   ) ; 
mY[10] = ( (  mr_Gluc_ext_4_M_1   )   ) ; 
mY[11] = ( (  mr_CO2_unlabeled_1_M_1   )   ) ; 
mY[12] = ( (  mr_Gluc_ext_2_M_1   )   ) ; 
mY[13] = ( (  mr_Gluc_ext_3_M_1   )   ) ; 
}
mAm = 149; 
mAn = 149; 
mBm = 149; 
mBn = 7; 
mYm = 7; 
mYn = 2; 
barrier(CLK_LOCAL_MEM_FENCE);

//------COMPUTE!-----------------------------------------------------------------------
//LU-DECOMPOSITION (in place): mA_L * mA = mA
if( idx<149 && idy<149 ){ mA_L[ idx+149*idy ] = (idx==idy)?1.0f:0.0f; }
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 0 / 148
if( idx==0 && idy > 0 && idy < 149 ){ 
  mA_L[ idy + 0 ] = mA[ idy + 0 ] / mA[ 0 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>0 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 0 ] * mA[0+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 1 / 148
if( idx==0 && idy > 1 && idy < 149 ){ 
  mA_L[ idy + 149 ] = mA[ idy + 149 ] / mA[ 150 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>1 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 149 ] * mA[1+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 2 / 148
if( idx==0 && idy > 2 && idy < 149 ){ 
  mA_L[ idy + 298 ] = mA[ idy + 298 ] / mA[ 300 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>2 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 298 ] * mA[2+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 3 / 148
if( idx==0 && idy > 3 && idy < 149 ){ 
  mA_L[ idy + 447 ] = mA[ idy + 447 ] / mA[ 450 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>3 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 447 ] * mA[3+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 4 / 148
if( idx==0 && idy > 4 && idy < 149 ){ 
  mA_L[ idy + 596 ] = mA[ idy + 596 ] / mA[ 600 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>4 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 596 ] * mA[4+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 5 / 148
if( idx==0 && idy > 5 && idy < 149 ){ 
  mA_L[ idy + 745 ] = mA[ idy + 745 ] / mA[ 750 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>5 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 745 ] * mA[5+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 6 / 148
if( idx==0 && idy > 6 && idy < 149 ){ 
  mA_L[ idy + 894 ] = mA[ idy + 894 ] / mA[ 900 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>6 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 894 ] * mA[6+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 7 / 148
if( idx==0 && idy > 7 && idy < 149 ){ 
  mA_L[ idy + 1043 ] = mA[ idy + 1043 ] / mA[ 1050 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>7 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 1043 ] * mA[7+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 8 / 148
if( idx==0 && idy > 8 && idy < 149 ){ 
  mA_L[ idy + 1192 ] = mA[ idy + 1192 ] / mA[ 1200 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>8 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 1192 ] * mA[8+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 9 / 148
if( idx==0 && idy > 9 && idy < 149 ){ 
  mA_L[ idy + 1341 ] = mA[ idy + 1341 ] / mA[ 1350 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>9 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 1341 ] * mA[9+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 10 / 148
if( idx==0 && idy > 10 && idy < 149 ){ 
  mA_L[ idy + 1490 ] = mA[ idy + 1490 ] / mA[ 1500 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>10 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 1490 ] * mA[10+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 11 / 148
if( idx==0 && idy > 11 && idy < 149 ){ 
  mA_L[ idy + 1639 ] = mA[ idy + 1639 ] / mA[ 1650 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>11 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 1639 ] * mA[11+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 12 / 148
if( idx==0 && idy > 12 && idy < 149 ){ 
  mA_L[ idy + 1788 ] = mA[ idy + 1788 ] / mA[ 1800 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>12 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 1788 ] * mA[12+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 13 / 148
if( idx==0 && idy > 13 && idy < 149 ){ 
  mA_L[ idy + 1937 ] = mA[ idy + 1937 ] / mA[ 1950 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>13 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 1937 ] * mA[13+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 14 / 148
if( idx==0 && idy > 14 && idy < 149 ){ 
  mA_L[ idy + 2086 ] = mA[ idy + 2086 ] / mA[ 2100 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>14 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 2086 ] * mA[14+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 15 / 148
if( idx==0 && idy > 15 && idy < 149 ){ 
  mA_L[ idy + 2235 ] = mA[ idy + 2235 ] / mA[ 2250 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>15 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 2235 ] * mA[15+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 16 / 148
if( idx==0 && idy > 16 && idy < 149 ){ 
  mA_L[ idy + 2384 ] = mA[ idy + 2384 ] / mA[ 2400 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>16 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 2384 ] * mA[16+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 17 / 148
if( idx==0 && idy > 17 && idy < 149 ){ 
  mA_L[ idy + 2533 ] = mA[ idy + 2533 ] / mA[ 2550 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>17 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 2533 ] * mA[17+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 18 / 148
if( idx==0 && idy > 18 && idy < 149 ){ 
  mA_L[ idy + 2682 ] = mA[ idy + 2682 ] / mA[ 2700 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>18 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 2682 ] * mA[18+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 19 / 148
if( idx==0 && idy > 19 && idy < 149 ){ 
  mA_L[ idy + 2831 ] = mA[ idy + 2831 ] / mA[ 2850 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>19 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 2831 ] * mA[19+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 20 / 148
if( idx==0 && idy > 20 && idy < 149 ){ 
  mA_L[ idy + 2980 ] = mA[ idy + 2980 ] / mA[ 3000 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>20 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 2980 ] * mA[20+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 21 / 148
if( idx==0 && idy > 21 && idy < 149 ){ 
  mA_L[ idy + 3129 ] = mA[ idy + 3129 ] / mA[ 3150 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>21 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 3129 ] * mA[21+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 22 / 148
if( idx==0 && idy > 22 && idy < 149 ){ 
  mA_L[ idy + 3278 ] = mA[ idy + 3278 ] / mA[ 3300 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>22 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 3278 ] * mA[22+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 23 / 148
if( idx==0 && idy > 23 && idy < 149 ){ 
  mA_L[ idy + 3427 ] = mA[ idy + 3427 ] / mA[ 3450 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>23 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 3427 ] * mA[23+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 24 / 148
if( idx==0 && idy > 24 && idy < 149 ){ 
  mA_L[ idy + 3576 ] = mA[ idy + 3576 ] / mA[ 3600 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>24 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 3576 ] * mA[24+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 25 / 148
if( idx==0 && idy > 25 && idy < 149 ){ 
  mA_L[ idy + 3725 ] = mA[ idy + 3725 ] / mA[ 3750 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>25 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 3725 ] * mA[25+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 26 / 148
if( idx==0 && idy > 26 && idy < 149 ){ 
  mA_L[ idy + 3874 ] = mA[ idy + 3874 ] / mA[ 3900 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>26 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 3874 ] * mA[26+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 27 / 148
if( idx==0 && idy > 27 && idy < 149 ){ 
  mA_L[ idy + 4023 ] = mA[ idy + 4023 ] / mA[ 4050 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>27 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 4023 ] * mA[27+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 28 / 148
if( idx==0 && idy > 28 && idy < 149 ){ 
  mA_L[ idy + 4172 ] = mA[ idy + 4172 ] / mA[ 4200 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>28 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 4172 ] * mA[28+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 29 / 148
if( idx==0 && idy > 29 && idy < 149 ){ 
  mA_L[ idy + 4321 ] = mA[ idy + 4321 ] / mA[ 4350 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>29 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 4321 ] * mA[29+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 30 / 148
if( idx==0 && idy > 30 && idy < 149 ){ 
  mA_L[ idy + 4470 ] = mA[ idy + 4470 ] / mA[ 4500 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>30 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 4470 ] * mA[30+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 31 / 148
if( idx==0 && idy > 31 && idy < 149 ){ 
  mA_L[ idy + 4619 ] = mA[ idy + 4619 ] / mA[ 4650 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>31 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 4619 ] * mA[31+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 32 / 148
if( idx==0 && idy > 32 && idy < 149 ){ 
  mA_L[ idy + 4768 ] = mA[ idy + 4768 ] / mA[ 4800 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>32 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 4768 ] * mA[32+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 33 / 148
if( idx==0 && idy > 33 && idy < 149 ){ 
  mA_L[ idy + 4917 ] = mA[ idy + 4917 ] / mA[ 4950 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>33 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 4917 ] * mA[33+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 34 / 148
if( idx==0 && idy > 34 && idy < 149 ){ 
  mA_L[ idy + 5066 ] = mA[ idy + 5066 ] / mA[ 5100 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>34 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 5066 ] * mA[34+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 35 / 148
if( idx==0 && idy > 35 && idy < 149 ){ 
  mA_L[ idy + 5215 ] = mA[ idy + 5215 ] / mA[ 5250 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>35 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 5215 ] * mA[35+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 36 / 148
if( idx==0 && idy > 36 && idy < 149 ){ 
  mA_L[ idy + 5364 ] = mA[ idy + 5364 ] / mA[ 5400 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>36 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 5364 ] * mA[36+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 37 / 148
if( idx==0 && idy > 37 && idy < 149 ){ 
  mA_L[ idy + 5513 ] = mA[ idy + 5513 ] / mA[ 5550 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>37 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 5513 ] * mA[37+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 38 / 148
if( idx==0 && idy > 38 && idy < 149 ){ 
  mA_L[ idy + 5662 ] = mA[ idy + 5662 ] / mA[ 5700 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>38 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 5662 ] * mA[38+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 39 / 148
if( idx==0 && idy > 39 && idy < 149 ){ 
  mA_L[ idy + 5811 ] = mA[ idy + 5811 ] / mA[ 5850 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>39 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 5811 ] * mA[39+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 40 / 148
if( idx==0 && idy > 40 && idy < 149 ){ 
  mA_L[ idy + 5960 ] = mA[ idy + 5960 ] / mA[ 6000 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>40 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 5960 ] * mA[40+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 41 / 148
if( idx==0 && idy > 41 && idy < 149 ){ 
  mA_L[ idy + 6109 ] = mA[ idy + 6109 ] / mA[ 6150 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>41 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 6109 ] * mA[41+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 42 / 148
if( idx==0 && idy > 42 && idy < 149 ){ 
  mA_L[ idy + 6258 ] = mA[ idy + 6258 ] / mA[ 6300 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>42 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 6258 ] * mA[42+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 43 / 148
if( idx==0 && idy > 43 && idy < 149 ){ 
  mA_L[ idy + 6407 ] = mA[ idy + 6407 ] / mA[ 6450 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>43 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 6407 ] * mA[43+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 44 / 148
if( idx==0 && idy > 44 && idy < 149 ){ 
  mA_L[ idy + 6556 ] = mA[ idy + 6556 ] / mA[ 6600 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>44 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 6556 ] * mA[44+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 45 / 148
if( idx==0 && idy > 45 && idy < 149 ){ 
  mA_L[ idy + 6705 ] = mA[ idy + 6705 ] / mA[ 6750 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>45 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 6705 ] * mA[45+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 46 / 148
if( idx==0 && idy > 46 && idy < 149 ){ 
  mA_L[ idy + 6854 ] = mA[ idy + 6854 ] / mA[ 6900 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>46 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 6854 ] * mA[46+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 47 / 148
if( idx==0 && idy > 47 && idy < 149 ){ 
  mA_L[ idy + 7003 ] = mA[ idy + 7003 ] / mA[ 7050 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>47 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 7003 ] * mA[47+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 48 / 148
if( idx==0 && idy > 48 && idy < 149 ){ 
  mA_L[ idy + 7152 ] = mA[ idy + 7152 ] / mA[ 7200 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>48 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 7152 ] * mA[48+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 49 / 148
if( idx==0 && idy > 49 && idy < 149 ){ 
  mA_L[ idy + 7301 ] = mA[ idy + 7301 ] / mA[ 7350 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>49 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 7301 ] * mA[49+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 50 / 148
if( idx==0 && idy > 50 && idy < 149 ){ 
  mA_L[ idy + 7450 ] = mA[ idy + 7450 ] / mA[ 7500 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>50 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 7450 ] * mA[50+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 51 / 148
if( idx==0 && idy > 51 && idy < 149 ){ 
  mA_L[ idy + 7599 ] = mA[ idy + 7599 ] / mA[ 7650 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>51 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 7599 ] * mA[51+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 52 / 148
if( idx==0 && idy > 52 && idy < 149 ){ 
  mA_L[ idy + 7748 ] = mA[ idy + 7748 ] / mA[ 7800 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>52 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 7748 ] * mA[52+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 53 / 148
if( idx==0 && idy > 53 && idy < 149 ){ 
  mA_L[ idy + 7897 ] = mA[ idy + 7897 ] / mA[ 7950 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>53 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 7897 ] * mA[53+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 54 / 148
if( idx==0 && idy > 54 && idy < 149 ){ 
  mA_L[ idy + 8046 ] = mA[ idy + 8046 ] / mA[ 8100 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>54 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 8046 ] * mA[54+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 55 / 148
if( idx==0 && idy > 55 && idy < 149 ){ 
  mA_L[ idy + 8195 ] = mA[ idy + 8195 ] / mA[ 8250 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>55 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 8195 ] * mA[55+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 56 / 148
if( idx==0 && idy > 56 && idy < 149 ){ 
  mA_L[ idy + 8344 ] = mA[ idy + 8344 ] / mA[ 8400 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>56 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 8344 ] * mA[56+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 57 / 148
if( idx==0 && idy > 57 && idy < 149 ){ 
  mA_L[ idy + 8493 ] = mA[ idy + 8493 ] / mA[ 8550 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>57 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 8493 ] * mA[57+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 58 / 148
if( idx==0 && idy > 58 && idy < 149 ){ 
  mA_L[ idy + 8642 ] = mA[ idy + 8642 ] / mA[ 8700 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>58 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 8642 ] * mA[58+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 59 / 148
if( idx==0 && idy > 59 && idy < 149 ){ 
  mA_L[ idy + 8791 ] = mA[ idy + 8791 ] / mA[ 8850 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>59 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 8791 ] * mA[59+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 60 / 148
if( idx==0 && idy > 60 && idy < 149 ){ 
  mA_L[ idy + 8940 ] = mA[ idy + 8940 ] / mA[ 9000 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>60 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 8940 ] * mA[60+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 61 / 148
if( idx==0 && idy > 61 && idy < 149 ){ 
  mA_L[ idy + 9089 ] = mA[ idy + 9089 ] / mA[ 9150 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>61 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 9089 ] * mA[61+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 62 / 148
if( idx==0 && idy > 62 && idy < 149 ){ 
  mA_L[ idy + 9238 ] = mA[ idy + 9238 ] / mA[ 9300 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>62 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 9238 ] * mA[62+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 63 / 148
if( idx==0 && idy > 63 && idy < 149 ){ 
  mA_L[ idy + 9387 ] = mA[ idy + 9387 ] / mA[ 9450 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>63 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 9387 ] * mA[63+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 64 / 148
if( idx==0 && idy > 64 && idy < 149 ){ 
  mA_L[ idy + 9536 ] = mA[ idy + 9536 ] / mA[ 9600 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>64 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 9536 ] * mA[64+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 65 / 148
if( idx==0 && idy > 65 && idy < 149 ){ 
  mA_L[ idy + 9685 ] = mA[ idy + 9685 ] / mA[ 9750 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>65 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 9685 ] * mA[65+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 66 / 148
if( idx==0 && idy > 66 && idy < 149 ){ 
  mA_L[ idy + 9834 ] = mA[ idy + 9834 ] / mA[ 9900 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>66 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 9834 ] * mA[66+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 67 / 148
if( idx==0 && idy > 67 && idy < 149 ){ 
  mA_L[ idy + 9983 ] = mA[ idy + 9983 ] / mA[ 10050 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>67 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 9983 ] * mA[67+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 68 / 148
if( idx==0 && idy > 68 && idy < 149 ){ 
  mA_L[ idy + 10132 ] = mA[ idy + 10132 ] / mA[ 10200 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>68 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 10132 ] * mA[68+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 69 / 148
if( idx==0 && idy > 69 && idy < 149 ){ 
  mA_L[ idy + 10281 ] = mA[ idy + 10281 ] / mA[ 10350 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>69 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 10281 ] * mA[69+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 70 / 148
if( idx==0 && idy > 70 && idy < 149 ){ 
  mA_L[ idy + 10430 ] = mA[ idy + 10430 ] / mA[ 10500 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>70 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 10430 ] * mA[70+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 71 / 148
if( idx==0 && idy > 71 && idy < 149 ){ 
  mA_L[ idy + 10579 ] = mA[ idy + 10579 ] / mA[ 10650 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>71 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 10579 ] * mA[71+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 72 / 148
if( idx==0 && idy > 72 && idy < 149 ){ 
  mA_L[ idy + 10728 ] = mA[ idy + 10728 ] / mA[ 10800 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>72 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 10728 ] * mA[72+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 73 / 148
if( idx==0 && idy > 73 && idy < 149 ){ 
  mA_L[ idy + 10877 ] = mA[ idy + 10877 ] / mA[ 10950 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>73 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 10877 ] * mA[73+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 74 / 148
if( idx==0 && idy > 74 && idy < 149 ){ 
  mA_L[ idy + 11026 ] = mA[ idy + 11026 ] / mA[ 11100 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>74 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 11026 ] * mA[74+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 75 / 148
if( idx==0 && idy > 75 && idy < 149 ){ 
  mA_L[ idy + 11175 ] = mA[ idy + 11175 ] / mA[ 11250 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>75 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 11175 ] * mA[75+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 76 / 148
if( idx==0 && idy > 76 && idy < 149 ){ 
  mA_L[ idy + 11324 ] = mA[ idy + 11324 ] / mA[ 11400 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>76 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 11324 ] * mA[76+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 77 / 148
if( idx==0 && idy > 77 && idy < 149 ){ 
  mA_L[ idy + 11473 ] = mA[ idy + 11473 ] / mA[ 11550 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>77 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 11473 ] * mA[77+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 78 / 148
if( idx==0 && idy > 78 && idy < 149 ){ 
  mA_L[ idy + 11622 ] = mA[ idy + 11622 ] / mA[ 11700 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>78 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 11622 ] * mA[78+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 79 / 148
if( idx==0 && idy > 79 && idy < 149 ){ 
  mA_L[ idy + 11771 ] = mA[ idy + 11771 ] / mA[ 11850 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>79 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 11771 ] * mA[79+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 80 / 148
if( idx==0 && idy > 80 && idy < 149 ){ 
  mA_L[ idy + 11920 ] = mA[ idy + 11920 ] / mA[ 12000 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>80 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 11920 ] * mA[80+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 81 / 148
if( idx==0 && idy > 81 && idy < 149 ){ 
  mA_L[ idy + 12069 ] = mA[ idy + 12069 ] / mA[ 12150 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>81 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 12069 ] * mA[81+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 82 / 148
if( idx==0 && idy > 82 && idy < 149 ){ 
  mA_L[ idy + 12218 ] = mA[ idy + 12218 ] / mA[ 12300 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>82 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 12218 ] * mA[82+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 83 / 148
if( idx==0 && idy > 83 && idy < 149 ){ 
  mA_L[ idy + 12367 ] = mA[ idy + 12367 ] / mA[ 12450 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>83 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 12367 ] * mA[83+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 84 / 148
if( idx==0 && idy > 84 && idy < 149 ){ 
  mA_L[ idy + 12516 ] = mA[ idy + 12516 ] / mA[ 12600 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>84 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 12516 ] * mA[84+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 85 / 148
if( idx==0 && idy > 85 && idy < 149 ){ 
  mA_L[ idy + 12665 ] = mA[ idy + 12665 ] / mA[ 12750 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>85 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 12665 ] * mA[85+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 86 / 148
if( idx==0 && idy > 86 && idy < 149 ){ 
  mA_L[ idy + 12814 ] = mA[ idy + 12814 ] / mA[ 12900 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>86 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 12814 ] * mA[86+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 87 / 148
if( idx==0 && idy > 87 && idy < 149 ){ 
  mA_L[ idy + 12963 ] = mA[ idy + 12963 ] / mA[ 13050 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>87 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 12963 ] * mA[87+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 88 / 148
if( idx==0 && idy > 88 && idy < 149 ){ 
  mA_L[ idy + 13112 ] = mA[ idy + 13112 ] / mA[ 13200 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>88 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 13112 ] * mA[88+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 89 / 148
if( idx==0 && idy > 89 && idy < 149 ){ 
  mA_L[ idy + 13261 ] = mA[ idy + 13261 ] / mA[ 13350 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>89 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 13261 ] * mA[89+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 90 / 148
if( idx==0 && idy > 90 && idy < 149 ){ 
  mA_L[ idy + 13410 ] = mA[ idy + 13410 ] / mA[ 13500 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>90 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 13410 ] * mA[90+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 91 / 148
if( idx==0 && idy > 91 && idy < 149 ){ 
  mA_L[ idy + 13559 ] = mA[ idy + 13559 ] / mA[ 13650 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>91 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 13559 ] * mA[91+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 92 / 148
if( idx==0 && idy > 92 && idy < 149 ){ 
  mA_L[ idy + 13708 ] = mA[ idy + 13708 ] / mA[ 13800 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>92 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 13708 ] * mA[92+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 93 / 148
if( idx==0 && idy > 93 && idy < 149 ){ 
  mA_L[ idy + 13857 ] = mA[ idy + 13857 ] / mA[ 13950 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>93 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 13857 ] * mA[93+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 94 / 148
if( idx==0 && idy > 94 && idy < 149 ){ 
  mA_L[ idy + 14006 ] = mA[ idy + 14006 ] / mA[ 14100 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>94 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 14006 ] * mA[94+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 95 / 148
if( idx==0 && idy > 95 && idy < 149 ){ 
  mA_L[ idy + 14155 ] = mA[ idy + 14155 ] / mA[ 14250 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>95 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 14155 ] * mA[95+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 96 / 148
if( idx==0 && idy > 96 && idy < 149 ){ 
  mA_L[ idy + 14304 ] = mA[ idy + 14304 ] / mA[ 14400 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>96 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 14304 ] * mA[96+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 97 / 148
if( idx==0 && idy > 97 && idy < 149 ){ 
  mA_L[ idy + 14453 ] = mA[ idy + 14453 ] / mA[ 14550 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>97 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 14453 ] * mA[97+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 98 / 148
if( idx==0 && idy > 98 && idy < 149 ){ 
  mA_L[ idy + 14602 ] = mA[ idy + 14602 ] / mA[ 14700 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>98 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 14602 ] * mA[98+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 99 / 148
if( idx==0 && idy > 99 && idy < 149 ){ 
  mA_L[ idy + 14751 ] = mA[ idy + 14751 ] / mA[ 14850 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>99 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 14751 ] * mA[99+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 100 / 148
if( idx==0 && idy > 100 && idy < 149 ){ 
  mA_L[ idy + 14900 ] = mA[ idy + 14900 ] / mA[ 15000 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>100 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 14900 ] * mA[100+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 101 / 148
if( idx==0 && idy > 101 && idy < 149 ){ 
  mA_L[ idy + 15049 ] = mA[ idy + 15049 ] / mA[ 15150 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>101 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 15049 ] * mA[101+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 102 / 148
if( idx==0 && idy > 102 && idy < 149 ){ 
  mA_L[ idy + 15198 ] = mA[ idy + 15198 ] / mA[ 15300 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>102 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 15198 ] * mA[102+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 103 / 148
if( idx==0 && idy > 103 && idy < 149 ){ 
  mA_L[ idy + 15347 ] = mA[ idy + 15347 ] / mA[ 15450 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>103 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 15347 ] * mA[103+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 104 / 148
if( idx==0 && idy > 104 && idy < 149 ){ 
  mA_L[ idy + 15496 ] = mA[ idy + 15496 ] / mA[ 15600 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>104 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 15496 ] * mA[104+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 105 / 148
if( idx==0 && idy > 105 && idy < 149 ){ 
  mA_L[ idy + 15645 ] = mA[ idy + 15645 ] / mA[ 15750 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>105 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 15645 ] * mA[105+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 106 / 148
if( idx==0 && idy > 106 && idy < 149 ){ 
  mA_L[ idy + 15794 ] = mA[ idy + 15794 ] / mA[ 15900 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>106 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 15794 ] * mA[106+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 107 / 148
if( idx==0 && idy > 107 && idy < 149 ){ 
  mA_L[ idy + 15943 ] = mA[ idy + 15943 ] / mA[ 16050 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>107 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 15943 ] * mA[107+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 108 / 148
if( idx==0 && idy > 108 && idy < 149 ){ 
  mA_L[ idy + 16092 ] = mA[ idy + 16092 ] / mA[ 16200 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>108 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 16092 ] * mA[108+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 109 / 148
if( idx==0 && idy > 109 && idy < 149 ){ 
  mA_L[ idy + 16241 ] = mA[ idy + 16241 ] / mA[ 16350 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>109 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 16241 ] * mA[109+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 110 / 148
if( idx==0 && idy > 110 && idy < 149 ){ 
  mA_L[ idy + 16390 ] = mA[ idy + 16390 ] / mA[ 16500 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>110 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 16390 ] * mA[110+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 111 / 148
if( idx==0 && idy > 111 && idy < 149 ){ 
  mA_L[ idy + 16539 ] = mA[ idy + 16539 ] / mA[ 16650 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>111 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 16539 ] * mA[111+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 112 / 148
if( idx==0 && idy > 112 && idy < 149 ){ 
  mA_L[ idy + 16688 ] = mA[ idy + 16688 ] / mA[ 16800 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>112 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 16688 ] * mA[112+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 113 / 148
if( idx==0 && idy > 113 && idy < 149 ){ 
  mA_L[ idy + 16837 ] = mA[ idy + 16837 ] / mA[ 16950 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>113 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 16837 ] * mA[113+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 114 / 148
if( idx==0 && idy > 114 && idy < 149 ){ 
  mA_L[ idy + 16986 ] = mA[ idy + 16986 ] / mA[ 17100 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>114 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 16986 ] * mA[114+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 115 / 148
if( idx==0 && idy > 115 && idy < 149 ){ 
  mA_L[ idy + 17135 ] = mA[ idy + 17135 ] / mA[ 17250 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>115 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 17135 ] * mA[115+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 116 / 148
if( idx==0 && idy > 116 && idy < 149 ){ 
  mA_L[ idy + 17284 ] = mA[ idy + 17284 ] / mA[ 17400 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>116 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 17284 ] * mA[116+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 117 / 148
if( idx==0 && idy > 117 && idy < 149 ){ 
  mA_L[ idy + 17433 ] = mA[ idy + 17433 ] / mA[ 17550 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>117 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 17433 ] * mA[117+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 118 / 148
if( idx==0 && idy > 118 && idy < 149 ){ 
  mA_L[ idy + 17582 ] = mA[ idy + 17582 ] / mA[ 17700 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>118 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 17582 ] * mA[118+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 119 / 148
if( idx==0 && idy > 119 && idy < 149 ){ 
  mA_L[ idy + 17731 ] = mA[ idy + 17731 ] / mA[ 17850 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>119 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 17731 ] * mA[119+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 120 / 148
if( idx==0 && idy > 120 && idy < 149 ){ 
  mA_L[ idy + 17880 ] = mA[ idy + 17880 ] / mA[ 18000 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>120 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 17880 ] * mA[120+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 121 / 148
if( idx==0 && idy > 121 && idy < 149 ){ 
  mA_L[ idy + 18029 ] = mA[ idy + 18029 ] / mA[ 18150 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>121 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 18029 ] * mA[121+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 122 / 148
if( idx==0 && idy > 122 && idy < 149 ){ 
  mA_L[ idy + 18178 ] = mA[ idy + 18178 ] / mA[ 18300 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>122 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 18178 ] * mA[122+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 123 / 148
if( idx==0 && idy > 123 && idy < 149 ){ 
  mA_L[ idy + 18327 ] = mA[ idy + 18327 ] / mA[ 18450 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>123 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 18327 ] * mA[123+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 124 / 148
if( idx==0 && idy > 124 && idy < 149 ){ 
  mA_L[ idy + 18476 ] = mA[ idy + 18476 ] / mA[ 18600 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>124 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 18476 ] * mA[124+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 125 / 148
if( idx==0 && idy > 125 && idy < 149 ){ 
  mA_L[ idy + 18625 ] = mA[ idy + 18625 ] / mA[ 18750 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>125 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 18625 ] * mA[125+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 126 / 148
if( idx==0 && idy > 126 && idy < 149 ){ 
  mA_L[ idy + 18774 ] = mA[ idy + 18774 ] / mA[ 18900 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>126 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 18774 ] * mA[126+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 127 / 148
if( idx==0 && idy > 127 && idy < 149 ){ 
  mA_L[ idy + 18923 ] = mA[ idy + 18923 ] / mA[ 19050 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>127 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 18923 ] * mA[127+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 128 / 148
if( idx==0 && idy > 128 && idy < 149 ){ 
  mA_L[ idy + 19072 ] = mA[ idy + 19072 ] / mA[ 19200 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>128 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 19072 ] * mA[128+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 129 / 148
if( idx==0 && idy > 129 && idy < 149 ){ 
  mA_L[ idy + 19221 ] = mA[ idy + 19221 ] / mA[ 19350 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>129 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 19221 ] * mA[129+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 130 / 148
if( idx==0 && idy > 130 && idy < 149 ){ 
  mA_L[ idy + 19370 ] = mA[ idy + 19370 ] / mA[ 19500 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>130 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 19370 ] * mA[130+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 131 / 148
if( idx==0 && idy > 131 && idy < 149 ){ 
  mA_L[ idy + 19519 ] = mA[ idy + 19519 ] / mA[ 19650 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>131 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 19519 ] * mA[131+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 132 / 148
if( idx==0 && idy > 132 && idy < 149 ){ 
  mA_L[ idy + 19668 ] = mA[ idy + 19668 ] / mA[ 19800 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>132 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 19668 ] * mA[132+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 133 / 148
if( idx==0 && idy > 133 && idy < 149 ){ 
  mA_L[ idy + 19817 ] = mA[ idy + 19817 ] / mA[ 19950 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>133 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 19817 ] * mA[133+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 134 / 148
if( idx==0 && idy > 134 && idy < 149 ){ 
  mA_L[ idy + 19966 ] = mA[ idy + 19966 ] / mA[ 20100 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>134 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 19966 ] * mA[134+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 135 / 148
if( idx==0 && idy > 135 && idy < 149 ){ 
  mA_L[ idy + 20115 ] = mA[ idy + 20115 ] / mA[ 20250 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>135 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 20115 ] * mA[135+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 136 / 148
if( idx==0 && idy > 136 && idy < 149 ){ 
  mA_L[ idy + 20264 ] = mA[ idy + 20264 ] / mA[ 20400 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>136 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 20264 ] * mA[136+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 137 / 148
if( idx==0 && idy > 137 && idy < 149 ){ 
  mA_L[ idy + 20413 ] = mA[ idy + 20413 ] / mA[ 20550 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>137 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 20413 ] * mA[137+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 138 / 148
if( idx==0 && idy > 138 && idy < 149 ){ 
  mA_L[ idy + 20562 ] = mA[ idy + 20562 ] / mA[ 20700 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>138 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 20562 ] * mA[138+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 139 / 148
if( idx==0 && idy > 139 && idy < 149 ){ 
  mA_L[ idy + 20711 ] = mA[ idy + 20711 ] / mA[ 20850 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>139 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 20711 ] * mA[139+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 140 / 148
if( idx==0 && idy > 140 && idy < 149 ){ 
  mA_L[ idy + 20860 ] = mA[ idy + 20860 ] / mA[ 21000 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>140 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 20860 ] * mA[140+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 141 / 148
if( idx==0 && idy > 141 && idy < 149 ){ 
  mA_L[ idy + 21009 ] = mA[ idy + 21009 ] / mA[ 21150 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>141 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 21009 ] * mA[141+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 142 / 148
if( idx==0 && idy > 142 && idy < 149 ){ 
  mA_L[ idy + 21158 ] = mA[ idy + 21158 ] / mA[ 21300 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>142 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 21158 ] * mA[142+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 143 / 148
if( idx==0 && idy > 143 && idy < 149 ){ 
  mA_L[ idy + 21307 ] = mA[ idy + 21307 ] / mA[ 21450 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>143 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 21307 ] * mA[143+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 144 / 148
if( idx==0 && idy > 144 && idy < 149 ){ 
  mA_L[ idy + 21456 ] = mA[ idy + 21456 ] / mA[ 21600 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>144 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 21456 ] * mA[144+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 145 / 148
if( idx==0 && idy > 145 && idy < 149 ){ 
  mA_L[ idy + 21605 ] = mA[ idy + 21605 ] / mA[ 21750 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>145 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 21605 ] * mA[145+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 146 / 148
if( idx==0 && idy > 146 && idy < 149 ){ 
  mA_L[ idy + 21754 ] = mA[ idy + 21754 ] / mA[ 21900 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>146 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 21754 ] * mA[146+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 147 / 148
if( idx==0 && idy > 147 && idy < 149 ){ 
  mA_L[ idy + 21903 ] = mA[ idy + 21903 ] / mA[ 22050 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>147 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 21903 ] * mA[147+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 148 / 148
if( idx==0 && idy > 148 && idy < 149 ){ 
  mA_L[ idy + 22052 ] = mA[ idy + 22052 ] / mA[ 22200 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>148 && idx < 149 && idy < 149 ){ 
  mA[ idx + 149*idy ] -= mA_L[ idx + 22052 ] * mA[148+ idy*149 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION DONE!
//----------------------------------
//MATRIX MUL: mBY = mB * mY   
//Work item (idx,idy) compute mBY[idx,idy]   
if( idx < 149 && idy < 2 ) {  
float mulsum = 0.0f;
mulsum += mB[ 149*0 + idx ] * mY[ idy * 7 + 0 ];
mulsum += mB[ 149*1 + idx ] * mY[ idy * 7 + 1 ];
mulsum += mB[ 149*2 + idx ] * mY[ idy * 7 + 2 ];
mulsum += mB[ 149*3 + idx ] * mY[ idy * 7 + 3 ];
mulsum += mB[ 149*4 + idx ] * mY[ idy * 7 + 4 ];
mulsum += mB[ 149*5 + idx ] * mY[ idy * 7 + 5 ];
mulsum += mB[ 149*6 + idx ] * mY[ idy * 7 + 6 ];
mBY[idx+149*idy] = mulsum;
}
//MATRIX MUL COMPLETE! 
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System
// Solve L System - Row 0
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  mBY[ 0 + 149*idy ] = (mBY[ 0 + 149*idy ] - sum_i ) / mA_L[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 1
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 1 + 0 ] ;
  mBY[ 1 + 149*idy ] = (mBY[ 1 + 149*idy ] - sum_i ) / mA_L[ 150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 2
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 2 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 2 + 149 ] ;
  mBY[ 2 + 149*idy ] = (mBY[ 2 + 149*idy ] - sum_i ) / mA_L[ 300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 3
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 3 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 3 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 3 + 298 ] ;
  mBY[ 3 + 149*idy ] = (mBY[ 3 + 149*idy ] - sum_i ) / mA_L[ 450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 4
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 4 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 4 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 4 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 4 + 447 ] ;
  mBY[ 4 + 149*idy ] = (mBY[ 4 + 149*idy ] - sum_i ) / mA_L[ 600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 5
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 5 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 5 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 5 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 5 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 5 + 596 ] ;
  mBY[ 5 + 149*idy ] = (mBY[ 5 + 149*idy ] - sum_i ) / mA_L[ 750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 6
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 6 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 6 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 6 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 6 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 6 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 6 + 745 ] ;
  mBY[ 6 + 149*idy ] = (mBY[ 6 + 149*idy ] - sum_i ) / mA_L[ 900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 7
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 7 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 7 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 7 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 7 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 7 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 7 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 7 + 894 ] ;
  mBY[ 7 + 149*idy ] = (mBY[ 7 + 149*idy ] - sum_i ) / mA_L[ 1050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 8
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 8 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 8 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 8 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 8 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 8 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 8 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 8 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 8 + 1043 ] ;
  mBY[ 8 + 149*idy ] = (mBY[ 8 + 149*idy ] - sum_i ) / mA_L[ 1200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 9
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 9 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 9 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 9 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 9 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 9 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 9 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 9 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 9 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 9 + 1192 ] ;
  mBY[ 9 + 149*idy ] = (mBY[ 9 + 149*idy ] - sum_i ) / mA_L[ 1350 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 10
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 10 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 10 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 10 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 10 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 10 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 10 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 10 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 10 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 10 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 10 + 1341 ] ;
  mBY[ 10 + 149*idy ] = (mBY[ 10 + 149*idy ] - sum_i ) / mA_L[ 1500 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 11
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 11 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 11 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 11 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 11 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 11 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 11 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 11 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 11 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 11 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 11 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 11 + 1490 ] ;
  mBY[ 11 + 149*idy ] = (mBY[ 11 + 149*idy ] - sum_i ) / mA_L[ 1650 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 12
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 12 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 12 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 12 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 12 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 12 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 12 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 12 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 12 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 12 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 12 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 12 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 12 + 1639 ] ;
  mBY[ 12 + 149*idy ] = (mBY[ 12 + 149*idy ] - sum_i ) / mA_L[ 1800 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 13
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 13 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 13 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 13 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 13 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 13 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 13 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 13 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 13 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 13 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 13 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 13 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 13 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 13 + 1788 ] ;
  mBY[ 13 + 149*idy ] = (mBY[ 13 + 149*idy ] - sum_i ) / mA_L[ 1950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 14
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 14 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 14 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 14 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 14 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 14 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 14 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 14 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 14 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 14 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 14 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 14 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 14 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 14 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 14 + 1937 ] ;
  mBY[ 14 + 149*idy ] = (mBY[ 14 + 149*idy ] - sum_i ) / mA_L[ 2100 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 15
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 15 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 15 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 15 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 15 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 15 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 15 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 15 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 15 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 15 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 15 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 15 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 15 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 15 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 15 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 15 + 2086 ] ;
  mBY[ 15 + 149*idy ] = (mBY[ 15 + 149*idy ] - sum_i ) / mA_L[ 2250 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 16
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 16 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 16 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 16 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 16 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 16 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 16 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 16 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 16 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 16 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 16 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 16 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 16 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 16 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 16 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 16 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 16 + 2235 ] ;
  mBY[ 16 + 149*idy ] = (mBY[ 16 + 149*idy ] - sum_i ) / mA_L[ 2400 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 17
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 17 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 17 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 17 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 17 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 17 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 17 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 17 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 17 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 17 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 17 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 17 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 17 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 17 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 17 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 17 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 17 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 17 + 2384 ] ;
  mBY[ 17 + 149*idy ] = (mBY[ 17 + 149*idy ] - sum_i ) / mA_L[ 2550 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 18
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 18 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 18 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 18 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 18 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 18 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 18 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 18 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 18 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 18 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 18 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 18 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 18 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 18 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 18 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 18 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 18 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 18 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 18 + 2533 ] ;
  mBY[ 18 + 149*idy ] = (mBY[ 18 + 149*idy ] - sum_i ) / mA_L[ 2700 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 19
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 19 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 19 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 19 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 19 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 19 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 19 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 19 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 19 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 19 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 19 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 19 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 19 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 19 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 19 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 19 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 19 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 19 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 19 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 19 + 2682 ] ;
  mBY[ 19 + 149*idy ] = (mBY[ 19 + 149*idy ] - sum_i ) / mA_L[ 2850 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 20
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 20 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 20 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 20 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 20 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 20 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 20 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 20 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 20 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 20 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 20 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 20 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 20 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 20 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 20 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 20 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 20 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 20 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 20 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 20 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 20 + 2831 ] ;
  mBY[ 20 + 149*idy ] = (mBY[ 20 + 149*idy ] - sum_i ) / mA_L[ 3000 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 21
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 21 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 21 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 21 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 21 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 21 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 21 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 21 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 21 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 21 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 21 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 21 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 21 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 21 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 21 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 21 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 21 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 21 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 21 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 21 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 21 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 21 + 2980 ] ;
  mBY[ 21 + 149*idy ] = (mBY[ 21 + 149*idy ] - sum_i ) / mA_L[ 3150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 22
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 22 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 22 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 22 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 22 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 22 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 22 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 22 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 22 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 22 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 22 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 22 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 22 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 22 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 22 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 22 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 22 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 22 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 22 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 22 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 22 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 22 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 22 + 3129 ] ;
  mBY[ 22 + 149*idy ] = (mBY[ 22 + 149*idy ] - sum_i ) / mA_L[ 3300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 23
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 23 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 23 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 23 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 23 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 23 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 23 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 23 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 23 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 23 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 23 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 23 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 23 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 23 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 23 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 23 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 23 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 23 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 23 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 23 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 23 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 23 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 23 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 23 + 3278 ] ;
  mBY[ 23 + 149*idy ] = (mBY[ 23 + 149*idy ] - sum_i ) / mA_L[ 3450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 24
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 24 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 24 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 24 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 24 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 24 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 24 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 24 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 24 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 24 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 24 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 24 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 24 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 24 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 24 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 24 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 24 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 24 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 24 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 24 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 24 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 24 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 24 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 24 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 24 + 3427 ] ;
  mBY[ 24 + 149*idy ] = (mBY[ 24 + 149*idy ] - sum_i ) / mA_L[ 3600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 25
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 25 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 25 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 25 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 25 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 25 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 25 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 25 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 25 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 25 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 25 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 25 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 25 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 25 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 25 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 25 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 25 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 25 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 25 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 25 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 25 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 25 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 25 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 25 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 25 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 25 + 3576 ] ;
  mBY[ 25 + 149*idy ] = (mBY[ 25 + 149*idy ] - sum_i ) / mA_L[ 3750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 26
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 26 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 26 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 26 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 26 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 26 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 26 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 26 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 26 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 26 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 26 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 26 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 26 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 26 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 26 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 26 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 26 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 26 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 26 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 26 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 26 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 26 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 26 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 26 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 26 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 26 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 26 + 3725 ] ;
  mBY[ 26 + 149*idy ] = (mBY[ 26 + 149*idy ] - sum_i ) / mA_L[ 3900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 27
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 27 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 27 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 27 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 27 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 27 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 27 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 27 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 27 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 27 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 27 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 27 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 27 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 27 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 27 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 27 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 27 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 27 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 27 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 27 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 27 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 27 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 27 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 27 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 27 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 27 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 27 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 27 + 3874 ] ;
  mBY[ 27 + 149*idy ] = (mBY[ 27 + 149*idy ] - sum_i ) / mA_L[ 4050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 28
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 28 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 28 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 28 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 28 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 28 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 28 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 28 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 28 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 28 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 28 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 28 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 28 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 28 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 28 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 28 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 28 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 28 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 28 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 28 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 28 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 28 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 28 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 28 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 28 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 28 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 28 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 28 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 28 + 4023 ] ;
  mBY[ 28 + 149*idy ] = (mBY[ 28 + 149*idy ] - sum_i ) / mA_L[ 4200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 29
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 29 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 29 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 29 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 29 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 29 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 29 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 29 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 29 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 29 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 29 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 29 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 29 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 29 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 29 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 29 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 29 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 29 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 29 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 29 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 29 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 29 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 29 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 29 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 29 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 29 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 29 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 29 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 29 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 29 + 4172 ] ;
  mBY[ 29 + 149*idy ] = (mBY[ 29 + 149*idy ] - sum_i ) / mA_L[ 4350 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 30
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 30 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 30 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 30 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 30 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 30 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 30 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 30 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 30 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 30 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 30 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 30 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 30 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 30 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 30 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 30 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 30 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 30 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 30 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 30 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 30 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 30 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 30 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 30 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 30 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 30 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 30 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 30 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 30 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 30 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 30 + 4321 ] ;
  mBY[ 30 + 149*idy ] = (mBY[ 30 + 149*idy ] - sum_i ) / mA_L[ 4500 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 31
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 31 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 31 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 31 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 31 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 31 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 31 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 31 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 31 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 31 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 31 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 31 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 31 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 31 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 31 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 31 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 31 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 31 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 31 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 31 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 31 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 31 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 31 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 31 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 31 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 31 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 31 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 31 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 31 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 31 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 31 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 31 + 4470 ] ;
  mBY[ 31 + 149*idy ] = (mBY[ 31 + 149*idy ] - sum_i ) / mA_L[ 4650 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 32
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 32 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 32 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 32 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 32 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 32 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 32 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 32 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 32 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 32 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 32 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 32 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 32 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 32 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 32 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 32 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 32 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 32 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 32 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 32 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 32 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 32 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 32 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 32 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 32 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 32 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 32 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 32 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 32 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 32 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 32 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 32 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 32 + 4619 ] ;
  mBY[ 32 + 149*idy ] = (mBY[ 32 + 149*idy ] - sum_i ) / mA_L[ 4800 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 33
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 33 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 33 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 33 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 33 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 33 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 33 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 33 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 33 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 33 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 33 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 33 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 33 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 33 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 33 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 33 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 33 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 33 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 33 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 33 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 33 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 33 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 33 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 33 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 33 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 33 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 33 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 33 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 33 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 33 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 33 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 33 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 33 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 33 + 4768 ] ;
  mBY[ 33 + 149*idy ] = (mBY[ 33 + 149*idy ] - sum_i ) / mA_L[ 4950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 34
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 34 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 34 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 34 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 34 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 34 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 34 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 34 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 34 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 34 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 34 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 34 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 34 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 34 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 34 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 34 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 34 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 34 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 34 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 34 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 34 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 34 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 34 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 34 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 34 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 34 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 34 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 34 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 34 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 34 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 34 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 34 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 34 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 34 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 34 + 4917 ] ;
  mBY[ 34 + 149*idy ] = (mBY[ 34 + 149*idy ] - sum_i ) / mA_L[ 5100 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 35
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 35 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 35 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 35 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 35 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 35 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 35 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 35 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 35 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 35 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 35 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 35 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 35 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 35 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 35 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 35 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 35 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 35 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 35 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 35 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 35 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 35 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 35 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 35 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 35 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 35 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 35 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 35 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 35 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 35 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 35 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 35 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 35 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 35 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 35 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 35 + 5066 ] ;
  mBY[ 35 + 149*idy ] = (mBY[ 35 + 149*idy ] - sum_i ) / mA_L[ 5250 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 36
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 36 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 36 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 36 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 36 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 36 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 36 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 36 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 36 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 36 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 36 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 36 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 36 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 36 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 36 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 36 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 36 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 36 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 36 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 36 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 36 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 36 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 36 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 36 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 36 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 36 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 36 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 36 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 36 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 36 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 36 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 36 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 36 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 36 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 36 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 36 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 36 + 5215 ] ;
  mBY[ 36 + 149*idy ] = (mBY[ 36 + 149*idy ] - sum_i ) / mA_L[ 5400 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 37
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 37 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 37 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 37 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 37 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 37 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 37 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 37 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 37 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 37 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 37 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 37 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 37 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 37 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 37 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 37 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 37 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 37 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 37 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 37 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 37 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 37 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 37 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 37 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 37 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 37 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 37 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 37 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 37 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 37 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 37 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 37 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 37 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 37 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 37 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 37 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 37 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 37 + 5364 ] ;
  mBY[ 37 + 149*idy ] = (mBY[ 37 + 149*idy ] - sum_i ) / mA_L[ 5550 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 38
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 38 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 38 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 38 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 38 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 38 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 38 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 38 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 38 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 38 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 38 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 38 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 38 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 38 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 38 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 38 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 38 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 38 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 38 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 38 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 38 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 38 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 38 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 38 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 38 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 38 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 38 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 38 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 38 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 38 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 38 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 38 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 38 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 38 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 38 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 38 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 38 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 38 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 38 + 5513 ] ;
  mBY[ 38 + 149*idy ] = (mBY[ 38 + 149*idy ] - sum_i ) / mA_L[ 5700 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 39
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 39 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 39 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 39 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 39 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 39 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 39 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 39 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 39 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 39 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 39 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 39 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 39 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 39 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 39 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 39 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 39 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 39 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 39 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 39 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 39 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 39 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 39 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 39 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 39 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 39 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 39 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 39 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 39 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 39 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 39 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 39 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 39 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 39 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 39 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 39 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 39 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 39 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 39 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 39 + 5662 ] ;
  mBY[ 39 + 149*idy ] = (mBY[ 39 + 149*idy ] - sum_i ) / mA_L[ 5850 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 40
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 40 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 40 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 40 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 40 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 40 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 40 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 40 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 40 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 40 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 40 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 40 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 40 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 40 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 40 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 40 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 40 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 40 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 40 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 40 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 40 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 40 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 40 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 40 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 40 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 40 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 40 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 40 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 40 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 40 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 40 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 40 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 40 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 40 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 40 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 40 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 40 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 40 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 40 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 40 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 40 + 5811 ] ;
  mBY[ 40 + 149*idy ] = (mBY[ 40 + 149*idy ] - sum_i ) / mA_L[ 6000 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 41
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 41 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 41 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 41 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 41 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 41 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 41 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 41 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 41 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 41 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 41 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 41 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 41 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 41 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 41 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 41 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 41 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 41 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 41 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 41 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 41 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 41 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 41 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 41 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 41 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 41 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 41 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 41 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 41 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 41 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 41 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 41 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 41 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 41 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 41 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 41 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 41 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 41 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 41 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 41 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 41 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 41 + 5960 ] ;
  mBY[ 41 + 149*idy ] = (mBY[ 41 + 149*idy ] - sum_i ) / mA_L[ 6150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 42
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 42 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 42 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 42 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 42 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 42 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 42 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 42 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 42 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 42 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 42 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 42 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 42 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 42 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 42 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 42 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 42 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 42 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 42 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 42 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 42 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 42 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 42 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 42 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 42 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 42 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 42 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 42 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 42 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 42 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 42 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 42 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 42 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 42 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 42 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 42 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 42 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 42 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 42 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 42 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 42 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 42 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 42 + 6109 ] ;
  mBY[ 42 + 149*idy ] = (mBY[ 42 + 149*idy ] - sum_i ) / mA_L[ 6300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 43
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 43 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 43 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 43 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 43 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 43 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 43 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 43 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 43 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 43 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 43 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 43 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 43 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 43 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 43 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 43 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 43 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 43 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 43 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 43 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 43 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 43 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 43 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 43 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 43 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 43 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 43 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 43 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 43 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 43 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 43 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 43 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 43 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 43 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 43 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 43 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 43 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 43 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 43 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 43 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 43 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 43 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 43 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 43 + 6258 ] ;
  mBY[ 43 + 149*idy ] = (mBY[ 43 + 149*idy ] - sum_i ) / mA_L[ 6450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 44
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 44 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 44 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 44 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 44 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 44 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 44 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 44 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 44 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 44 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 44 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 44 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 44 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 44 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 44 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 44 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 44 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 44 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 44 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 44 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 44 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 44 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 44 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 44 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 44 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 44 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 44 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 44 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 44 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 44 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 44 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 44 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 44 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 44 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 44 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 44 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 44 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 44 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 44 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 44 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 44 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 44 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 44 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 44 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 44 + 6407 ] ;
  mBY[ 44 + 149*idy ] = (mBY[ 44 + 149*idy ] - sum_i ) / mA_L[ 6600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 45
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 45 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 45 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 45 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 45 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 45 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 45 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 45 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 45 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 45 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 45 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 45 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 45 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 45 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 45 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 45 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 45 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 45 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 45 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 45 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 45 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 45 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 45 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 45 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 45 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 45 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 45 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 45 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 45 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 45 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 45 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 45 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 45 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 45 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 45 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 45 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 45 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 45 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 45 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 45 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 45 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 45 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 45 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 45 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 45 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 45 + 6556 ] ;
  mBY[ 45 + 149*idy ] = (mBY[ 45 + 149*idy ] - sum_i ) / mA_L[ 6750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 46
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 46 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 46 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 46 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 46 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 46 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 46 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 46 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 46 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 46 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 46 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 46 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 46 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 46 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 46 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 46 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 46 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 46 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 46 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 46 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 46 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 46 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 46 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 46 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 46 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 46 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 46 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 46 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 46 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 46 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 46 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 46 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 46 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 46 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 46 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 46 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 46 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 46 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 46 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 46 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 46 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 46 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 46 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 46 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 46 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 46 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 46 + 6705 ] ;
  mBY[ 46 + 149*idy ] = (mBY[ 46 + 149*idy ] - sum_i ) / mA_L[ 6900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 47
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 47 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 47 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 47 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 47 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 47 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 47 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 47 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 47 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 47 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 47 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 47 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 47 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 47 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 47 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 47 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 47 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 47 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 47 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 47 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 47 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 47 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 47 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 47 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 47 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 47 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 47 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 47 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 47 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 47 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 47 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 47 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 47 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 47 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 47 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 47 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 47 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 47 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 47 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 47 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 47 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 47 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 47 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 47 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 47 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 47 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 47 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 47 + 6854 ] ;
  mBY[ 47 + 149*idy ] = (mBY[ 47 + 149*idy ] - sum_i ) / mA_L[ 7050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 48
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 48 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 48 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 48 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 48 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 48 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 48 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 48 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 48 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 48 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 48 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 48 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 48 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 48 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 48 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 48 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 48 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 48 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 48 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 48 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 48 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 48 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 48 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 48 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 48 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 48 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 48 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 48 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 48 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 48 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 48 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 48 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 48 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 48 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 48 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 48 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 48 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 48 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 48 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 48 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 48 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 48 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 48 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 48 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 48 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 48 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 48 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 48 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 48 + 7003 ] ;
  mBY[ 48 + 149*idy ] = (mBY[ 48 + 149*idy ] - sum_i ) / mA_L[ 7200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 49
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 49 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 49 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 49 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 49 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 49 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 49 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 49 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 49 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 49 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 49 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 49 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 49 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 49 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 49 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 49 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 49 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 49 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 49 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 49 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 49 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 49 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 49 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 49 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 49 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 49 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 49 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 49 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 49 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 49 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 49 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 49 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 49 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 49 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 49 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 49 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 49 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 49 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 49 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 49 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 49 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 49 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 49 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 49 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 49 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 49 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 49 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 49 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 49 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 49 + 7152 ] ;
  mBY[ 49 + 149*idy ] = (mBY[ 49 + 149*idy ] - sum_i ) / mA_L[ 7350 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 50
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 50 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 50 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 50 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 50 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 50 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 50 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 50 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 50 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 50 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 50 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 50 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 50 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 50 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 50 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 50 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 50 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 50 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 50 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 50 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 50 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 50 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 50 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 50 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 50 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 50 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 50 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 50 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 50 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 50 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 50 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 50 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 50 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 50 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 50 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 50 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 50 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 50 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 50 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 50 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 50 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 50 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 50 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 50 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 50 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 50 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 50 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 50 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 50 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 50 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 50 + 7301 ] ;
  mBY[ 50 + 149*idy ] = (mBY[ 50 + 149*idy ] - sum_i ) / mA_L[ 7500 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 51
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 51 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 51 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 51 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 51 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 51 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 51 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 51 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 51 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 51 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 51 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 51 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 51 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 51 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 51 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 51 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 51 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 51 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 51 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 51 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 51 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 51 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 51 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 51 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 51 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 51 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 51 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 51 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 51 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 51 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 51 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 51 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 51 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 51 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 51 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 51 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 51 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 51 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 51 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 51 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 51 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 51 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 51 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 51 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 51 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 51 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 51 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 51 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 51 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 51 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 51 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 51 + 7450 ] ;
  mBY[ 51 + 149*idy ] = (mBY[ 51 + 149*idy ] - sum_i ) / mA_L[ 7650 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 52
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 52 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 52 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 52 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 52 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 52 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 52 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 52 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 52 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 52 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 52 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 52 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 52 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 52 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 52 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 52 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 52 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 52 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 52 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 52 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 52 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 52 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 52 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 52 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 52 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 52 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 52 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 52 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 52 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 52 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 52 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 52 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 52 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 52 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 52 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 52 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 52 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 52 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 52 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 52 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 52 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 52 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 52 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 52 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 52 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 52 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 52 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 52 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 52 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 52 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 52 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 52 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 52 + 7599 ] ;
  mBY[ 52 + 149*idy ] = (mBY[ 52 + 149*idy ] - sum_i ) / mA_L[ 7800 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 53
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 53 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 53 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 53 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 53 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 53 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 53 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 53 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 53 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 53 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 53 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 53 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 53 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 53 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 53 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 53 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 53 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 53 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 53 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 53 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 53 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 53 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 53 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 53 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 53 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 53 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 53 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 53 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 53 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 53 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 53 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 53 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 53 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 53 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 53 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 53 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 53 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 53 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 53 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 53 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 53 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 53 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 53 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 53 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 53 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 53 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 53 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 53 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 53 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 53 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 53 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 53 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 53 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 53 + 7748 ] ;
  mBY[ 53 + 149*idy ] = (mBY[ 53 + 149*idy ] - sum_i ) / mA_L[ 7950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 54
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 54 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 54 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 54 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 54 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 54 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 54 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 54 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 54 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 54 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 54 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 54 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 54 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 54 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 54 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 54 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 54 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 54 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 54 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 54 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 54 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 54 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 54 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 54 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 54 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 54 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 54 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 54 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 54 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 54 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 54 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 54 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 54 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 54 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 54 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 54 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 54 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 54 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 54 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 54 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 54 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 54 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 54 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 54 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 54 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 54 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 54 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 54 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 54 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 54 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 54 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 54 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 54 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 54 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 54 + 7897 ] ;
  mBY[ 54 + 149*idy ] = (mBY[ 54 + 149*idy ] - sum_i ) / mA_L[ 8100 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 55
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 55 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 55 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 55 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 55 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 55 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 55 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 55 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 55 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 55 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 55 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 55 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 55 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 55 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 55 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 55 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 55 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 55 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 55 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 55 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 55 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 55 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 55 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 55 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 55 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 55 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 55 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 55 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 55 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 55 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 55 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 55 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 55 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 55 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 55 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 55 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 55 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 55 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 55 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 55 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 55 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 55 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 55 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 55 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 55 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 55 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 55 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 55 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 55 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 55 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 55 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 55 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 55 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 55 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 55 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 55 + 8046 ] ;
  mBY[ 55 + 149*idy ] = (mBY[ 55 + 149*idy ] - sum_i ) / mA_L[ 8250 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 56
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 56 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 56 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 56 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 56 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 56 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 56 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 56 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 56 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 56 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 56 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 56 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 56 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 56 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 56 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 56 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 56 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 56 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 56 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 56 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 56 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 56 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 56 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 56 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 56 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 56 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 56 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 56 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 56 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 56 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 56 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 56 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 56 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 56 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 56 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 56 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 56 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 56 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 56 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 56 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 56 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 56 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 56 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 56 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 56 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 56 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 56 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 56 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 56 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 56 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 56 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 56 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 56 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 56 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 56 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 56 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 56 + 8195 ] ;
  mBY[ 56 + 149*idy ] = (mBY[ 56 + 149*idy ] - sum_i ) / mA_L[ 8400 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 57
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 57 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 57 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 57 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 57 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 57 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 57 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 57 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 57 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 57 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 57 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 57 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 57 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 57 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 57 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 57 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 57 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 57 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 57 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 57 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 57 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 57 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 57 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 57 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 57 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 57 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 57 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 57 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 57 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 57 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 57 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 57 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 57 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 57 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 57 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 57 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 57 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 57 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 57 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 57 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 57 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 57 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 57 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 57 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 57 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 57 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 57 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 57 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 57 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 57 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 57 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 57 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 57 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 57 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 57 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 57 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 57 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 57 + 8344 ] ;
  mBY[ 57 + 149*idy ] = (mBY[ 57 + 149*idy ] - sum_i ) / mA_L[ 8550 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 58
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 58 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 58 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 58 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 58 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 58 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 58 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 58 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 58 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 58 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 58 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 58 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 58 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 58 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 58 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 58 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 58 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 58 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 58 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 58 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 58 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 58 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 58 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 58 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 58 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 58 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 58 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 58 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 58 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 58 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 58 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 58 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 58 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 58 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 58 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 58 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 58 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 58 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 58 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 58 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 58 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 58 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 58 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 58 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 58 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 58 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 58 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 58 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 58 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 58 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 58 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 58 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 58 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 58 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 58 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 58 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 58 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 58 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 58 + 8493 ] ;
  mBY[ 58 + 149*idy ] = (mBY[ 58 + 149*idy ] - sum_i ) / mA_L[ 8700 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 59
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 59 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 59 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 59 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 59 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 59 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 59 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 59 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 59 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 59 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 59 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 59 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 59 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 59 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 59 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 59 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 59 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 59 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 59 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 59 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 59 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 59 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 59 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 59 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 59 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 59 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 59 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 59 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 59 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 59 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 59 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 59 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 59 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 59 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 59 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 59 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 59 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 59 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 59 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 59 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 59 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 59 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 59 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 59 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 59 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 59 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 59 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 59 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 59 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 59 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 59 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 59 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 59 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 59 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 59 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 59 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 59 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 59 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 59 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 59 + 8642 ] ;
  mBY[ 59 + 149*idy ] = (mBY[ 59 + 149*idy ] - sum_i ) / mA_L[ 8850 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 60
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 60 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 60 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 60 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 60 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 60 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 60 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 60 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 60 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 60 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 60 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 60 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 60 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 60 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 60 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 60 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 60 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 60 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 60 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 60 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 60 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 60 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 60 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 60 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 60 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 60 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 60 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 60 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 60 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 60 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 60 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 60 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 60 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 60 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 60 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 60 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 60 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 60 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 60 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 60 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 60 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 60 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 60 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 60 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 60 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 60 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 60 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 60 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 60 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 60 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 60 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 60 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 60 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 60 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 60 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 60 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 60 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 60 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 60 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 60 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 60 + 8791 ] ;
  mBY[ 60 + 149*idy ] = (mBY[ 60 + 149*idy ] - sum_i ) / mA_L[ 9000 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 61
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 61 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 61 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 61 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 61 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 61 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 61 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 61 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 61 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 61 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 61 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 61 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 61 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 61 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 61 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 61 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 61 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 61 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 61 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 61 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 61 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 61 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 61 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 61 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 61 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 61 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 61 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 61 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 61 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 61 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 61 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 61 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 61 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 61 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 61 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 61 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 61 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 61 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 61 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 61 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 61 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 61 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 61 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 61 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 61 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 61 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 61 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 61 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 61 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 61 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 61 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 61 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 61 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 61 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 61 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 61 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 61 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 61 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 61 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 61 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 61 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 61 + 8940 ] ;
  mBY[ 61 + 149*idy ] = (mBY[ 61 + 149*idy ] - sum_i ) / mA_L[ 9150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 62
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 62 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 62 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 62 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 62 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 62 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 62 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 62 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 62 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 62 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 62 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 62 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 62 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 62 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 62 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 62 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 62 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 62 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 62 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 62 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 62 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 62 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 62 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 62 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 62 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 62 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 62 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 62 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 62 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 62 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 62 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 62 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 62 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 62 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 62 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 62 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 62 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 62 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 62 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 62 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 62 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 62 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 62 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 62 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 62 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 62 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 62 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 62 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 62 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 62 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 62 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 62 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 62 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 62 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 62 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 62 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 62 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 62 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 62 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 62 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 62 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 62 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 62 + 9089 ] ;
  mBY[ 62 + 149*idy ] = (mBY[ 62 + 149*idy ] - sum_i ) / mA_L[ 9300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 63
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 63 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 63 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 63 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 63 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 63 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 63 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 63 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 63 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 63 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 63 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 63 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 63 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 63 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 63 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 63 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 63 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 63 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 63 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 63 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 63 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 63 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 63 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 63 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 63 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 63 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 63 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 63 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 63 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 63 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 63 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 63 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 63 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 63 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 63 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 63 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 63 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 63 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 63 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 63 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 63 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 63 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 63 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 63 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 63 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 63 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 63 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 63 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 63 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 63 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 63 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 63 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 63 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 63 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 63 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 63 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 63 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 63 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 63 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 63 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 63 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 63 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 63 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 63 + 9238 ] ;
  mBY[ 63 + 149*idy ] = (mBY[ 63 + 149*idy ] - sum_i ) / mA_L[ 9450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 64
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 64 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 64 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 64 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 64 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 64 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 64 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 64 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 64 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 64 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 64 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 64 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 64 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 64 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 64 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 64 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 64 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 64 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 64 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 64 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 64 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 64 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 64 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 64 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 64 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 64 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 64 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 64 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 64 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 64 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 64 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 64 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 64 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 64 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 64 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 64 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 64 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 64 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 64 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 64 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 64 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 64 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 64 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 64 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 64 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 64 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 64 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 64 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 64 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 64 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 64 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 64 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 64 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 64 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 64 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 64 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 64 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 64 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 64 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 64 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 64 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 64 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 64 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 64 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 64 + 9387 ] ;
  mBY[ 64 + 149*idy ] = (mBY[ 64 + 149*idy ] - sum_i ) / mA_L[ 9600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 65
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 65 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 65 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 65 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 65 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 65 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 65 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 65 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 65 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 65 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 65 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 65 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 65 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 65 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 65 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 65 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 65 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 65 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 65 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 65 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 65 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 65 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 65 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 65 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 65 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 65 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 65 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 65 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 65 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 65 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 65 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 65 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 65 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 65 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 65 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 65 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 65 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 65 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 65 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 65 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 65 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 65 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 65 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 65 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 65 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 65 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 65 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 65 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 65 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 65 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 65 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 65 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 65 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 65 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 65 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 65 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 65 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 65 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 65 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 65 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 65 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 65 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 65 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 65 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 65 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 65 + 9536 ] ;
  mBY[ 65 + 149*idy ] = (mBY[ 65 + 149*idy ] - sum_i ) / mA_L[ 9750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 66
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 66 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 66 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 66 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 66 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 66 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 66 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 66 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 66 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 66 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 66 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 66 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 66 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 66 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 66 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 66 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 66 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 66 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 66 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 66 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 66 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 66 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 66 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 66 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 66 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 66 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 66 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 66 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 66 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 66 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 66 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 66 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 66 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 66 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 66 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 66 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 66 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 66 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 66 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 66 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 66 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 66 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 66 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 66 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 66 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 66 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 66 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 66 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 66 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 66 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 66 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 66 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 66 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 66 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 66 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 66 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 66 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 66 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 66 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 66 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 66 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 66 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 66 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 66 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 66 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 66 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 66 + 9685 ] ;
  mBY[ 66 + 149*idy ] = (mBY[ 66 + 149*idy ] - sum_i ) / mA_L[ 9900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 67
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 67 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 67 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 67 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 67 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 67 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 67 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 67 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 67 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 67 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 67 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 67 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 67 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 67 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 67 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 67 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 67 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 67 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 67 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 67 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 67 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 67 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 67 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 67 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 67 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 67 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 67 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 67 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 67 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 67 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 67 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 67 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 67 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 67 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 67 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 67 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 67 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 67 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 67 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 67 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 67 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 67 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 67 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 67 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 67 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 67 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 67 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 67 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 67 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 67 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 67 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 67 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 67 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 67 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 67 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 67 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 67 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 67 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 67 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 67 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 67 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 67 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 67 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 67 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 67 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 67 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 67 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 67 + 9834 ] ;
  mBY[ 67 + 149*idy ] = (mBY[ 67 + 149*idy ] - sum_i ) / mA_L[ 10050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 68
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 68 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 68 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 68 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 68 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 68 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 68 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 68 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 68 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 68 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 68 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 68 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 68 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 68 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 68 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 68 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 68 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 68 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 68 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 68 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 68 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 68 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 68 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 68 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 68 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 68 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 68 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 68 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 68 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 68 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 68 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 68 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 68 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 68 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 68 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 68 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 68 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 68 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 68 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 68 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 68 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 68 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 68 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 68 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 68 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 68 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 68 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 68 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 68 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 68 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 68 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 68 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 68 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 68 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 68 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 68 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 68 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 68 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 68 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 68 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 68 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 68 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 68 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 68 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 68 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 68 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 68 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 68 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 68 + 9983 ] ;
  mBY[ 68 + 149*idy ] = (mBY[ 68 + 149*idy ] - sum_i ) / mA_L[ 10200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 69
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 69 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 69 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 69 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 69 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 69 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 69 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 69 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 69 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 69 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 69 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 69 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 69 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 69 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 69 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 69 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 69 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 69 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 69 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 69 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 69 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 69 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 69 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 69 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 69 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 69 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 69 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 69 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 69 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 69 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 69 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 69 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 69 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 69 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 69 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 69 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 69 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 69 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 69 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 69 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 69 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 69 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 69 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 69 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 69 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 69 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 69 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 69 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 69 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 69 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 69 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 69 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 69 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 69 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 69 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 69 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 69 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 69 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 69 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 69 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 69 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 69 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 69 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 69 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 69 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 69 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 69 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 69 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 69 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 69 + 10132 ] ;
  mBY[ 69 + 149*idy ] = (mBY[ 69 + 149*idy ] - sum_i ) / mA_L[ 10350 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 70
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 70 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 70 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 70 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 70 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 70 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 70 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 70 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 70 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 70 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 70 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 70 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 70 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 70 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 70 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 70 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 70 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 70 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 70 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 70 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 70 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 70 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 70 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 70 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 70 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 70 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 70 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 70 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 70 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 70 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 70 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 70 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 70 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 70 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 70 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 70 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 70 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 70 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 70 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 70 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 70 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 70 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 70 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 70 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 70 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 70 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 70 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 70 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 70 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 70 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 70 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 70 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 70 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 70 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 70 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 70 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 70 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 70 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 70 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 70 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 70 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 70 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 70 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 70 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 70 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 70 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 70 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 70 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 70 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 70 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 70 + 10281 ] ;
  mBY[ 70 + 149*idy ] = (mBY[ 70 + 149*idy ] - sum_i ) / mA_L[ 10500 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 71
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 71 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 71 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 71 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 71 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 71 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 71 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 71 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 71 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 71 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 71 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 71 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 71 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 71 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 71 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 71 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 71 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 71 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 71 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 71 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 71 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 71 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 71 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 71 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 71 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 71 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 71 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 71 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 71 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 71 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 71 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 71 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 71 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 71 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 71 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 71 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 71 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 71 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 71 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 71 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 71 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 71 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 71 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 71 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 71 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 71 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 71 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 71 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 71 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 71 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 71 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 71 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 71 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 71 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 71 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 71 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 71 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 71 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 71 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 71 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 71 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 71 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 71 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 71 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 71 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 71 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 71 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 71 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 71 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 71 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 71 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 71 + 10430 ] ;
  mBY[ 71 + 149*idy ] = (mBY[ 71 + 149*idy ] - sum_i ) / mA_L[ 10650 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 72
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 72 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 72 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 72 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 72 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 72 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 72 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 72 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 72 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 72 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 72 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 72 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 72 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 72 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 72 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 72 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 72 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 72 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 72 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 72 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 72 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 72 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 72 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 72 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 72 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 72 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 72 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 72 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 72 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 72 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 72 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 72 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 72 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 72 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 72 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 72 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 72 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 72 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 72 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 72 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 72 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 72 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 72 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 72 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 72 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 72 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 72 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 72 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 72 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 72 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 72 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 72 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 72 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 72 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 72 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 72 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 72 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 72 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 72 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 72 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 72 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 72 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 72 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 72 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 72 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 72 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 72 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 72 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 72 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 72 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 72 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 72 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 72 + 10579 ] ;
  mBY[ 72 + 149*idy ] = (mBY[ 72 + 149*idy ] - sum_i ) / mA_L[ 10800 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 73
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 73 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 73 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 73 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 73 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 73 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 73 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 73 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 73 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 73 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 73 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 73 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 73 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 73 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 73 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 73 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 73 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 73 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 73 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 73 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 73 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 73 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 73 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 73 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 73 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 73 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 73 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 73 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 73 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 73 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 73 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 73 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 73 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 73 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 73 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 73 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 73 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 73 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 73 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 73 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 73 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 73 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 73 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 73 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 73 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 73 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 73 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 73 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 73 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 73 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 73 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 73 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 73 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 73 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 73 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 73 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 73 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 73 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 73 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 73 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 73 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 73 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 73 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 73 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 73 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 73 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 73 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 73 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 73 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 73 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 73 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 73 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 73 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 73 + 10728 ] ;
  mBY[ 73 + 149*idy ] = (mBY[ 73 + 149*idy ] - sum_i ) / mA_L[ 10950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 74
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 74 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 74 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 74 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 74 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 74 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 74 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 74 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 74 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 74 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 74 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 74 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 74 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 74 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 74 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 74 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 74 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 74 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 74 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 74 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 74 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 74 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 74 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 74 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 74 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 74 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 74 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 74 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 74 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 74 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 74 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 74 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 74 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 74 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 74 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 74 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 74 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 74 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 74 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 74 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 74 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 74 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 74 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 74 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 74 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 74 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 74 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 74 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 74 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 74 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 74 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 74 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 74 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 74 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 74 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 74 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 74 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 74 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 74 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 74 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 74 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 74 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 74 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 74 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 74 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 74 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 74 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 74 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 74 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 74 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 74 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 74 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 74 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 74 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 74 + 10877 ] ;
  mBY[ 74 + 149*idy ] = (mBY[ 74 + 149*idy ] - sum_i ) / mA_L[ 11100 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 75
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 75 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 75 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 75 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 75 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 75 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 75 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 75 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 75 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 75 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 75 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 75 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 75 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 75 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 75 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 75 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 75 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 75 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 75 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 75 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 75 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 75 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 75 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 75 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 75 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 75 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 75 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 75 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 75 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 75 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 75 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 75 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 75 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 75 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 75 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 75 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 75 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 75 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 75 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 75 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 75 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 75 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 75 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 75 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 75 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 75 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 75 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 75 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 75 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 75 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 75 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 75 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 75 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 75 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 75 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 75 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 75 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 75 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 75 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 75 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 75 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 75 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 75 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 75 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 75 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 75 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 75 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 75 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 75 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 75 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 75 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 75 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 75 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 75 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 75 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 75 + 11026 ] ;
  mBY[ 75 + 149*idy ] = (mBY[ 75 + 149*idy ] - sum_i ) / mA_L[ 11250 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 76
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 76 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 76 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 76 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 76 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 76 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 76 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 76 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 76 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 76 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 76 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 76 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 76 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 76 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 76 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 76 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 76 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 76 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 76 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 76 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 76 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 76 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 76 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 76 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 76 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 76 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 76 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 76 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 76 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 76 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 76 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 76 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 76 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 76 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 76 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 76 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 76 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 76 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 76 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 76 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 76 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 76 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 76 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 76 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 76 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 76 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 76 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 76 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 76 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 76 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 76 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 76 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 76 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 76 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 76 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 76 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 76 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 76 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 76 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 76 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 76 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 76 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 76 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 76 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 76 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 76 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 76 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 76 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 76 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 76 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 76 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 76 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 76 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 76 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 76 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 76 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 76 + 11175 ] ;
  mBY[ 76 + 149*idy ] = (mBY[ 76 + 149*idy ] - sum_i ) / mA_L[ 11400 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 77
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 77 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 77 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 77 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 77 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 77 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 77 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 77 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 77 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 77 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 77 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 77 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 77 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 77 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 77 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 77 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 77 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 77 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 77 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 77 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 77 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 77 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 77 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 77 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 77 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 77 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 77 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 77 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 77 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 77 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 77 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 77 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 77 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 77 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 77 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 77 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 77 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 77 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 77 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 77 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 77 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 77 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 77 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 77 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 77 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 77 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 77 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 77 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 77 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 77 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 77 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 77 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 77 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 77 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 77 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 77 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 77 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 77 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 77 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 77 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 77 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 77 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 77 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 77 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 77 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 77 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 77 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 77 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 77 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 77 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 77 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 77 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 77 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 77 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 77 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 77 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 77 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 77 + 11324 ] ;
  mBY[ 77 + 149*idy ] = (mBY[ 77 + 149*idy ] - sum_i ) / mA_L[ 11550 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 78
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 78 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 78 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 78 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 78 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 78 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 78 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 78 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 78 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 78 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 78 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 78 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 78 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 78 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 78 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 78 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 78 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 78 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 78 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 78 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 78 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 78 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 78 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 78 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 78 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 78 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 78 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 78 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 78 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 78 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 78 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 78 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 78 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 78 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 78 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 78 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 78 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 78 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 78 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 78 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 78 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 78 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 78 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 78 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 78 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 78 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 78 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 78 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 78 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 78 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 78 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 78 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 78 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 78 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 78 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 78 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 78 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 78 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 78 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 78 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 78 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 78 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 78 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 78 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 78 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 78 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 78 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 78 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 78 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 78 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 78 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 78 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 78 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 78 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 78 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 78 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 78 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 78 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 78 + 11473 ] ;
  mBY[ 78 + 149*idy ] = (mBY[ 78 + 149*idy ] - sum_i ) / mA_L[ 11700 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 79
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 79 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 79 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 79 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 79 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 79 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 79 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 79 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 79 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 79 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 79 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 79 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 79 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 79 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 79 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 79 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 79 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 79 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 79 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 79 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 79 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 79 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 79 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 79 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 79 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 79 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 79 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 79 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 79 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 79 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 79 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 79 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 79 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 79 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 79 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 79 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 79 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 79 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 79 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 79 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 79 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 79 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 79 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 79 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 79 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 79 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 79 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 79 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 79 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 79 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 79 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 79 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 79 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 79 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 79 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 79 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 79 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 79 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 79 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 79 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 79 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 79 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 79 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 79 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 79 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 79 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 79 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 79 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 79 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 79 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 79 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 79 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 79 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 79 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 79 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 79 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 79 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 79 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 79 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 79 + 11622 ] ;
  mBY[ 79 + 149*idy ] = (mBY[ 79 + 149*idy ] - sum_i ) / mA_L[ 11850 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 80
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 80 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 80 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 80 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 80 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 80 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 80 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 80 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 80 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 80 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 80 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 80 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 80 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 80 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 80 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 80 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 80 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 80 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 80 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 80 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 80 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 80 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 80 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 80 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 80 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 80 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 80 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 80 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 80 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 80 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 80 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 80 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 80 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 80 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 80 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 80 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 80 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 80 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 80 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 80 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 80 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 80 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 80 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 80 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 80 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 80 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 80 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 80 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 80 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 80 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 80 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 80 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 80 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 80 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 80 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 80 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 80 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 80 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 80 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 80 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 80 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 80 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 80 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 80 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 80 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 80 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 80 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 80 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 80 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 80 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 80 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 80 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 80 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 80 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 80 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 80 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 80 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 80 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 80 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 80 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 80 + 11771 ] ;
  mBY[ 80 + 149*idy ] = (mBY[ 80 + 149*idy ] - sum_i ) / mA_L[ 12000 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 81
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 81 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 81 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 81 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 81 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 81 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 81 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 81 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 81 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 81 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 81 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 81 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 81 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 81 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 81 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 81 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 81 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 81 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 81 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 81 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 81 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 81 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 81 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 81 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 81 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 81 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 81 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 81 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 81 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 81 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 81 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 81 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 81 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 81 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 81 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 81 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 81 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 81 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 81 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 81 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 81 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 81 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 81 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 81 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 81 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 81 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 81 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 81 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 81 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 81 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 81 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 81 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 81 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 81 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 81 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 81 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 81 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 81 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 81 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 81 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 81 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 81 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 81 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 81 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 81 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 81 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 81 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 81 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 81 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 81 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 81 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 81 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 81 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 81 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 81 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 81 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 81 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 81 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 81 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 81 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 81 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 81 + 11920 ] ;
  mBY[ 81 + 149*idy ] = (mBY[ 81 + 149*idy ] - sum_i ) / mA_L[ 12150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 82
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 82 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 82 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 82 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 82 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 82 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 82 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 82 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 82 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 82 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 82 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 82 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 82 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 82 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 82 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 82 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 82 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 82 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 82 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 82 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 82 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 82 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 82 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 82 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 82 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 82 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 82 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 82 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 82 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 82 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 82 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 82 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 82 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 82 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 82 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 82 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 82 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 82 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 82 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 82 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 82 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 82 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 82 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 82 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 82 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 82 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 82 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 82 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 82 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 82 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 82 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 82 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 82 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 82 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 82 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 82 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 82 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 82 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 82 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 82 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 82 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 82 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 82 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 82 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 82 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 82 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 82 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 82 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 82 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 82 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 82 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 82 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 82 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 82 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 82 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 82 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 82 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 82 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 82 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 82 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 82 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 82 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 82 + 12069 ] ;
  mBY[ 82 + 149*idy ] = (mBY[ 82 + 149*idy ] - sum_i ) / mA_L[ 12300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 83
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 83 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 83 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 83 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 83 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 83 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 83 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 83 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 83 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 83 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 83 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 83 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 83 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 83 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 83 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 83 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 83 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 83 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 83 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 83 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 83 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 83 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 83 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 83 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 83 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 83 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 83 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 83 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 83 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 83 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 83 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 83 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 83 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 83 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 83 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 83 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 83 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 83 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 83 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 83 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 83 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 83 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 83 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 83 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 83 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 83 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 83 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 83 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 83 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 83 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 83 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 83 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 83 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 83 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 83 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 83 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 83 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 83 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 83 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 83 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 83 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 83 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 83 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 83 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 83 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 83 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 83 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 83 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 83 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 83 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 83 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 83 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 83 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 83 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 83 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 83 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 83 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 83 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 83 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 83 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 83 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 83 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 83 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 83 + 12218 ] ;
  mBY[ 83 + 149*idy ] = (mBY[ 83 + 149*idy ] - sum_i ) / mA_L[ 12450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 84
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 84 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 84 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 84 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 84 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 84 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 84 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 84 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 84 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 84 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 84 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 84 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 84 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 84 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 84 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 84 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 84 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 84 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 84 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 84 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 84 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 84 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 84 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 84 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 84 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 84 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 84 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 84 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 84 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 84 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 84 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 84 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 84 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 84 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 84 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 84 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 84 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 84 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 84 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 84 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 84 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 84 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 84 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 84 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 84 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 84 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 84 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 84 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 84 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 84 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 84 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 84 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 84 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 84 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 84 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 84 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 84 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 84 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 84 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 84 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 84 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 84 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 84 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 84 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 84 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 84 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 84 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 84 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 84 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 84 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 84 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 84 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 84 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 84 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 84 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 84 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 84 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 84 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 84 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 84 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 84 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 84 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 84 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 84 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 84 + 12367 ] ;
  mBY[ 84 + 149*idy ] = (mBY[ 84 + 149*idy ] - sum_i ) / mA_L[ 12600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 85
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 85 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 85 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 85 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 85 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 85 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 85 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 85 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 85 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 85 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 85 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 85 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 85 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 85 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 85 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 85 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 85 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 85 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 85 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 85 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 85 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 85 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 85 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 85 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 85 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 85 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 85 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 85 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 85 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 85 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 85 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 85 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 85 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 85 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 85 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 85 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 85 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 85 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 85 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 85 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 85 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 85 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 85 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 85 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 85 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 85 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 85 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 85 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 85 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 85 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 85 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 85 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 85 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 85 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 85 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 85 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 85 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 85 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 85 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 85 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 85 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 85 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 85 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 85 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 85 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 85 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 85 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 85 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 85 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 85 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 85 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 85 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 85 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 85 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 85 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 85 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 85 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 85 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 85 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 85 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 85 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 85 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 85 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 85 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 85 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 85 + 12516 ] ;
  mBY[ 85 + 149*idy ] = (mBY[ 85 + 149*idy ] - sum_i ) / mA_L[ 12750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 86
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 86 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 86 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 86 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 86 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 86 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 86 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 86 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 86 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 86 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 86 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 86 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 86 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 86 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 86 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 86 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 86 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 86 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 86 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 86 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 86 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 86 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 86 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 86 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 86 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 86 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 86 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 86 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 86 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 86 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 86 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 86 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 86 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 86 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 86 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 86 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 86 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 86 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 86 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 86 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 86 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 86 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 86 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 86 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 86 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 86 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 86 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 86 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 86 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 86 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 86 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 86 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 86 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 86 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 86 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 86 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 86 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 86 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 86 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 86 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 86 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 86 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 86 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 86 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 86 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 86 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 86 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 86 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 86 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 86 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 86 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 86 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 86 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 86 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 86 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 86 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 86 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 86 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 86 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 86 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 86 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 86 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 86 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 86 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 86 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 86 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 86 + 12665 ] ;
  mBY[ 86 + 149*idy ] = (mBY[ 86 + 149*idy ] - sum_i ) / mA_L[ 12900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 87
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 87 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 87 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 87 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 87 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 87 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 87 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 87 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 87 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 87 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 87 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 87 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 87 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 87 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 87 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 87 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 87 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 87 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 87 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 87 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 87 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 87 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 87 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 87 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 87 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 87 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 87 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 87 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 87 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 87 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 87 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 87 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 87 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 87 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 87 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 87 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 87 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 87 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 87 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 87 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 87 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 87 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 87 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 87 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 87 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 87 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 87 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 87 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 87 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 87 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 87 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 87 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 87 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 87 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 87 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 87 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 87 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 87 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 87 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 87 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 87 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 87 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 87 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 87 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 87 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 87 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 87 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 87 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 87 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 87 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 87 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 87 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 87 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 87 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 87 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 87 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 87 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 87 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 87 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 87 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 87 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 87 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 87 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 87 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 87 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 87 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 87 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 87 + 12814 ] ;
  mBY[ 87 + 149*idy ] = (mBY[ 87 + 149*idy ] - sum_i ) / mA_L[ 13050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 88
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 88 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 88 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 88 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 88 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 88 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 88 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 88 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 88 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 88 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 88 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 88 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 88 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 88 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 88 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 88 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 88 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 88 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 88 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 88 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 88 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 88 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 88 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 88 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 88 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 88 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 88 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 88 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 88 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 88 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 88 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 88 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 88 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 88 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 88 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 88 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 88 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 88 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 88 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 88 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 88 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 88 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 88 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 88 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 88 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 88 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 88 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 88 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 88 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 88 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 88 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 88 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 88 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 88 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 88 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 88 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 88 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 88 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 88 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 88 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 88 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 88 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 88 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 88 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 88 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 88 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 88 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 88 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 88 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 88 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 88 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 88 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 88 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 88 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 88 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 88 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 88 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 88 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 88 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 88 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 88 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 88 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 88 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 88 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 88 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 88 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 88 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 88 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 88 + 12963 ] ;
  mBY[ 88 + 149*idy ] = (mBY[ 88 + 149*idy ] - sum_i ) / mA_L[ 13200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 89
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 89 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 89 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 89 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 89 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 89 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 89 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 89 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 89 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 89 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 89 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 89 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 89 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 89 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 89 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 89 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 89 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 89 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 89 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 89 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 89 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 89 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 89 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 89 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 89 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 89 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 89 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 89 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 89 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 89 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 89 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 89 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 89 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 89 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 89 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 89 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 89 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 89 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 89 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 89 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 89 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 89 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 89 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 89 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 89 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 89 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 89 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 89 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 89 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 89 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 89 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 89 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 89 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 89 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 89 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 89 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 89 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 89 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 89 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 89 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 89 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 89 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 89 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 89 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 89 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 89 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 89 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 89 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 89 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 89 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 89 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 89 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 89 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 89 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 89 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 89 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 89 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 89 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 89 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 89 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 89 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 89 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 89 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 89 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 89 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 89 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 89 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 89 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 89 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 89 + 13112 ] ;
  mBY[ 89 + 149*idy ] = (mBY[ 89 + 149*idy ] - sum_i ) / mA_L[ 13350 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 90
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 90 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 90 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 90 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 90 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 90 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 90 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 90 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 90 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 90 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 90 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 90 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 90 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 90 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 90 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 90 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 90 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 90 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 90 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 90 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 90 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 90 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 90 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 90 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 90 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 90 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 90 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 90 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 90 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 90 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 90 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 90 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 90 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 90 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 90 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 90 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 90 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 90 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 90 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 90 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 90 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 90 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 90 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 90 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 90 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 90 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 90 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 90 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 90 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 90 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 90 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 90 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 90 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 90 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 90 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 90 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 90 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 90 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 90 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 90 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 90 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 90 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 90 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 90 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 90 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 90 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 90 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 90 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 90 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 90 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 90 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 90 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 90 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 90 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 90 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 90 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 90 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 90 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 90 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 90 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 90 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 90 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 90 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 90 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 90 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 90 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 90 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 90 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 90 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 90 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 90 + 13261 ] ;
  mBY[ 90 + 149*idy ] = (mBY[ 90 + 149*idy ] - sum_i ) / mA_L[ 13500 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 91
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 91 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 91 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 91 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 91 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 91 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 91 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 91 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 91 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 91 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 91 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 91 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 91 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 91 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 91 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 91 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 91 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 91 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 91 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 91 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 91 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 91 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 91 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 91 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 91 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 91 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 91 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 91 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 91 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 91 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 91 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 91 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 91 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 91 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 91 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 91 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 91 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 91 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 91 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 91 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 91 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 91 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 91 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 91 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 91 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 91 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 91 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 91 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 91 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 91 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 91 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 91 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 91 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 91 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 91 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 91 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 91 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 91 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 91 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 91 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 91 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 91 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 91 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 91 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 91 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 91 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 91 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 91 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 91 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 91 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 91 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 91 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 91 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 91 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 91 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 91 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 91 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 91 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 91 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 91 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 91 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 91 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 91 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 91 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 91 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 91 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 91 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 91 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 91 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 91 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 91 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 91 + 13410 ] ;
  mBY[ 91 + 149*idy ] = (mBY[ 91 + 149*idy ] - sum_i ) / mA_L[ 13650 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 92
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 92 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 92 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 92 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 92 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 92 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 92 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 92 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 92 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 92 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 92 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 92 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 92 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 92 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 92 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 92 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 92 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 92 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 92 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 92 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 92 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 92 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 92 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 92 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 92 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 92 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 92 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 92 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 92 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 92 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 92 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 92 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 92 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 92 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 92 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 92 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 92 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 92 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 92 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 92 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 92 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 92 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 92 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 92 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 92 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 92 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 92 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 92 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 92 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 92 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 92 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 92 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 92 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 92 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 92 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 92 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 92 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 92 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 92 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 92 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 92 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 92 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 92 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 92 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 92 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 92 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 92 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 92 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 92 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 92 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 92 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 92 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 92 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 92 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 92 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 92 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 92 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 92 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 92 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 92 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 92 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 92 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 92 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 92 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 92 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 92 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 92 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 92 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 92 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 92 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 92 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 92 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 92 + 13559 ] ;
  mBY[ 92 + 149*idy ] = (mBY[ 92 + 149*idy ] - sum_i ) / mA_L[ 13800 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 93
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 93 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 93 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 93 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 93 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 93 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 93 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 93 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 93 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 93 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 93 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 93 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 93 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 93 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 93 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 93 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 93 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 93 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 93 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 93 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 93 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 93 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 93 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 93 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 93 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 93 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 93 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 93 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 93 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 93 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 93 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 93 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 93 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 93 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 93 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 93 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 93 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 93 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 93 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 93 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 93 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 93 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 93 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 93 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 93 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 93 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 93 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 93 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 93 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 93 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 93 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 93 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 93 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 93 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 93 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 93 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 93 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 93 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 93 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 93 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 93 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 93 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 93 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 93 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 93 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 93 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 93 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 93 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 93 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 93 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 93 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 93 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 93 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 93 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 93 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 93 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 93 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 93 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 93 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 93 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 93 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 93 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 93 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 93 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 93 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 93 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 93 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 93 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 93 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 93 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 93 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 93 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 93 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 93 + 13708 ] ;
  mBY[ 93 + 149*idy ] = (mBY[ 93 + 149*idy ] - sum_i ) / mA_L[ 13950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 94
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 94 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 94 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 94 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 94 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 94 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 94 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 94 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 94 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 94 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 94 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 94 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 94 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 94 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 94 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 94 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 94 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 94 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 94 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 94 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 94 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 94 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 94 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 94 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 94 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 94 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 94 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 94 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 94 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 94 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 94 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 94 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 94 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 94 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 94 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 94 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 94 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 94 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 94 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 94 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 94 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 94 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 94 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 94 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 94 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 94 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 94 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 94 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 94 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 94 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 94 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 94 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 94 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 94 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 94 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 94 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 94 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 94 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 94 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 94 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 94 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 94 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 94 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 94 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 94 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 94 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 94 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 94 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 94 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 94 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 94 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 94 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 94 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 94 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 94 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 94 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 94 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 94 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 94 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 94 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 94 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 94 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 94 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 94 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 94 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 94 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 94 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 94 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 94 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 94 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 94 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 94 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 94 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 94 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 94 + 13857 ] ;
  mBY[ 94 + 149*idy ] = (mBY[ 94 + 149*idy ] - sum_i ) / mA_L[ 14100 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 95
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 95 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 95 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 95 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 95 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 95 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 95 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 95 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 95 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 95 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 95 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 95 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 95 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 95 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 95 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 95 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 95 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 95 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 95 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 95 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 95 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 95 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 95 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 95 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 95 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 95 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 95 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 95 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 95 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 95 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 95 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 95 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 95 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 95 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 95 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 95 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 95 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 95 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 95 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 95 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 95 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 95 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 95 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 95 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 95 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 95 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 95 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 95 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 95 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 95 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 95 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 95 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 95 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 95 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 95 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 95 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 95 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 95 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 95 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 95 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 95 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 95 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 95 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 95 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 95 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 95 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 95 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 95 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 95 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 95 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 95 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 95 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 95 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 95 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 95 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 95 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 95 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 95 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 95 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 95 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 95 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 95 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 95 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 95 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 95 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 95 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 95 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 95 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 95 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 95 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 95 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 95 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 95 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 95 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 95 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 95 + 14006 ] ;
  mBY[ 95 + 149*idy ] = (mBY[ 95 + 149*idy ] - sum_i ) / mA_L[ 14250 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 96
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 96 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 96 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 96 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 96 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 96 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 96 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 96 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 96 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 96 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 96 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 96 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 96 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 96 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 96 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 96 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 96 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 96 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 96 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 96 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 96 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 96 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 96 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 96 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 96 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 96 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 96 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 96 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 96 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 96 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 96 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 96 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 96 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 96 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 96 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 96 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 96 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 96 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 96 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 96 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 96 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 96 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 96 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 96 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 96 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 96 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 96 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 96 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 96 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 96 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 96 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 96 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 96 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 96 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 96 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 96 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 96 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 96 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 96 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 96 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 96 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 96 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 96 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 96 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 96 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 96 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 96 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 96 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 96 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 96 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 96 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 96 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 96 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 96 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 96 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 96 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 96 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 96 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 96 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 96 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 96 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 96 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 96 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 96 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 96 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 96 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 96 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 96 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 96 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 96 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 96 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 96 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 96 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 96 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 96 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 96 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 96 + 14155 ] ;
  mBY[ 96 + 149*idy ] = (mBY[ 96 + 149*idy ] - sum_i ) / mA_L[ 14400 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 97
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 97 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 97 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 97 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 97 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 97 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 97 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 97 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 97 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 97 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 97 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 97 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 97 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 97 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 97 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 97 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 97 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 97 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 97 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 97 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 97 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 97 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 97 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 97 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 97 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 97 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 97 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 97 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 97 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 97 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 97 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 97 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 97 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 97 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 97 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 97 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 97 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 97 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 97 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 97 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 97 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 97 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 97 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 97 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 97 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 97 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 97 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 97 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 97 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 97 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 97 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 97 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 97 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 97 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 97 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 97 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 97 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 97 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 97 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 97 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 97 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 97 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 97 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 97 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 97 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 97 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 97 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 97 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 97 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 97 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 97 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 97 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 97 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 97 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 97 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 97 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 97 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 97 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 97 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 97 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 97 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 97 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 97 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 97 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 97 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 97 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 97 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 97 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 97 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 97 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 97 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 97 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 97 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 97 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 97 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 97 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 97 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 97 + 14304 ] ;
  mBY[ 97 + 149*idy ] = (mBY[ 97 + 149*idy ] - sum_i ) / mA_L[ 14550 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 98
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 98 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 98 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 98 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 98 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 98 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 98 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 98 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 98 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 98 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 98 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 98 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 98 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 98 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 98 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 98 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 98 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 98 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 98 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 98 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 98 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 98 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 98 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 98 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 98 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 98 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 98 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 98 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 98 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 98 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 98 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 98 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 98 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 98 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 98 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 98 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 98 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 98 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 98 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 98 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 98 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 98 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 98 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 98 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 98 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 98 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 98 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 98 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 98 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 98 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 98 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 98 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 98 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 98 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 98 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 98 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 98 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 98 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 98 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 98 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 98 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 98 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 98 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 98 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 98 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 98 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 98 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 98 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 98 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 98 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 98 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 98 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 98 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 98 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 98 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 98 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 98 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 98 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 98 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 98 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 98 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 98 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 98 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 98 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 98 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 98 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 98 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 98 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 98 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 98 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 98 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 98 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 98 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 98 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 98 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 98 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 98 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 98 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 98 + 14453 ] ;
  mBY[ 98 + 149*idy ] = (mBY[ 98 + 149*idy ] - sum_i ) / mA_L[ 14700 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 99
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 99 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 99 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 99 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 99 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 99 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 99 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 99 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 99 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 99 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 99 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 99 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 99 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 99 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 99 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 99 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 99 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 99 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 99 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 99 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 99 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 99 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 99 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 99 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 99 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 99 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 99 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 99 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 99 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 99 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 99 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 99 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 99 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 99 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 99 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 99 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 99 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 99 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 99 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 99 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 99 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 99 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 99 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 99 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 99 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 99 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 99 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 99 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 99 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 99 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 99 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 99 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 99 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 99 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 99 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 99 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 99 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 99 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 99 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 99 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 99 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 99 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 99 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 99 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 99 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 99 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 99 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 99 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 99 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 99 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 99 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 99 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 99 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 99 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 99 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 99 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 99 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 99 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 99 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 99 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 99 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 99 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 99 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 99 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 99 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 99 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 99 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 99 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 99 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 99 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 99 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 99 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 99 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 99 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 99 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 99 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 99 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 99 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 99 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 99 + 14602 ] ;
  mBY[ 99 + 149*idy ] = (mBY[ 99 + 149*idy ] - sum_i ) / mA_L[ 14850 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 100
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 100 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 100 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 100 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 100 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 100 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 100 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 100 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 100 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 100 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 100 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 100 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 100 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 100 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 100 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 100 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 100 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 100 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 100 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 100 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 100 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 100 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 100 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 100 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 100 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 100 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 100 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 100 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 100 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 100 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 100 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 100 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 100 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 100 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 100 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 100 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 100 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 100 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 100 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 100 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 100 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 100 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 100 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 100 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 100 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 100 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 100 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 100 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 100 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 100 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 100 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 100 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 100 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 100 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 100 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 100 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 100 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 100 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 100 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 100 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 100 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 100 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 100 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 100 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 100 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 100 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 100 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 100 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 100 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 100 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 100 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 100 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 100 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 100 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 100 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 100 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 100 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 100 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 100 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 100 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 100 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 100 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 100 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 100 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 100 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 100 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 100 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 100 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 100 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 100 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 100 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 100 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 100 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 100 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 100 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 100 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 100 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 100 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 100 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 100 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 100 + 14751 ] ;
  mBY[ 100 + 149*idy ] = (mBY[ 100 + 149*idy ] - sum_i ) / mA_L[ 15000 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 101
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 101 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 101 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 101 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 101 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 101 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 101 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 101 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 101 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 101 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 101 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 101 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 101 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 101 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 101 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 101 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 101 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 101 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 101 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 101 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 101 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 101 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 101 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 101 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 101 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 101 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 101 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 101 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 101 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 101 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 101 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 101 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 101 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 101 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 101 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 101 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 101 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 101 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 101 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 101 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 101 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 101 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 101 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 101 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 101 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 101 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 101 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 101 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 101 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 101 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 101 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 101 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 101 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 101 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 101 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 101 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 101 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 101 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 101 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 101 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 101 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 101 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 101 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 101 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 101 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 101 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 101 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 101 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 101 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 101 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 101 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 101 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 101 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 101 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 101 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 101 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 101 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 101 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 101 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 101 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 101 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 101 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 101 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 101 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 101 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 101 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 101 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 101 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 101 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 101 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 101 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 101 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 101 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 101 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 101 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 101 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 101 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 101 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 101 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 101 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 101 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 101 + 14900 ] ;
  mBY[ 101 + 149*idy ] = (mBY[ 101 + 149*idy ] - sum_i ) / mA_L[ 15150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 102
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 102 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 102 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 102 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 102 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 102 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 102 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 102 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 102 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 102 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 102 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 102 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 102 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 102 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 102 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 102 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 102 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 102 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 102 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 102 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 102 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 102 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 102 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 102 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 102 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 102 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 102 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 102 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 102 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 102 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 102 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 102 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 102 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 102 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 102 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 102 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 102 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 102 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 102 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 102 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 102 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 102 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 102 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 102 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 102 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 102 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 102 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 102 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 102 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 102 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 102 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 102 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 102 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 102 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 102 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 102 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 102 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 102 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 102 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 102 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 102 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 102 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 102 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 102 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 102 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 102 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 102 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 102 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 102 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 102 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 102 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 102 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 102 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 102 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 102 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 102 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 102 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 102 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 102 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 102 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 102 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 102 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 102 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 102 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 102 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 102 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 102 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 102 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 102 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 102 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 102 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 102 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 102 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 102 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 102 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 102 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 102 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 102 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 102 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 102 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 102 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 102 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 102 + 15049 ] ;
  mBY[ 102 + 149*idy ] = (mBY[ 102 + 149*idy ] - sum_i ) / mA_L[ 15300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 103
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 103 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 103 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 103 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 103 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 103 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 103 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 103 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 103 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 103 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 103 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 103 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 103 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 103 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 103 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 103 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 103 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 103 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 103 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 103 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 103 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 103 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 103 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 103 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 103 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 103 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 103 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 103 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 103 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 103 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 103 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 103 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 103 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 103 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 103 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 103 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 103 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 103 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 103 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 103 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 103 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 103 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 103 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 103 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 103 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 103 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 103 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 103 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 103 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 103 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 103 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 103 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 103 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 103 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 103 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 103 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 103 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 103 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 103 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 103 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 103 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 103 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 103 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 103 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 103 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 103 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 103 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 103 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 103 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 103 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 103 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 103 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 103 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 103 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 103 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 103 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 103 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 103 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 103 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 103 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 103 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 103 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 103 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 103 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 103 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 103 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 103 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 103 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 103 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 103 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 103 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 103 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 103 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 103 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 103 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 103 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 103 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 103 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 103 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 103 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 103 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 103 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 103 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 103 + 15198 ] ;
  mBY[ 103 + 149*idy ] = (mBY[ 103 + 149*idy ] - sum_i ) / mA_L[ 15450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 104
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 104 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 104 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 104 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 104 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 104 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 104 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 104 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 104 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 104 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 104 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 104 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 104 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 104 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 104 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 104 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 104 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 104 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 104 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 104 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 104 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 104 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 104 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 104 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 104 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 104 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 104 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 104 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 104 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 104 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 104 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 104 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 104 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 104 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 104 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 104 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 104 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 104 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 104 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 104 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 104 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 104 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 104 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 104 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 104 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 104 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 104 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 104 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 104 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 104 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 104 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 104 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 104 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 104 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 104 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 104 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 104 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 104 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 104 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 104 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 104 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 104 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 104 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 104 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 104 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 104 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 104 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 104 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 104 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 104 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 104 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 104 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 104 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 104 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 104 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 104 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 104 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 104 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 104 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 104 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 104 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 104 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 104 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 104 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 104 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 104 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 104 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 104 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 104 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 104 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 104 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 104 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 104 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 104 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 104 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 104 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 104 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 104 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 104 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 104 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 104 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 104 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 104 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 104 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 104 + 15347 ] ;
  mBY[ 104 + 149*idy ] = (mBY[ 104 + 149*idy ] - sum_i ) / mA_L[ 15600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 105
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 105 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 105 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 105 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 105 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 105 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 105 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 105 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 105 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 105 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 105 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 105 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 105 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 105 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 105 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 105 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 105 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 105 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 105 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 105 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 105 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 105 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 105 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 105 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 105 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 105 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 105 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 105 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 105 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 105 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 105 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 105 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 105 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 105 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 105 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 105 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 105 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 105 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 105 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 105 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 105 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 105 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 105 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 105 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 105 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 105 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 105 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 105 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 105 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 105 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 105 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 105 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 105 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 105 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 105 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 105 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 105 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 105 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 105 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 105 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 105 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 105 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 105 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 105 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 105 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 105 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 105 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 105 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 105 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 105 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 105 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 105 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 105 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 105 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 105 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 105 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 105 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 105 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 105 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 105 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 105 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 105 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 105 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 105 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 105 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 105 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 105 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 105 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 105 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 105 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 105 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 105 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 105 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 105 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 105 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 105 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 105 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 105 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 105 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 105 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 105 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 105 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 105 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 105 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 105 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 105 + 15496 ] ;
  mBY[ 105 + 149*idy ] = (mBY[ 105 + 149*idy ] - sum_i ) / mA_L[ 15750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 106
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 106 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 106 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 106 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 106 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 106 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 106 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 106 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 106 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 106 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 106 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 106 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 106 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 106 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 106 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 106 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 106 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 106 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 106 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 106 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 106 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 106 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 106 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 106 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 106 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 106 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 106 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 106 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 106 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 106 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 106 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 106 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 106 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 106 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 106 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 106 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 106 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 106 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 106 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 106 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 106 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 106 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 106 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 106 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 106 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 106 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 106 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 106 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 106 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 106 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 106 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 106 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 106 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 106 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 106 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 106 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 106 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 106 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 106 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 106 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 106 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 106 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 106 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 106 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 106 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 106 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 106 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 106 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 106 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 106 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 106 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 106 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 106 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 106 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 106 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 106 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 106 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 106 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 106 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 106 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 106 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 106 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 106 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 106 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 106 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 106 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 106 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 106 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 106 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 106 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 106 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 106 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 106 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 106 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 106 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 106 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 106 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 106 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 106 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 106 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 106 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 106 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 106 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 106 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 106 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 106 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 106 + 15645 ] ;
  mBY[ 106 + 149*idy ] = (mBY[ 106 + 149*idy ] - sum_i ) / mA_L[ 15900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 107
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 107 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 107 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 107 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 107 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 107 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 107 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 107 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 107 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 107 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 107 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 107 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 107 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 107 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 107 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 107 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 107 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 107 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 107 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 107 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 107 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 107 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 107 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 107 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 107 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 107 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 107 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 107 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 107 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 107 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 107 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 107 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 107 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 107 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 107 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 107 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 107 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 107 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 107 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 107 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 107 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 107 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 107 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 107 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 107 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 107 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 107 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 107 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 107 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 107 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 107 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 107 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 107 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 107 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 107 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 107 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 107 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 107 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 107 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 107 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 107 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 107 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 107 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 107 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 107 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 107 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 107 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 107 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 107 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 107 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 107 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 107 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 107 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 107 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 107 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 107 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 107 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 107 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 107 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 107 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 107 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 107 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 107 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 107 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 107 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 107 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 107 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 107 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 107 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 107 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 107 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 107 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 107 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 107 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 107 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 107 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 107 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 107 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 107 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 107 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 107 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 107 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 107 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 107 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 107 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 107 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 107 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 107 + 15794 ] ;
  mBY[ 107 + 149*idy ] = (mBY[ 107 + 149*idy ] - sum_i ) / mA_L[ 16050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 108
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 108 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 108 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 108 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 108 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 108 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 108 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 108 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 108 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 108 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 108 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 108 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 108 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 108 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 108 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 108 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 108 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 108 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 108 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 108 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 108 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 108 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 108 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 108 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 108 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 108 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 108 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 108 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 108 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 108 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 108 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 108 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 108 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 108 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 108 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 108 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 108 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 108 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 108 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 108 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 108 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 108 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 108 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 108 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 108 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 108 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 108 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 108 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 108 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 108 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 108 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 108 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 108 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 108 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 108 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 108 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 108 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 108 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 108 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 108 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 108 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 108 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 108 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 108 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 108 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 108 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 108 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 108 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 108 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 108 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 108 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 108 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 108 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 108 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 108 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 108 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 108 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 108 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 108 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 108 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 108 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 108 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 108 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 108 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 108 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 108 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 108 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 108 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 108 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 108 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 108 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 108 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 108 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 108 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 108 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 108 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 108 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 108 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 108 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 108 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 108 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 108 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 108 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 108 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 108 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 108 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 108 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 108 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 108 + 15943 ] ;
  mBY[ 108 + 149*idy ] = (mBY[ 108 + 149*idy ] - sum_i ) / mA_L[ 16200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 109
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 109 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 109 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 109 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 109 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 109 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 109 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 109 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 109 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 109 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 109 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 109 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 109 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 109 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 109 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 109 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 109 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 109 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 109 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 109 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 109 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 109 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 109 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 109 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 109 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 109 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 109 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 109 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 109 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 109 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 109 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 109 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 109 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 109 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 109 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 109 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 109 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 109 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 109 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 109 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 109 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 109 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 109 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 109 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 109 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 109 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 109 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 109 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 109 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 109 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 109 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 109 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 109 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 109 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 109 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 109 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 109 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 109 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 109 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 109 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 109 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 109 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 109 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 109 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 109 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 109 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 109 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 109 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 109 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 109 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 109 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 109 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 109 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 109 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 109 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 109 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 109 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 109 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 109 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 109 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 109 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 109 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 109 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 109 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 109 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 109 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 109 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 109 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 109 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 109 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 109 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 109 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 109 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 109 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 109 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 109 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 109 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 109 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 109 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 109 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 109 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 109 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 109 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 109 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 109 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 109 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 109 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 109 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 109 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 109 + 16092 ] ;
  mBY[ 109 + 149*idy ] = (mBY[ 109 + 149*idy ] - sum_i ) / mA_L[ 16350 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 110
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 110 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 110 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 110 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 110 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 110 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 110 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 110 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 110 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 110 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 110 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 110 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 110 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 110 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 110 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 110 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 110 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 110 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 110 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 110 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 110 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 110 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 110 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 110 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 110 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 110 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 110 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 110 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 110 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 110 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 110 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 110 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 110 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 110 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 110 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 110 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 110 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 110 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 110 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 110 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 110 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 110 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 110 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 110 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 110 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 110 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 110 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 110 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 110 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 110 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 110 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 110 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 110 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 110 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 110 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 110 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 110 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 110 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 110 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 110 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 110 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 110 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 110 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 110 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 110 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 110 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 110 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 110 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 110 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 110 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 110 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 110 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 110 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 110 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 110 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 110 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 110 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 110 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 110 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 110 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 110 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 110 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 110 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 110 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 110 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 110 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 110 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 110 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 110 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 110 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 110 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 110 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 110 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 110 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 110 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 110 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 110 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 110 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 110 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 110 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 110 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 110 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 110 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 110 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 110 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 110 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 110 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 110 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 110 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 110 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 110 + 16241 ] ;
  mBY[ 110 + 149*idy ] = (mBY[ 110 + 149*idy ] - sum_i ) / mA_L[ 16500 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 111
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 111 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 111 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 111 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 111 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 111 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 111 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 111 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 111 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 111 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 111 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 111 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 111 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 111 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 111 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 111 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 111 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 111 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 111 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 111 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 111 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 111 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 111 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 111 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 111 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 111 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 111 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 111 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 111 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 111 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 111 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 111 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 111 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 111 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 111 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 111 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 111 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 111 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 111 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 111 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 111 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 111 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 111 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 111 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 111 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 111 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 111 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 111 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 111 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 111 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 111 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 111 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 111 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 111 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 111 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 111 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 111 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 111 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 111 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 111 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 111 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 111 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 111 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 111 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 111 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 111 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 111 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 111 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 111 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 111 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 111 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 111 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 111 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 111 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 111 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 111 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 111 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 111 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 111 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 111 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 111 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 111 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 111 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 111 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 111 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 111 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 111 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 111 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 111 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 111 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 111 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 111 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 111 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 111 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 111 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 111 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 111 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 111 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 111 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 111 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 111 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 111 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 111 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 111 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 111 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 111 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 111 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 111 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 111 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 111 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 111 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 111 + 16390 ] ;
  mBY[ 111 + 149*idy ] = (mBY[ 111 + 149*idy ] - sum_i ) / mA_L[ 16650 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 112
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 112 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 112 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 112 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 112 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 112 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 112 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 112 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 112 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 112 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 112 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 112 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 112 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 112 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 112 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 112 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 112 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 112 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 112 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 112 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 112 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 112 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 112 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 112 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 112 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 112 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 112 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 112 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 112 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 112 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 112 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 112 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 112 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 112 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 112 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 112 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 112 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 112 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 112 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 112 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 112 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 112 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 112 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 112 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 112 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 112 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 112 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 112 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 112 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 112 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 112 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 112 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 112 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 112 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 112 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 112 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 112 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 112 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 112 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 112 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 112 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 112 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 112 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 112 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 112 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 112 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 112 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 112 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 112 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 112 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 112 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 112 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 112 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 112 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 112 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 112 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 112 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 112 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 112 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 112 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 112 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 112 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 112 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 112 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 112 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 112 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 112 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 112 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 112 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 112 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 112 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 112 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 112 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 112 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 112 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 112 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 112 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 112 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 112 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 112 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 112 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 112 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 112 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 112 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 112 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 112 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 112 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 112 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 112 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 112 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 112 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 112 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 112 + 16539 ] ;
  mBY[ 112 + 149*idy ] = (mBY[ 112 + 149*idy ] - sum_i ) / mA_L[ 16800 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 113
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 113 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 113 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 113 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 113 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 113 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 113 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 113 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 113 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 113 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 113 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 113 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 113 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 113 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 113 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 113 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 113 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 113 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 113 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 113 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 113 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 113 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 113 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 113 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 113 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 113 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 113 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 113 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 113 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 113 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 113 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 113 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 113 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 113 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 113 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 113 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 113 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 113 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 113 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 113 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 113 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 113 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 113 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 113 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 113 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 113 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 113 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 113 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 113 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 113 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 113 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 113 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 113 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 113 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 113 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 113 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 113 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 113 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 113 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 113 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 113 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 113 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 113 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 113 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 113 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 113 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 113 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 113 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 113 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 113 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 113 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 113 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 113 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 113 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 113 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 113 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 113 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 113 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 113 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 113 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 113 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 113 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 113 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 113 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 113 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 113 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 113 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 113 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 113 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 113 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 113 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 113 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 113 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 113 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 113 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 113 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 113 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 113 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 113 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 113 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 113 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 113 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 113 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 113 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 113 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 113 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 113 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 113 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 113 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 113 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 113 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 113 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 113 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 113 + 16688 ] ;
  mBY[ 113 + 149*idy ] = (mBY[ 113 + 149*idy ] - sum_i ) / mA_L[ 16950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 114
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 114 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 114 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 114 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 114 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 114 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 114 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 114 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 114 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 114 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 114 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 114 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 114 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 114 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 114 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 114 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 114 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 114 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 114 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 114 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 114 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 114 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 114 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 114 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 114 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 114 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 114 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 114 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 114 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 114 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 114 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 114 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 114 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 114 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 114 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 114 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 114 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 114 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 114 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 114 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 114 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 114 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 114 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 114 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 114 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 114 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 114 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 114 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 114 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 114 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 114 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 114 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 114 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 114 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 114 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 114 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 114 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 114 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 114 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 114 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 114 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 114 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 114 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 114 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 114 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 114 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 114 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 114 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 114 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 114 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 114 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 114 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 114 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 114 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 114 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 114 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 114 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 114 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 114 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 114 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 114 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 114 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 114 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 114 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 114 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 114 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 114 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 114 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 114 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 114 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 114 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 114 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 114 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 114 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 114 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 114 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 114 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 114 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 114 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 114 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 114 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 114 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 114 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 114 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 114 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 114 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 114 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 114 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 114 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 114 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 114 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 114 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 114 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 114 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 114 + 16837 ] ;
  mBY[ 114 + 149*idy ] = (mBY[ 114 + 149*idy ] - sum_i ) / mA_L[ 17100 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 115
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 115 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 115 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 115 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 115 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 115 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 115 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 115 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 115 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 115 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 115 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 115 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 115 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 115 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 115 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 115 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 115 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 115 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 115 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 115 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 115 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 115 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 115 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 115 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 115 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 115 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 115 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 115 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 115 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 115 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 115 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 115 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 115 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 115 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 115 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 115 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 115 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 115 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 115 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 115 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 115 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 115 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 115 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 115 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 115 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 115 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 115 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 115 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 115 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 115 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 115 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 115 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 115 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 115 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 115 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 115 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 115 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 115 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 115 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 115 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 115 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 115 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 115 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 115 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 115 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 115 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 115 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 115 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 115 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 115 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 115 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 115 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 115 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 115 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 115 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 115 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 115 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 115 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 115 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 115 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 115 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 115 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 115 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 115 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 115 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 115 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 115 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 115 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 115 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 115 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 115 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 115 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 115 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 115 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 115 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 115 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 115 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 115 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 115 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 115 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 115 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 115 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 115 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 115 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 115 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 115 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 115 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 115 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 115 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 115 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 115 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 115 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 115 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 115 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 115 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 115 + 16986 ] ;
  mBY[ 115 + 149*idy ] = (mBY[ 115 + 149*idy ] - sum_i ) / mA_L[ 17250 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 116
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 116 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 116 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 116 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 116 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 116 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 116 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 116 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 116 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 116 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 116 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 116 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 116 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 116 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 116 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 116 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 116 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 116 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 116 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 116 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 116 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 116 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 116 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 116 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 116 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 116 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 116 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 116 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 116 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 116 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 116 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 116 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 116 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 116 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 116 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 116 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 116 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 116 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 116 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 116 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 116 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 116 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 116 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 116 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 116 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 116 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 116 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 116 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 116 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 116 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 116 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 116 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 116 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 116 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 116 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 116 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 116 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 116 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 116 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 116 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 116 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 116 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 116 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 116 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 116 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 116 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 116 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 116 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 116 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 116 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 116 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 116 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 116 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 116 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 116 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 116 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 116 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 116 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 116 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 116 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 116 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 116 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 116 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 116 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 116 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 116 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 116 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 116 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 116 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 116 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 116 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 116 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 116 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 116 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 116 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 116 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 116 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 116 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 116 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 116 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 116 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 116 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 116 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 116 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 116 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 116 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 116 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 116 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 116 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 116 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 116 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 116 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 116 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 116 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 116 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 116 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 116 + 17135 ] ;
  mBY[ 116 + 149*idy ] = (mBY[ 116 + 149*idy ] - sum_i ) / mA_L[ 17400 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 117
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 117 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 117 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 117 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 117 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 117 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 117 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 117 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 117 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 117 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 117 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 117 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 117 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 117 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 117 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 117 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 117 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 117 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 117 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 117 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 117 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 117 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 117 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 117 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 117 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 117 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 117 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 117 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 117 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 117 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 117 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 117 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 117 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 117 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 117 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 117 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 117 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 117 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 117 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 117 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 117 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 117 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 117 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 117 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 117 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 117 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 117 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 117 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 117 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 117 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 117 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 117 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 117 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 117 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 117 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 117 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 117 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 117 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 117 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 117 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 117 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 117 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 117 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 117 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 117 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 117 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 117 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 117 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 117 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 117 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 117 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 117 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 117 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 117 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 117 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 117 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 117 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 117 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 117 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 117 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 117 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 117 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 117 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 117 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 117 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 117 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 117 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 117 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 117 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 117 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 117 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 117 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 117 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 117 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 117 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 117 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 117 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 117 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 117 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 117 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 117 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 117 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 117 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 117 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 117 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 117 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 117 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 117 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 117 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 117 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 117 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 117 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 117 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 117 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 117 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 117 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 117 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 117 + 17284 ] ;
  mBY[ 117 + 149*idy ] = (mBY[ 117 + 149*idy ] - sum_i ) / mA_L[ 17550 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 118
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 118 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 118 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 118 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 118 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 118 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 118 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 118 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 118 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 118 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 118 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 118 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 118 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 118 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 118 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 118 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 118 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 118 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 118 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 118 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 118 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 118 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 118 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 118 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 118 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 118 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 118 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 118 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 118 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 118 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 118 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 118 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 118 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 118 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 118 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 118 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 118 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 118 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 118 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 118 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 118 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 118 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 118 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 118 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 118 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 118 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 118 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 118 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 118 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 118 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 118 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 118 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 118 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 118 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 118 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 118 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 118 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 118 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 118 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 118 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 118 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 118 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 118 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 118 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 118 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 118 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 118 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 118 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 118 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 118 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 118 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 118 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 118 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 118 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 118 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 118 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 118 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 118 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 118 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 118 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 118 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 118 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 118 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 118 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 118 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 118 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 118 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 118 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 118 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 118 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 118 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 118 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 118 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 118 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 118 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 118 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 118 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 118 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 118 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 118 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 118 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 118 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 118 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 118 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 118 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 118 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 118 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 118 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 118 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 118 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 118 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 118 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 118 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 118 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 118 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 118 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 118 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 118 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 118 + 17433 ] ;
  mBY[ 118 + 149*idy ] = (mBY[ 118 + 149*idy ] - sum_i ) / mA_L[ 17700 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 119
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 119 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 119 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 119 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 119 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 119 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 119 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 119 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 119 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 119 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 119 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 119 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 119 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 119 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 119 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 119 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 119 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 119 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 119 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 119 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 119 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 119 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 119 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 119 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 119 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 119 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 119 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 119 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 119 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 119 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 119 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 119 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 119 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 119 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 119 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 119 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 119 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 119 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 119 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 119 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 119 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 119 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 119 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 119 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 119 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 119 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 119 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 119 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 119 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 119 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 119 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 119 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 119 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 119 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 119 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 119 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 119 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 119 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 119 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 119 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 119 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 119 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 119 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 119 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 119 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 119 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 119 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 119 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 119 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 119 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 119 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 119 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 119 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 119 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 119 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 119 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 119 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 119 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 119 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 119 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 119 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 119 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 119 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 119 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 119 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 119 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 119 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 119 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 119 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 119 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 119 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 119 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 119 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 119 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 119 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 119 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 119 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 119 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 119 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 119 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 119 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 119 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 119 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 119 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 119 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 119 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 119 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 119 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 119 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 119 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 119 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 119 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 119 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 119 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 119 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 119 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 119 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 119 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 119 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 119 + 17582 ] ;
  mBY[ 119 + 149*idy ] = (mBY[ 119 + 149*idy ] - sum_i ) / mA_L[ 17850 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 120
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 120 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 120 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 120 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 120 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 120 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 120 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 120 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 120 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 120 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 120 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 120 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 120 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 120 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 120 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 120 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 120 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 120 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 120 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 120 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 120 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 120 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 120 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 120 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 120 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 120 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 120 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 120 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 120 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 120 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 120 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 120 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 120 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 120 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 120 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 120 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 120 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 120 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 120 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 120 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 120 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 120 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 120 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 120 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 120 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 120 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 120 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 120 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 120 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 120 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 120 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 120 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 120 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 120 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 120 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 120 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 120 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 120 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 120 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 120 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 120 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 120 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 120 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 120 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 120 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 120 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 120 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 120 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 120 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 120 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 120 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 120 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 120 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 120 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 120 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 120 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 120 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 120 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 120 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 120 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 120 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 120 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 120 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 120 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 120 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 120 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 120 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 120 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 120 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 120 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 120 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 120 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 120 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 120 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 120 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 120 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 120 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 120 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 120 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 120 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 120 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 120 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 120 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 120 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 120 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 120 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 120 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 120 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 120 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 120 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 120 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 120 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 120 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 120 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 120 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 120 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 120 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 120 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 120 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 120 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 120 + 17731 ] ;
  mBY[ 120 + 149*idy ] = (mBY[ 120 + 149*idy ] - sum_i ) / mA_L[ 18000 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 121
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 121 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 121 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 121 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 121 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 121 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 121 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 121 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 121 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 121 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 121 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 121 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 121 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 121 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 121 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 121 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 121 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 121 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 121 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 121 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 121 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 121 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 121 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 121 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 121 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 121 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 121 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 121 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 121 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 121 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 121 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 121 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 121 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 121 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 121 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 121 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 121 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 121 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 121 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 121 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 121 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 121 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 121 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 121 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 121 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 121 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 121 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 121 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 121 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 121 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 121 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 121 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 121 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 121 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 121 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 121 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 121 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 121 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 121 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 121 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 121 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 121 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 121 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 121 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 121 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 121 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 121 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 121 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 121 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 121 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 121 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 121 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 121 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 121 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 121 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 121 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 121 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 121 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 121 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 121 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 121 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 121 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 121 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 121 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 121 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 121 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 121 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 121 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 121 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 121 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 121 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 121 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 121 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 121 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 121 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 121 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 121 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 121 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 121 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 121 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 121 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 121 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 121 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 121 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 121 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 121 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 121 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 121 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 121 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 121 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 121 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 121 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 121 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 121 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 121 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 121 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 121 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 121 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 121 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 121 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 121 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 121 + 17880 ] ;
  mBY[ 121 + 149*idy ] = (mBY[ 121 + 149*idy ] - sum_i ) / mA_L[ 18150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 122
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 122 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 122 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 122 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 122 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 122 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 122 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 122 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 122 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 122 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 122 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 122 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 122 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 122 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 122 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 122 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 122 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 122 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 122 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 122 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 122 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 122 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 122 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 122 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 122 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 122 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 122 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 122 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 122 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 122 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 122 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 122 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 122 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 122 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 122 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 122 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 122 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 122 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 122 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 122 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 122 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 122 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 122 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 122 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 122 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 122 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 122 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 122 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 122 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 122 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 122 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 122 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 122 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 122 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 122 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 122 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 122 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 122 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 122 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 122 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 122 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 122 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 122 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 122 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 122 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 122 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 122 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 122 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 122 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 122 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 122 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 122 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 122 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 122 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 122 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 122 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 122 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 122 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 122 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 122 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 122 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 122 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 122 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 122 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 122 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 122 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 122 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 122 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 122 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 122 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 122 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 122 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 122 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 122 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 122 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 122 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 122 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 122 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 122 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 122 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 122 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 122 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 122 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 122 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 122 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 122 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 122 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 122 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 122 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 122 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 122 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 122 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 122 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 122 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 122 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 122 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 122 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 122 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 122 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 122 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 122 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 122 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 122 + 18029 ] ;
  mBY[ 122 + 149*idy ] = (mBY[ 122 + 149*idy ] - sum_i ) / mA_L[ 18300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 123
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 123 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 123 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 123 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 123 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 123 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 123 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 123 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 123 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 123 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 123 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 123 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 123 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 123 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 123 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 123 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 123 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 123 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 123 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 123 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 123 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 123 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 123 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 123 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 123 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 123 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 123 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 123 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 123 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 123 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 123 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 123 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 123 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 123 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 123 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 123 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 123 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 123 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 123 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 123 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 123 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 123 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 123 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 123 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 123 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 123 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 123 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 123 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 123 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 123 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 123 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 123 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 123 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 123 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 123 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 123 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 123 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 123 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 123 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 123 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 123 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 123 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 123 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 123 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 123 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 123 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 123 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 123 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 123 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 123 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 123 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 123 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 123 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 123 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 123 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 123 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 123 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 123 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 123 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 123 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 123 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 123 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 123 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 123 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 123 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 123 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 123 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 123 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 123 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 123 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 123 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 123 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 123 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 123 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 123 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 123 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 123 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 123 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 123 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 123 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 123 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 123 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 123 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 123 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 123 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 123 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 123 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 123 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 123 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 123 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 123 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 123 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 123 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 123 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 123 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 123 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 123 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 123 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 123 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 123 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 123 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 123 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 123 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 123 + 18178 ] ;
  mBY[ 123 + 149*idy ] = (mBY[ 123 + 149*idy ] - sum_i ) / mA_L[ 18450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 124
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 124 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 124 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 124 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 124 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 124 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 124 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 124 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 124 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 124 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 124 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 124 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 124 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 124 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 124 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 124 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 124 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 124 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 124 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 124 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 124 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 124 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 124 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 124 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 124 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 124 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 124 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 124 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 124 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 124 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 124 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 124 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 124 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 124 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 124 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 124 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 124 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 124 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 124 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 124 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 124 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 124 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 124 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 124 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 124 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 124 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 124 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 124 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 124 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 124 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 124 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 124 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 124 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 124 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 124 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 124 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 124 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 124 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 124 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 124 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 124 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 124 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 124 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 124 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 124 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 124 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 124 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 124 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 124 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 124 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 124 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 124 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 124 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 124 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 124 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 124 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 124 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 124 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 124 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 124 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 124 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 124 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 124 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 124 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 124 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 124 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 124 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 124 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 124 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 124 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 124 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 124 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 124 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 124 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 124 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 124 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 124 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 124 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 124 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 124 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 124 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 124 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 124 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 124 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 124 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 124 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 124 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 124 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 124 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 124 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 124 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 124 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 124 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 124 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 124 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 124 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 124 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 124 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 124 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 124 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 124 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 124 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 124 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 124 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 124 + 18327 ] ;
  mBY[ 124 + 149*idy ] = (mBY[ 124 + 149*idy ] - sum_i ) / mA_L[ 18600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 125
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 125 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 125 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 125 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 125 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 125 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 125 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 125 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 125 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 125 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 125 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 125 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 125 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 125 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 125 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 125 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 125 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 125 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 125 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 125 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 125 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 125 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 125 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 125 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 125 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 125 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 125 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 125 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 125 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 125 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 125 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 125 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 125 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 125 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 125 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 125 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 125 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 125 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 125 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 125 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 125 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 125 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 125 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 125 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 125 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 125 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 125 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 125 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 125 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 125 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 125 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 125 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 125 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 125 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 125 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 125 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 125 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 125 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 125 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 125 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 125 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 125 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 125 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 125 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 125 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 125 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 125 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 125 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 125 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 125 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 125 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 125 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 125 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 125 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 125 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 125 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 125 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 125 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 125 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 125 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 125 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 125 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 125 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 125 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 125 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 125 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 125 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 125 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 125 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 125 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 125 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 125 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 125 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 125 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 125 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 125 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 125 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 125 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 125 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 125 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 125 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 125 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 125 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 125 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 125 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 125 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 125 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 125 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 125 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 125 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 125 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 125 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 125 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 125 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 125 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 125 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 125 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 125 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 125 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 125 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 125 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 125 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 125 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 125 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 125 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 125 + 18476 ] ;
  mBY[ 125 + 149*idy ] = (mBY[ 125 + 149*idy ] - sum_i ) / mA_L[ 18750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 126
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 126 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 126 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 126 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 126 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 126 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 126 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 126 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 126 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 126 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 126 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 126 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 126 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 126 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 126 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 126 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 126 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 126 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 126 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 126 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 126 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 126 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 126 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 126 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 126 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 126 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 126 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 126 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 126 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 126 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 126 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 126 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 126 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 126 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 126 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 126 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 126 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 126 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 126 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 126 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 126 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 126 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 126 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 126 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 126 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 126 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 126 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 126 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 126 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 126 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 126 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 126 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 126 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 126 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 126 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 126 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 126 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 126 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 126 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 126 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 126 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 126 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 126 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 126 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 126 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 126 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 126 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 126 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 126 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 126 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 126 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 126 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 126 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 126 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 126 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 126 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 126 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 126 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 126 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 126 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 126 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 126 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 126 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 126 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 126 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 126 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 126 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 126 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 126 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 126 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 126 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 126 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 126 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 126 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 126 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 126 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 126 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 126 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 126 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 126 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 126 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 126 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 126 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 126 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 126 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 126 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 126 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 126 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 126 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 126 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 126 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 126 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 126 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 126 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 126 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 126 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 126 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 126 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 126 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 126 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 126 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 126 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 126 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 126 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 126 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 126 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 126 + 18625 ] ;
  mBY[ 126 + 149*idy ] = (mBY[ 126 + 149*idy ] - sum_i ) / mA_L[ 18900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 127
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 127 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 127 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 127 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 127 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 127 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 127 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 127 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 127 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 127 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 127 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 127 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 127 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 127 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 127 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 127 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 127 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 127 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 127 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 127 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 127 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 127 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 127 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 127 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 127 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 127 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 127 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 127 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 127 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 127 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 127 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 127 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 127 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 127 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 127 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 127 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 127 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 127 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 127 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 127 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 127 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 127 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 127 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 127 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 127 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 127 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 127 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 127 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 127 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 127 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 127 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 127 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 127 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 127 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 127 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 127 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 127 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 127 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 127 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 127 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 127 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 127 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 127 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 127 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 127 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 127 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 127 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 127 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 127 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 127 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 127 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 127 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 127 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 127 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 127 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 127 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 127 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 127 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 127 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 127 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 127 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 127 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 127 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 127 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 127 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 127 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 127 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 127 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 127 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 127 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 127 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 127 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 127 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 127 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 127 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 127 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 127 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 127 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 127 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 127 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 127 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 127 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 127 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 127 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 127 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 127 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 127 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 127 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 127 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 127 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 127 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 127 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 127 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 127 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 127 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 127 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 127 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 127 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 127 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 127 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 127 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 127 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 127 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 127 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 127 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 127 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 127 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 127 + 18774 ] ;
  mBY[ 127 + 149*idy ] = (mBY[ 127 + 149*idy ] - sum_i ) / mA_L[ 19050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 128
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 128 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 128 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 128 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 128 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 128 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 128 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 128 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 128 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 128 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 128 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 128 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 128 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 128 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 128 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 128 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 128 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 128 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 128 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 128 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 128 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 128 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 128 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 128 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 128 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 128 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 128 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 128 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 128 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 128 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 128 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 128 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 128 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 128 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 128 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 128 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 128 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 128 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 128 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 128 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 128 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 128 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 128 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 128 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 128 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 128 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 128 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 128 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 128 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 128 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 128 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 128 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 128 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 128 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 128 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 128 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 128 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 128 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 128 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 128 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 128 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 128 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 128 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 128 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 128 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 128 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 128 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 128 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 128 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 128 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 128 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 128 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 128 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 128 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 128 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 128 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 128 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 128 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 128 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 128 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 128 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 128 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 128 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 128 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 128 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 128 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 128 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 128 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 128 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 128 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 128 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 128 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 128 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 128 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 128 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 128 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 128 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 128 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 128 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 128 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 128 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 128 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 128 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 128 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 128 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 128 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 128 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 128 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 128 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 128 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 128 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 128 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 128 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 128 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 128 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 128 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 128 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 128 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 128 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 128 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 128 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 128 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 128 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 128 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 128 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 128 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 128 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 128 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 128 + 18923 ] ;
  mBY[ 128 + 149*idy ] = (mBY[ 128 + 149*idy ] - sum_i ) / mA_L[ 19200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 129
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 129 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 129 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 129 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 129 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 129 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 129 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 129 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 129 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 129 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 129 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 129 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 129 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 129 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 129 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 129 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 129 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 129 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 129 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 129 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 129 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 129 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 129 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 129 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 129 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 129 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 129 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 129 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 129 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 129 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 129 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 129 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 129 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 129 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 129 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 129 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 129 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 129 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 129 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 129 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 129 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 129 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 129 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 129 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 129 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 129 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 129 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 129 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 129 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 129 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 129 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 129 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 129 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 129 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 129 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 129 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 129 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 129 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 129 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 129 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 129 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 129 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 129 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 129 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 129 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 129 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 129 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 129 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 129 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 129 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 129 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 129 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 129 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 129 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 129 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 129 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 129 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 129 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 129 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 129 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 129 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 129 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 129 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 129 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 129 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 129 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 129 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 129 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 129 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 129 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 129 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 129 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 129 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 129 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 129 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 129 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 129 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 129 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 129 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 129 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 129 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 129 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 129 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 129 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 129 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 129 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 129 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 129 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 129 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 129 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 129 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 129 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 129 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 129 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 129 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 129 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 129 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 129 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 129 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 129 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 129 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 129 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 129 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 129 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 129 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 129 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 129 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 129 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 129 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 129 + 19072 ] ;
  mBY[ 129 + 149*idy ] = (mBY[ 129 + 149*idy ] - sum_i ) / mA_L[ 19350 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 130
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 130 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 130 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 130 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 130 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 130 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 130 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 130 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 130 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 130 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 130 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 130 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 130 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 130 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 130 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 130 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 130 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 130 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 130 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 130 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 130 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 130 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 130 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 130 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 130 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 130 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 130 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 130 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 130 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 130 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 130 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 130 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 130 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 130 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 130 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 130 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 130 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 130 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 130 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 130 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 130 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 130 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 130 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 130 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 130 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 130 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 130 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 130 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 130 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 130 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 130 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 130 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 130 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 130 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 130 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 130 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 130 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 130 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 130 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 130 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 130 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 130 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 130 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 130 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 130 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 130 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 130 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 130 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 130 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 130 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 130 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 130 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 130 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 130 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 130 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 130 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 130 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 130 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 130 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 130 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 130 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 130 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 130 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 130 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 130 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 130 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 130 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 130 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 130 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 130 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 130 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 130 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 130 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 130 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 130 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 130 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 130 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 130 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 130 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 130 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 130 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 130 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 130 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 130 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 130 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 130 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 130 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 130 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 130 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 130 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 130 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 130 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 130 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 130 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 130 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 130 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 130 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 130 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 130 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 130 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 130 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 130 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 130 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 130 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 130 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 130 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 130 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 130 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 130 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 130 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 130 + 19221 ] ;
  mBY[ 130 + 149*idy ] = (mBY[ 130 + 149*idy ] - sum_i ) / mA_L[ 19500 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 131
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 131 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 131 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 131 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 131 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 131 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 131 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 131 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 131 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 131 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 131 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 131 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 131 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 131 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 131 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 131 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 131 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 131 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 131 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 131 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 131 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 131 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 131 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 131 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 131 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 131 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 131 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 131 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 131 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 131 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 131 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 131 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 131 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 131 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 131 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 131 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 131 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 131 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 131 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 131 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 131 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 131 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 131 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 131 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 131 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 131 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 131 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 131 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 131 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 131 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 131 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 131 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 131 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 131 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 131 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 131 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 131 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 131 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 131 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 131 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 131 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 131 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 131 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 131 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 131 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 131 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 131 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 131 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 131 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 131 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 131 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 131 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 131 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 131 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 131 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 131 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 131 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 131 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 131 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 131 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 131 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 131 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 131 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 131 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 131 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 131 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 131 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 131 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 131 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 131 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 131 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 131 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 131 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 131 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 131 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 131 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 131 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 131 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 131 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 131 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 131 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 131 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 131 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 131 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 131 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 131 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 131 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 131 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 131 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 131 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 131 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 131 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 131 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 131 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 131 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 131 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 131 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 131 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 131 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 131 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 131 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 131 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 131 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 131 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 131 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 131 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 131 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 131 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 131 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 131 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 131 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 131 + 19370 ] ;
  mBY[ 131 + 149*idy ] = (mBY[ 131 + 149*idy ] - sum_i ) / mA_L[ 19650 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 132
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 132 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 132 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 132 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 132 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 132 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 132 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 132 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 132 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 132 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 132 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 132 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 132 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 132 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 132 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 132 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 132 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 132 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 132 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 132 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 132 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 132 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 132 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 132 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 132 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 132 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 132 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 132 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 132 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 132 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 132 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 132 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 132 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 132 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 132 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 132 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 132 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 132 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 132 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 132 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 132 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 132 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 132 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 132 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 132 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 132 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 132 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 132 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 132 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 132 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 132 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 132 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 132 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 132 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 132 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 132 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 132 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 132 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 132 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 132 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 132 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 132 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 132 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 132 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 132 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 132 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 132 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 132 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 132 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 132 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 132 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 132 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 132 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 132 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 132 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 132 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 132 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 132 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 132 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 132 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 132 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 132 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 132 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 132 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 132 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 132 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 132 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 132 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 132 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 132 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 132 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 132 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 132 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 132 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 132 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 132 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 132 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 132 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 132 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 132 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 132 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 132 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 132 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 132 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 132 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 132 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 132 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 132 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 132 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 132 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 132 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 132 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 132 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 132 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 132 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 132 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 132 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 132 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 132 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 132 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 132 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 132 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 132 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 132 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 132 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 132 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 132 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 132 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 132 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 132 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 132 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 132 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 132 + 19519 ] ;
  mBY[ 132 + 149*idy ] = (mBY[ 132 + 149*idy ] - sum_i ) / mA_L[ 19800 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 133
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 133 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 133 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 133 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 133 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 133 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 133 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 133 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 133 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 133 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 133 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 133 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 133 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 133 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 133 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 133 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 133 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 133 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 133 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 133 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 133 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 133 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 133 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 133 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 133 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 133 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 133 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 133 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 133 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 133 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 133 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 133 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 133 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 133 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 133 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 133 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 133 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 133 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 133 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 133 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 133 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 133 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 133 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 133 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 133 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 133 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 133 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 133 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 133 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 133 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 133 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 133 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 133 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 133 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 133 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 133 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 133 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 133 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 133 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 133 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 133 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 133 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 133 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 133 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 133 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 133 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 133 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 133 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 133 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 133 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 133 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 133 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 133 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 133 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 133 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 133 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 133 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 133 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 133 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 133 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 133 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 133 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 133 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 133 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 133 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 133 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 133 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 133 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 133 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 133 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 133 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 133 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 133 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 133 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 133 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 133 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 133 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 133 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 133 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 133 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 133 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 133 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 133 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 133 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 133 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 133 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 133 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 133 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 133 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 133 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 133 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 133 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 133 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 133 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 133 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 133 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 133 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 133 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 133 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 133 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 133 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 133 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 133 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 133 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 133 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 133 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 133 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 133 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 133 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 133 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 133 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 133 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 133 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 133 + 19668 ] ;
  mBY[ 133 + 149*idy ] = (mBY[ 133 + 149*idy ] - sum_i ) / mA_L[ 19950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 134
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 134 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 134 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 134 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 134 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 134 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 134 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 134 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 134 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 134 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 134 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 134 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 134 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 134 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 134 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 134 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 134 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 134 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 134 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 134 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 134 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 134 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 134 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 134 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 134 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 134 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 134 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 134 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 134 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 134 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 134 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 134 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 134 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 134 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 134 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 134 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 134 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 134 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 134 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 134 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 134 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 134 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 134 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 134 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 134 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 134 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 134 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 134 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 134 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 134 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 134 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 134 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 134 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 134 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 134 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 134 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 134 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 134 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 134 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 134 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 134 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 134 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 134 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 134 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 134 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 134 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 134 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 134 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 134 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 134 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 134 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 134 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 134 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 134 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 134 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 134 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 134 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 134 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 134 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 134 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 134 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 134 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 134 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 134 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 134 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 134 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 134 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 134 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 134 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 134 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 134 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 134 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 134 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 134 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 134 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 134 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 134 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 134 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 134 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 134 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 134 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 134 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 134 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 134 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 134 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 134 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 134 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 134 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 134 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 134 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 134 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 134 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 134 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 134 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 134 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 134 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 134 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 134 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 134 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 134 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 134 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 134 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 134 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 134 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 134 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 134 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 134 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 134 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 134 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 134 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 134 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 134 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 134 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 134 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA_L[ 134 + 19817 ] ;
  mBY[ 134 + 149*idy ] = (mBY[ 134 + 149*idy ] - sum_i ) / mA_L[ 20100 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 135
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 135 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 135 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 135 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 135 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 135 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 135 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 135 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 135 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 135 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 135 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 135 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 135 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 135 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 135 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 135 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 135 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 135 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 135 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 135 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 135 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 135 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 135 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 135 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 135 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 135 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 135 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 135 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 135 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 135 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 135 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 135 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 135 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 135 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 135 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 135 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 135 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 135 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 135 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 135 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 135 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 135 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 135 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 135 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 135 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 135 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 135 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 135 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 135 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 135 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 135 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 135 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 135 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 135 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 135 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 135 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 135 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 135 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 135 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 135 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 135 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 135 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 135 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 135 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 135 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 135 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 135 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 135 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 135 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 135 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 135 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 135 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 135 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 135 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 135 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 135 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 135 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 135 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 135 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 135 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 135 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 135 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 135 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 135 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 135 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 135 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 135 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 135 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 135 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 135 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 135 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 135 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 135 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 135 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 135 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 135 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 135 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 135 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 135 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 135 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 135 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 135 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 135 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 135 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 135 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 135 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 135 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 135 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 135 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 135 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 135 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 135 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 135 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 135 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 135 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 135 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 135 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 135 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 135 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 135 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 135 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 135 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 135 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 135 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 135 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 135 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 135 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 135 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 135 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 135 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 135 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 135 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 135 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 135 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA_L[ 135 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA_L[ 135 + 19966 ] ;
  mBY[ 135 + 149*idy ] = (mBY[ 135 + 149*idy ] - sum_i ) / mA_L[ 20250 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 136
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 136 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 136 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 136 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 136 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 136 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 136 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 136 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 136 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 136 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 136 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 136 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 136 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 136 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 136 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 136 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 136 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 136 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 136 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 136 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 136 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 136 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 136 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 136 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 136 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 136 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 136 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 136 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 136 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 136 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 136 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 136 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 136 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 136 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 136 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 136 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 136 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 136 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 136 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 136 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 136 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 136 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 136 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 136 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 136 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 136 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 136 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 136 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 136 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 136 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 136 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 136 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 136 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 136 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 136 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 136 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 136 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 136 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 136 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 136 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 136 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 136 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 136 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 136 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 136 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 136 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 136 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 136 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 136 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 136 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 136 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 136 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 136 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 136 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 136 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 136 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 136 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 136 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 136 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 136 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 136 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 136 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 136 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 136 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 136 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 136 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 136 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 136 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 136 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 136 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 136 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 136 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 136 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 136 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 136 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 136 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 136 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 136 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 136 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 136 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 136 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 136 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 136 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 136 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 136 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 136 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 136 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 136 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 136 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 136 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 136 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 136 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 136 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 136 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 136 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 136 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 136 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 136 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 136 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 136 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 136 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 136 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 136 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 136 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 136 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 136 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 136 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 136 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 136 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 136 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 136 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 136 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 136 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 136 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA_L[ 136 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA_L[ 136 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA_L[ 136 + 20115 ] ;
  mBY[ 136 + 149*idy ] = (mBY[ 136 + 149*idy ] - sum_i ) / mA_L[ 20400 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 137
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 137 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 137 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 137 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 137 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 137 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 137 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 137 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 137 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 137 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 137 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 137 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 137 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 137 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 137 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 137 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 137 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 137 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 137 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 137 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 137 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 137 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 137 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 137 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 137 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 137 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 137 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 137 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 137 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 137 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 137 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 137 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 137 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 137 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 137 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 137 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 137 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 137 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 137 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 137 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 137 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 137 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 137 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 137 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 137 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 137 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 137 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 137 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 137 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 137 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 137 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 137 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 137 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 137 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 137 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 137 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 137 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 137 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 137 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 137 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 137 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 137 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 137 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 137 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 137 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 137 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 137 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 137 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 137 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 137 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 137 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 137 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 137 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 137 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 137 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 137 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 137 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 137 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 137 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 137 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 137 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 137 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 137 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 137 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 137 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 137 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 137 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 137 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 137 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 137 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 137 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 137 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 137 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 137 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 137 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 137 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 137 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 137 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 137 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 137 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 137 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 137 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 137 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 137 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 137 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 137 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 137 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 137 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 137 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 137 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 137 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 137 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 137 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 137 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 137 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 137 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 137 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 137 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 137 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 137 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 137 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 137 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 137 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 137 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 137 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 137 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 137 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 137 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 137 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 137 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 137 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 137 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 137 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 137 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA_L[ 137 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA_L[ 137 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA_L[ 137 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA_L[ 137 + 20264 ] ;
  mBY[ 137 + 149*idy ] = (mBY[ 137 + 149*idy ] - sum_i ) / mA_L[ 20550 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 138
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 138 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 138 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 138 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 138 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 138 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 138 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 138 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 138 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 138 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 138 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 138 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 138 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 138 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 138 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 138 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 138 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 138 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 138 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 138 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 138 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 138 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 138 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 138 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 138 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 138 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 138 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 138 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 138 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 138 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 138 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 138 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 138 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 138 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 138 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 138 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 138 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 138 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 138 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 138 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 138 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 138 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 138 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 138 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 138 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 138 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 138 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 138 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 138 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 138 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 138 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 138 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 138 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 138 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 138 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 138 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 138 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 138 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 138 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 138 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 138 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 138 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 138 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 138 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 138 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 138 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 138 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 138 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 138 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 138 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 138 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 138 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 138 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 138 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 138 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 138 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 138 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 138 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 138 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 138 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 138 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 138 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 138 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 138 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 138 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 138 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 138 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 138 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 138 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 138 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 138 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 138 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 138 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 138 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 138 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 138 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 138 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 138 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 138 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 138 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 138 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 138 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 138 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 138 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 138 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 138 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 138 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 138 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 138 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 138 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 138 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 138 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 138 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 138 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 138 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 138 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 138 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 138 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 138 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 138 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 138 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 138 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 138 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 138 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 138 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 138 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 138 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 138 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 138 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 138 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 138 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 138 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 138 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 138 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA_L[ 138 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA_L[ 138 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA_L[ 138 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA_L[ 138 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA_L[ 138 + 20413 ] ;
  mBY[ 138 + 149*idy ] = (mBY[ 138 + 149*idy ] - sum_i ) / mA_L[ 20700 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 139
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 139 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 139 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 139 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 139 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 139 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 139 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 139 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 139 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 139 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 139 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 139 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 139 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 139 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 139 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 139 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 139 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 139 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 139 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 139 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 139 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 139 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 139 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 139 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 139 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 139 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 139 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 139 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 139 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 139 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 139 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 139 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 139 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 139 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 139 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 139 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 139 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 139 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 139 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 139 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 139 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 139 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 139 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 139 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 139 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 139 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 139 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 139 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 139 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 139 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 139 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 139 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 139 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 139 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 139 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 139 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 139 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 139 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 139 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 139 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 139 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 139 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 139 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 139 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 139 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 139 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 139 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 139 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 139 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 139 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 139 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 139 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 139 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 139 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 139 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 139 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 139 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 139 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 139 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 139 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 139 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 139 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 139 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 139 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 139 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 139 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 139 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 139 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 139 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 139 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 139 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 139 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 139 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 139 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 139 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 139 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 139 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 139 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 139 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 139 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 139 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 139 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 139 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 139 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 139 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 139 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 139 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 139 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 139 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 139 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 139 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 139 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 139 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 139 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 139 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 139 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 139 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 139 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 139 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 139 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 139 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 139 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 139 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 139 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 139 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 139 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 139 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 139 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 139 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 139 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 139 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 139 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 139 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 139 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA_L[ 139 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA_L[ 139 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA_L[ 139 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA_L[ 139 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA_L[ 139 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA_L[ 139 + 20562 ] ;
  mBY[ 139 + 149*idy ] = (mBY[ 139 + 149*idy ] - sum_i ) / mA_L[ 20850 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 140
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 140 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 140 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 140 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 140 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 140 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 140 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 140 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 140 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 140 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 140 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 140 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 140 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 140 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 140 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 140 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 140 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 140 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 140 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 140 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 140 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 140 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 140 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 140 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 140 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 140 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 140 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 140 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 140 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 140 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 140 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 140 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 140 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 140 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 140 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 140 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 140 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 140 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 140 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 140 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 140 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 140 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 140 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 140 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 140 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 140 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 140 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 140 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 140 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 140 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 140 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 140 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 140 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 140 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 140 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 140 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 140 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 140 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 140 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 140 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 140 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 140 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 140 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 140 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 140 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 140 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 140 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 140 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 140 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 140 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 140 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 140 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 140 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 140 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 140 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 140 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 140 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 140 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 140 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 140 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 140 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 140 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 140 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 140 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 140 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 140 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 140 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 140 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 140 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 140 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 140 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 140 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 140 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 140 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 140 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 140 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 140 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 140 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 140 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 140 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 140 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 140 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 140 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 140 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 140 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 140 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 140 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 140 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 140 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 140 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 140 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 140 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 140 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 140 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 140 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 140 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 140 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 140 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 140 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 140 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 140 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 140 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 140 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 140 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 140 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 140 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 140 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 140 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 140 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 140 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 140 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 140 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 140 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 140 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA_L[ 140 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA_L[ 140 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA_L[ 140 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA_L[ 140 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA_L[ 140 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA_L[ 140 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA_L[ 140 + 20711 ] ;
  mBY[ 140 + 149*idy ] = (mBY[ 140 + 149*idy ] - sum_i ) / mA_L[ 21000 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 141
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 141 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 141 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 141 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 141 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 141 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 141 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 141 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 141 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 141 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 141 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 141 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 141 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 141 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 141 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 141 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 141 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 141 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 141 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 141 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 141 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 141 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 141 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 141 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 141 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 141 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 141 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 141 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 141 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 141 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 141 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 141 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 141 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 141 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 141 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 141 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 141 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 141 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 141 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 141 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 141 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 141 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 141 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 141 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 141 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 141 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 141 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 141 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 141 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 141 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 141 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 141 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 141 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 141 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 141 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 141 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 141 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 141 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 141 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 141 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 141 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 141 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 141 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 141 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 141 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 141 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 141 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 141 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 141 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 141 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 141 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 141 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 141 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 141 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 141 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 141 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 141 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 141 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 141 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 141 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 141 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 141 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 141 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 141 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 141 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 141 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 141 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 141 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 141 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 141 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 141 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 141 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 141 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 141 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 141 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 141 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 141 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 141 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 141 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 141 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 141 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 141 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 141 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 141 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 141 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 141 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 141 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 141 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 141 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 141 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 141 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 141 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 141 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 141 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 141 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 141 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 141 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 141 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 141 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 141 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 141 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 141 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 141 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 141 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 141 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 141 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 141 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 141 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 141 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 141 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 141 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 141 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 141 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 141 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA_L[ 141 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA_L[ 141 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA_L[ 141 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA_L[ 141 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA_L[ 141 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA_L[ 141 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA_L[ 141 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA_L[ 141 + 20860 ] ;
  mBY[ 141 + 149*idy ] = (mBY[ 141 + 149*idy ] - sum_i ) / mA_L[ 21150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 142
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 142 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 142 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 142 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 142 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 142 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 142 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 142 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 142 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 142 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 142 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 142 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 142 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 142 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 142 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 142 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 142 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 142 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 142 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 142 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 142 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 142 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 142 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 142 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 142 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 142 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 142 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 142 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 142 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 142 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 142 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 142 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 142 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 142 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 142 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 142 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 142 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 142 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 142 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 142 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 142 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 142 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 142 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 142 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 142 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 142 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 142 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 142 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 142 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 142 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 142 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 142 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 142 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 142 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 142 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 142 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 142 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 142 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 142 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 142 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 142 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 142 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 142 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 142 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 142 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 142 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 142 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 142 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 142 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 142 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 142 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 142 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 142 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 142 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 142 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 142 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 142 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 142 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 142 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 142 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 142 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 142 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 142 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 142 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 142 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 142 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 142 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 142 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 142 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 142 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 142 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 142 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 142 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 142 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 142 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 142 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 142 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 142 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 142 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 142 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 142 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 142 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 142 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 142 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 142 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 142 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 142 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 142 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 142 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 142 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 142 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 142 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 142 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 142 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 142 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 142 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 142 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 142 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 142 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 142 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 142 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 142 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 142 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 142 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 142 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 142 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 142 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 142 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 142 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 142 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 142 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 142 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 142 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 142 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA_L[ 142 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA_L[ 142 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA_L[ 142 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA_L[ 142 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA_L[ 142 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA_L[ 142 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA_L[ 142 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA_L[ 142 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA_L[ 142 + 21009 ] ;
  mBY[ 142 + 149*idy ] = (mBY[ 142 + 149*idy ] - sum_i ) / mA_L[ 21300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 143
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 143 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 143 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 143 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 143 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 143 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 143 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 143 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 143 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 143 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 143 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 143 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 143 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 143 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 143 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 143 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 143 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 143 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 143 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 143 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 143 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 143 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 143 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 143 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 143 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 143 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 143 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 143 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 143 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 143 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 143 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 143 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 143 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 143 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 143 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 143 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 143 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 143 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 143 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 143 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 143 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 143 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 143 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 143 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 143 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 143 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 143 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 143 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 143 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 143 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 143 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 143 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 143 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 143 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 143 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 143 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 143 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 143 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 143 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 143 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 143 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 143 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 143 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 143 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 143 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 143 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 143 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 143 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 143 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 143 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 143 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 143 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 143 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 143 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 143 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 143 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 143 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 143 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 143 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 143 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 143 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 143 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 143 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 143 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 143 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 143 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 143 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 143 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 143 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 143 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 143 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 143 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 143 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 143 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 143 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 143 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 143 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 143 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 143 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 143 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 143 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 143 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 143 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 143 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 143 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 143 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 143 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 143 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 143 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 143 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 143 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 143 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 143 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 143 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 143 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 143 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 143 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 143 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 143 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 143 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 143 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 143 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 143 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 143 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 143 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 143 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 143 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 143 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 143 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 143 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 143 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 143 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 143 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 143 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA_L[ 143 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA_L[ 143 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA_L[ 143 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA_L[ 143 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA_L[ 143 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA_L[ 143 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA_L[ 143 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA_L[ 143 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA_L[ 143 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA_L[ 143 + 21158 ] ;
  mBY[ 143 + 149*idy ] = (mBY[ 143 + 149*idy ] - sum_i ) / mA_L[ 21450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 144
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 144 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 144 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 144 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 144 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 144 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 144 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 144 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 144 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 144 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 144 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 144 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 144 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 144 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 144 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 144 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 144 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 144 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 144 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 144 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 144 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 144 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 144 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 144 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 144 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 144 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 144 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 144 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 144 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 144 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 144 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 144 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 144 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 144 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 144 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 144 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 144 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 144 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 144 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 144 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 144 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 144 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 144 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 144 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 144 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 144 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 144 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 144 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 144 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 144 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 144 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 144 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 144 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 144 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 144 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 144 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 144 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 144 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 144 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 144 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 144 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 144 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 144 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 144 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 144 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 144 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 144 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 144 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 144 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 144 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 144 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 144 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 144 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 144 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 144 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 144 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 144 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 144 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 144 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 144 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 144 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 144 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 144 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 144 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 144 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 144 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 144 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 144 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 144 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 144 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 144 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 144 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 144 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 144 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 144 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 144 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 144 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 144 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 144 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 144 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 144 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 144 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 144 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 144 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 144 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 144 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 144 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 144 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 144 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 144 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 144 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 144 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 144 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 144 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 144 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 144 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 144 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 144 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 144 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 144 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 144 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 144 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 144 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 144 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 144 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 144 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 144 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 144 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 144 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 144 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 144 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 144 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 144 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 144 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA_L[ 144 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA_L[ 144 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA_L[ 144 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA_L[ 144 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA_L[ 144 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA_L[ 144 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA_L[ 144 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA_L[ 144 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA_L[ 144 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA_L[ 144 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA_L[ 144 + 21307 ] ;
  mBY[ 144 + 149*idy ] = (mBY[ 144 + 149*idy ] - sum_i ) / mA_L[ 21600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 145
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 145 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 145 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 145 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 145 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 145 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 145 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 145 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 145 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 145 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 145 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 145 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 145 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 145 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 145 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 145 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 145 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 145 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 145 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 145 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 145 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 145 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 145 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 145 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 145 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 145 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 145 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 145 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 145 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 145 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 145 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 145 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 145 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 145 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 145 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 145 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 145 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 145 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 145 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 145 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 145 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 145 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 145 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 145 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 145 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 145 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 145 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 145 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 145 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 145 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 145 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 145 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 145 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 145 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 145 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 145 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 145 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 145 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 145 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 145 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 145 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 145 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 145 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 145 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 145 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 145 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 145 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 145 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 145 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 145 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 145 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 145 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 145 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 145 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 145 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 145 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 145 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 145 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 145 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 145 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 145 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 145 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 145 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 145 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 145 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 145 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 145 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 145 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 145 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 145 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 145 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 145 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 145 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 145 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 145 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 145 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 145 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 145 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 145 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 145 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 145 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 145 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 145 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 145 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 145 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 145 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 145 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 145 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 145 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 145 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 145 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 145 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 145 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 145 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 145 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 145 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 145 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 145 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 145 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 145 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 145 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 145 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 145 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 145 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 145 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 145 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 145 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 145 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 145 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 145 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 145 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 145 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 145 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 145 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA_L[ 145 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA_L[ 145 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA_L[ 145 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA_L[ 145 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA_L[ 145 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA_L[ 145 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA_L[ 145 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA_L[ 145 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA_L[ 145 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA_L[ 145 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA_L[ 145 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA_L[ 145 + 21456 ] ;
  mBY[ 145 + 149*idy ] = (mBY[ 145 + 149*idy ] - sum_i ) / mA_L[ 21750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 146
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 146 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 146 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 146 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 146 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 146 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 146 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 146 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 146 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 146 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 146 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 146 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 146 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 146 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 146 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 146 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 146 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 146 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 146 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 146 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 146 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 146 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 146 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 146 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 146 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 146 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 146 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 146 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 146 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 146 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 146 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 146 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 146 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 146 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 146 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 146 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 146 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 146 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 146 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 146 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 146 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 146 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 146 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 146 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 146 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 146 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 146 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 146 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 146 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 146 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 146 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 146 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 146 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 146 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 146 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 146 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 146 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 146 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 146 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 146 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 146 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 146 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 146 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 146 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 146 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 146 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 146 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 146 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 146 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 146 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 146 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 146 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 146 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 146 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 146 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 146 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 146 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 146 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 146 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 146 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 146 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 146 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 146 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 146 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 146 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 146 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 146 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 146 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 146 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 146 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 146 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 146 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 146 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 146 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 146 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 146 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 146 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 146 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 146 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 146 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 146 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 146 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 146 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 146 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 146 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 146 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 146 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 146 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 146 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 146 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 146 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 146 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 146 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 146 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 146 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 146 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 146 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 146 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 146 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 146 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 146 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 146 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 146 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 146 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 146 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 146 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 146 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 146 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 146 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 146 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 146 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 146 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 146 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 146 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA_L[ 146 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA_L[ 146 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA_L[ 146 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA_L[ 146 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA_L[ 146 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA_L[ 146 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA_L[ 146 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA_L[ 146 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA_L[ 146 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA_L[ 146 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA_L[ 146 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA_L[ 146 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA_L[ 146 + 21605 ] ;
  mBY[ 146 + 149*idy ] = (mBY[ 146 + 149*idy ] - sum_i ) / mA_L[ 21900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 147
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 147 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 147 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 147 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 147 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 147 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 147 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 147 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 147 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 147 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 147 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 147 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 147 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 147 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 147 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 147 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 147 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 147 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 147 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 147 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 147 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 147 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 147 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 147 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 147 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 147 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 147 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 147 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 147 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 147 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 147 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 147 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 147 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 147 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 147 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 147 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 147 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 147 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 147 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 147 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 147 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 147 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 147 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 147 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 147 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 147 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 147 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 147 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 147 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 147 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 147 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 147 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 147 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 147 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 147 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 147 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 147 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 147 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 147 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 147 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 147 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 147 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 147 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 147 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 147 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 147 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 147 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 147 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 147 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 147 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 147 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 147 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 147 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 147 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 147 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 147 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 147 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 147 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 147 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 147 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 147 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 147 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 147 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 147 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 147 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 147 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 147 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 147 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 147 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 147 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 147 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 147 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 147 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 147 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 147 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 147 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 147 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 147 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 147 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 147 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 147 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 147 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 147 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 147 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 147 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 147 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 147 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 147 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 147 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 147 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 147 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 147 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 147 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 147 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 147 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 147 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 147 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 147 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 147 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 147 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 147 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 147 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 147 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 147 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 147 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 147 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 147 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 147 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 147 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 147 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 147 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 147 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 147 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 147 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA_L[ 147 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA_L[ 147 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA_L[ 147 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA_L[ 147 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA_L[ 147 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA_L[ 147 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA_L[ 147 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA_L[ 147 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA_L[ 147 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA_L[ 147 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA_L[ 147 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA_L[ 147 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA_L[ 147 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA_L[ 147 + 21754 ] ;
  mBY[ 147 + 149*idy ] = (mBY[ 147 + 149*idy ] - sum_i ) / mA_L[ 22050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 148
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 149*idy ] * mA_L[ 148 + 0 ] ;
  sum_i += mBY[ 1 + 149*idy ] * mA_L[ 148 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA_L[ 148 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA_L[ 148 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA_L[ 148 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA_L[ 148 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA_L[ 148 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA_L[ 148 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA_L[ 148 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA_L[ 148 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA_L[ 148 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA_L[ 148 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA_L[ 148 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA_L[ 148 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA_L[ 148 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA_L[ 148 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA_L[ 148 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA_L[ 148 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA_L[ 148 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA_L[ 148 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA_L[ 148 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA_L[ 148 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA_L[ 148 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA_L[ 148 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA_L[ 148 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA_L[ 148 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA_L[ 148 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA_L[ 148 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA_L[ 148 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA_L[ 148 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA_L[ 148 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA_L[ 148 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA_L[ 148 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA_L[ 148 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA_L[ 148 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA_L[ 148 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA_L[ 148 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA_L[ 148 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA_L[ 148 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA_L[ 148 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA_L[ 148 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA_L[ 148 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA_L[ 148 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA_L[ 148 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA_L[ 148 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA_L[ 148 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA_L[ 148 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA_L[ 148 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA_L[ 148 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA_L[ 148 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA_L[ 148 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA_L[ 148 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA_L[ 148 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA_L[ 148 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA_L[ 148 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA_L[ 148 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA_L[ 148 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA_L[ 148 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA_L[ 148 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA_L[ 148 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA_L[ 148 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA_L[ 148 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA_L[ 148 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA_L[ 148 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA_L[ 148 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA_L[ 148 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA_L[ 148 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA_L[ 148 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA_L[ 148 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA_L[ 148 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA_L[ 148 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA_L[ 148 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA_L[ 148 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA_L[ 148 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA_L[ 148 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA_L[ 148 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA_L[ 148 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA_L[ 148 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA_L[ 148 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA_L[ 148 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA_L[ 148 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA_L[ 148 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA_L[ 148 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA_L[ 148 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA_L[ 148 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA_L[ 148 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA_L[ 148 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA_L[ 148 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA_L[ 148 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA_L[ 148 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA_L[ 148 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA_L[ 148 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA_L[ 148 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA_L[ 148 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA_L[ 148 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA_L[ 148 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA_L[ 148 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA_L[ 148 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA_L[ 148 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA_L[ 148 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA_L[ 148 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA_L[ 148 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA_L[ 148 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA_L[ 148 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA_L[ 148 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA_L[ 148 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA_L[ 148 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA_L[ 148 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA_L[ 148 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA_L[ 148 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA_L[ 148 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA_L[ 148 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA_L[ 148 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA_L[ 148 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA_L[ 148 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA_L[ 148 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA_L[ 148 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA_L[ 148 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA_L[ 148 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA_L[ 148 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA_L[ 148 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA_L[ 148 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA_L[ 148 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA_L[ 148 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA_L[ 148 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA_L[ 148 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA_L[ 148 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA_L[ 148 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA_L[ 148 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA_L[ 148 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA_L[ 148 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA_L[ 148 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA_L[ 148 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA_L[ 148 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA_L[ 148 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA_L[ 148 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA_L[ 148 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA_L[ 148 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA_L[ 148 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA_L[ 148 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA_L[ 148 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA_L[ 148 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA_L[ 148 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA_L[ 148 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA_L[ 148 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA_L[ 148 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA_L[ 148 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA_L[ 148 + 21903 ] ;
  mBY[ 148 + 149*idy ] = (mBY[ 148 + 149*idy ] - sum_i ) / mA_L[ 22200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System
// Solve U System - Row 148
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  mBY[ 148 + 149*idy ] = (mBY[ 148 + 149*idy ] - sum_i ) / mA[ 22200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 147
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 147 + 22052 ] ;
  mBY[ 147 + 149*idy ] = (mBY[ 147 + 149*idy ] - sum_i ) / mA[ 22050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 146
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 146 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 146 + 22052 ] ;
  mBY[ 146 + 149*idy ] = (mBY[ 146 + 149*idy ] - sum_i ) / mA[ 21900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 145
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 145 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 145 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 145 + 22052 ] ;
  mBY[ 145 + 149*idy ] = (mBY[ 145 + 149*idy ] - sum_i ) / mA[ 21750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 144
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 144 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 144 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 144 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 144 + 22052 ] ;
  mBY[ 144 + 149*idy ] = (mBY[ 144 + 149*idy ] - sum_i ) / mA[ 21600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 143
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 143 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 143 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 143 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 143 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 143 + 22052 ] ;
  mBY[ 143 + 149*idy ] = (mBY[ 143 + 149*idy ] - sum_i ) / mA[ 21450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 142
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 142 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 142 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 142 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 142 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 142 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 142 + 22052 ] ;
  mBY[ 142 + 149*idy ] = (mBY[ 142 + 149*idy ] - sum_i ) / mA[ 21300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 141
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 141 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 141 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 141 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 141 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 141 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 141 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 141 + 22052 ] ;
  mBY[ 141 + 149*idy ] = (mBY[ 141 + 149*idy ] - sum_i ) / mA[ 21150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 140
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 140 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 140 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 140 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 140 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 140 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 140 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 140 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 140 + 22052 ] ;
  mBY[ 140 + 149*idy ] = (mBY[ 140 + 149*idy ] - sum_i ) / mA[ 21000 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 139
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 139 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 139 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 139 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 139 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 139 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 139 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 139 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 139 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 139 + 22052 ] ;
  mBY[ 139 + 149*idy ] = (mBY[ 139 + 149*idy ] - sum_i ) / mA[ 20850 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 138
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 138 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 138 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 138 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 138 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 138 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 138 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 138 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 138 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 138 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 138 + 22052 ] ;
  mBY[ 138 + 149*idy ] = (mBY[ 138 + 149*idy ] - sum_i ) / mA[ 20700 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 137
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 137 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 137 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 137 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 137 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 137 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 137 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 137 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 137 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 137 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 137 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 137 + 22052 ] ;
  mBY[ 137 + 149*idy ] = (mBY[ 137 + 149*idy ] - sum_i ) / mA[ 20550 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 136
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 136 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 136 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 136 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 136 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 136 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 136 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 136 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 136 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 136 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 136 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 136 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 136 + 22052 ] ;
  mBY[ 136 + 149*idy ] = (mBY[ 136 + 149*idy ] - sum_i ) / mA[ 20400 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 135
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 135 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 135 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 135 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 135 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 135 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 135 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 135 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 135 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 135 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 135 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 135 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 135 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 135 + 22052 ] ;
  mBY[ 135 + 149*idy ] = (mBY[ 135 + 149*idy ] - sum_i ) / mA[ 20250 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 134
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 134 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 134 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 134 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 134 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 134 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 134 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 134 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 134 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 134 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 134 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 134 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 134 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 134 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 134 + 22052 ] ;
  mBY[ 134 + 149*idy ] = (mBY[ 134 + 149*idy ] - sum_i ) / mA[ 20100 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 133
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 133 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 133 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 133 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 133 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 133 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 133 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 133 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 133 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 133 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 133 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 133 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 133 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 133 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 133 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 133 + 22052 ] ;
  mBY[ 133 + 149*idy ] = (mBY[ 133 + 149*idy ] - sum_i ) / mA[ 19950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 132
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 132 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 132 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 132 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 132 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 132 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 132 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 132 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 132 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 132 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 132 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 132 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 132 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 132 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 132 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 132 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 132 + 22052 ] ;
  mBY[ 132 + 149*idy ] = (mBY[ 132 + 149*idy ] - sum_i ) / mA[ 19800 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 131
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 131 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 131 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 131 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 131 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 131 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 131 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 131 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 131 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 131 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 131 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 131 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 131 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 131 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 131 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 131 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 131 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 131 + 22052 ] ;
  mBY[ 131 + 149*idy ] = (mBY[ 131 + 149*idy ] - sum_i ) / mA[ 19650 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 130
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 130 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 130 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 130 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 130 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 130 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 130 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 130 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 130 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 130 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 130 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 130 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 130 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 130 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 130 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 130 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 130 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 130 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 130 + 22052 ] ;
  mBY[ 130 + 149*idy ] = (mBY[ 130 + 149*idy ] - sum_i ) / mA[ 19500 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 129
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 129 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 129 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 129 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 129 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 129 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 129 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 129 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 129 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 129 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 129 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 129 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 129 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 129 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 129 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 129 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 129 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 129 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 129 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 129 + 22052 ] ;
  mBY[ 129 + 149*idy ] = (mBY[ 129 + 149*idy ] - sum_i ) / mA[ 19350 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 128
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 128 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 128 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 128 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 128 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 128 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 128 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 128 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 128 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 128 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 128 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 128 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 128 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 128 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 128 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 128 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 128 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 128 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 128 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 128 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 128 + 22052 ] ;
  mBY[ 128 + 149*idy ] = (mBY[ 128 + 149*idy ] - sum_i ) / mA[ 19200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 127
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 127 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 127 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 127 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 127 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 127 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 127 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 127 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 127 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 127 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 127 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 127 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 127 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 127 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 127 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 127 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 127 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 127 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 127 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 127 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 127 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 127 + 22052 ] ;
  mBY[ 127 + 149*idy ] = (mBY[ 127 + 149*idy ] - sum_i ) / mA[ 19050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 126
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 126 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 126 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 126 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 126 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 126 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 126 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 126 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 126 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 126 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 126 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 126 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 126 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 126 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 126 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 126 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 126 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 126 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 126 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 126 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 126 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 126 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 126 + 22052 ] ;
  mBY[ 126 + 149*idy ] = (mBY[ 126 + 149*idy ] - sum_i ) / mA[ 18900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 125
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 125 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 125 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 125 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 125 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 125 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 125 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 125 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 125 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 125 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 125 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 125 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 125 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 125 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 125 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 125 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 125 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 125 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 125 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 125 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 125 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 125 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 125 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 125 + 22052 ] ;
  mBY[ 125 + 149*idy ] = (mBY[ 125 + 149*idy ] - sum_i ) / mA[ 18750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 124
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 124 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 124 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 124 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 124 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 124 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 124 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 124 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 124 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 124 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 124 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 124 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 124 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 124 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 124 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 124 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 124 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 124 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 124 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 124 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 124 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 124 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 124 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 124 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 124 + 22052 ] ;
  mBY[ 124 + 149*idy ] = (mBY[ 124 + 149*idy ] - sum_i ) / mA[ 18600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 123
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 123 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 123 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 123 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 123 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 123 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 123 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 123 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 123 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 123 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 123 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 123 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 123 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 123 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 123 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 123 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 123 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 123 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 123 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 123 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 123 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 123 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 123 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 123 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 123 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 123 + 22052 ] ;
  mBY[ 123 + 149*idy ] = (mBY[ 123 + 149*idy ] - sum_i ) / mA[ 18450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 122
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 122 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 122 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 122 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 122 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 122 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 122 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 122 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 122 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 122 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 122 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 122 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 122 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 122 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 122 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 122 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 122 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 122 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 122 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 122 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 122 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 122 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 122 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 122 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 122 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 122 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 122 + 22052 ] ;
  mBY[ 122 + 149*idy ] = (mBY[ 122 + 149*idy ] - sum_i ) / mA[ 18300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 121
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 121 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 121 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 121 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 121 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 121 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 121 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 121 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 121 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 121 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 121 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 121 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 121 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 121 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 121 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 121 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 121 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 121 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 121 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 121 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 121 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 121 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 121 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 121 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 121 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 121 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 121 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 121 + 22052 ] ;
  mBY[ 121 + 149*idy ] = (mBY[ 121 + 149*idy ] - sum_i ) / mA[ 18150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 120
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 120 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 120 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 120 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 120 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 120 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 120 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 120 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 120 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 120 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 120 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 120 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 120 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 120 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 120 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 120 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 120 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 120 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 120 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 120 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 120 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 120 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 120 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 120 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 120 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 120 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 120 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 120 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 120 + 22052 ] ;
  mBY[ 120 + 149*idy ] = (mBY[ 120 + 149*idy ] - sum_i ) / mA[ 18000 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 119
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 119 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 119 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 119 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 119 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 119 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 119 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 119 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 119 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 119 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 119 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 119 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 119 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 119 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 119 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 119 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 119 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 119 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 119 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 119 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 119 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 119 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 119 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 119 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 119 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 119 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 119 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 119 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 119 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 119 + 22052 ] ;
  mBY[ 119 + 149*idy ] = (mBY[ 119 + 149*idy ] - sum_i ) / mA[ 17850 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 118
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 118 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 118 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 118 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 118 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 118 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 118 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 118 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 118 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 118 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 118 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 118 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 118 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 118 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 118 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 118 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 118 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 118 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 118 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 118 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 118 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 118 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 118 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 118 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 118 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 118 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 118 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 118 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 118 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 118 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 118 + 22052 ] ;
  mBY[ 118 + 149*idy ] = (mBY[ 118 + 149*idy ] - sum_i ) / mA[ 17700 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 117
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 117 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 117 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 117 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 117 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 117 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 117 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 117 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 117 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 117 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 117 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 117 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 117 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 117 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 117 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 117 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 117 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 117 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 117 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 117 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 117 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 117 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 117 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 117 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 117 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 117 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 117 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 117 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 117 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 117 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 117 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 117 + 22052 ] ;
  mBY[ 117 + 149*idy ] = (mBY[ 117 + 149*idy ] - sum_i ) / mA[ 17550 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 116
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 116 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 116 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 116 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 116 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 116 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 116 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 116 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 116 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 116 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 116 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 116 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 116 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 116 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 116 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 116 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 116 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 116 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 116 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 116 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 116 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 116 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 116 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 116 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 116 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 116 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 116 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 116 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 116 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 116 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 116 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 116 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 116 + 22052 ] ;
  mBY[ 116 + 149*idy ] = (mBY[ 116 + 149*idy ] - sum_i ) / mA[ 17400 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 115
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 115 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 115 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 115 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 115 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 115 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 115 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 115 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 115 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 115 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 115 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 115 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 115 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 115 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 115 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 115 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 115 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 115 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 115 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 115 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 115 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 115 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 115 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 115 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 115 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 115 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 115 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 115 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 115 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 115 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 115 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 115 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 115 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 115 + 22052 ] ;
  mBY[ 115 + 149*idy ] = (mBY[ 115 + 149*idy ] - sum_i ) / mA[ 17250 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 114
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 114 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 114 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 114 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 114 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 114 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 114 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 114 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 114 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 114 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 114 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 114 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 114 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 114 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 114 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 114 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 114 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 114 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 114 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 114 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 114 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 114 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 114 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 114 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 114 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 114 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 114 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 114 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 114 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 114 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 114 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 114 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 114 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 114 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 114 + 22052 ] ;
  mBY[ 114 + 149*idy ] = (mBY[ 114 + 149*idy ] - sum_i ) / mA[ 17100 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 113
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 113 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 113 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 113 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 113 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 113 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 113 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 113 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 113 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 113 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 113 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 113 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 113 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 113 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 113 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 113 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 113 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 113 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 113 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 113 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 113 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 113 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 113 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 113 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 113 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 113 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 113 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 113 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 113 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 113 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 113 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 113 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 113 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 113 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 113 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 113 + 22052 ] ;
  mBY[ 113 + 149*idy ] = (mBY[ 113 + 149*idy ] - sum_i ) / mA[ 16950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 112
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 112 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 112 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 112 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 112 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 112 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 112 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 112 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 112 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 112 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 112 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 112 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 112 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 112 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 112 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 112 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 112 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 112 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 112 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 112 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 112 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 112 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 112 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 112 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 112 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 112 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 112 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 112 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 112 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 112 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 112 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 112 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 112 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 112 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 112 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 112 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 112 + 22052 ] ;
  mBY[ 112 + 149*idy ] = (mBY[ 112 + 149*idy ] - sum_i ) / mA[ 16800 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 111
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 111 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 111 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 111 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 111 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 111 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 111 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 111 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 111 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 111 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 111 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 111 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 111 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 111 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 111 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 111 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 111 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 111 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 111 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 111 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 111 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 111 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 111 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 111 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 111 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 111 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 111 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 111 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 111 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 111 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 111 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 111 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 111 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 111 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 111 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 111 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 111 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 111 + 22052 ] ;
  mBY[ 111 + 149*idy ] = (mBY[ 111 + 149*idy ] - sum_i ) / mA[ 16650 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 110
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 110 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 110 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 110 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 110 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 110 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 110 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 110 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 110 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 110 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 110 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 110 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 110 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 110 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 110 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 110 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 110 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 110 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 110 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 110 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 110 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 110 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 110 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 110 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 110 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 110 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 110 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 110 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 110 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 110 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 110 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 110 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 110 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 110 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 110 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 110 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 110 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 110 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 110 + 22052 ] ;
  mBY[ 110 + 149*idy ] = (mBY[ 110 + 149*idy ] - sum_i ) / mA[ 16500 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 109
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 109 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 109 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 109 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 109 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 109 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 109 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 109 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 109 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 109 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 109 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 109 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 109 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 109 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 109 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 109 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 109 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 109 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 109 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 109 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 109 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 109 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 109 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 109 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 109 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 109 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 109 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 109 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 109 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 109 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 109 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 109 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 109 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 109 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 109 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 109 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 109 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 109 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 109 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 109 + 22052 ] ;
  mBY[ 109 + 149*idy ] = (mBY[ 109 + 149*idy ] - sum_i ) / mA[ 16350 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 108
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 108 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 108 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 108 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 108 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 108 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 108 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 108 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 108 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 108 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 108 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 108 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 108 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 108 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 108 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 108 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 108 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 108 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 108 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 108 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 108 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 108 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 108 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 108 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 108 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 108 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 108 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 108 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 108 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 108 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 108 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 108 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 108 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 108 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 108 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 108 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 108 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 108 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 108 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 108 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 108 + 22052 ] ;
  mBY[ 108 + 149*idy ] = (mBY[ 108 + 149*idy ] - sum_i ) / mA[ 16200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 107
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 107 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 107 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 107 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 107 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 107 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 107 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 107 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 107 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 107 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 107 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 107 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 107 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 107 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 107 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 107 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 107 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 107 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 107 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 107 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 107 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 107 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 107 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 107 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 107 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 107 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 107 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 107 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 107 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 107 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 107 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 107 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 107 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 107 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 107 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 107 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 107 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 107 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 107 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 107 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 107 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 107 + 22052 ] ;
  mBY[ 107 + 149*idy ] = (mBY[ 107 + 149*idy ] - sum_i ) / mA[ 16050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 106
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 106 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 106 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 106 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 106 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 106 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 106 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 106 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 106 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 106 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 106 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 106 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 106 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 106 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 106 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 106 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 106 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 106 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 106 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 106 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 106 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 106 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 106 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 106 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 106 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 106 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 106 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 106 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 106 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 106 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 106 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 106 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 106 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 106 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 106 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 106 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 106 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 106 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 106 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 106 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 106 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 106 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 106 + 22052 ] ;
  mBY[ 106 + 149*idy ] = (mBY[ 106 + 149*idy ] - sum_i ) / mA[ 15900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 105
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 105 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 105 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 105 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 105 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 105 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 105 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 105 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 105 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 105 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 105 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 105 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 105 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 105 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 105 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 105 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 105 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 105 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 105 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 105 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 105 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 105 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 105 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 105 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 105 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 105 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 105 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 105 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 105 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 105 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 105 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 105 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 105 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 105 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 105 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 105 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 105 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 105 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 105 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 105 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 105 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 105 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 105 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 105 + 22052 ] ;
  mBY[ 105 + 149*idy ] = (mBY[ 105 + 149*idy ] - sum_i ) / mA[ 15750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 104
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 104 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 104 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 104 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 104 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 104 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 104 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 104 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 104 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 104 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 104 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 104 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 104 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 104 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 104 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 104 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 104 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 104 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 104 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 104 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 104 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 104 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 104 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 104 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 104 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 104 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 104 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 104 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 104 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 104 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 104 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 104 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 104 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 104 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 104 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 104 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 104 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 104 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 104 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 104 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 104 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 104 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 104 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 104 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 104 + 22052 ] ;
  mBY[ 104 + 149*idy ] = (mBY[ 104 + 149*idy ] - sum_i ) / mA[ 15600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 103
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 103 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 103 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 103 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 103 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 103 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 103 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 103 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 103 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 103 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 103 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 103 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 103 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 103 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 103 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 103 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 103 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 103 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 103 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 103 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 103 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 103 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 103 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 103 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 103 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 103 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 103 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 103 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 103 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 103 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 103 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 103 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 103 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 103 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 103 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 103 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 103 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 103 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 103 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 103 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 103 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 103 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 103 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 103 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 103 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 103 + 22052 ] ;
  mBY[ 103 + 149*idy ] = (mBY[ 103 + 149*idy ] - sum_i ) / mA[ 15450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 102
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 102 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 102 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 102 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 102 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 102 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 102 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 102 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 102 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 102 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 102 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 102 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 102 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 102 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 102 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 102 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 102 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 102 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 102 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 102 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 102 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 102 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 102 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 102 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 102 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 102 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 102 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 102 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 102 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 102 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 102 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 102 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 102 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 102 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 102 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 102 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 102 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 102 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 102 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 102 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 102 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 102 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 102 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 102 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 102 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 102 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 102 + 22052 ] ;
  mBY[ 102 + 149*idy ] = (mBY[ 102 + 149*idy ] - sum_i ) / mA[ 15300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 101
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 101 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 101 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 101 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 101 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 101 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 101 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 101 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 101 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 101 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 101 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 101 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 101 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 101 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 101 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 101 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 101 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 101 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 101 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 101 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 101 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 101 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 101 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 101 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 101 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 101 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 101 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 101 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 101 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 101 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 101 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 101 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 101 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 101 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 101 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 101 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 101 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 101 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 101 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 101 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 101 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 101 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 101 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 101 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 101 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 101 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 101 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 101 + 22052 ] ;
  mBY[ 101 + 149*idy ] = (mBY[ 101 + 149*idy ] - sum_i ) / mA[ 15150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 100
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 100 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 100 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 100 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 100 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 100 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 100 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 100 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 100 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 100 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 100 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 100 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 100 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 100 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 100 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 100 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 100 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 100 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 100 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 100 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 100 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 100 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 100 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 100 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 100 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 100 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 100 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 100 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 100 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 100 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 100 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 100 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 100 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 100 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 100 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 100 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 100 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 100 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 100 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 100 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 100 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 100 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 100 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 100 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 100 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 100 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 100 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 100 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 100 + 22052 ] ;
  mBY[ 100 + 149*idy ] = (mBY[ 100 + 149*idy ] - sum_i ) / mA[ 15000 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 99
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 99 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 99 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 99 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 99 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 99 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 99 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 99 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 99 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 99 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 99 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 99 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 99 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 99 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 99 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 99 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 99 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 99 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 99 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 99 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 99 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 99 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 99 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 99 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 99 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 99 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 99 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 99 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 99 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 99 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 99 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 99 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 99 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 99 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 99 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 99 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 99 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 99 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 99 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 99 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 99 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 99 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 99 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 99 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 99 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 99 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 99 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 99 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 99 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 99 + 22052 ] ;
  mBY[ 99 + 149*idy ] = (mBY[ 99 + 149*idy ] - sum_i ) / mA[ 14850 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 98
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 98 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 98 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 98 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 98 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 98 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 98 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 98 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 98 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 98 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 98 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 98 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 98 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 98 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 98 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 98 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 98 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 98 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 98 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 98 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 98 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 98 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 98 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 98 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 98 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 98 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 98 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 98 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 98 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 98 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 98 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 98 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 98 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 98 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 98 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 98 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 98 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 98 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 98 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 98 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 98 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 98 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 98 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 98 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 98 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 98 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 98 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 98 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 98 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 98 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 98 + 22052 ] ;
  mBY[ 98 + 149*idy ] = (mBY[ 98 + 149*idy ] - sum_i ) / mA[ 14700 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 97
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 97 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 97 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 97 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 97 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 97 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 97 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 97 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 97 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 97 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 97 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 97 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 97 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 97 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 97 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 97 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 97 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 97 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 97 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 97 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 97 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 97 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 97 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 97 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 97 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 97 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 97 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 97 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 97 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 97 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 97 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 97 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 97 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 97 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 97 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 97 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 97 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 97 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 97 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 97 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 97 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 97 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 97 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 97 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 97 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 97 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 97 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 97 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 97 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 97 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 97 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 97 + 22052 ] ;
  mBY[ 97 + 149*idy ] = (mBY[ 97 + 149*idy ] - sum_i ) / mA[ 14550 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 96
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 96 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 96 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 96 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 96 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 96 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 96 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 96 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 96 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 96 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 96 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 96 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 96 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 96 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 96 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 96 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 96 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 96 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 96 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 96 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 96 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 96 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 96 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 96 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 96 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 96 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 96 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 96 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 96 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 96 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 96 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 96 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 96 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 96 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 96 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 96 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 96 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 96 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 96 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 96 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 96 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 96 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 96 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 96 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 96 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 96 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 96 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 96 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 96 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 96 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 96 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 96 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 96 + 22052 ] ;
  mBY[ 96 + 149*idy ] = (mBY[ 96 + 149*idy ] - sum_i ) / mA[ 14400 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 95
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 95 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 95 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 95 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 95 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 95 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 95 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 95 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 95 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 95 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 95 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 95 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 95 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 95 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 95 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 95 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 95 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 95 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 95 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 95 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 95 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 95 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 95 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 95 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 95 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 95 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 95 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 95 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 95 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 95 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 95 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 95 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 95 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 95 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 95 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 95 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 95 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 95 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 95 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 95 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 95 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 95 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 95 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 95 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 95 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 95 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 95 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 95 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 95 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 95 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 95 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 95 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 95 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 95 + 22052 ] ;
  mBY[ 95 + 149*idy ] = (mBY[ 95 + 149*idy ] - sum_i ) / mA[ 14250 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 94
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 94 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 94 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 94 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 94 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 94 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 94 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 94 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 94 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 94 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 94 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 94 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 94 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 94 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 94 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 94 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 94 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 94 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 94 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 94 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 94 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 94 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 94 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 94 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 94 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 94 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 94 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 94 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 94 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 94 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 94 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 94 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 94 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 94 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 94 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 94 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 94 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 94 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 94 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 94 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 94 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 94 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 94 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 94 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 94 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 94 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 94 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 94 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 94 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 94 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 94 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 94 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 94 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 94 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 94 + 22052 ] ;
  mBY[ 94 + 149*idy ] = (mBY[ 94 + 149*idy ] - sum_i ) / mA[ 14100 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 93
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 93 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 93 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 93 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 93 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 93 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 93 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 93 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 93 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 93 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 93 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 93 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 93 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 93 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 93 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 93 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 93 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 93 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 93 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 93 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 93 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 93 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 93 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 93 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 93 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 93 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 93 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 93 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 93 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 93 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 93 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 93 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 93 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 93 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 93 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 93 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 93 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 93 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 93 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 93 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 93 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 93 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 93 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 93 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 93 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 93 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 93 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 93 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 93 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 93 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 93 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 93 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 93 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 93 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 93 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 93 + 22052 ] ;
  mBY[ 93 + 149*idy ] = (mBY[ 93 + 149*idy ] - sum_i ) / mA[ 13950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 92
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 92 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 92 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 92 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 92 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 92 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 92 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 92 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 92 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 92 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 92 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 92 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 92 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 92 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 92 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 92 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 92 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 92 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 92 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 92 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 92 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 92 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 92 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 92 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 92 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 92 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 92 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 92 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 92 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 92 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 92 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 92 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 92 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 92 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 92 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 92 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 92 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 92 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 92 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 92 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 92 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 92 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 92 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 92 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 92 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 92 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 92 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 92 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 92 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 92 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 92 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 92 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 92 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 92 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 92 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 92 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 92 + 22052 ] ;
  mBY[ 92 + 149*idy ] = (mBY[ 92 + 149*idy ] - sum_i ) / mA[ 13800 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 91
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 91 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 91 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 91 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 91 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 91 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 91 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 91 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 91 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 91 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 91 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 91 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 91 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 91 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 91 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 91 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 91 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 91 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 91 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 91 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 91 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 91 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 91 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 91 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 91 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 91 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 91 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 91 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 91 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 91 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 91 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 91 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 91 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 91 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 91 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 91 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 91 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 91 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 91 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 91 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 91 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 91 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 91 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 91 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 91 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 91 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 91 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 91 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 91 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 91 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 91 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 91 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 91 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 91 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 91 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 91 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 91 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 91 + 22052 ] ;
  mBY[ 91 + 149*idy ] = (mBY[ 91 + 149*idy ] - sum_i ) / mA[ 13650 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 90
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 90 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 90 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 90 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 90 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 90 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 90 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 90 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 90 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 90 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 90 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 90 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 90 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 90 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 90 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 90 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 90 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 90 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 90 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 90 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 90 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 90 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 90 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 90 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 90 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 90 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 90 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 90 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 90 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 90 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 90 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 90 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 90 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 90 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 90 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 90 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 90 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 90 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 90 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 90 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 90 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 90 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 90 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 90 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 90 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 90 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 90 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 90 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 90 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 90 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 90 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 90 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 90 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 90 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 90 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 90 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 90 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 90 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 90 + 22052 ] ;
  mBY[ 90 + 149*idy ] = (mBY[ 90 + 149*idy ] - sum_i ) / mA[ 13500 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 89
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 89 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 89 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 89 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 89 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 89 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 89 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 89 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 89 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 89 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 89 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 89 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 89 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 89 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 89 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 89 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 89 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 89 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 89 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 89 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 89 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 89 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 89 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 89 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 89 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 89 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 89 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 89 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 89 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 89 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 89 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 89 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 89 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 89 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 89 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 89 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 89 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 89 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 89 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 89 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 89 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 89 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 89 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 89 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 89 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 89 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 89 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 89 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 89 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 89 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 89 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 89 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 89 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 89 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 89 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 89 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 89 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 89 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 89 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 89 + 22052 ] ;
  mBY[ 89 + 149*idy ] = (mBY[ 89 + 149*idy ] - sum_i ) / mA[ 13350 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 88
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 88 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 88 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 88 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 88 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 88 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 88 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 88 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 88 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 88 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 88 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 88 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 88 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 88 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 88 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 88 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 88 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 88 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 88 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 88 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 88 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 88 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 88 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 88 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 88 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 88 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 88 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 88 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 88 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 88 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 88 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 88 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 88 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 88 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 88 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 88 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 88 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 88 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 88 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 88 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 88 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 88 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 88 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 88 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 88 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 88 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 88 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 88 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 88 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 88 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 88 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 88 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 88 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 88 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 88 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 88 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 88 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 88 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 88 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 88 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 88 + 22052 ] ;
  mBY[ 88 + 149*idy ] = (mBY[ 88 + 149*idy ] - sum_i ) / mA[ 13200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 87
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 87 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 87 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 87 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 87 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 87 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 87 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 87 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 87 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 87 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 87 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 87 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 87 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 87 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 87 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 87 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 87 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 87 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 87 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 87 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 87 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 87 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 87 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 87 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 87 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 87 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 87 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 87 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 87 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 87 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 87 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 87 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 87 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 87 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 87 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 87 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 87 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 87 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 87 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 87 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 87 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 87 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 87 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 87 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 87 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 87 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 87 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 87 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 87 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 87 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 87 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 87 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 87 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 87 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 87 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 87 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 87 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 87 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 87 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 87 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 87 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 87 + 22052 ] ;
  mBY[ 87 + 149*idy ] = (mBY[ 87 + 149*idy ] - sum_i ) / mA[ 13050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 86
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 86 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 86 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 86 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 86 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 86 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 86 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 86 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 86 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 86 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 86 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 86 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 86 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 86 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 86 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 86 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 86 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 86 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 86 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 86 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 86 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 86 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 86 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 86 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 86 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 86 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 86 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 86 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 86 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 86 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 86 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 86 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 86 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 86 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 86 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 86 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 86 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 86 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 86 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 86 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 86 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 86 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 86 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 86 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 86 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 86 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 86 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 86 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 86 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 86 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 86 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 86 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 86 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 86 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 86 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 86 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 86 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 86 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 86 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 86 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 86 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 86 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 86 + 22052 ] ;
  mBY[ 86 + 149*idy ] = (mBY[ 86 + 149*idy ] - sum_i ) / mA[ 12900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 85
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 85 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 85 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 85 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 85 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 85 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 85 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 85 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 85 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 85 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 85 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 85 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 85 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 85 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 85 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 85 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 85 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 85 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 85 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 85 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 85 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 85 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 85 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 85 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 85 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 85 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 85 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 85 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 85 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 85 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 85 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 85 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 85 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 85 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 85 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 85 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 85 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 85 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 85 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 85 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 85 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 85 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 85 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 85 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 85 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 85 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 85 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 85 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 85 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 85 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 85 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 85 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 85 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 85 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 85 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 85 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 85 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 85 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 85 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 85 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 85 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 85 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 85 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 85 + 22052 ] ;
  mBY[ 85 + 149*idy ] = (mBY[ 85 + 149*idy ] - sum_i ) / mA[ 12750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 84
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 84 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 84 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 84 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 84 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 84 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 84 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 84 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 84 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 84 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 84 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 84 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 84 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 84 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 84 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 84 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 84 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 84 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 84 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 84 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 84 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 84 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 84 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 84 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 84 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 84 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 84 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 84 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 84 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 84 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 84 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 84 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 84 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 84 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 84 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 84 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 84 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 84 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 84 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 84 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 84 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 84 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 84 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 84 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 84 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 84 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 84 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 84 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 84 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 84 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 84 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 84 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 84 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 84 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 84 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 84 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 84 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 84 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 84 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 84 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 84 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 84 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 84 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 84 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 84 + 22052 ] ;
  mBY[ 84 + 149*idy ] = (mBY[ 84 + 149*idy ] - sum_i ) / mA[ 12600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 83
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 83 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 83 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 83 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 83 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 83 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 83 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 83 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 83 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 83 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 83 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 83 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 83 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 83 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 83 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 83 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 83 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 83 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 83 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 83 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 83 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 83 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 83 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 83 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 83 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 83 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 83 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 83 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 83 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 83 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 83 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 83 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 83 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 83 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 83 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 83 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 83 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 83 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 83 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 83 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 83 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 83 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 83 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 83 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 83 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 83 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 83 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 83 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 83 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 83 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 83 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 83 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 83 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 83 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 83 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 83 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 83 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 83 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 83 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 83 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 83 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 83 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 83 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 83 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 83 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 83 + 22052 ] ;
  mBY[ 83 + 149*idy ] = (mBY[ 83 + 149*idy ] - sum_i ) / mA[ 12450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 82
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 82 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 82 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 82 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 82 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 82 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 82 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 82 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 82 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 82 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 82 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 82 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 82 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 82 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 82 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 82 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 82 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 82 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 82 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 82 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 82 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 82 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 82 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 82 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 82 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 82 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 82 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 82 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 82 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 82 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 82 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 82 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 82 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 82 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 82 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 82 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 82 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 82 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 82 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 82 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 82 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 82 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 82 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 82 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 82 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 82 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 82 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 82 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 82 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 82 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 82 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 82 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 82 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 82 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 82 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 82 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 82 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 82 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 82 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 82 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 82 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 82 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 82 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 82 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 82 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 82 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 82 + 22052 ] ;
  mBY[ 82 + 149*idy ] = (mBY[ 82 + 149*idy ] - sum_i ) / mA[ 12300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 81
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 81 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 81 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 81 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 81 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 81 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 81 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 81 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 81 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 81 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 81 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 81 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 81 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 81 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 81 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 81 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 81 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 81 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 81 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 81 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 81 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 81 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 81 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 81 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 81 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 81 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 81 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 81 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 81 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 81 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 81 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 81 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 81 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 81 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 81 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 81 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 81 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 81 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 81 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 81 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 81 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 81 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 81 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 81 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 81 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 81 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 81 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 81 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 81 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 81 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 81 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 81 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 81 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 81 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 81 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 81 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 81 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 81 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 81 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 81 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 81 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 81 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 81 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 81 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 81 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 81 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 81 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 81 + 22052 ] ;
  mBY[ 81 + 149*idy ] = (mBY[ 81 + 149*idy ] - sum_i ) / mA[ 12150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 80
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 80 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 80 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 80 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 80 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 80 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 80 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 80 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 80 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 80 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 80 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 80 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 80 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 80 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 80 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 80 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 80 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 80 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 80 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 80 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 80 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 80 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 80 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 80 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 80 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 80 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 80 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 80 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 80 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 80 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 80 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 80 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 80 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 80 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 80 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 80 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 80 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 80 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 80 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 80 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 80 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 80 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 80 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 80 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 80 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 80 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 80 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 80 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 80 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 80 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 80 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 80 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 80 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 80 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 80 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 80 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 80 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 80 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 80 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 80 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 80 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 80 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 80 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 80 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 80 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 80 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 80 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 80 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 80 + 22052 ] ;
  mBY[ 80 + 149*idy ] = (mBY[ 80 + 149*idy ] - sum_i ) / mA[ 12000 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 79
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 79 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 79 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 79 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 79 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 79 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 79 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 79 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 79 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 79 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 79 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 79 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 79 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 79 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 79 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 79 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 79 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 79 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 79 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 79 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 79 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 79 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 79 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 79 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 79 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 79 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 79 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 79 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 79 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 79 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 79 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 79 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 79 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 79 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 79 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 79 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 79 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 79 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 79 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 79 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 79 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 79 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 79 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 79 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 79 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 79 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 79 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 79 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 79 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 79 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 79 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 79 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 79 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 79 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 79 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 79 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 79 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 79 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 79 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 79 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 79 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 79 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 79 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 79 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 79 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 79 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 79 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 79 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 79 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 79 + 22052 ] ;
  mBY[ 79 + 149*idy ] = (mBY[ 79 + 149*idy ] - sum_i ) / mA[ 11850 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 78
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 78 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 78 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 78 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 78 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 78 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 78 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 78 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 78 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 78 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 78 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 78 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 78 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 78 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 78 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 78 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 78 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 78 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 78 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 78 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 78 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 78 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 78 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 78 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 78 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 78 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 78 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 78 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 78 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 78 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 78 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 78 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 78 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 78 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 78 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 78 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 78 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 78 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 78 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 78 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 78 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 78 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 78 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 78 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 78 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 78 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 78 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 78 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 78 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 78 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 78 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 78 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 78 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 78 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 78 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 78 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 78 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 78 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 78 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 78 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 78 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 78 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 78 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 78 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 78 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 78 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 78 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 78 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 78 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 78 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 78 + 22052 ] ;
  mBY[ 78 + 149*idy ] = (mBY[ 78 + 149*idy ] - sum_i ) / mA[ 11700 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 77
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 77 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 77 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 77 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 77 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 77 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 77 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 77 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 77 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 77 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 77 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 77 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 77 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 77 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 77 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 77 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 77 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 77 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 77 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 77 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 77 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 77 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 77 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 77 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 77 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 77 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 77 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 77 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 77 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 77 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 77 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 77 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 77 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 77 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 77 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 77 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 77 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 77 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 77 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 77 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 77 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 77 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 77 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 77 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 77 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 77 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 77 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 77 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 77 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 77 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 77 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 77 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 77 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 77 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 77 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 77 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 77 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 77 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 77 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 77 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 77 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 77 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 77 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 77 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 77 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 77 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 77 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 77 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 77 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 77 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 77 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 77 + 22052 ] ;
  mBY[ 77 + 149*idy ] = (mBY[ 77 + 149*idy ] - sum_i ) / mA[ 11550 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 76
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 76 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 76 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 76 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 76 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 76 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 76 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 76 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 76 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 76 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 76 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 76 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 76 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 76 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 76 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 76 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 76 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 76 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 76 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 76 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 76 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 76 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 76 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 76 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 76 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 76 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 76 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 76 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 76 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 76 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 76 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 76 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 76 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 76 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 76 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 76 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 76 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 76 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 76 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 76 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 76 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 76 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 76 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 76 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 76 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 76 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 76 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 76 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 76 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 76 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 76 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 76 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 76 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 76 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 76 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 76 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 76 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 76 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 76 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 76 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 76 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 76 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 76 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 76 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 76 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 76 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 76 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 76 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 76 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 76 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 76 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 76 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 76 + 22052 ] ;
  mBY[ 76 + 149*idy ] = (mBY[ 76 + 149*idy ] - sum_i ) / mA[ 11400 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 75
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 75 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 75 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 75 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 75 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 75 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 75 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 75 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 75 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 75 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 75 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 75 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 75 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 75 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 75 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 75 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 75 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 75 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 75 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 75 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 75 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 75 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 75 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 75 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 75 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 75 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 75 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 75 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 75 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 75 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 75 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 75 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 75 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 75 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 75 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 75 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 75 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 75 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 75 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 75 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 75 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 75 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 75 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 75 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 75 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 75 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 75 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 75 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 75 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 75 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 75 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 75 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 75 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 75 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 75 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 75 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 75 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 75 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 75 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 75 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 75 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 75 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 75 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 75 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 75 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 75 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 75 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 75 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 75 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 75 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 75 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 75 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 75 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 75 + 22052 ] ;
  mBY[ 75 + 149*idy ] = (mBY[ 75 + 149*idy ] - sum_i ) / mA[ 11250 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 74
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 74 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 74 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 74 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 74 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 74 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 74 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 74 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 74 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 74 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 74 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 74 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 74 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 74 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 74 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 74 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 74 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 74 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 74 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 74 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 74 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 74 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 74 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 74 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 74 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 74 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 74 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 74 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 74 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 74 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 74 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 74 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 74 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 74 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 74 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 74 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 74 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 74 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 74 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 74 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 74 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 74 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 74 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 74 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 74 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 74 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 74 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 74 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 74 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 74 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 74 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 74 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 74 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 74 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 74 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 74 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 74 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 74 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 74 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 74 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 74 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 74 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 74 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 74 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 74 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 74 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 74 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 74 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 74 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 74 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 74 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 74 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 74 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 74 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 74 + 22052 ] ;
  mBY[ 74 + 149*idy ] = (mBY[ 74 + 149*idy ] - sum_i ) / mA[ 11100 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 73
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 73 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 73 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 73 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 73 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 73 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 73 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 73 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 73 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 73 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 73 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 73 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 73 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 73 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 73 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 73 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 73 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 73 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 73 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 73 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 73 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 73 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 73 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 73 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 73 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 73 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 73 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 73 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 73 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 73 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 73 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 73 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 73 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 73 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 73 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 73 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 73 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 73 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 73 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 73 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 73 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 73 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 73 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 73 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 73 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 73 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 73 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 73 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 73 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 73 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 73 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 73 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 73 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 73 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 73 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 73 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 73 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 73 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 73 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 73 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 73 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 73 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 73 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 73 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 73 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 73 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 73 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 73 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 73 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 73 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 73 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 73 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 73 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 73 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 73 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 73 + 22052 ] ;
  mBY[ 73 + 149*idy ] = (mBY[ 73 + 149*idy ] - sum_i ) / mA[ 10950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 72
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 72 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 72 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 72 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 72 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 72 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 72 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 72 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 72 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 72 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 72 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 72 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 72 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 72 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 72 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 72 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 72 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 72 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 72 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 72 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 72 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 72 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 72 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 72 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 72 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 72 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 72 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 72 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 72 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 72 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 72 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 72 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 72 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 72 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 72 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 72 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 72 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 72 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 72 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 72 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 72 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 72 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 72 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 72 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 72 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 72 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 72 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 72 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 72 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 72 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 72 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 72 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 72 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 72 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 72 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 72 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 72 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 72 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 72 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 72 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 72 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 72 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 72 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 72 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 72 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 72 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 72 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 72 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 72 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 72 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 72 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 72 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 72 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 72 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 72 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 72 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 72 + 22052 ] ;
  mBY[ 72 + 149*idy ] = (mBY[ 72 + 149*idy ] - sum_i ) / mA[ 10800 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 71
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 71 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 71 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 71 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 71 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 71 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 71 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 71 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 71 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 71 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 71 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 71 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 71 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 71 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 71 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 71 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 71 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 71 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 71 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 71 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 71 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 71 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 71 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 71 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 71 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 71 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 71 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 71 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 71 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 71 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 71 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 71 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 71 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 71 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 71 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 71 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 71 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 71 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 71 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 71 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 71 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 71 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 71 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 71 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 71 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 71 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 71 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 71 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 71 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 71 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 71 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 71 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 71 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 71 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 71 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 71 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 71 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 71 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 71 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 71 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 71 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 71 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 71 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 71 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 71 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 71 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 71 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 71 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 71 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 71 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 71 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 71 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 71 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 71 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 71 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 71 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 71 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 71 + 22052 ] ;
  mBY[ 71 + 149*idy ] = (mBY[ 71 + 149*idy ] - sum_i ) / mA[ 10650 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 70
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 70 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 70 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 70 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 70 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 70 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 70 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 70 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 70 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 70 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 70 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 70 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 70 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 70 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 70 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 70 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 70 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 70 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 70 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 70 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 70 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 70 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 70 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 70 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 70 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 70 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 70 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 70 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 70 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 70 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 70 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 70 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 70 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 70 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 70 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 70 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 70 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 70 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 70 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 70 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 70 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 70 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 70 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 70 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 70 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 70 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 70 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 70 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 70 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 70 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 70 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 70 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 70 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 70 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 70 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 70 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 70 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 70 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 70 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 70 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 70 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 70 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 70 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 70 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 70 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 70 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 70 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 70 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 70 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 70 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 70 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 70 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 70 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 70 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 70 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 70 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 70 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 70 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 70 + 22052 ] ;
  mBY[ 70 + 149*idy ] = (mBY[ 70 + 149*idy ] - sum_i ) / mA[ 10500 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 69
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 69 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 69 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 69 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 69 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 69 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 69 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 69 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 69 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 69 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 69 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 69 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 69 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 69 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 69 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 69 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 69 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 69 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 69 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 69 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 69 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 69 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 69 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 69 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 69 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 69 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 69 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 69 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 69 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 69 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 69 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 69 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 69 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 69 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 69 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 69 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 69 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 69 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 69 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 69 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 69 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 69 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 69 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 69 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 69 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 69 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 69 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 69 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 69 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 69 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 69 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 69 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 69 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 69 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 69 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 69 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 69 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 69 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 69 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 69 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 69 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 69 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 69 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 69 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 69 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 69 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 69 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 69 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 69 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 69 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 69 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 69 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 69 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 69 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 69 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 69 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 69 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 69 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 69 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 69 + 22052 ] ;
  mBY[ 69 + 149*idy ] = (mBY[ 69 + 149*idy ] - sum_i ) / mA[ 10350 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 68
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 68 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 68 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 68 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 68 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 68 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 68 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 68 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 68 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 68 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 68 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 68 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 68 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 68 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 68 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 68 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 68 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 68 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 68 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 68 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 68 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 68 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 68 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 68 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 68 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 68 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 68 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 68 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 68 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 68 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 68 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 68 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 68 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 68 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 68 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 68 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 68 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 68 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 68 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 68 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 68 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 68 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 68 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 68 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 68 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 68 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 68 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 68 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 68 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 68 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 68 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 68 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 68 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 68 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 68 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 68 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 68 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 68 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 68 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 68 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 68 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 68 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 68 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 68 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 68 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 68 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 68 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 68 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 68 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 68 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 68 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 68 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 68 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 68 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 68 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 68 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 68 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 68 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 68 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 68 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 68 + 22052 ] ;
  mBY[ 68 + 149*idy ] = (mBY[ 68 + 149*idy ] - sum_i ) / mA[ 10200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 67
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 67 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 67 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 67 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 67 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 67 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 67 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 67 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 67 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 67 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 67 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 67 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 67 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 67 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 67 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 67 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 67 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 67 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 67 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 67 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 67 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 67 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 67 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 67 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 67 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 67 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 67 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 67 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 67 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 67 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 67 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 67 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 67 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 67 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 67 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 67 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 67 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 67 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 67 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 67 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 67 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 67 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 67 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 67 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 67 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 67 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 67 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 67 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 67 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 67 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 67 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 67 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 67 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 67 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 67 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 67 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 67 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 67 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 67 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 67 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 67 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 67 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 67 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 67 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 67 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 67 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 67 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 67 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 67 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 67 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 67 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 67 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 67 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 67 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 67 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 67 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 67 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 67 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 67 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 67 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 67 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 67 + 22052 ] ;
  mBY[ 67 + 149*idy ] = (mBY[ 67 + 149*idy ] - sum_i ) / mA[ 10050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 66
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 66 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 66 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 66 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 66 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 66 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 66 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 66 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 66 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 66 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 66 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 66 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 66 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 66 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 66 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 66 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 66 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 66 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 66 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 66 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 66 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 66 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 66 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 66 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 66 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 66 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 66 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 66 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 66 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 66 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 66 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 66 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 66 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 66 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 66 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 66 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 66 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 66 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 66 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 66 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 66 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 66 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 66 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 66 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 66 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 66 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 66 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 66 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 66 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 66 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 66 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 66 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 66 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 66 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 66 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 66 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 66 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 66 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 66 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 66 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 66 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 66 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 66 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 66 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 66 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 66 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 66 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 66 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 66 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 66 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 66 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 66 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 66 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 66 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 66 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 66 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 66 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 66 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 66 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 66 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 66 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 66 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 66 + 22052 ] ;
  mBY[ 66 + 149*idy ] = (mBY[ 66 + 149*idy ] - sum_i ) / mA[ 9900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 65
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 65 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 65 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 65 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 65 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 65 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 65 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 65 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 65 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 65 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 65 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 65 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 65 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 65 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 65 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 65 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 65 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 65 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 65 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 65 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 65 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 65 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 65 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 65 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 65 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 65 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 65 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 65 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 65 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 65 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 65 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 65 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 65 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 65 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 65 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 65 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 65 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 65 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 65 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 65 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 65 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 65 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 65 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 65 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 65 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 65 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 65 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 65 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 65 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 65 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 65 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 65 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 65 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 65 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 65 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 65 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 65 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 65 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 65 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 65 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 65 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 65 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 65 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 65 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 65 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 65 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 65 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 65 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 65 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 65 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 65 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 65 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 65 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 65 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 65 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 65 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 65 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 65 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 65 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 65 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 65 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 65 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 65 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 65 + 22052 ] ;
  mBY[ 65 + 149*idy ] = (mBY[ 65 + 149*idy ] - sum_i ) / mA[ 9750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 64
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 64 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 64 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 64 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 64 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 64 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 64 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 64 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 64 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 64 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 64 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 64 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 64 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 64 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 64 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 64 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 64 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 64 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 64 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 64 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 64 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 64 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 64 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 64 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 64 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 64 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 64 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 64 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 64 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 64 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 64 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 64 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 64 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 64 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 64 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 64 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 64 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 64 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 64 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 64 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 64 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 64 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 64 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 64 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 64 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 64 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 64 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 64 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 64 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 64 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 64 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 64 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 64 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 64 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 64 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 64 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 64 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 64 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 64 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 64 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 64 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 64 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 64 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 64 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 64 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 64 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 64 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 64 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 64 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 64 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 64 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 64 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 64 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 64 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 64 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 64 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 64 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 64 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 64 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 64 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 64 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 64 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 64 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 64 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 64 + 22052 ] ;
  mBY[ 64 + 149*idy ] = (mBY[ 64 + 149*idy ] - sum_i ) / mA[ 9600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 63
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 63 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 63 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 63 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 63 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 63 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 63 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 63 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 63 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 63 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 63 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 63 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 63 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 63 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 63 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 63 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 63 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 63 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 63 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 63 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 63 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 63 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 63 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 63 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 63 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 63 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 63 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 63 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 63 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 63 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 63 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 63 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 63 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 63 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 63 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 63 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 63 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 63 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 63 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 63 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 63 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 63 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 63 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 63 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 63 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 63 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 63 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 63 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 63 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 63 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 63 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 63 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 63 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 63 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 63 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 63 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 63 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 63 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 63 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 63 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 63 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 63 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 63 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 63 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 63 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 63 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 63 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 63 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 63 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 63 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 63 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 63 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 63 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 63 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 63 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 63 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 63 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 63 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 63 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 63 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 63 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 63 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 63 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 63 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 63 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 63 + 22052 ] ;
  mBY[ 63 + 149*idy ] = (mBY[ 63 + 149*idy ] - sum_i ) / mA[ 9450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 62
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 62 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 62 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 62 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 62 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 62 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 62 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 62 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 62 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 62 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 62 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 62 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 62 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 62 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 62 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 62 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 62 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 62 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 62 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 62 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 62 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 62 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 62 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 62 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 62 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 62 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 62 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 62 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 62 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 62 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 62 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 62 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 62 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 62 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 62 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 62 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 62 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 62 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 62 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 62 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 62 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 62 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 62 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 62 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 62 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 62 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 62 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 62 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 62 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 62 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 62 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 62 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 62 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 62 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 62 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 62 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 62 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 62 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 62 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 62 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 62 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 62 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 62 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 62 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 62 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 62 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 62 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 62 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 62 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 62 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 62 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 62 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 62 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 62 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 62 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 62 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 62 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 62 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 62 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 62 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 62 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 62 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 62 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 62 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 62 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 62 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 62 + 22052 ] ;
  mBY[ 62 + 149*idy ] = (mBY[ 62 + 149*idy ] - sum_i ) / mA[ 9300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 61
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 61 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 61 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 61 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 61 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 61 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 61 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 61 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 61 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 61 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 61 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 61 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 61 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 61 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 61 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 61 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 61 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 61 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 61 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 61 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 61 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 61 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 61 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 61 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 61 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 61 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 61 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 61 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 61 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 61 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 61 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 61 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 61 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 61 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 61 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 61 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 61 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 61 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 61 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 61 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 61 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 61 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 61 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 61 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 61 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 61 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 61 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 61 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 61 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 61 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 61 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 61 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 61 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 61 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 61 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 61 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 61 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 61 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 61 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 61 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 61 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 61 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 61 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 61 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 61 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 61 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 61 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 61 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 61 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 61 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 61 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 61 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 61 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 61 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 61 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 61 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 61 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 61 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 61 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 61 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 61 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 61 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 61 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 61 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 61 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 61 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 61 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 61 + 22052 ] ;
  mBY[ 61 + 149*idy ] = (mBY[ 61 + 149*idy ] - sum_i ) / mA[ 9150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 60
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 60 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 60 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 60 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 60 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 60 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 60 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 60 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 60 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 60 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 60 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 60 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 60 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 60 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 60 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 60 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 60 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 60 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 60 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 60 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 60 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 60 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 60 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 60 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 60 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 60 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 60 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 60 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 60 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 60 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 60 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 60 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 60 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 60 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 60 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 60 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 60 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 60 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 60 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 60 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 60 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 60 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 60 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 60 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 60 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 60 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 60 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 60 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 60 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 60 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 60 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 60 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 60 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 60 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 60 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 60 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 60 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 60 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 60 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 60 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 60 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 60 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 60 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 60 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 60 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 60 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 60 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 60 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 60 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 60 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 60 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 60 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 60 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 60 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 60 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 60 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 60 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 60 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 60 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 60 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 60 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 60 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 60 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 60 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 60 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 60 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 60 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 60 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 60 + 22052 ] ;
  mBY[ 60 + 149*idy ] = (mBY[ 60 + 149*idy ] - sum_i ) / mA[ 9000 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 59
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 59 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 59 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 59 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 59 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 59 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 59 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 59 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 59 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 59 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 59 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 59 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 59 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 59 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 59 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 59 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 59 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 59 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 59 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 59 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 59 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 59 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 59 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 59 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 59 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 59 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 59 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 59 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 59 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 59 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 59 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 59 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 59 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 59 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 59 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 59 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 59 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 59 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 59 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 59 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 59 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 59 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 59 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 59 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 59 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 59 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 59 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 59 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 59 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 59 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 59 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 59 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 59 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 59 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 59 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 59 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 59 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 59 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 59 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 59 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 59 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 59 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 59 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 59 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 59 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 59 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 59 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 59 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 59 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 59 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 59 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 59 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 59 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 59 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 59 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 59 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 59 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 59 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 59 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 59 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 59 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 59 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 59 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 59 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 59 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 59 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 59 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 59 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 59 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 59 + 22052 ] ;
  mBY[ 59 + 149*idy ] = (mBY[ 59 + 149*idy ] - sum_i ) / mA[ 8850 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 58
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 58 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 58 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 58 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 58 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 58 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 58 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 58 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 58 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 58 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 58 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 58 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 58 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 58 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 58 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 58 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 58 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 58 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 58 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 58 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 58 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 58 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 58 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 58 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 58 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 58 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 58 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 58 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 58 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 58 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 58 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 58 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 58 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 58 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 58 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 58 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 58 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 58 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 58 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 58 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 58 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 58 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 58 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 58 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 58 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 58 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 58 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 58 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 58 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 58 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 58 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 58 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 58 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 58 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 58 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 58 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 58 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 58 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 58 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 58 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 58 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 58 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 58 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 58 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 58 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 58 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 58 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 58 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 58 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 58 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 58 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 58 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 58 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 58 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 58 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 58 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 58 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 58 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 58 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 58 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 58 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 58 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 58 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 58 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 58 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 58 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 58 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 58 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 58 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 58 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 58 + 22052 ] ;
  mBY[ 58 + 149*idy ] = (mBY[ 58 + 149*idy ] - sum_i ) / mA[ 8700 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 57
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 57 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 57 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 57 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 57 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 57 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 57 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 57 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 57 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 57 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 57 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 57 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 57 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 57 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 57 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 57 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 57 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 57 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 57 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 57 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 57 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 57 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 57 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 57 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 57 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 57 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 57 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 57 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 57 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 57 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 57 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 57 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 57 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 57 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 57 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 57 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 57 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 57 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 57 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 57 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 57 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 57 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 57 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 57 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 57 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 57 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 57 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 57 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 57 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 57 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 57 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 57 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 57 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 57 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 57 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 57 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 57 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 57 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 57 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 57 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 57 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 57 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 57 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 57 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 57 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 57 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 57 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 57 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 57 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 57 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 57 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 57 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 57 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 57 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 57 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 57 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 57 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 57 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 57 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 57 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 57 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 57 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 57 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 57 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 57 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 57 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 57 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 57 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 57 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 57 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 57 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 57 + 22052 ] ;
  mBY[ 57 + 149*idy ] = (mBY[ 57 + 149*idy ] - sum_i ) / mA[ 8550 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 56
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 56 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 56 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 56 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 56 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 56 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 56 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 56 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 56 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 56 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 56 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 56 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 56 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 56 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 56 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 56 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 56 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 56 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 56 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 56 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 56 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 56 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 56 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 56 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 56 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 56 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 56 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 56 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 56 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 56 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 56 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 56 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 56 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 56 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 56 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 56 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 56 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 56 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 56 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 56 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 56 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 56 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 56 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 56 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 56 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 56 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 56 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 56 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 56 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 56 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 56 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 56 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 56 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 56 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 56 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 56 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 56 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 56 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 56 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 56 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 56 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 56 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 56 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 56 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 56 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 56 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 56 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 56 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 56 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 56 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 56 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 56 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 56 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 56 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 56 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 56 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 56 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 56 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 56 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 56 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 56 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 56 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 56 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 56 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 56 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 56 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 56 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 56 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 56 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 56 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 56 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 56 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 56 + 22052 ] ;
  mBY[ 56 + 149*idy ] = (mBY[ 56 + 149*idy ] - sum_i ) / mA[ 8400 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 55
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 55 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 55 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 55 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 55 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 55 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 55 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 55 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 55 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 55 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 55 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 55 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 55 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 55 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 55 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 55 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 55 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 55 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 55 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 55 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 55 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 55 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 55 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 55 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 55 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 55 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 55 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 55 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 55 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 55 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 55 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 55 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 55 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 55 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 55 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 55 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 55 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 55 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 55 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 55 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 55 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 55 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 55 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 55 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 55 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 55 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 55 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 55 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 55 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 55 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 55 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 55 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 55 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 55 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 55 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 55 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 55 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 55 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 55 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 55 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 55 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 55 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 55 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 55 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 55 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 55 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 55 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 55 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 55 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 55 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 55 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 55 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 55 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 55 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 55 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 55 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 55 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 55 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 55 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 55 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 55 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 55 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 55 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 55 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 55 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 55 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 55 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 55 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 55 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 55 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 55 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 55 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 55 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 55 + 22052 ] ;
  mBY[ 55 + 149*idy ] = (mBY[ 55 + 149*idy ] - sum_i ) / mA[ 8250 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 54
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 54 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 54 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 54 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 54 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 54 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 54 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 54 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 54 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 54 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 54 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 54 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 54 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 54 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 54 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 54 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 54 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 54 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 54 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 54 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 54 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 54 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 54 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 54 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 54 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 54 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 54 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 54 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 54 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 54 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 54 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 54 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 54 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 54 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 54 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 54 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 54 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 54 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 54 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 54 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 54 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 54 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 54 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 54 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 54 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 54 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 54 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 54 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 54 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 54 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 54 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 54 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 54 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 54 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 54 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 54 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 54 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 54 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 54 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 54 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 54 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 54 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 54 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 54 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 54 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 54 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 54 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 54 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 54 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 54 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 54 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 54 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 54 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 54 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 54 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 54 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 54 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 54 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 54 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 54 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 54 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 54 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 54 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 54 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 54 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 54 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 54 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 54 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 54 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 54 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 54 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 54 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 54 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 54 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 54 + 22052 ] ;
  mBY[ 54 + 149*idy ] = (mBY[ 54 + 149*idy ] - sum_i ) / mA[ 8100 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 53
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 53 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 53 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 53 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 53 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 53 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 53 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 53 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 53 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 53 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 53 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 53 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 53 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 53 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 53 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 53 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 53 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 53 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 53 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 53 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 53 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 53 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 53 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 53 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 53 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 53 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 53 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 53 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 53 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 53 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 53 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 53 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 53 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 53 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 53 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 53 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 53 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 53 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 53 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 53 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 53 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 53 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 53 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 53 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 53 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 53 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 53 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 53 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 53 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 53 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 53 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 53 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 53 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 53 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 53 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 53 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 53 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 53 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 53 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 53 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 53 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 53 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 53 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 53 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 53 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 53 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 53 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 53 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 53 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 53 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 53 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 53 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 53 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 53 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 53 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 53 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 53 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 53 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 53 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 53 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 53 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 53 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 53 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 53 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 53 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 53 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 53 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 53 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 53 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 53 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 53 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 53 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 53 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 53 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 53 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 53 + 22052 ] ;
  mBY[ 53 + 149*idy ] = (mBY[ 53 + 149*idy ] - sum_i ) / mA[ 7950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 52
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 52 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 52 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 52 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 52 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 52 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 52 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 52 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 52 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 52 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 52 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 52 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 52 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 52 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 52 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 52 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 52 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 52 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 52 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 52 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 52 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 52 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 52 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 52 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 52 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 52 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 52 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 52 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 52 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 52 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 52 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 52 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 52 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 52 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 52 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 52 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 52 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 52 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 52 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 52 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 52 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 52 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 52 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 52 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 52 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 52 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 52 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 52 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 52 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 52 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 52 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 52 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 52 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 52 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 52 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 52 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 52 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 52 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 52 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 52 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 52 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 52 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 52 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 52 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 52 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 52 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 52 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 52 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 52 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 52 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 52 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 52 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 52 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 52 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 52 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 52 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 52 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 52 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 52 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 52 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 52 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 52 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 52 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 52 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 52 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 52 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 52 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 52 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 52 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 52 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 52 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 52 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 52 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 52 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 52 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 52 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 52 + 22052 ] ;
  mBY[ 52 + 149*idy ] = (mBY[ 52 + 149*idy ] - sum_i ) / mA[ 7800 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 51
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 51 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 51 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 51 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 51 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 51 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 51 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 51 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 51 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 51 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 51 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 51 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 51 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 51 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 51 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 51 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 51 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 51 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 51 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 51 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 51 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 51 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 51 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 51 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 51 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 51 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 51 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 51 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 51 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 51 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 51 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 51 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 51 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 51 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 51 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 51 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 51 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 51 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 51 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 51 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 51 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 51 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 51 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 51 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 51 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 51 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 51 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 51 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 51 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 51 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 51 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 51 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 51 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 51 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 51 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 51 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 51 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 51 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 51 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 51 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 51 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 51 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 51 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 51 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 51 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 51 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 51 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 51 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 51 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 51 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 51 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 51 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 51 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 51 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 51 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 51 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 51 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 51 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 51 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 51 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 51 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 51 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 51 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 51 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 51 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 51 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 51 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 51 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 51 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 51 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 51 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 51 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 51 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 51 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 51 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 51 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 51 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 51 + 22052 ] ;
  mBY[ 51 + 149*idy ] = (mBY[ 51 + 149*idy ] - sum_i ) / mA[ 7650 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 50
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 50 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 50 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 50 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 50 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 50 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 50 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 50 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 50 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 50 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 50 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 50 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 50 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 50 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 50 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 50 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 50 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 50 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 50 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 50 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 50 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 50 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 50 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 50 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 50 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 50 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 50 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 50 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 50 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 50 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 50 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 50 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 50 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 50 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 50 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 50 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 50 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 50 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 50 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 50 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 50 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 50 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 50 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 50 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 50 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 50 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 50 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 50 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 50 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 50 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 50 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 50 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 50 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 50 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 50 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 50 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 50 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 50 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 50 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 50 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 50 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 50 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 50 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 50 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 50 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 50 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 50 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 50 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 50 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 50 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 50 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 50 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 50 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 50 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 50 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 50 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 50 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 50 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 50 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 50 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 50 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 50 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 50 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 50 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 50 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 50 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 50 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 50 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 50 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 50 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 50 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 50 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 50 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 50 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 50 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 50 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 50 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 50 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 50 + 22052 ] ;
  mBY[ 50 + 149*idy ] = (mBY[ 50 + 149*idy ] - sum_i ) / mA[ 7500 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 49
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 49 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 49 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 49 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 49 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 49 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 49 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 49 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 49 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 49 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 49 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 49 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 49 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 49 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 49 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 49 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 49 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 49 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 49 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 49 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 49 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 49 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 49 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 49 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 49 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 49 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 49 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 49 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 49 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 49 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 49 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 49 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 49 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 49 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 49 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 49 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 49 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 49 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 49 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 49 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 49 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 49 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 49 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 49 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 49 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 49 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 49 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 49 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 49 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 49 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 49 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 49 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 49 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 49 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 49 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 49 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 49 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 49 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 49 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 49 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 49 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 49 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 49 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 49 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 49 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 49 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 49 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 49 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 49 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 49 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 49 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 49 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 49 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 49 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 49 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 49 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 49 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 49 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 49 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 49 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 49 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 49 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 49 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 49 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 49 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 49 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 49 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 49 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 49 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 49 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 49 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 49 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 49 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 49 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 49 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 49 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 49 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 49 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 49 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 49 + 22052 ] ;
  mBY[ 49 + 149*idy ] = (mBY[ 49 + 149*idy ] - sum_i ) / mA[ 7350 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 48
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 48 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 48 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 48 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 48 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 48 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 48 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 48 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 48 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 48 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 48 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 48 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 48 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 48 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 48 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 48 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 48 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 48 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 48 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 48 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 48 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 48 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 48 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 48 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 48 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 48 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 48 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 48 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 48 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 48 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 48 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 48 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 48 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 48 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 48 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 48 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 48 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 48 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 48 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 48 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 48 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 48 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 48 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 48 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 48 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 48 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 48 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 48 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 48 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 48 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 48 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 48 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 48 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 48 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 48 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 48 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 48 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 48 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 48 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 48 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 48 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 48 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 48 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 48 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 48 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 48 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 48 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 48 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 48 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 48 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 48 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 48 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 48 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 48 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 48 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 48 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 48 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 48 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 48 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 48 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 48 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 48 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 48 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 48 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 48 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 48 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 48 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 48 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 48 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 48 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 48 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 48 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 48 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 48 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 48 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 48 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 48 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 48 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 48 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 48 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 48 + 22052 ] ;
  mBY[ 48 + 149*idy ] = (mBY[ 48 + 149*idy ] - sum_i ) / mA[ 7200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 47
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 47 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 47 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 47 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 47 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 47 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 47 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 47 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 47 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 47 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 47 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 47 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 47 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 47 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 47 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 47 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 47 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 47 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 47 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 47 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 47 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 47 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 47 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 47 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 47 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 47 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 47 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 47 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 47 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 47 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 47 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 47 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 47 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 47 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 47 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 47 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 47 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 47 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 47 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 47 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 47 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 47 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 47 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 47 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 47 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 47 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 47 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 47 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 47 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 47 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 47 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 47 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 47 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 47 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 47 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 47 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 47 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 47 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 47 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 47 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 47 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 47 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 47 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 47 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 47 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 47 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 47 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 47 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 47 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 47 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 47 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 47 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 47 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 47 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 47 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 47 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 47 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 47 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 47 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 47 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 47 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 47 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 47 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 47 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 47 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 47 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 47 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 47 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 47 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 47 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 47 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 47 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 47 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 47 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 47 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 47 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 47 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 47 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 47 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 47 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 47 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 47 + 22052 ] ;
  mBY[ 47 + 149*idy ] = (mBY[ 47 + 149*idy ] - sum_i ) / mA[ 7050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 46
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 46 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 46 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 46 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 46 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 46 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 46 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 46 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 46 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 46 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 46 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 46 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 46 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 46 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 46 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 46 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 46 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 46 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 46 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 46 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 46 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 46 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 46 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 46 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 46 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 46 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 46 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 46 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 46 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 46 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 46 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 46 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 46 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 46 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 46 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 46 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 46 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 46 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 46 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 46 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 46 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 46 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 46 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 46 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 46 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 46 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 46 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 46 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 46 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 46 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 46 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 46 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 46 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 46 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 46 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 46 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 46 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 46 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 46 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 46 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 46 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 46 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 46 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 46 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 46 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 46 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 46 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 46 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 46 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 46 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 46 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 46 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 46 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 46 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 46 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 46 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 46 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 46 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 46 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 46 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 46 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 46 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 46 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 46 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 46 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 46 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 46 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 46 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 46 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 46 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 46 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 46 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 46 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 46 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 46 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 46 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 46 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 46 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 46 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 46 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 46 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 46 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 46 + 22052 ] ;
  mBY[ 46 + 149*idy ] = (mBY[ 46 + 149*idy ] - sum_i ) / mA[ 6900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 45
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 45 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 45 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 45 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 45 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 45 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 45 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 45 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 45 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 45 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 45 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 45 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 45 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 45 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 45 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 45 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 45 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 45 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 45 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 45 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 45 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 45 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 45 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 45 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 45 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 45 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 45 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 45 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 45 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 45 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 45 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 45 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 45 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 45 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 45 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 45 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 45 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 45 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 45 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 45 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 45 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 45 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 45 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 45 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 45 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 45 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 45 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 45 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 45 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 45 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 45 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 45 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 45 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 45 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 45 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 45 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 45 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 45 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 45 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 45 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 45 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 45 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 45 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 45 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 45 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 45 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 45 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 45 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 45 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 45 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 45 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 45 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 45 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 45 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 45 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 45 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 45 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 45 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 45 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 45 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 45 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 45 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 45 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 45 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 45 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 45 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 45 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 45 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 45 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 45 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 45 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 45 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 45 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 45 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 45 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 45 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 45 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 45 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 45 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 45 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 45 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 45 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 45 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 45 + 22052 ] ;
  mBY[ 45 + 149*idy ] = (mBY[ 45 + 149*idy ] - sum_i ) / mA[ 6750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 44
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 44 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 44 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 44 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 44 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 44 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 44 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 44 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 44 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 44 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 44 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 44 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 44 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 44 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 44 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 44 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 44 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 44 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 44 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 44 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 44 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 44 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 44 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 44 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 44 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 44 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 44 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 44 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 44 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 44 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 44 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 44 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 44 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 44 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 44 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 44 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 44 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 44 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 44 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 44 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 44 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 44 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 44 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 44 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 44 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 44 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 44 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 44 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 44 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 44 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 44 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 44 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 44 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 44 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 44 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 44 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 44 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 44 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 44 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 44 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 44 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 44 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 44 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 44 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 44 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 44 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 44 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 44 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 44 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 44 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 44 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 44 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 44 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 44 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 44 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 44 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 44 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 44 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 44 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 44 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 44 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 44 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 44 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 44 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 44 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 44 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 44 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 44 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 44 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 44 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 44 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 44 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 44 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 44 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 44 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 44 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 44 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 44 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 44 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 44 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 44 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 44 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 44 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 44 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 44 + 22052 ] ;
  mBY[ 44 + 149*idy ] = (mBY[ 44 + 149*idy ] - sum_i ) / mA[ 6600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 43
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 43 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 43 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 43 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 43 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 43 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 43 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 43 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 43 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 43 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 43 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 43 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 43 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 43 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 43 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 43 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 43 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 43 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 43 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 43 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 43 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 43 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 43 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 43 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 43 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 43 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 43 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 43 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 43 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 43 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 43 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 43 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 43 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 43 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 43 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 43 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 43 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 43 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 43 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 43 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 43 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 43 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 43 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 43 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 43 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 43 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 43 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 43 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 43 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 43 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 43 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 43 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 43 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 43 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 43 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 43 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 43 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 43 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 43 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 43 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 43 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 43 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 43 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 43 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 43 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 43 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 43 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 43 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 43 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 43 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 43 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 43 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 43 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 43 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 43 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 43 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 43 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 43 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 43 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 43 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 43 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 43 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 43 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 43 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 43 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 43 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 43 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 43 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 43 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 43 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 43 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 43 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 43 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 43 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 43 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 43 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 43 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 43 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 43 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 43 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 43 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 43 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 43 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 43 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 43 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 43 + 22052 ] ;
  mBY[ 43 + 149*idy ] = (mBY[ 43 + 149*idy ] - sum_i ) / mA[ 6450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 42
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 42 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 42 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 42 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 42 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 42 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 42 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 42 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 42 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 42 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 42 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 42 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 42 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 42 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 42 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 42 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 42 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 42 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 42 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 42 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 42 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 42 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 42 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 42 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 42 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 42 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 42 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 42 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 42 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 42 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 42 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 42 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 42 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 42 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 42 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 42 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 42 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 42 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 42 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 42 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 42 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 42 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 42 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 42 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 42 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 42 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 42 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 42 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 42 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 42 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 42 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 42 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 42 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 42 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 42 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 42 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 42 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 42 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 42 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 42 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 42 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 42 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 42 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 42 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 42 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 42 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 42 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 42 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 42 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 42 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 42 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 42 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 42 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 42 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 42 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 42 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 42 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 42 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 42 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 42 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 42 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 42 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 42 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 42 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 42 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 42 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 42 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 42 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 42 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 42 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 42 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 42 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 42 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 42 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 42 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 42 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 42 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 42 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 42 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 42 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 42 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 42 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 42 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 42 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 42 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 42 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 42 + 22052 ] ;
  mBY[ 42 + 149*idy ] = (mBY[ 42 + 149*idy ] - sum_i ) / mA[ 6300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 41
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 41 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 41 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 41 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 41 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 41 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 41 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 41 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 41 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 41 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 41 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 41 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 41 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 41 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 41 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 41 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 41 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 41 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 41 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 41 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 41 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 41 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 41 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 41 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 41 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 41 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 41 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 41 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 41 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 41 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 41 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 41 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 41 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 41 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 41 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 41 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 41 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 41 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 41 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 41 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 41 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 41 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 41 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 41 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 41 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 41 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 41 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 41 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 41 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 41 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 41 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 41 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 41 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 41 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 41 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 41 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 41 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 41 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 41 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 41 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 41 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 41 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 41 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 41 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 41 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 41 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 41 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 41 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 41 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 41 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 41 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 41 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 41 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 41 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 41 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 41 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 41 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 41 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 41 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 41 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 41 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 41 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 41 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 41 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 41 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 41 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 41 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 41 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 41 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 41 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 41 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 41 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 41 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 41 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 41 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 41 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 41 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 41 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 41 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 41 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 41 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 41 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 41 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 41 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 41 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 41 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 41 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 41 + 22052 ] ;
  mBY[ 41 + 149*idy ] = (mBY[ 41 + 149*idy ] - sum_i ) / mA[ 6150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 40
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 40 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 40 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 40 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 40 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 40 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 40 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 40 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 40 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 40 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 40 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 40 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 40 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 40 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 40 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 40 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 40 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 40 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 40 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 40 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 40 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 40 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 40 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 40 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 40 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 40 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 40 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 40 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 40 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 40 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 40 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 40 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 40 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 40 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 40 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 40 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 40 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 40 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 40 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 40 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 40 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 40 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 40 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 40 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 40 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 40 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 40 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 40 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 40 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 40 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 40 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 40 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 40 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 40 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 40 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 40 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 40 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 40 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 40 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 40 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 40 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 40 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 40 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 40 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 40 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 40 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 40 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 40 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 40 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 40 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 40 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 40 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 40 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 40 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 40 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 40 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 40 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 40 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 40 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 40 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 40 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 40 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 40 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 40 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 40 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 40 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 40 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 40 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 40 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 40 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 40 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 40 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 40 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 40 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 40 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 40 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 40 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 40 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 40 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 40 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 40 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 40 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 40 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 40 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 40 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 40 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 40 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 40 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 40 + 22052 ] ;
  mBY[ 40 + 149*idy ] = (mBY[ 40 + 149*idy ] - sum_i ) / mA[ 6000 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 39
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 39 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 39 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 39 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 39 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 39 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 39 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 39 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 39 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 39 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 39 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 39 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 39 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 39 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 39 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 39 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 39 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 39 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 39 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 39 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 39 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 39 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 39 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 39 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 39 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 39 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 39 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 39 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 39 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 39 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 39 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 39 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 39 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 39 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 39 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 39 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 39 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 39 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 39 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 39 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 39 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 39 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 39 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 39 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 39 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 39 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 39 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 39 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 39 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 39 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 39 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 39 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 39 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 39 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 39 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 39 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 39 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 39 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 39 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 39 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 39 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 39 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 39 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 39 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 39 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 39 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 39 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 39 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 39 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 39 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 39 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 39 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 39 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 39 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 39 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 39 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 39 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 39 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 39 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 39 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 39 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 39 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 39 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 39 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 39 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 39 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 39 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 39 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 39 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 39 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 39 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 39 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 39 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 39 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 39 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 39 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 39 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 39 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 39 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 39 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 39 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 39 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 39 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 39 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 39 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 39 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 39 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 39 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 39 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 39 + 22052 ] ;
  mBY[ 39 + 149*idy ] = (mBY[ 39 + 149*idy ] - sum_i ) / mA[ 5850 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 38
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 38 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 38 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 38 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 38 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 38 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 38 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 38 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 38 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 38 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 38 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 38 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 38 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 38 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 38 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 38 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 38 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 38 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 38 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 38 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 38 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 38 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 38 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 38 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 38 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 38 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 38 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 38 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 38 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 38 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 38 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 38 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 38 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 38 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 38 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 38 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 38 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 38 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 38 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 38 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 38 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 38 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 38 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 38 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 38 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 38 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 38 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 38 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 38 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 38 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 38 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 38 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 38 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 38 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 38 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 38 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 38 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 38 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 38 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 38 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 38 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 38 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 38 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 38 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 38 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 38 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 38 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 38 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 38 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 38 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 38 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 38 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 38 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 38 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 38 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 38 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 38 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 38 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 38 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 38 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 38 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 38 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 38 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 38 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 38 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 38 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 38 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 38 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 38 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 38 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 38 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 38 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 38 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 38 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 38 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 38 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 38 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 38 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 38 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 38 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 38 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 38 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 38 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 38 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 38 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 38 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 38 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 38 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 38 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 38 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 38 + 22052 ] ;
  mBY[ 38 + 149*idy ] = (mBY[ 38 + 149*idy ] - sum_i ) / mA[ 5700 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 37
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 37 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 37 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 37 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 37 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 37 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 37 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 37 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 37 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 37 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 37 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 37 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 37 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 37 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 37 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 37 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 37 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 37 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 37 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 37 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 37 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 37 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 37 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 37 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 37 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 37 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 37 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 37 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 37 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 37 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 37 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 37 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 37 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 37 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 37 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 37 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 37 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 37 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 37 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 37 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 37 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 37 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 37 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 37 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 37 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 37 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 37 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 37 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 37 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 37 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 37 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 37 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 37 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 37 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 37 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 37 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 37 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 37 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 37 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 37 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 37 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 37 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 37 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 37 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 37 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 37 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 37 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 37 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 37 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 37 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 37 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 37 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 37 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 37 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 37 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 37 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 37 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 37 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 37 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 37 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 37 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 37 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 37 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 37 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 37 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 37 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 37 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 37 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 37 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 37 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 37 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 37 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 37 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 37 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 37 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 37 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 37 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 37 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 37 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 37 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 37 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 37 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 37 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 37 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 37 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 37 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 37 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 37 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 37 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 37 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 37 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 37 + 22052 ] ;
  mBY[ 37 + 149*idy ] = (mBY[ 37 + 149*idy ] - sum_i ) / mA[ 5550 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 36
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 36 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 36 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 36 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 36 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 36 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 36 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 36 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 36 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 36 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 36 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 36 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 36 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 36 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 36 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 36 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 36 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 36 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 36 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 36 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 36 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 36 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 36 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 36 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 36 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 36 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 36 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 36 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 36 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 36 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 36 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 36 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 36 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 36 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 36 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 36 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 36 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 36 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 36 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 36 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 36 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 36 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 36 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 36 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 36 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 36 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 36 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 36 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 36 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 36 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 36 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 36 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 36 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 36 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 36 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 36 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 36 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 36 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 36 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 36 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 36 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 36 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 36 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 36 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 36 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 36 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 36 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 36 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 36 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 36 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 36 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 36 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 36 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 36 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 36 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 36 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 36 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 36 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 36 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 36 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 36 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 36 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 36 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 36 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 36 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 36 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 36 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 36 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 36 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 36 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 36 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 36 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 36 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 36 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 36 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 36 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 36 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 36 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 36 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 36 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 36 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 36 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 36 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 36 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 36 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 36 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 36 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 36 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 36 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 36 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 36 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 36 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 36 + 22052 ] ;
  mBY[ 36 + 149*idy ] = (mBY[ 36 + 149*idy ] - sum_i ) / mA[ 5400 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 35
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 35 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 35 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 35 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 35 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 35 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 35 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 35 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 35 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 35 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 35 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 35 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 35 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 35 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 35 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 35 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 35 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 35 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 35 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 35 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 35 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 35 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 35 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 35 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 35 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 35 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 35 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 35 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 35 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 35 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 35 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 35 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 35 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 35 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 35 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 35 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 35 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 35 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 35 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 35 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 35 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 35 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 35 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 35 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 35 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 35 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 35 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 35 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 35 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 35 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 35 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 35 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 35 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 35 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 35 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 35 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 35 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 35 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 35 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 35 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 35 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 35 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 35 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 35 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 35 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 35 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 35 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 35 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 35 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 35 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 35 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 35 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 35 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 35 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 35 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 35 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 35 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 35 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 35 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 35 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 35 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 35 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 35 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 35 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 35 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 35 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 35 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 35 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 35 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 35 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 35 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 35 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 35 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 35 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 35 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 35 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 35 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 35 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 35 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 35 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 35 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 35 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 35 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 35 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 35 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 35 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 35 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 35 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 35 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 35 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 35 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 35 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 35 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 35 + 22052 ] ;
  mBY[ 35 + 149*idy ] = (mBY[ 35 + 149*idy ] - sum_i ) / mA[ 5250 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 34
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 34 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 34 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 34 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 34 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 34 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 34 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 34 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 34 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 34 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 34 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 34 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 34 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 34 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 34 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 34 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 34 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 34 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 34 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 34 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 34 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 34 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 34 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 34 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 34 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 34 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 34 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 34 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 34 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 34 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 34 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 34 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 34 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 34 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 34 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 34 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 34 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 34 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 34 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 34 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 34 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 34 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 34 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 34 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 34 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 34 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 34 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 34 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 34 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 34 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 34 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 34 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 34 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 34 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 34 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 34 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 34 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 34 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 34 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 34 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 34 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 34 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 34 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 34 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 34 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 34 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 34 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 34 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 34 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 34 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 34 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 34 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 34 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 34 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 34 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 34 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 34 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 34 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 34 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 34 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 34 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 34 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 34 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 34 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 34 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 34 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 34 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 34 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 34 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 34 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 34 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 34 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 34 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 34 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 34 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 34 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 34 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 34 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 34 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 34 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 34 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 34 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 34 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 34 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 34 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 34 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 34 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 34 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 34 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 34 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 34 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 34 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 34 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 34 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 34 + 22052 ] ;
  mBY[ 34 + 149*idy ] = (mBY[ 34 + 149*idy ] - sum_i ) / mA[ 5100 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 33
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 33 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 33 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 33 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 33 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 33 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 33 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 33 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 33 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 33 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 33 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 33 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 33 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 33 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 33 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 33 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 33 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 33 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 33 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 33 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 33 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 33 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 33 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 33 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 33 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 33 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 33 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 33 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 33 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 33 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 33 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 33 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 33 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 33 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 33 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 33 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 33 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 33 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 33 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 33 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 33 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 33 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 33 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 33 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 33 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 33 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 33 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 33 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 33 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 33 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 33 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 33 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 33 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 33 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 33 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 33 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 33 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 33 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 33 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 33 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 33 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 33 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 33 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 33 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 33 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 33 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 33 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 33 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 33 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 33 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 33 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 33 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 33 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 33 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 33 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 33 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 33 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 33 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 33 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 33 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 33 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 33 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 33 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 33 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 33 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 33 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 33 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 33 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 33 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 33 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 33 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 33 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 33 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 33 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 33 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 33 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 33 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 33 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 33 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 33 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 33 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 33 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 33 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 33 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 33 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 33 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 33 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 33 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 33 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 33 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 33 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 33 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 33 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 33 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 33 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 33 + 22052 ] ;
  mBY[ 33 + 149*idy ] = (mBY[ 33 + 149*idy ] - sum_i ) / mA[ 4950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 32
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 32 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 32 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 32 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 32 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 32 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 32 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 32 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 32 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 32 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 32 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 32 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 32 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 32 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 32 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 32 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 32 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 32 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 32 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 32 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 32 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 32 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 32 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 32 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 32 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 32 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 32 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 32 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 32 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 32 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 32 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 32 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 32 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 32 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 32 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 32 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 32 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 32 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 32 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 32 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 32 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 32 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 32 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 32 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 32 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 32 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 32 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 32 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 32 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 32 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 32 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 32 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 32 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 32 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 32 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 32 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 32 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 32 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 32 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 32 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 32 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 32 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 32 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 32 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 32 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 32 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 32 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 32 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 32 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 32 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 32 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 32 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 32 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 32 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 32 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 32 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 32 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 32 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 32 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 32 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 32 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 32 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 32 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 32 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 32 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 32 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 32 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 32 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 32 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 32 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 32 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 32 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 32 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 32 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 32 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 32 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 32 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 32 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 32 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 32 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 32 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 32 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 32 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 32 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 32 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 32 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 32 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 32 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 32 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 32 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 32 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 32 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 32 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 32 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 32 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 32 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 32 + 22052 ] ;
  mBY[ 32 + 149*idy ] = (mBY[ 32 + 149*idy ] - sum_i ) / mA[ 4800 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 31
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 31 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 31 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 31 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 31 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 31 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 31 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 31 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 31 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 31 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 31 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 31 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 31 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 31 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 31 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 31 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 31 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 31 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 31 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 31 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 31 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 31 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 31 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 31 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 31 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 31 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 31 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 31 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 31 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 31 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 31 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 31 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 31 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 31 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 31 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 31 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 31 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 31 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 31 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 31 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 31 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 31 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 31 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 31 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 31 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 31 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 31 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 31 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 31 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 31 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 31 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 31 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 31 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 31 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 31 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 31 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 31 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 31 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 31 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 31 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 31 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 31 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 31 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 31 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 31 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 31 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 31 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 31 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 31 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 31 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 31 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 31 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 31 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 31 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 31 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 31 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 31 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 31 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 31 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 31 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 31 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 31 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 31 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 31 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 31 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 31 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 31 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 31 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 31 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 31 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 31 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 31 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 31 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 31 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 31 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 31 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 31 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 31 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 31 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 31 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 31 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 31 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 31 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 31 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 31 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 31 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 31 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 31 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 31 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 31 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 31 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 31 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 31 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 31 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 31 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 31 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 31 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 31 + 22052 ] ;
  mBY[ 31 + 149*idy ] = (mBY[ 31 + 149*idy ] - sum_i ) / mA[ 4650 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 30
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 30 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 30 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 30 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 30 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 30 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 30 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 30 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 30 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 30 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 30 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 30 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 30 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 30 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 30 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 30 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 30 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 30 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 30 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 30 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 30 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 30 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 30 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 30 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 30 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 30 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 30 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 30 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 30 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 30 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 30 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 30 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 30 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 30 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 30 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 30 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 30 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 30 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 30 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 30 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 30 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 30 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 30 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 30 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 30 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 30 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 30 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 30 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 30 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 30 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 30 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 30 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 30 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 30 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 30 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 30 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 30 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 30 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 30 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 30 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 30 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 30 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 30 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 30 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 30 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 30 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 30 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 30 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 30 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 30 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 30 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 30 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 30 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 30 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 30 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 30 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 30 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 30 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 30 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 30 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 30 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 30 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 30 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 30 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 30 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 30 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 30 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 30 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 30 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 30 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 30 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 30 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 30 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 30 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 30 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 30 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 30 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 30 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 30 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 30 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 30 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 30 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 30 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 30 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 30 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 30 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 30 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 30 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 30 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 30 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 30 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 30 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 30 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 30 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 30 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 30 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 30 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 30 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 30 + 22052 ] ;
  mBY[ 30 + 149*idy ] = (mBY[ 30 + 149*idy ] - sum_i ) / mA[ 4500 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 29
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 29 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 29 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 29 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 29 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 29 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 29 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 29 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 29 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 29 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 29 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 29 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 29 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 29 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 29 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 29 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 29 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 29 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 29 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 29 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 29 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 29 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 29 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 29 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 29 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 29 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 29 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 29 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 29 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 29 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 29 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 29 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 29 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 29 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 29 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 29 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 29 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 29 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 29 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 29 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 29 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 29 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 29 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 29 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 29 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 29 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 29 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 29 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 29 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 29 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 29 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 29 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 29 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 29 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 29 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 29 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 29 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 29 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 29 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 29 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 29 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 29 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 29 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 29 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 29 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 29 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 29 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 29 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 29 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 29 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 29 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 29 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 29 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 29 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 29 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 29 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 29 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 29 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 29 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 29 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 29 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 29 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 29 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 29 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 29 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 29 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 29 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 29 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 29 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 29 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 29 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 29 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 29 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 29 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 29 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 29 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 29 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 29 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 29 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 29 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 29 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 29 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 29 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 29 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 29 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 29 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 29 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 29 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 29 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 29 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 29 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 29 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 29 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 29 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 29 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 29 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 29 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 29 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 29 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 29 + 22052 ] ;
  mBY[ 29 + 149*idy ] = (mBY[ 29 + 149*idy ] - sum_i ) / mA[ 4350 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 28
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 28 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 28 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 28 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 28 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 28 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 28 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 28 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 28 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 28 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 28 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 28 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 28 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 28 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 28 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 28 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 28 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 28 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 28 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 28 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 28 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 28 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 28 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 28 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 28 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 28 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 28 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 28 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 28 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 28 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 28 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 28 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 28 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 28 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 28 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 28 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 28 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 28 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 28 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 28 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 28 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 28 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 28 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 28 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 28 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 28 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 28 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 28 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 28 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 28 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 28 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 28 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 28 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 28 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 28 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 28 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 28 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 28 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 28 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 28 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 28 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 28 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 28 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 28 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 28 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 28 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 28 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 28 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 28 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 28 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 28 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 28 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 28 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 28 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 28 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 28 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 28 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 28 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 28 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 28 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 28 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 28 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 28 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 28 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 28 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 28 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 28 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 28 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 28 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 28 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 28 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 28 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 28 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 28 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 28 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 28 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 28 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 28 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 28 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 28 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 28 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 28 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 28 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 28 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 28 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 28 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 28 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 28 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 28 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 28 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 28 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 28 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 28 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 28 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 28 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 28 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 28 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 28 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 28 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 28 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 28 + 22052 ] ;
  mBY[ 28 + 149*idy ] = (mBY[ 28 + 149*idy ] - sum_i ) / mA[ 4200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 27
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 27 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 27 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 27 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 27 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 27 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 27 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 27 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 27 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 27 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 27 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 27 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 27 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 27 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 27 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 27 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 27 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 27 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 27 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 27 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 27 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 27 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 27 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 27 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 27 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 27 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 27 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 27 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 27 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 27 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 27 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 27 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 27 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 27 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 27 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 27 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 27 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 27 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 27 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 27 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 27 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 27 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 27 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 27 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 27 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 27 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 27 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 27 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 27 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 27 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 27 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 27 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 27 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 27 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 27 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 27 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 27 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 27 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 27 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 27 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 27 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 27 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 27 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 27 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 27 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 27 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 27 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 27 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 27 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 27 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 27 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 27 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 27 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 27 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 27 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 27 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 27 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 27 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 27 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 27 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 27 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 27 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 27 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 27 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 27 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 27 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 27 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 27 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 27 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 27 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 27 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 27 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 27 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 27 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 27 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 27 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 27 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 27 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 27 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 27 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 27 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 27 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 27 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 27 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 27 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 27 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 27 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 27 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 27 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 27 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 27 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 27 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 27 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 27 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 27 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 27 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 27 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 27 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 27 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 27 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 27 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 27 + 22052 ] ;
  mBY[ 27 + 149*idy ] = (mBY[ 27 + 149*idy ] - sum_i ) / mA[ 4050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 26
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 26 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 26 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 26 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 26 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 26 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 26 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 26 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 26 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 26 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 26 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 26 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 26 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 26 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 26 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 26 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 26 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 26 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 26 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 26 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 26 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 26 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 26 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 26 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 26 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 26 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 26 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 26 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 26 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 26 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 26 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 26 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 26 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 26 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 26 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 26 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 26 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 26 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 26 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 26 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 26 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 26 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 26 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 26 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 26 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 26 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 26 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 26 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 26 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 26 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 26 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 26 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 26 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 26 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 26 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 26 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 26 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 26 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 26 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 26 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 26 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 26 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 26 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 26 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 26 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 26 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 26 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 26 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 26 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 26 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 26 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 26 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 26 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 26 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 26 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 26 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 26 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 26 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 26 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 26 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 26 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 26 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 26 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 26 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 26 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 26 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 26 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 26 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 26 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 26 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 26 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 26 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 26 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 26 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 26 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 26 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 26 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 26 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 26 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 26 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 26 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 26 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 26 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 26 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 26 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 26 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 26 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 26 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 26 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 26 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 26 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 26 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 26 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 26 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 26 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 26 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 26 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 26 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 26 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 26 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 26 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 26 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 26 + 22052 ] ;
  mBY[ 26 + 149*idy ] = (mBY[ 26 + 149*idy ] - sum_i ) / mA[ 3900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 25
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 25 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 25 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 25 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 25 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 25 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 25 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 25 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 25 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 25 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 25 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 25 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 25 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 25 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 25 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 25 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 25 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 25 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 25 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 25 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 25 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 25 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 25 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 25 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 25 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 25 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 25 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 25 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 25 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 25 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 25 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 25 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 25 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 25 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 25 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 25 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 25 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 25 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 25 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 25 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 25 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 25 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 25 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 25 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 25 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 25 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 25 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 25 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 25 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 25 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 25 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 25 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 25 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 25 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 25 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 25 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 25 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 25 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 25 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 25 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 25 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 25 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 25 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 25 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 25 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 25 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 25 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 25 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 25 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 25 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 25 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 25 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 25 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 25 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 25 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 25 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 25 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 25 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 25 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 25 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 25 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 25 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 25 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 25 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 25 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 25 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 25 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 25 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 25 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 25 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 25 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 25 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 25 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 25 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 25 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 25 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 25 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 25 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 25 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 25 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 25 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 25 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 25 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 25 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 25 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 25 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 25 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 25 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 25 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 25 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 25 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 25 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 25 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 25 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 25 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 25 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 25 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 25 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 25 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 25 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 25 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 25 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 25 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 25 + 22052 ] ;
  mBY[ 25 + 149*idy ] = (mBY[ 25 + 149*idy ] - sum_i ) / mA[ 3750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 24
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 24 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 24 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 24 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 24 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 24 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 24 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 24 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 24 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 24 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 24 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 24 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 24 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 24 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 24 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 24 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 24 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 24 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 24 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 24 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 24 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 24 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 24 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 24 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 24 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 24 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 24 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 24 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 24 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 24 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 24 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 24 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 24 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 24 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 24 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 24 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 24 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 24 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 24 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 24 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 24 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 24 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 24 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 24 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 24 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 24 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 24 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 24 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 24 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 24 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 24 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 24 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 24 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 24 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 24 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 24 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 24 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 24 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 24 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 24 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 24 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 24 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 24 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 24 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 24 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 24 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 24 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 24 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 24 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 24 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 24 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 24 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 24 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 24 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 24 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 24 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 24 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 24 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 24 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 24 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 24 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 24 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 24 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 24 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 24 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 24 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 24 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 24 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 24 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 24 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 24 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 24 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 24 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 24 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 24 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 24 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 24 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 24 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 24 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 24 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 24 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 24 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 24 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 24 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 24 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 24 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 24 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 24 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 24 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 24 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 24 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 24 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 24 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 24 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 24 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 24 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 24 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 24 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 24 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 24 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 24 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 24 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 24 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 24 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 24 + 22052 ] ;
  mBY[ 24 + 149*idy ] = (mBY[ 24 + 149*idy ] - sum_i ) / mA[ 3600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 23
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 23 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 23 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 23 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 23 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 23 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 23 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 23 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 23 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 23 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 23 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 23 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 23 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 23 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 23 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 23 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 23 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 23 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 23 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 23 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 23 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 23 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 23 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 23 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 23 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 23 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 23 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 23 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 23 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 23 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 23 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 23 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 23 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 23 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 23 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 23 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 23 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 23 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 23 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 23 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 23 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 23 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 23 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 23 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 23 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 23 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 23 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 23 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 23 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 23 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 23 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 23 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 23 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 23 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 23 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 23 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 23 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 23 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 23 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 23 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 23 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 23 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 23 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 23 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 23 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 23 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 23 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 23 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 23 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 23 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 23 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 23 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 23 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 23 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 23 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 23 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 23 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 23 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 23 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 23 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 23 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 23 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 23 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 23 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 23 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 23 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 23 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 23 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 23 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 23 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 23 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 23 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 23 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 23 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 23 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 23 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 23 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 23 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 23 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 23 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 23 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 23 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 23 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 23 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 23 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 23 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 23 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 23 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 23 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 23 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 23 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 23 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 23 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 23 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 23 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 23 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 23 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 23 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 23 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 23 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 23 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 23 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 23 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 23 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 23 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 23 + 22052 ] ;
  mBY[ 23 + 149*idy ] = (mBY[ 23 + 149*idy ] - sum_i ) / mA[ 3450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 22
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 22 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 22 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 22 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 22 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 22 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 22 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 22 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 22 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 22 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 22 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 22 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 22 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 22 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 22 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 22 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 22 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 22 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 22 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 22 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 22 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 22 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 22 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 22 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 22 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 22 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 22 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 22 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 22 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 22 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 22 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 22 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 22 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 22 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 22 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 22 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 22 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 22 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 22 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 22 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 22 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 22 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 22 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 22 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 22 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 22 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 22 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 22 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 22 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 22 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 22 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 22 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 22 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 22 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 22 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 22 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 22 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 22 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 22 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 22 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 22 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 22 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 22 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 22 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 22 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 22 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 22 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 22 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 22 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 22 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 22 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 22 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 22 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 22 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 22 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 22 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 22 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 22 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 22 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 22 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 22 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 22 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 22 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 22 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 22 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 22 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 22 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 22 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 22 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 22 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 22 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 22 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 22 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 22 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 22 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 22 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 22 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 22 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 22 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 22 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 22 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 22 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 22 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 22 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 22 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 22 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 22 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 22 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 22 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 22 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 22 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 22 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 22 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 22 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 22 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 22 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 22 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 22 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 22 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 22 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 22 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 22 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 22 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 22 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 22 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 22 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 22 + 22052 ] ;
  mBY[ 22 + 149*idy ] = (mBY[ 22 + 149*idy ] - sum_i ) / mA[ 3300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 21
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 21 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 21 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 21 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 21 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 21 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 21 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 21 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 21 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 21 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 21 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 21 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 21 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 21 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 21 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 21 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 21 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 21 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 21 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 21 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 21 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 21 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 21 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 21 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 21 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 21 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 21 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 21 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 21 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 21 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 21 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 21 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 21 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 21 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 21 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 21 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 21 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 21 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 21 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 21 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 21 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 21 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 21 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 21 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 21 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 21 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 21 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 21 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 21 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 21 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 21 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 21 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 21 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 21 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 21 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 21 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 21 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 21 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 21 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 21 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 21 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 21 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 21 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 21 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 21 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 21 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 21 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 21 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 21 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 21 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 21 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 21 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 21 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 21 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 21 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 21 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 21 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 21 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 21 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 21 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 21 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 21 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 21 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 21 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 21 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 21 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 21 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 21 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 21 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 21 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 21 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 21 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 21 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 21 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 21 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 21 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 21 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 21 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 21 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 21 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 21 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 21 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 21 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 21 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 21 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 21 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 21 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 21 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 21 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 21 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 21 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 21 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 21 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 21 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 21 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 21 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 21 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 21 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 21 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 21 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 21 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 21 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 21 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 21 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 21 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 21 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 21 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 21 + 22052 ] ;
  mBY[ 21 + 149*idy ] = (mBY[ 21 + 149*idy ] - sum_i ) / mA[ 3150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 20
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 20 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 20 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 20 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 20 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 20 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 20 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 20 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 20 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 20 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 20 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 20 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 20 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 20 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 20 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 20 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 20 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 20 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 20 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 20 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 20 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 20 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 20 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 20 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 20 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 20 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 20 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 20 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 20 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 20 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 20 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 20 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 20 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 20 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 20 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 20 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 20 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 20 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 20 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 20 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 20 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 20 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 20 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 20 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 20 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 20 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 20 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 20 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 20 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 20 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 20 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 20 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 20 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 20 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 20 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 20 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 20 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 20 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 20 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 20 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 20 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 20 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 20 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 20 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 20 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 20 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 20 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 20 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 20 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 20 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 20 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 20 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 20 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 20 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 20 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 20 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 20 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 20 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 20 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 20 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 20 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 20 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 20 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 20 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 20 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 20 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 20 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 20 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 20 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 20 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 20 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 20 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 20 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 20 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 20 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 20 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 20 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 20 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 20 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 20 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 20 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 20 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 20 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 20 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 20 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 20 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 20 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 20 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 20 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 20 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 20 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 20 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 20 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 20 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 20 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 20 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 20 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 20 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 20 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 20 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 20 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 20 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 20 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 20 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 20 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 20 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 20 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 20 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 20 + 22052 ] ;
  mBY[ 20 + 149*idy ] = (mBY[ 20 + 149*idy ] - sum_i ) / mA[ 3000 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 19
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 19 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 19 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 19 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 19 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 19 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 19 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 19 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 19 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 19 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 19 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 19 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 19 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 19 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 19 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 19 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 19 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 19 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 19 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 19 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 19 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 19 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 19 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 19 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 19 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 19 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 19 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 19 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 19 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 19 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 19 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 19 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 19 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 19 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 19 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 19 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 19 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 19 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 19 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 19 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 19 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 19 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 19 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 19 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 19 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 19 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 19 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 19 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 19 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 19 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 19 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 19 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 19 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 19 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 19 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 19 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 19 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 19 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 19 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 19 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 19 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 19 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 19 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 19 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 19 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 19 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 19 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 19 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 19 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 19 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 19 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 19 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 19 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 19 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 19 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 19 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 19 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 19 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 19 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 19 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 19 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 19 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 19 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 19 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 19 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 19 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 19 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 19 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 19 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 19 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 19 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 19 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 19 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 19 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 19 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 19 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 19 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 19 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 19 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 19 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 19 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 19 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 19 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 19 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 19 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 19 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 19 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 19 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 19 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 19 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 19 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 19 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 19 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 19 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 19 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 19 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 19 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 19 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 19 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 19 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 19 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 19 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 19 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 19 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 19 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 19 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 19 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 19 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 19 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 19 + 22052 ] ;
  mBY[ 19 + 149*idy ] = (mBY[ 19 + 149*idy ] - sum_i ) / mA[ 2850 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 18
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 18 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 18 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 18 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 18 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 18 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 18 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 18 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 18 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 18 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 18 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 18 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 18 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 18 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 18 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 18 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 18 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 18 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 18 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 18 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 18 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 18 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 18 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 18 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 18 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 18 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 18 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 18 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 18 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 18 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 18 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 18 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 18 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 18 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 18 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 18 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 18 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 18 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 18 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 18 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 18 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 18 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 18 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 18 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 18 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 18 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 18 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 18 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 18 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 18 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 18 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 18 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 18 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 18 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 18 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 18 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 18 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 18 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 18 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 18 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 18 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 18 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 18 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 18 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 18 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 18 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 18 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 18 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 18 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 18 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 18 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 18 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 18 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 18 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 18 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 18 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 18 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 18 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 18 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 18 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 18 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 18 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 18 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 18 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 18 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 18 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 18 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 18 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 18 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 18 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 18 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 18 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 18 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 18 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 18 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 18 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 18 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 18 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 18 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 18 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 18 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 18 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 18 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 18 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 18 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 18 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 18 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 18 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 18 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 18 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 18 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 18 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 18 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 18 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 18 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 18 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 18 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 18 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 18 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 18 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 18 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 18 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 18 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 18 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 18 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 18 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 18 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 18 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 18 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 18 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 18 + 22052 ] ;
  mBY[ 18 + 149*idy ] = (mBY[ 18 + 149*idy ] - sum_i ) / mA[ 2700 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 17
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 17 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 17 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 17 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 17 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 17 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 17 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 17 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 17 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 17 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 17 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 17 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 17 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 17 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 17 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 17 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 17 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 17 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 17 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 17 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 17 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 17 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 17 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 17 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 17 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 17 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 17 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 17 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 17 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 17 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 17 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 17 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 17 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 17 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 17 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 17 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 17 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 17 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 17 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 17 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 17 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 17 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 17 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 17 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 17 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 17 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 17 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 17 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 17 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 17 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 17 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 17 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 17 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 17 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 17 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 17 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 17 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 17 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 17 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 17 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 17 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 17 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 17 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 17 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 17 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 17 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 17 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 17 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 17 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 17 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 17 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 17 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 17 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 17 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 17 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 17 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 17 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 17 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 17 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 17 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 17 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 17 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 17 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 17 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 17 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 17 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 17 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 17 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 17 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 17 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 17 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 17 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 17 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 17 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 17 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 17 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 17 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 17 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 17 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 17 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 17 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 17 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 17 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 17 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 17 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 17 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 17 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 17 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 17 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 17 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 17 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 17 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 17 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 17 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 17 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 17 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 17 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 17 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 17 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 17 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 17 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 17 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 17 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 17 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 17 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 17 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 17 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 17 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 17 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 17 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 17 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 17 + 22052 ] ;
  mBY[ 17 + 149*idy ] = (mBY[ 17 + 149*idy ] - sum_i ) / mA[ 2550 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 16
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 16 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 16 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 16 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 16 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 16 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 16 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 16 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 16 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 16 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 16 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 16 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 16 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 16 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 16 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 16 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 16 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 16 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 16 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 16 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 16 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 16 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 16 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 16 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 16 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 16 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 16 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 16 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 16 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 16 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 16 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 16 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 16 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 16 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 16 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 16 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 16 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 16 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 16 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 16 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 16 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 16 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 16 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 16 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 16 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 16 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 16 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 16 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 16 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 16 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 16 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 16 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 16 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 16 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 16 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 16 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 16 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 16 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 16 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 16 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 16 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 16 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 16 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 16 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 16 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 16 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 16 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 16 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 16 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 16 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 16 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 16 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 16 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 16 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 16 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 16 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 16 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 16 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 16 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 16 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 16 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 16 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 16 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 16 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 16 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 16 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 16 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 16 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 16 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 16 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 16 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 16 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 16 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 16 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 16 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 16 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 16 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 16 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 16 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 16 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 16 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 16 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 16 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 16 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 16 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 16 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 16 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 16 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 16 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 16 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 16 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 16 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 16 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 16 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 16 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 16 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 16 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 16 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 16 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 16 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 16 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 16 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 16 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 16 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 16 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 16 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 16 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 16 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 16 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 16 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 16 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 16 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 16 + 22052 ] ;
  mBY[ 16 + 149*idy ] = (mBY[ 16 + 149*idy ] - sum_i ) / mA[ 2400 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 15
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 15 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 15 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 15 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 15 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 15 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 15 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 15 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 15 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 15 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 15 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 15 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 15 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 15 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 15 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 15 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 15 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 15 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 15 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 15 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 15 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 15 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 15 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 15 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 15 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 15 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 15 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 15 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 15 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 15 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 15 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 15 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 15 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 15 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 15 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 15 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 15 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 15 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 15 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 15 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 15 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 15 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 15 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 15 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 15 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 15 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 15 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 15 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 15 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 15 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 15 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 15 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 15 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 15 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 15 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 15 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 15 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 15 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 15 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 15 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 15 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 15 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 15 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 15 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 15 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 15 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 15 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 15 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 15 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 15 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 15 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 15 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 15 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 15 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 15 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 15 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 15 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 15 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 15 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 15 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 15 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 15 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 15 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 15 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 15 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 15 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 15 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 15 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 15 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 15 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 15 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 15 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 15 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 15 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 15 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 15 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 15 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 15 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 15 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 15 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 15 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 15 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 15 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 15 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 15 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 15 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 15 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 15 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 15 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 15 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 15 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 15 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 15 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 15 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 15 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 15 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 15 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 15 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 15 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 15 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 15 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 15 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 15 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 15 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 15 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 15 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 15 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 15 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 15 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 15 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 15 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 15 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 15 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 15 + 22052 ] ;
  mBY[ 15 + 149*idy ] = (mBY[ 15 + 149*idy ] - sum_i ) / mA[ 2250 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 14
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 15 + 149*idy ] * mA[ 14 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 14 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 14 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 14 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 14 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 14 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 14 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 14 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 14 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 14 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 14 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 14 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 14 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 14 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 14 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 14 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 14 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 14 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 14 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 14 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 14 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 14 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 14 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 14 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 14 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 14 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 14 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 14 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 14 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 14 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 14 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 14 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 14 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 14 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 14 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 14 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 14 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 14 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 14 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 14 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 14 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 14 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 14 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 14 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 14 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 14 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 14 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 14 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 14 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 14 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 14 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 14 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 14 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 14 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 14 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 14 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 14 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 14 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 14 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 14 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 14 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 14 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 14 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 14 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 14 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 14 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 14 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 14 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 14 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 14 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 14 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 14 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 14 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 14 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 14 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 14 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 14 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 14 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 14 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 14 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 14 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 14 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 14 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 14 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 14 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 14 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 14 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 14 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 14 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 14 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 14 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 14 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 14 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 14 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 14 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 14 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 14 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 14 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 14 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 14 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 14 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 14 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 14 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 14 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 14 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 14 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 14 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 14 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 14 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 14 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 14 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 14 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 14 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 14 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 14 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 14 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 14 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 14 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 14 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 14 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 14 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 14 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 14 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 14 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 14 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 14 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 14 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 14 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 14 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 14 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 14 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 14 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 14 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 14 + 22052 ] ;
  mBY[ 14 + 149*idy ] = (mBY[ 14 + 149*idy ] - sum_i ) / mA[ 2100 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 13
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 14 + 149*idy ] * mA[ 13 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA[ 13 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 13 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 13 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 13 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 13 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 13 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 13 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 13 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 13 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 13 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 13 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 13 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 13 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 13 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 13 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 13 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 13 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 13 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 13 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 13 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 13 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 13 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 13 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 13 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 13 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 13 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 13 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 13 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 13 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 13 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 13 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 13 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 13 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 13 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 13 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 13 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 13 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 13 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 13 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 13 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 13 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 13 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 13 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 13 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 13 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 13 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 13 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 13 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 13 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 13 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 13 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 13 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 13 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 13 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 13 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 13 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 13 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 13 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 13 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 13 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 13 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 13 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 13 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 13 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 13 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 13 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 13 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 13 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 13 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 13 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 13 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 13 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 13 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 13 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 13 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 13 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 13 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 13 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 13 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 13 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 13 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 13 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 13 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 13 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 13 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 13 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 13 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 13 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 13 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 13 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 13 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 13 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 13 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 13 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 13 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 13 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 13 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 13 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 13 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 13 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 13 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 13 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 13 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 13 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 13 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 13 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 13 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 13 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 13 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 13 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 13 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 13 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 13 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 13 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 13 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 13 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 13 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 13 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 13 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 13 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 13 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 13 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 13 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 13 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 13 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 13 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 13 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 13 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 13 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 13 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 13 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 13 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 13 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 13 + 22052 ] ;
  mBY[ 13 + 149*idy ] = (mBY[ 13 + 149*idy ] - sum_i ) / mA[ 1950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 12
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 13 + 149*idy ] * mA[ 12 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA[ 12 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA[ 12 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 12 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 12 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 12 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 12 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 12 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 12 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 12 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 12 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 12 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 12 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 12 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 12 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 12 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 12 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 12 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 12 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 12 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 12 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 12 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 12 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 12 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 12 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 12 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 12 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 12 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 12 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 12 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 12 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 12 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 12 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 12 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 12 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 12 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 12 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 12 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 12 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 12 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 12 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 12 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 12 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 12 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 12 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 12 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 12 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 12 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 12 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 12 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 12 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 12 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 12 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 12 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 12 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 12 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 12 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 12 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 12 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 12 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 12 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 12 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 12 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 12 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 12 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 12 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 12 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 12 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 12 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 12 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 12 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 12 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 12 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 12 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 12 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 12 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 12 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 12 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 12 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 12 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 12 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 12 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 12 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 12 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 12 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 12 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 12 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 12 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 12 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 12 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 12 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 12 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 12 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 12 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 12 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 12 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 12 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 12 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 12 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 12 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 12 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 12 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 12 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 12 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 12 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 12 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 12 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 12 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 12 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 12 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 12 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 12 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 12 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 12 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 12 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 12 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 12 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 12 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 12 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 12 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 12 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 12 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 12 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 12 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 12 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 12 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 12 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 12 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 12 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 12 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 12 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 12 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 12 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 12 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 12 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 12 + 22052 ] ;
  mBY[ 12 + 149*idy ] = (mBY[ 12 + 149*idy ] - sum_i ) / mA[ 1800 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 11
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 12 + 149*idy ] * mA[ 11 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA[ 11 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA[ 11 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA[ 11 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 11 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 11 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 11 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 11 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 11 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 11 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 11 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 11 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 11 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 11 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 11 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 11 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 11 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 11 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 11 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 11 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 11 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 11 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 11 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 11 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 11 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 11 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 11 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 11 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 11 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 11 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 11 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 11 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 11 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 11 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 11 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 11 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 11 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 11 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 11 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 11 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 11 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 11 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 11 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 11 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 11 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 11 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 11 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 11 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 11 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 11 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 11 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 11 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 11 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 11 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 11 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 11 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 11 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 11 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 11 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 11 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 11 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 11 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 11 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 11 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 11 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 11 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 11 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 11 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 11 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 11 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 11 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 11 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 11 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 11 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 11 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 11 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 11 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 11 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 11 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 11 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 11 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 11 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 11 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 11 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 11 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 11 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 11 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 11 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 11 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 11 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 11 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 11 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 11 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 11 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 11 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 11 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 11 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 11 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 11 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 11 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 11 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 11 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 11 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 11 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 11 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 11 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 11 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 11 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 11 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 11 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 11 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 11 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 11 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 11 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 11 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 11 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 11 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 11 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 11 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 11 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 11 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 11 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 11 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 11 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 11 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 11 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 11 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 11 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 11 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 11 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 11 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 11 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 11 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 11 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 11 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 11 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 11 + 22052 ] ;
  mBY[ 11 + 149*idy ] = (mBY[ 11 + 149*idy ] - sum_i ) / mA[ 1650 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 10
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 11 + 149*idy ] * mA[ 10 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA[ 10 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA[ 10 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA[ 10 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA[ 10 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 10 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 10 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 10 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 10 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 10 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 10 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 10 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 10 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 10 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 10 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 10 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 10 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 10 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 10 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 10 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 10 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 10 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 10 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 10 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 10 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 10 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 10 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 10 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 10 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 10 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 10 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 10 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 10 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 10 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 10 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 10 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 10 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 10 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 10 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 10 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 10 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 10 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 10 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 10 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 10 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 10 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 10 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 10 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 10 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 10 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 10 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 10 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 10 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 10 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 10 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 10 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 10 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 10 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 10 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 10 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 10 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 10 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 10 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 10 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 10 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 10 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 10 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 10 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 10 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 10 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 10 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 10 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 10 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 10 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 10 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 10 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 10 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 10 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 10 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 10 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 10 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 10 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 10 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 10 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 10 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 10 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 10 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 10 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 10 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 10 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 10 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 10 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 10 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 10 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 10 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 10 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 10 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 10 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 10 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 10 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 10 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 10 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 10 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 10 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 10 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 10 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 10 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 10 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 10 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 10 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 10 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 10 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 10 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 10 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 10 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 10 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 10 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 10 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 10 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 10 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 10 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 10 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 10 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 10 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 10 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 10 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 10 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 10 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 10 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 10 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 10 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 10 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 10 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 10 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 10 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 10 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 10 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 10 + 22052 ] ;
  mBY[ 10 + 149*idy ] = (mBY[ 10 + 149*idy ] - sum_i ) / mA[ 1500 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 9
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 10 + 149*idy ] * mA[ 9 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA[ 9 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA[ 9 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA[ 9 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA[ 9 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA[ 9 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 9 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 9 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 9 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 9 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 9 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 9 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 9 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 9 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 9 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 9 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 9 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 9 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 9 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 9 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 9 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 9 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 9 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 9 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 9 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 9 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 9 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 9 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 9 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 9 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 9 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 9 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 9 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 9 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 9 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 9 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 9 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 9 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 9 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 9 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 9 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 9 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 9 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 9 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 9 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 9 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 9 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 9 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 9 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 9 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 9 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 9 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 9 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 9 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 9 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 9 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 9 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 9 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 9 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 9 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 9 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 9 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 9 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 9 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 9 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 9 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 9 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 9 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 9 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 9 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 9 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 9 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 9 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 9 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 9 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 9 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 9 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 9 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 9 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 9 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 9 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 9 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 9 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 9 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 9 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 9 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 9 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 9 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 9 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 9 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 9 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 9 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 9 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 9 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 9 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 9 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 9 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 9 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 9 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 9 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 9 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 9 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 9 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 9 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 9 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 9 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 9 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 9 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 9 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 9 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 9 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 9 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 9 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 9 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 9 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 9 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 9 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 9 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 9 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 9 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 9 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 9 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 9 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 9 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 9 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 9 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 9 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 9 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 9 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 9 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 9 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 9 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 9 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 9 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 9 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 9 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 9 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 9 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 9 + 22052 ] ;
  mBY[ 9 + 149*idy ] = (mBY[ 9 + 149*idy ] - sum_i ) / mA[ 1350 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 8
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 9 + 149*idy ] * mA[ 8 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA[ 8 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA[ 8 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA[ 8 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA[ 8 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA[ 8 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA[ 8 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 8 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 8 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 8 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 8 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 8 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 8 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 8 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 8 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 8 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 8 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 8 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 8 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 8 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 8 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 8 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 8 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 8 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 8 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 8 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 8 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 8 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 8 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 8 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 8 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 8 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 8 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 8 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 8 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 8 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 8 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 8 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 8 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 8 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 8 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 8 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 8 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 8 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 8 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 8 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 8 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 8 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 8 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 8 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 8 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 8 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 8 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 8 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 8 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 8 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 8 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 8 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 8 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 8 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 8 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 8 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 8 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 8 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 8 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 8 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 8 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 8 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 8 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 8 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 8 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 8 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 8 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 8 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 8 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 8 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 8 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 8 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 8 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 8 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 8 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 8 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 8 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 8 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 8 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 8 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 8 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 8 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 8 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 8 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 8 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 8 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 8 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 8 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 8 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 8 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 8 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 8 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 8 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 8 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 8 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 8 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 8 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 8 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 8 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 8 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 8 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 8 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 8 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 8 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 8 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 8 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 8 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 8 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 8 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 8 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 8 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 8 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 8 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 8 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 8 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 8 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 8 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 8 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 8 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 8 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 8 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 8 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 8 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 8 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 8 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 8 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 8 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 8 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 8 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 8 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 8 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 8 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 8 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 8 + 22052 ] ;
  mBY[ 8 + 149*idy ] = (mBY[ 8 + 149*idy ] - sum_i ) / mA[ 1200 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 7
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 8 + 149*idy ] * mA[ 7 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA[ 7 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA[ 7 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA[ 7 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA[ 7 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA[ 7 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA[ 7 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA[ 7 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 7 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 7 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 7 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 7 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 7 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 7 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 7 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 7 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 7 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 7 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 7 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 7 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 7 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 7 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 7 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 7 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 7 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 7 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 7 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 7 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 7 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 7 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 7 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 7 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 7 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 7 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 7 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 7 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 7 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 7 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 7 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 7 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 7 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 7 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 7 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 7 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 7 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 7 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 7 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 7 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 7 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 7 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 7 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 7 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 7 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 7 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 7 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 7 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 7 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 7 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 7 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 7 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 7 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 7 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 7 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 7 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 7 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 7 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 7 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 7 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 7 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 7 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 7 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 7 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 7 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 7 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 7 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 7 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 7 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 7 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 7 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 7 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 7 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 7 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 7 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 7 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 7 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 7 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 7 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 7 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 7 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 7 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 7 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 7 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 7 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 7 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 7 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 7 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 7 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 7 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 7 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 7 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 7 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 7 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 7 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 7 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 7 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 7 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 7 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 7 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 7 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 7 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 7 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 7 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 7 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 7 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 7 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 7 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 7 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 7 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 7 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 7 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 7 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 7 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 7 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 7 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 7 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 7 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 7 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 7 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 7 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 7 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 7 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 7 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 7 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 7 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 7 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 7 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 7 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 7 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 7 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 7 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 7 + 22052 ] ;
  mBY[ 7 + 149*idy ] = (mBY[ 7 + 149*idy ] - sum_i ) / mA[ 1050 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 6
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 7 + 149*idy ] * mA[ 6 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA[ 6 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA[ 6 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA[ 6 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA[ 6 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA[ 6 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA[ 6 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA[ 6 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA[ 6 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 6 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 6 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 6 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 6 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 6 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 6 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 6 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 6 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 6 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 6 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 6 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 6 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 6 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 6 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 6 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 6 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 6 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 6 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 6 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 6 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 6 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 6 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 6 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 6 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 6 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 6 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 6 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 6 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 6 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 6 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 6 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 6 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 6 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 6 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 6 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 6 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 6 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 6 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 6 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 6 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 6 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 6 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 6 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 6 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 6 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 6 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 6 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 6 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 6 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 6 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 6 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 6 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 6 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 6 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 6 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 6 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 6 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 6 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 6 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 6 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 6 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 6 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 6 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 6 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 6 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 6 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 6 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 6 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 6 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 6 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 6 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 6 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 6 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 6 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 6 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 6 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 6 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 6 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 6 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 6 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 6 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 6 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 6 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 6 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 6 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 6 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 6 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 6 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 6 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 6 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 6 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 6 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 6 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 6 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 6 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 6 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 6 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 6 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 6 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 6 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 6 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 6 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 6 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 6 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 6 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 6 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 6 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 6 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 6 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 6 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 6 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 6 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 6 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 6 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 6 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 6 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 6 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 6 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 6 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 6 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 6 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 6 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 6 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 6 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 6 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 6 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 6 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 6 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 6 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 6 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 6 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 6 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 6 + 22052 ] ;
  mBY[ 6 + 149*idy ] = (mBY[ 6 + 149*idy ] - sum_i ) / mA[ 900 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 5
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 6 + 149*idy ] * mA[ 5 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA[ 5 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA[ 5 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA[ 5 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA[ 5 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA[ 5 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA[ 5 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA[ 5 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA[ 5 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA[ 5 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 5 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 5 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 5 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 5 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 5 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 5 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 5 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 5 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 5 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 5 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 5 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 5 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 5 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 5 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 5 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 5 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 5 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 5 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 5 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 5 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 5 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 5 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 5 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 5 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 5 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 5 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 5 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 5 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 5 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 5 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 5 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 5 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 5 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 5 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 5 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 5 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 5 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 5 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 5 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 5 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 5 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 5 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 5 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 5 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 5 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 5 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 5 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 5 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 5 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 5 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 5 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 5 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 5 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 5 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 5 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 5 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 5 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 5 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 5 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 5 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 5 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 5 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 5 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 5 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 5 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 5 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 5 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 5 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 5 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 5 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 5 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 5 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 5 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 5 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 5 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 5 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 5 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 5 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 5 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 5 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 5 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 5 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 5 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 5 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 5 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 5 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 5 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 5 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 5 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 5 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 5 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 5 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 5 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 5 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 5 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 5 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 5 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 5 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 5 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 5 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 5 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 5 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 5 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 5 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 5 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 5 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 5 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 5 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 5 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 5 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 5 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 5 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 5 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 5 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 5 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 5 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 5 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 5 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 5 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 5 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 5 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 5 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 5 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 5 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 5 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 5 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 5 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 5 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 5 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 5 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 5 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 5 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 5 + 22052 ] ;
  mBY[ 5 + 149*idy ] = (mBY[ 5 + 149*idy ] - sum_i ) / mA[ 750 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 4
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 5 + 149*idy ] * mA[ 4 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA[ 4 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA[ 4 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA[ 4 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA[ 4 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA[ 4 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA[ 4 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA[ 4 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA[ 4 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA[ 4 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA[ 4 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 4 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 4 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 4 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 4 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 4 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 4 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 4 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 4 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 4 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 4 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 4 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 4 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 4 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 4 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 4 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 4 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 4 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 4 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 4 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 4 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 4 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 4 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 4 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 4 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 4 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 4 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 4 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 4 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 4 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 4 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 4 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 4 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 4 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 4 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 4 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 4 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 4 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 4 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 4 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 4 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 4 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 4 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 4 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 4 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 4 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 4 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 4 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 4 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 4 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 4 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 4 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 4 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 4 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 4 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 4 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 4 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 4 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 4 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 4 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 4 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 4 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 4 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 4 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 4 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 4 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 4 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 4 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 4 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 4 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 4 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 4 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 4 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 4 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 4 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 4 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 4 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 4 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 4 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 4 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 4 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 4 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 4 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 4 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 4 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 4 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 4 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 4 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 4 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 4 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 4 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 4 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 4 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 4 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 4 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 4 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 4 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 4 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 4 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 4 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 4 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 4 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 4 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 4 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 4 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 4 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 4 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 4 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 4 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 4 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 4 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 4 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 4 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 4 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 4 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 4 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 4 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 4 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 4 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 4 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 4 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 4 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 4 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 4 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 4 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 4 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 4 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 4 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 4 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 4 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 4 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 4 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 4 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 4 + 22052 ] ;
  mBY[ 4 + 149*idy ] = (mBY[ 4 + 149*idy ] - sum_i ) / mA[ 600 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 3
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 4 + 149*idy ] * mA[ 3 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA[ 3 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA[ 3 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA[ 3 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA[ 3 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA[ 3 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA[ 3 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA[ 3 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA[ 3 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA[ 3 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA[ 3 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA[ 3 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 3 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 3 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 3 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 3 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 3 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 3 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 3 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 3 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 3 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 3 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 3 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 3 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 3 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 3 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 3 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 3 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 3 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 3 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 3 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 3 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 3 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 3 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 3 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 3 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 3 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 3 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 3 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 3 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 3 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 3 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 3 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 3 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 3 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 3 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 3 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 3 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 3 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 3 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 3 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 3 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 3 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 3 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 3 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 3 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 3 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 3 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 3 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 3 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 3 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 3 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 3 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 3 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 3 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 3 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 3 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 3 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 3 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 3 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 3 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 3 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 3 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 3 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 3 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 3 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 3 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 3 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 3 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 3 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 3 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 3 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 3 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 3 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 3 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 3 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 3 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 3 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 3 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 3 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 3 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 3 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 3 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 3 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 3 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 3 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 3 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 3 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 3 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 3 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 3 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 3 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 3 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 3 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 3 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 3 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 3 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 3 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 3 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 3 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 3 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 3 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 3 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 3 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 3 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 3 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 3 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 3 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 3 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 3 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 3 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 3 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 3 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 3 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 3 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 3 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 3 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 3 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 3 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 3 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 3 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 3 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 3 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 3 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 3 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 3 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 3 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 3 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 3 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 3 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 3 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 3 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 3 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 3 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 3 + 22052 ] ;
  mBY[ 3 + 149*idy ] = (mBY[ 3 + 149*idy ] - sum_i ) / mA[ 450 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 2
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 3 + 149*idy ] * mA[ 2 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA[ 2 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA[ 2 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA[ 2 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA[ 2 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA[ 2 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA[ 2 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA[ 2 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA[ 2 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA[ 2 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA[ 2 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA[ 2 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA[ 2 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 2 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 2 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 2 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 2 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 2 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 2 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 2 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 2 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 2 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 2 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 2 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 2 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 2 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 2 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 2 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 2 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 2 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 2 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 2 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 2 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 2 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 2 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 2 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 2 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 2 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 2 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 2 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 2 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 2 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 2 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 2 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 2 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 2 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 2 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 2 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 2 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 2 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 2 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 2 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 2 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 2 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 2 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 2 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 2 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 2 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 2 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 2 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 2 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 2 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 2 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 2 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 2 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 2 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 2 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 2 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 2 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 2 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 2 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 2 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 2 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 2 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 2 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 2 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 2 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 2 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 2 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 2 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 2 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 2 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 2 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 2 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 2 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 2 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 2 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 2 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 2 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 2 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 2 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 2 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 2 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 2 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 2 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 2 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 2 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 2 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 2 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 2 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 2 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 2 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 2 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 2 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 2 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 2 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 2 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 2 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 2 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 2 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 2 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 2 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 2 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 2 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 2 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 2 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 2 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 2 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 2 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 2 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 2 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 2 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 2 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 2 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 2 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 2 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 2 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 2 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 2 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 2 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 2 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 2 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 2 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 2 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 2 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 2 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 2 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 2 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 2 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 2 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 2 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 2 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 2 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 2 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 2 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 2 + 22052 ] ;
  mBY[ 2 + 149*idy ] = (mBY[ 2 + 149*idy ] - sum_i ) / mA[ 300 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 1
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 2 + 149*idy ] * mA[ 1 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA[ 1 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA[ 1 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA[ 1 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA[ 1 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA[ 1 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA[ 1 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA[ 1 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA[ 1 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA[ 1 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA[ 1 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA[ 1 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA[ 1 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA[ 1 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 1 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 1 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 1 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 1 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 1 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 1 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 1 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 1 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 1 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 1 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 1 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 1 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 1 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 1 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 1 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 1 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 1 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 1 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 1 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 1 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 1 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 1 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 1 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 1 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 1 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 1 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 1 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 1 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 1 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 1 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 1 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 1 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 1 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 1 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 1 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 1 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 1 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 1 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 1 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 1 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 1 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 1 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 1 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 1 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 1 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 1 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 1 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 1 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 1 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 1 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 1 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 1 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 1 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 1 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 1 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 1 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 1 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 1 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 1 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 1 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 1 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 1 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 1 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 1 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 1 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 1 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 1 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 1 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 1 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 1 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 1 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 1 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 1 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 1 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 1 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 1 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 1 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 1 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 1 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 1 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 1 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 1 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 1 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 1 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 1 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 1 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 1 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 1 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 1 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 1 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 1 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 1 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 1 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 1 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 1 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 1 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 1 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 1 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 1 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 1 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 1 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 1 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 1 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 1 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 1 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 1 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 1 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 1 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 1 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 1 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 1 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 1 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 1 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 1 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 1 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 1 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 1 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 1 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 1 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 1 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 1 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 1 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 1 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 1 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 1 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 1 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 1 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 1 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 1 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 1 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 1 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 1 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 1 + 22052 ] ;
  mBY[ 1 + 149*idy ] = (mBY[ 1 + 149*idy ] - sum_i ) / mA[ 150 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 0
if(idx==0 && idy<2 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 1 + 149*idy ] * mA[ 0 + 149 ] ;
  sum_i += mBY[ 2 + 149*idy ] * mA[ 0 + 298 ] ;
  sum_i += mBY[ 3 + 149*idy ] * mA[ 0 + 447 ] ;
  sum_i += mBY[ 4 + 149*idy ] * mA[ 0 + 596 ] ;
  sum_i += mBY[ 5 + 149*idy ] * mA[ 0 + 745 ] ;
  sum_i += mBY[ 6 + 149*idy ] * mA[ 0 + 894 ] ;
  sum_i += mBY[ 7 + 149*idy ] * mA[ 0 + 1043 ] ;
  sum_i += mBY[ 8 + 149*idy ] * mA[ 0 + 1192 ] ;
  sum_i += mBY[ 9 + 149*idy ] * mA[ 0 + 1341 ] ;
  sum_i += mBY[ 10 + 149*idy ] * mA[ 0 + 1490 ] ;
  sum_i += mBY[ 11 + 149*idy ] * mA[ 0 + 1639 ] ;
  sum_i += mBY[ 12 + 149*idy ] * mA[ 0 + 1788 ] ;
  sum_i += mBY[ 13 + 149*idy ] * mA[ 0 + 1937 ] ;
  sum_i += mBY[ 14 + 149*idy ] * mA[ 0 + 2086 ] ;
  sum_i += mBY[ 15 + 149*idy ] * mA[ 0 + 2235 ] ;
  sum_i += mBY[ 16 + 149*idy ] * mA[ 0 + 2384 ] ;
  sum_i += mBY[ 17 + 149*idy ] * mA[ 0 + 2533 ] ;
  sum_i += mBY[ 18 + 149*idy ] * mA[ 0 + 2682 ] ;
  sum_i += mBY[ 19 + 149*idy ] * mA[ 0 + 2831 ] ;
  sum_i += mBY[ 20 + 149*idy ] * mA[ 0 + 2980 ] ;
  sum_i += mBY[ 21 + 149*idy ] * mA[ 0 + 3129 ] ;
  sum_i += mBY[ 22 + 149*idy ] * mA[ 0 + 3278 ] ;
  sum_i += mBY[ 23 + 149*idy ] * mA[ 0 + 3427 ] ;
  sum_i += mBY[ 24 + 149*idy ] * mA[ 0 + 3576 ] ;
  sum_i += mBY[ 25 + 149*idy ] * mA[ 0 + 3725 ] ;
  sum_i += mBY[ 26 + 149*idy ] * mA[ 0 + 3874 ] ;
  sum_i += mBY[ 27 + 149*idy ] * mA[ 0 + 4023 ] ;
  sum_i += mBY[ 28 + 149*idy ] * mA[ 0 + 4172 ] ;
  sum_i += mBY[ 29 + 149*idy ] * mA[ 0 + 4321 ] ;
  sum_i += mBY[ 30 + 149*idy ] * mA[ 0 + 4470 ] ;
  sum_i += mBY[ 31 + 149*idy ] * mA[ 0 + 4619 ] ;
  sum_i += mBY[ 32 + 149*idy ] * mA[ 0 + 4768 ] ;
  sum_i += mBY[ 33 + 149*idy ] * mA[ 0 + 4917 ] ;
  sum_i += mBY[ 34 + 149*idy ] * mA[ 0 + 5066 ] ;
  sum_i += mBY[ 35 + 149*idy ] * mA[ 0 + 5215 ] ;
  sum_i += mBY[ 36 + 149*idy ] * mA[ 0 + 5364 ] ;
  sum_i += mBY[ 37 + 149*idy ] * mA[ 0 + 5513 ] ;
  sum_i += mBY[ 38 + 149*idy ] * mA[ 0 + 5662 ] ;
  sum_i += mBY[ 39 + 149*idy ] * mA[ 0 + 5811 ] ;
  sum_i += mBY[ 40 + 149*idy ] * mA[ 0 + 5960 ] ;
  sum_i += mBY[ 41 + 149*idy ] * mA[ 0 + 6109 ] ;
  sum_i += mBY[ 42 + 149*idy ] * mA[ 0 + 6258 ] ;
  sum_i += mBY[ 43 + 149*idy ] * mA[ 0 + 6407 ] ;
  sum_i += mBY[ 44 + 149*idy ] * mA[ 0 + 6556 ] ;
  sum_i += mBY[ 45 + 149*idy ] * mA[ 0 + 6705 ] ;
  sum_i += mBY[ 46 + 149*idy ] * mA[ 0 + 6854 ] ;
  sum_i += mBY[ 47 + 149*idy ] * mA[ 0 + 7003 ] ;
  sum_i += mBY[ 48 + 149*idy ] * mA[ 0 + 7152 ] ;
  sum_i += mBY[ 49 + 149*idy ] * mA[ 0 + 7301 ] ;
  sum_i += mBY[ 50 + 149*idy ] * mA[ 0 + 7450 ] ;
  sum_i += mBY[ 51 + 149*idy ] * mA[ 0 + 7599 ] ;
  sum_i += mBY[ 52 + 149*idy ] * mA[ 0 + 7748 ] ;
  sum_i += mBY[ 53 + 149*idy ] * mA[ 0 + 7897 ] ;
  sum_i += mBY[ 54 + 149*idy ] * mA[ 0 + 8046 ] ;
  sum_i += mBY[ 55 + 149*idy ] * mA[ 0 + 8195 ] ;
  sum_i += mBY[ 56 + 149*idy ] * mA[ 0 + 8344 ] ;
  sum_i += mBY[ 57 + 149*idy ] * mA[ 0 + 8493 ] ;
  sum_i += mBY[ 58 + 149*idy ] * mA[ 0 + 8642 ] ;
  sum_i += mBY[ 59 + 149*idy ] * mA[ 0 + 8791 ] ;
  sum_i += mBY[ 60 + 149*idy ] * mA[ 0 + 8940 ] ;
  sum_i += mBY[ 61 + 149*idy ] * mA[ 0 + 9089 ] ;
  sum_i += mBY[ 62 + 149*idy ] * mA[ 0 + 9238 ] ;
  sum_i += mBY[ 63 + 149*idy ] * mA[ 0 + 9387 ] ;
  sum_i += mBY[ 64 + 149*idy ] * mA[ 0 + 9536 ] ;
  sum_i += mBY[ 65 + 149*idy ] * mA[ 0 + 9685 ] ;
  sum_i += mBY[ 66 + 149*idy ] * mA[ 0 + 9834 ] ;
  sum_i += mBY[ 67 + 149*idy ] * mA[ 0 + 9983 ] ;
  sum_i += mBY[ 68 + 149*idy ] * mA[ 0 + 10132 ] ;
  sum_i += mBY[ 69 + 149*idy ] * mA[ 0 + 10281 ] ;
  sum_i += mBY[ 70 + 149*idy ] * mA[ 0 + 10430 ] ;
  sum_i += mBY[ 71 + 149*idy ] * mA[ 0 + 10579 ] ;
  sum_i += mBY[ 72 + 149*idy ] * mA[ 0 + 10728 ] ;
  sum_i += mBY[ 73 + 149*idy ] * mA[ 0 + 10877 ] ;
  sum_i += mBY[ 74 + 149*idy ] * mA[ 0 + 11026 ] ;
  sum_i += mBY[ 75 + 149*idy ] * mA[ 0 + 11175 ] ;
  sum_i += mBY[ 76 + 149*idy ] * mA[ 0 + 11324 ] ;
  sum_i += mBY[ 77 + 149*idy ] * mA[ 0 + 11473 ] ;
  sum_i += mBY[ 78 + 149*idy ] * mA[ 0 + 11622 ] ;
  sum_i += mBY[ 79 + 149*idy ] * mA[ 0 + 11771 ] ;
  sum_i += mBY[ 80 + 149*idy ] * mA[ 0 + 11920 ] ;
  sum_i += mBY[ 81 + 149*idy ] * mA[ 0 + 12069 ] ;
  sum_i += mBY[ 82 + 149*idy ] * mA[ 0 + 12218 ] ;
  sum_i += mBY[ 83 + 149*idy ] * mA[ 0 + 12367 ] ;
  sum_i += mBY[ 84 + 149*idy ] * mA[ 0 + 12516 ] ;
  sum_i += mBY[ 85 + 149*idy ] * mA[ 0 + 12665 ] ;
  sum_i += mBY[ 86 + 149*idy ] * mA[ 0 + 12814 ] ;
  sum_i += mBY[ 87 + 149*idy ] * mA[ 0 + 12963 ] ;
  sum_i += mBY[ 88 + 149*idy ] * mA[ 0 + 13112 ] ;
  sum_i += mBY[ 89 + 149*idy ] * mA[ 0 + 13261 ] ;
  sum_i += mBY[ 90 + 149*idy ] * mA[ 0 + 13410 ] ;
  sum_i += mBY[ 91 + 149*idy ] * mA[ 0 + 13559 ] ;
  sum_i += mBY[ 92 + 149*idy ] * mA[ 0 + 13708 ] ;
  sum_i += mBY[ 93 + 149*idy ] * mA[ 0 + 13857 ] ;
  sum_i += mBY[ 94 + 149*idy ] * mA[ 0 + 14006 ] ;
  sum_i += mBY[ 95 + 149*idy ] * mA[ 0 + 14155 ] ;
  sum_i += mBY[ 96 + 149*idy ] * mA[ 0 + 14304 ] ;
  sum_i += mBY[ 97 + 149*idy ] * mA[ 0 + 14453 ] ;
  sum_i += mBY[ 98 + 149*idy ] * mA[ 0 + 14602 ] ;
  sum_i += mBY[ 99 + 149*idy ] * mA[ 0 + 14751 ] ;
  sum_i += mBY[ 100 + 149*idy ] * mA[ 0 + 14900 ] ;
  sum_i += mBY[ 101 + 149*idy ] * mA[ 0 + 15049 ] ;
  sum_i += mBY[ 102 + 149*idy ] * mA[ 0 + 15198 ] ;
  sum_i += mBY[ 103 + 149*idy ] * mA[ 0 + 15347 ] ;
  sum_i += mBY[ 104 + 149*idy ] * mA[ 0 + 15496 ] ;
  sum_i += mBY[ 105 + 149*idy ] * mA[ 0 + 15645 ] ;
  sum_i += mBY[ 106 + 149*idy ] * mA[ 0 + 15794 ] ;
  sum_i += mBY[ 107 + 149*idy ] * mA[ 0 + 15943 ] ;
  sum_i += mBY[ 108 + 149*idy ] * mA[ 0 + 16092 ] ;
  sum_i += mBY[ 109 + 149*idy ] * mA[ 0 + 16241 ] ;
  sum_i += mBY[ 110 + 149*idy ] * mA[ 0 + 16390 ] ;
  sum_i += mBY[ 111 + 149*idy ] * mA[ 0 + 16539 ] ;
  sum_i += mBY[ 112 + 149*idy ] * mA[ 0 + 16688 ] ;
  sum_i += mBY[ 113 + 149*idy ] * mA[ 0 + 16837 ] ;
  sum_i += mBY[ 114 + 149*idy ] * mA[ 0 + 16986 ] ;
  sum_i += mBY[ 115 + 149*idy ] * mA[ 0 + 17135 ] ;
  sum_i += mBY[ 116 + 149*idy ] * mA[ 0 + 17284 ] ;
  sum_i += mBY[ 117 + 149*idy ] * mA[ 0 + 17433 ] ;
  sum_i += mBY[ 118 + 149*idy ] * mA[ 0 + 17582 ] ;
  sum_i += mBY[ 119 + 149*idy ] * mA[ 0 + 17731 ] ;
  sum_i += mBY[ 120 + 149*idy ] * mA[ 0 + 17880 ] ;
  sum_i += mBY[ 121 + 149*idy ] * mA[ 0 + 18029 ] ;
  sum_i += mBY[ 122 + 149*idy ] * mA[ 0 + 18178 ] ;
  sum_i += mBY[ 123 + 149*idy ] * mA[ 0 + 18327 ] ;
  sum_i += mBY[ 124 + 149*idy ] * mA[ 0 + 18476 ] ;
  sum_i += mBY[ 125 + 149*idy ] * mA[ 0 + 18625 ] ;
  sum_i += mBY[ 126 + 149*idy ] * mA[ 0 + 18774 ] ;
  sum_i += mBY[ 127 + 149*idy ] * mA[ 0 + 18923 ] ;
  sum_i += mBY[ 128 + 149*idy ] * mA[ 0 + 19072 ] ;
  sum_i += mBY[ 129 + 149*idy ] * mA[ 0 + 19221 ] ;
  sum_i += mBY[ 130 + 149*idy ] * mA[ 0 + 19370 ] ;
  sum_i += mBY[ 131 + 149*idy ] * mA[ 0 + 19519 ] ;
  sum_i += mBY[ 132 + 149*idy ] * mA[ 0 + 19668 ] ;
  sum_i += mBY[ 133 + 149*idy ] * mA[ 0 + 19817 ] ;
  sum_i += mBY[ 134 + 149*idy ] * mA[ 0 + 19966 ] ;
  sum_i += mBY[ 135 + 149*idy ] * mA[ 0 + 20115 ] ;
  sum_i += mBY[ 136 + 149*idy ] * mA[ 0 + 20264 ] ;
  sum_i += mBY[ 137 + 149*idy ] * mA[ 0 + 20413 ] ;
  sum_i += mBY[ 138 + 149*idy ] * mA[ 0 + 20562 ] ;
  sum_i += mBY[ 139 + 149*idy ] * mA[ 0 + 20711 ] ;
  sum_i += mBY[ 140 + 149*idy ] * mA[ 0 + 20860 ] ;
  sum_i += mBY[ 141 + 149*idy ] * mA[ 0 + 21009 ] ;
  sum_i += mBY[ 142 + 149*idy ] * mA[ 0 + 21158 ] ;
  sum_i += mBY[ 143 + 149*idy ] * mA[ 0 + 21307 ] ;
  sum_i += mBY[ 144 + 149*idy ] * mA[ 0 + 21456 ] ;
  sum_i += mBY[ 145 + 149*idy ] * mA[ 0 + 21605 ] ;
  sum_i += mBY[ 146 + 149*idy ] * mA[ 0 + 21754 ] ;
  sum_i += mBY[ 147 + 149*idy ] * mA[ 0 + 21903 ] ;
  sum_i += mBY[ 148 + 149*idy ] * mA[ 0 + 22052 ] ;
  mBY[ 0 + 149*idy ] = (mBY[ 0 + 149*idy ] - sum_i ) / mA[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
//-------------------------------------------------------------------------------------
mr_AKG_1_M_0 = mBY[ 0 ];
mr_AKG_2_M_0 = mBY[ 1 ];
mr_AKG_3_M_0 = mBY[ 2 ];
mr_AKG_4_M_0 = mBY[ 3 ];
mr_AKG_5_M_0 = mBY[ 4 ];
mr_Ac_1_M_0 = mBY[ 5 ];
mr_Ac_2_M_0 = mBY[ 6 ];
mr_AcCoA_1_M_0 = mBY[ 7 ];
mr_AcCoA_2_M_0 = mBY[ 8 ];
mr_Asp_1_M_0 = mBY[ 9 ];
mr_Asp_2_M_0 = mBY[ 10 ];
mr_Asp_3_M_0 = mBY[ 11 ];
mr_Asp_4_M_0 = mBY[ 12 ];
mr_CO2_1_M_0 = mBY[ 13 ];
mr_Cit_1_M_0 = mBY[ 14 ];
mr_Cit_2_M_0 = mBY[ 15 ];
mr_Cit_3_M_0 = mBY[ 16 ];
mr_Cit_4_M_0 = mBY[ 17 ];
mr_Cit_5_M_0 = mBY[ 18 ];
mr_Cit_6_M_0 = mBY[ 19 ];
mr_Cys_1_M_0 = mBY[ 20 ];
mr_Cys_2_M_0 = mBY[ 21 ];
mr_Cys_3_M_0 = mBY[ 22 ];
mr_DHAP_1_M_0 = mBY[ 23 ];
mr_DHAP_2_M_0 = mBY[ 24 ];
mr_DHAP_3_M_0 = mBY[ 25 ];
mr_E4P_1_M_0 = mBY[ 26 ];
mr_E4P_2_M_0 = mBY[ 27 ];
mr_E4P_3_M_0 = mBY[ 28 ];
mr_E4P_4_M_0 = mBY[ 29 ];
mr_F6P_1_M_0 = mBY[ 30 ];
mr_F6P_2_M_0 = mBY[ 31 ];
mr_F6P_3_M_0 = mBY[ 32 ];
mr_F6P_4_M_0 = mBY[ 33 ];
mr_F6P_5_M_0 = mBY[ 34 ];
mr_F6P_6_M_0 = mBY[ 35 ];
mr_FBP_1_M_0 = mBY[ 36 ];
mr_FBP_2_M_0 = mBY[ 37 ];
mr_FBP_3_M_0 = mBY[ 38 ];
mr_FBP_4_M_0 = mBY[ 39 ];
mr_FBP_5_M_0 = mBY[ 40 ];
mr_FBP_6_M_0 = mBY[ 41 ];
mr_Fum_1_M_0 = mBY[ 42 ];
mr_Fum_2_M_0 = mBY[ 43 ];
mr_Fum_3_M_0 = mBY[ 44 ];
mr_Fum_4_M_0 = mBY[ 45 ];
mr_G6P_1_M_0 = mBY[ 46 ];
mr_G6P_2_M_0 = mBY[ 47 ];
mr_G6P_3_M_0 = mBY[ 48 ];
mr_G6P_4_M_0 = mBY[ 49 ];
mr_G6P_5_M_0 = mBY[ 50 ];
mr_G6P_6_M_0 = mBY[ 51 ];
mr_GAP_1_M_0 = mBY[ 52 ];
mr_GAP_2_M_0 = mBY[ 53 ];
mr_GAP_3_M_0 = mBY[ 54 ];
mr_Gln_1_M_0 = mBY[ 55 ];
mr_Gln_2_M_0 = mBY[ 56 ];
mr_Gln_3_M_0 = mBY[ 57 ];
mr_Gln_4_M_0 = mBY[ 58 ];
mr_Gln_5_M_0 = mBY[ 59 ];
mr_Glu_1_M_0 = mBY[ 60 ];
mr_Glu_2_M_0 = mBY[ 61 ];
mr_Glu_3_M_0 = mBY[ 62 ];
mr_Glu_4_M_0 = mBY[ 63 ];
mr_Glu_5_M_0 = mBY[ 64 ];
mr_Gly_1_M_0 = mBY[ 65 ];
mr_Gly_2_M_0 = mBY[ 66 ];
mr_Glyox_1_M_0 = mBY[ 67 ];
mr_Glyox_2_M_0 = mBY[ 68 ];
mr_ICit_1_M_0 = mBY[ 69 ];
mr_ICit_2_M_0 = mBY[ 70 ];
mr_ICit_3_M_0 = mBY[ 71 ];
mr_ICit_4_M_0 = mBY[ 72 ];
mr_ICit_5_M_0 = mBY[ 73 ];
mr_ICit_6_M_0 = mBY[ 74 ];
mr_KDPG_1_M_0 = mBY[ 75 ];
mr_KDPG_2_M_0 = mBY[ 76 ];
mr_KDPG_3_M_0 = mBY[ 77 ];
mr_KDPG_4_M_0 = mBY[ 78 ];
mr_KDPG_5_M_0 = mBY[ 79 ];
mr_KDPG_6_M_0 = mBY[ 80 ];
mr_LLDAP_1_M_0 = mBY[ 81 ];
mr_LLDAP_7_M_0 = mBY[ 82 ];
mr_MEETHF_1_M_0 = mBY[ 83 ];
mr_Mal_1_M_0 = mBY[ 84 ];
mr_Mal_2_M_0 = mBY[ 85 ];
mr_Mal_3_M_0 = mBY[ 86 ];
mr_Mal_4_M_0 = mBY[ 87 ];
mr_OAC_1_M_0 = mBY[ 88 ];
mr_OAC_2_M_0 = mBY[ 89 ];
mr_OAC_3_M_0 = mBY[ 90 ];
mr_OAC_4_M_0 = mBY[ 91 ];
mr_PEP_1_M_0 = mBY[ 92 ];
mr_PEP_2_M_0 = mBY[ 93 ];
mr_PEP_3_M_0 = mBY[ 94 ];
mr_Pyr_1_M_0 = mBY[ 95 ];
mr_Pyr_2_M_0 = mBY[ 96 ];
mr_Pyr_3_M_0 = mBY[ 97 ];
mr_R5P_1_M_0 = mBY[ 98 ];
mr_R5P_2_M_0 = mBY[ 99 ];
mr_R5P_3_M_0 = mBY[ 100 ];
mr_R5P_4_M_0 = mBY[ 101 ];
mr_R5P_5_M_0 = mBY[ 102 ];
mr_Ru5P_1_M_0 = mBY[ 103 ];
mr_Ru5P_2_M_0 = mBY[ 104 ];
mr_Ru5P_3_M_0 = mBY[ 105 ];
mr_Ru5P_4_M_0 = mBY[ 106 ];
mr_Ru5P_5_M_0 = mBY[ 107 ];
mr_S7P_1_M_0 = mBY[ 108 ];
mr_S7P_2_M_0 = mBY[ 109 ];
mr_S7P_3_M_0 = mBY[ 110 ];
mr_S7P_4_M_0 = mBY[ 111 ];
mr_S7P_5_M_0 = mBY[ 112 ];
mr_S7P_6_M_0 = mBY[ 113 ];
mr_S7P_7_M_0 = mBY[ 114 ];
mr_Ser_1_M_0 = mBY[ 115 ];
mr_Ser_2_M_0 = mBY[ 116 ];
mr_Ser_3_M_0 = mBY[ 117 ];
mr_Suc_1_M_0 = mBY[ 118 ];
mr_Suc_2_M_0 = mBY[ 119 ];
mr_Suc_3_M_0 = mBY[ 120 ];
mr_Suc_4_M_0 = mBY[ 121 ];
mr_SucCoA_1_M_0 = mBY[ 122 ];
mr_SucCoA_2_M_0 = mBY[ 123 ];
mr_SucCoA_3_M_0 = mBY[ 124 ];
mr_SucCoA_4_M_0 = mBY[ 125 ];
mr_TAC3_1_M_0 = mBY[ 126 ];
mr_TAC3_2_M_0 = mBY[ 127 ];
mr_TAC3_3_M_0 = mBY[ 128 ];
mr_TKC2_1_M_0 = mBY[ 129 ];
mr_TKC2_2_M_0 = mBY[ 130 ];
mr_Thr_1_M_0 = mBY[ 131 ];
mr_Thr_2_M_0 = mBY[ 132 ];
mr_Thr_3_M_0 = mBY[ 133 ];
mr_Thr_4_M_0 = mBY[ 134 ];
mr_X3PG_1_M_0 = mBY[ 135 ];
mr_X3PG_2_M_0 = mBY[ 136 ];
mr_X3PG_3_M_0 = mBY[ 137 ];
mr_X5P_1_M_0 = mBY[ 138 ];
mr_X5P_2_M_0 = mBY[ 139 ];
mr_X5P_3_M_0 = mBY[ 140 ];
mr_X5P_4_M_0 = mBY[ 141 ];
mr_X5P_5_M_0 = mBY[ 142 ];
mr_X6PG_1_M_0 = mBY[ 143 ];
mr_X6PG_2_M_0 = mBY[ 144 ];
mr_X6PG_3_M_0 = mBY[ 145 ];
mr_X6PG_4_M_0 = mBY[ 146 ];
mr_X6PG_5_M_0 = mBY[ 147 ];
mr_X6PG_6_M_0 = mBY[ 148 ];
mr_AKG_1_M_1 = mBY[ 149 ];
mr_AKG_2_M_1 = mBY[ 150 ];
mr_AKG_3_M_1 = mBY[ 151 ];
mr_AKG_4_M_1 = mBY[ 152 ];
mr_AKG_5_M_1 = mBY[ 153 ];
mr_Ac_1_M_1 = mBY[ 154 ];
mr_Ac_2_M_1 = mBY[ 155 ];
mr_AcCoA_1_M_1 = mBY[ 156 ];
mr_AcCoA_2_M_1 = mBY[ 157 ];
mr_Asp_1_M_1 = mBY[ 158 ];
mr_Asp_2_M_1 = mBY[ 159 ];
mr_Asp_3_M_1 = mBY[ 160 ];
mr_Asp_4_M_1 = mBY[ 161 ];
mr_CO2_1_M_1 = mBY[ 162 ];
mr_Cit_1_M_1 = mBY[ 163 ];
mr_Cit_2_M_1 = mBY[ 164 ];
mr_Cit_3_M_1 = mBY[ 165 ];
mr_Cit_4_M_1 = mBY[ 166 ];
mr_Cit_5_M_1 = mBY[ 167 ];
mr_Cit_6_M_1 = mBY[ 168 ];
mr_Cys_1_M_1 = mBY[ 169 ];
mr_Cys_2_M_1 = mBY[ 170 ];
mr_Cys_3_M_1 = mBY[ 171 ];
mr_DHAP_1_M_1 = mBY[ 172 ];
mr_DHAP_2_M_1 = mBY[ 173 ];
mr_DHAP_3_M_1 = mBY[ 174 ];
mr_E4P_1_M_1 = mBY[ 175 ];
mr_E4P_2_M_1 = mBY[ 176 ];
mr_E4P_3_M_1 = mBY[ 177 ];
mr_E4P_4_M_1 = mBY[ 178 ];
mr_F6P_1_M_1 = mBY[ 179 ];
mr_F6P_2_M_1 = mBY[ 180 ];
mr_F6P_3_M_1 = mBY[ 181 ];
mr_F6P_4_M_1 = mBY[ 182 ];
mr_F6P_5_M_1 = mBY[ 183 ];
mr_F6P_6_M_1 = mBY[ 184 ];
mr_FBP_1_M_1 = mBY[ 185 ];
mr_FBP_2_M_1 = mBY[ 186 ];
mr_FBP_3_M_1 = mBY[ 187 ];
mr_FBP_4_M_1 = mBY[ 188 ];
mr_FBP_5_M_1 = mBY[ 189 ];
mr_FBP_6_M_1 = mBY[ 190 ];
mr_Fum_1_M_1 = mBY[ 191 ];
mr_Fum_2_M_1 = mBY[ 192 ];
mr_Fum_3_M_1 = mBY[ 193 ];
mr_Fum_4_M_1 = mBY[ 194 ];
mr_G6P_1_M_1 = mBY[ 195 ];
mr_G6P_2_M_1 = mBY[ 196 ];
mr_G6P_3_M_1 = mBY[ 197 ];
mr_G6P_4_M_1 = mBY[ 198 ];
mr_G6P_5_M_1 = mBY[ 199 ];
mr_G6P_6_M_1 = mBY[ 200 ];
mr_GAP_1_M_1 = mBY[ 201 ];
mr_GAP_2_M_1 = mBY[ 202 ];
mr_GAP_3_M_1 = mBY[ 203 ];
mr_Gln_1_M_1 = mBY[ 204 ];
mr_Gln_2_M_1 = mBY[ 205 ];
mr_Gln_3_M_1 = mBY[ 206 ];
mr_Gln_4_M_1 = mBY[ 207 ];
mr_Gln_5_M_1 = mBY[ 208 ];
mr_Glu_1_M_1 = mBY[ 209 ];
mr_Glu_2_M_1 = mBY[ 210 ];
mr_Glu_3_M_1 = mBY[ 211 ];
mr_Glu_4_M_1 = mBY[ 212 ];
mr_Glu_5_M_1 = mBY[ 213 ];
mr_Gly_1_M_1 = mBY[ 214 ];
mr_Gly_2_M_1 = mBY[ 215 ];
mr_Glyox_1_M_1 = mBY[ 216 ];
mr_Glyox_2_M_1 = mBY[ 217 ];
mr_ICit_1_M_1 = mBY[ 218 ];
mr_ICit_2_M_1 = mBY[ 219 ];
mr_ICit_3_M_1 = mBY[ 220 ];
mr_ICit_4_M_1 = mBY[ 221 ];
mr_ICit_5_M_1 = mBY[ 222 ];
mr_ICit_6_M_1 = mBY[ 223 ];
mr_KDPG_1_M_1 = mBY[ 224 ];
mr_KDPG_2_M_1 = mBY[ 225 ];
mr_KDPG_3_M_1 = mBY[ 226 ];
mr_KDPG_4_M_1 = mBY[ 227 ];
mr_KDPG_5_M_1 = mBY[ 228 ];
mr_KDPG_6_M_1 = mBY[ 229 ];
mr_LLDAP_1_M_1 = mBY[ 230 ];
mr_LLDAP_7_M_1 = mBY[ 231 ];
mr_MEETHF_1_M_1 = mBY[ 232 ];
mr_Mal_1_M_1 = mBY[ 233 ];
mr_Mal_2_M_1 = mBY[ 234 ];
mr_Mal_3_M_1 = mBY[ 235 ];
mr_Mal_4_M_1 = mBY[ 236 ];
mr_OAC_1_M_1 = mBY[ 237 ];
mr_OAC_2_M_1 = mBY[ 238 ];
mr_OAC_3_M_1 = mBY[ 239 ];
mr_OAC_4_M_1 = mBY[ 240 ];
mr_PEP_1_M_1 = mBY[ 241 ];
mr_PEP_2_M_1 = mBY[ 242 ];
mr_PEP_3_M_1 = mBY[ 243 ];
mr_Pyr_1_M_1 = mBY[ 244 ];
mr_Pyr_2_M_1 = mBY[ 245 ];
mr_Pyr_3_M_1 = mBY[ 246 ];
mr_R5P_1_M_1 = mBY[ 247 ];
mr_R5P_2_M_1 = mBY[ 248 ];
mr_R5P_3_M_1 = mBY[ 249 ];
mr_R5P_4_M_1 = mBY[ 250 ];
mr_R5P_5_M_1 = mBY[ 251 ];
mr_Ru5P_1_M_1 = mBY[ 252 ];
mr_Ru5P_2_M_1 = mBY[ 253 ];
mr_Ru5P_3_M_1 = mBY[ 254 ];
mr_Ru5P_4_M_1 = mBY[ 255 ];
mr_Ru5P_5_M_1 = mBY[ 256 ];
mr_S7P_1_M_1 = mBY[ 257 ];
mr_S7P_2_M_1 = mBY[ 258 ];
mr_S7P_3_M_1 = mBY[ 259 ];
mr_S7P_4_M_1 = mBY[ 260 ];
mr_S7P_5_M_1 = mBY[ 261 ];
mr_S7P_6_M_1 = mBY[ 262 ];
mr_S7P_7_M_1 = mBY[ 263 ];
mr_Ser_1_M_1 = mBY[ 264 ];
mr_Ser_2_M_1 = mBY[ 265 ];
mr_Ser_3_M_1 = mBY[ 266 ];
mr_Suc_1_M_1 = mBY[ 267 ];
mr_Suc_2_M_1 = mBY[ 268 ];
mr_Suc_3_M_1 = mBY[ 269 ];
mr_Suc_4_M_1 = mBY[ 270 ];
mr_SucCoA_1_M_1 = mBY[ 271 ];
mr_SucCoA_2_M_1 = mBY[ 272 ];
mr_SucCoA_3_M_1 = mBY[ 273 ];
mr_SucCoA_4_M_1 = mBY[ 274 ];
mr_TAC3_1_M_1 = mBY[ 275 ];
mr_TAC3_2_M_1 = mBY[ 276 ];
mr_TAC3_3_M_1 = mBY[ 277 ];
mr_TKC2_1_M_1 = mBY[ 278 ];
mr_TKC2_2_M_1 = mBY[ 279 ];
mr_Thr_1_M_1 = mBY[ 280 ];
mr_Thr_2_M_1 = mBY[ 281 ];
mr_Thr_3_M_1 = mBY[ 282 ];
mr_Thr_4_M_1 = mBY[ 283 ];
mr_X3PG_1_M_1 = mBY[ 284 ];
mr_X3PG_2_M_1 = mBY[ 285 ];
mr_X3PG_3_M_1 = mBY[ 286 ];
mr_X5P_1_M_1 = mBY[ 287 ];
mr_X5P_2_M_1 = mBY[ 288 ];
mr_X5P_3_M_1 = mBY[ 289 ];
mr_X5P_4_M_1 = mBY[ 290 ];
mr_X5P_5_M_1 = mBY[ 291 ];
mr_X6PG_1_M_1 = mBY[ 292 ];
mr_X6PG_2_M_1 = mBY[ 293 ];
mr_X6PG_3_M_1 = mBY[ 294 ];
mr_X6PG_4_M_1 = mBY[ 295 ];
mr_X6PG_5_M_1 = mBY[ 296 ];
mr_X6PG_6_M_1 = mBY[ 297 ];
barrier(CLK_LOCAL_MEM_FENCE); 
//-------------------------------------------------------------------------------------
//----Init A---------------------------------------------------------------------------------
if(idx==0 && idy==0){
mA[0] = ( (  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v55_aa_fw   )  +(  -1.0f  * v_v53_aa_fw   )  +(  -1.0f  * v_v52_aa_fw   )  +(  -1.0f  * v_v56_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v40_aa_fw   )  +(  -1.0f  * v_v42_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v23_tca_fw   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v54_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_d   )   ) ; 
mA[1] = 0.0f; 
mA[2] = 0.0f; 
mA[3] = 0.0f; 
mA[4] = 0.0f; 
mA[5] = 0.0f; 
mA[6] = 0.0f; 
mA[7] = 0.0f; 
mA[8] = 0.0f; 
mA[9] = 0.0f; 
mA[10] = 0.0f; 
mA[11] = 0.0f; 
mA[12] = 0.0f; 
mA[13] = 0.0f; 
mA[14] = 0.0f; 
mA[15] = 0.0f; 
mA[16] = 0.0f; 
mA[17] = 0.0f; 
mA[18] = 0.0f; 
mA[19] = 0.0f; 
mA[20] = 0.0f; 
mA[21] = 0.0f; 
mA[22] = 0.0f; 
mA[23] = 0.0f; 
mA[24] = 0.0f; 
mA[25] = 0.0f; 
mA[26] = 0.0f; 
mA[27] = 0.0f; 
mA[28] = 0.0f; 
mA[29] = 0.0f; 
mA[30] = 0.0f; 
mA[31] = 0.0f; 
mA[32] = 0.0f; 
mA[33] = 0.0f; 
mA[34] = 0.0f; 
mA[35] = 0.0f; 
mA[36] = 0.0f; 
mA[37] = 0.0f; 
mA[38] = 0.0f; 
mA[39] = 0.0f; 
mA[40] = 0.0f; 
mA[41] =  v_v36_aa_fw ; 
mA[42] = 0.0f; 
mA[43] = 0.0f; 
mA[44] = 0.0f; 
mA[45] = 0.0f; 
mA[46] = 0.0f; 
mA[47] =  v_v23_tca_bw ; 
mA[48] = 0.0f; 
mA[49] = 0.0f; 
mA[50] = 0.0f; 
mA[51] = 0.0f; 
mA[52] = 0.0f; 
mA[53] = 0.0f; 
mA[54] = 0.0f; 
mA[55] = 0.0f; 
mA[56] = 0.0f; 
mA[57] = 0.0f; 
mA[58] = 0.0f; 
mA[59] = 0.0f; 
mA[60] = 0.0f; 
mA[61] = 0.0f; 
mA[62] = 0.0f; 
mA[63] = 0.0f; 
mA[64] = 0.0f; 
mA[65] = 0.0f; 
mA[66] = 0.0f; 
mA[67] = 0.0f; 
mA[68] = 0.0f; 
mA[69] = 0.0f; 
mA[70] = 0.0f; 
mA[71] = 0.0f; 
mA[72] = 0.0f; 
mA[73] = 0.0f; 
mA[74] = 0.0f; 
mA[75] = 0.0f; 
mA[76] = 0.0f; 
mA[77] = 0.0f; 
mA[78] = 0.0f; 
mA[79] = 0.0f; 
mA[80] = 0.0f; 
mA[81] = 0.0f; 
mA[82] = 0.0f; 
mA[83] = 0.0f; 
mA[84] = 0.0f; 
mA[85] = 0.0f; 
mA[86] = 0.0f; 
mA[87] = 0.0f; 
mA[88] = 0.0f; 
mA[89] = 0.0f; 
mA[90] = 0.0f; 
mA[91] = 0.0f; 
mA[92] = 0.0f; 
mA[93] = 0.0f; 
mA[94] = 0.0f; 
mA[95] = 0.0f; 
mA[96] = 0.0f; 
mA[97] = 0.0f; 
mA[98] = 0.0f; 
mA[99] = ( (  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v52_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v40_aa_fw   )  +(  -1.0f  * v_v56_aa_fw   )  +(  -1.0f  * v_v42_aa_fw   )  +(  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v53_aa_fw   )  +(  -1.0f  * v_v23_tca_fw   )  +(  -1.0f  * v_v55_aa_fw   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v54_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_b   )   ) ; 
mA[100] = 0.0f; 
mA[101] = 0.0f; 
mA[102] = 0.0f; 
mA[103] = 0.0f; 
mA[104] = 0.0f; 
mA[105] = 0.0f; 
mA[106] = 0.0f; 
mA[107] = 0.0f; 
mA[108] = 0.0f; 
mA[109] = 0.0f; 
mA[110] = 0.0f; 
mA[111] = 0.0f; 
mA[112] = 0.0f; 
mA[113] = 0.0f; 
mA[114] = 0.0f; 
mA[115] = 0.0f; 
mA[116] = 0.0f; 
mA[117] = 0.0f; 
mA[118] = 0.0f; 
mA[119] = 0.0f; 
mA[120] = 0.0f; 
mA[121] = 0.0f; 
mA[122] = 0.0f; 
mA[123] = 0.0f; 
mA[124] = 0.0f; 
mA[125] = 0.0f; 
mA[126] = 0.0f; 
mA[127] = 0.0f; 
mA[128] = 0.0f; 
mA[129] = 0.0f; 
mA[130] = 0.0f; 
mA[131] = 0.0f; 
mA[132] = 0.0f; 
mA[133] = 0.0f; 
mA[134] = 0.0f; 
mA[135] = 0.0f; 
mA[136] = 0.0f; 
mA[137] = 0.0f; 
mA[138] = 0.0f; 
mA[139] = 0.0f; 
mA[140] =  v_v36_aa_fw ; 
mA[141] = 0.0f; 
mA[142] = 0.0f; 
mA[143] = 0.0f; 
mA[144] = 0.0f; 
mA[145] = 0.0f; 
mA[146] =  v_v23_tca_bw ; 
mA[147] = 0.0f; 
mA[148] = 0.0f; 
mA[149] = 0.0f; 
mA[150] = 0.0f; 
mA[151] = 0.0f; 
mA[152] = 0.0f; 
mA[153] = 0.0f; 
mA[154] = 0.0f; 
mA[155] = 0.0f; 
mA[156] = 0.0f; 
mA[157] = 0.0f; 
mA[158] = 0.0f; 
mA[159] = 0.0f; 
mA[160] = 0.0f; 
mA[161] = 0.0f; 
mA[162] = 0.0f; 
mA[163] = 0.0f; 
mA[164] = 0.0f; 
mA[165] = 0.0f; 
mA[166] = 0.0f; 
mA[167] = 0.0f; 
mA[168] = 0.0f; 
mA[169] = 0.0f; 
mA[170] = 0.0f; 
mA[171] = 0.0f; 
mA[172] = 0.0f; 
mA[173] = 0.0f; 
mA[174] = 0.0f; 
mA[175] = 0.0f; 
mA[176] = 0.0f; 
mA[177] = 0.0f; 
mA[178] = 0.0f; 
mA[179] =  v_v24_tca_fw ; 
mA[180] = 0.0f; 
mA[181] = 0.0f; 
mA[182] = 0.0f; 
mA[183] = 0.0f; 
mA[184] = 0.0f; 
mA[185] = 0.0f; 
mA[186] = 0.0f; 
mA[187] = 0.0f; 
mA[188] = 0.0f; 
mA[189] = 0.0f; 
mA[190] = 0.0f; 
mA[191] = 0.0f; 
mA[192] = 0.0f; 
mA[193] = 0.0f; 
mA[194] = 0.0f; 
mA[195] = 0.0f; 
mA[196] = 0.0f; 
mA[197] = 0.0f; 
mA[198] = ( (  -1.0f  * v_v55_aa_fw   )  +(  -1.0f  * v_v56_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v53_aa_fw   )  +(  -1.0f  * v_v42_aa_fw   )  +(  -1.0f  * v_v40_aa_fw   )  +(  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v54_aa_fw   )  +(  -1.0f  * v_v23_tca_fw   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v52_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v39_aa_fw   )   ) ; 
mA[199] = 0.0f; 
mA[200] = 0.0f; 
mA[201] = 0.0f; 
mA[202] = 0.0f; 
mA[203] = 0.0f; 
mA[204] = 0.0f; 
mA[205] = 0.0f; 
mA[206] = 0.0f; 
mA[207] = 0.0f; 
mA[208] = 0.0f; 
mA[209] = 0.0f; 
mA[210] = 0.0f; 
mA[211] = 0.0f; 
mA[212] = 0.0f; 
mA[213] = 0.0f; 
mA[214] = 0.0f; 
mA[215] = 0.0f; 
mA[216] = 0.0f; 
mA[217] = 0.0f; 
mA[218] = 0.0f; 
mA[219] = 0.0f; 
mA[220] = 0.0f; 
mA[221] = 0.0f; 
mA[222] = 0.0f; 
mA[223] = 0.0f; 
mA[224] = 0.0f; 
mA[225] = 0.0f; 
mA[226] = 0.0f; 
mA[227] = 0.0f; 
mA[228] = 0.0f; 
mA[229] = 0.0f; 
mA[230] = 0.0f; 
mA[231] = 0.0f; 
mA[232] = 0.0f; 
mA[233] = 0.0f; 
mA[234] = 0.0f; 
mA[235] = 0.0f; 
mA[236] = 0.0f; 
mA[237] = 0.0f; 
mA[238] = 0.0f; 
mA[239] =  v_v36_aa_fw ; 
mA[240] = 0.0f; 
mA[241] = 0.0f; 
mA[242] = 0.0f; 
mA[243] = 0.0f; 
mA[244] = 0.0f; 
mA[245] =  v_v23_tca_bw ; 
mA[246] = 0.0f; 
mA[247] = 0.0f; 
mA[248] = 0.0f; 
mA[249] = 0.0f; 
mA[250] = 0.0f; 
mA[251] = 0.0f; 
mA[252] = 0.0f; 
mA[253] = 0.0f; 
mA[254] = 0.0f; 
mA[255] = 0.0f; 
mA[256] = 0.0f; 
mA[257] = 0.0f; 
mA[258] = 0.0f; 
mA[259] = 0.0f; 
mA[260] = 0.0f; 
mA[261] = 0.0f; 
mA[262] = 0.0f; 
mA[263] = 0.0f; 
mA[264] = 0.0f; 
mA[265] = 0.0f; 
mA[266] = 0.0f; 
mA[267] = 0.0f; 
mA[268] = 0.0f; 
mA[269] = 0.0f; 
mA[270] = 0.0f; 
mA[271] = 0.0f; 
mA[272] = 0.0f; 
mA[273] = 0.0f; 
mA[274] = 0.0f; 
mA[275] = 0.0f; 
mA[276] = 0.0f; 
mA[277] = 0.0f; 
mA[278] =  v_v24_tca_fw ; 
mA[279] = 0.0f; 
mA[280] = 0.0f; 
mA[281] = 0.0f; 
mA[282] = 0.0f; 
mA[283] = 0.0f; 
mA[284] = 0.0f; 
mA[285] = 0.0f; 
mA[286] = 0.0f; 
mA[287] = 0.0f; 
mA[288] = 0.0f; 
mA[289] = 0.0f; 
mA[290] = 0.0f; 
mA[291] = 0.0f; 
mA[292] = 0.0f; 
mA[293] = 0.0f; 
mA[294] = 0.0f; 
mA[295] = 0.0f; 
mA[296] = 0.0f; 
mA[297] = ( (  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v56_aa_fw   )  +(  -1.0f  * v_v52_aa_fw   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v40_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v42_aa_fw   )  +(  -1.0f  * v_v23_tca_fw   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v53_aa_fw   )  +(  -1.0f  * v_v54_aa_fw   )  +(  -1.0f  * v_v55_aa_fw   )   ) ; 
mA[298] = 0.0f; 
mA[299] = 0.0f; 
mA[300] = 0.0f; 
mA[301] = 0.0f; 
mA[302] = 0.0f; 
mA[303] = 0.0f; 
mA[304] = 0.0f; 
mA[305] = 0.0f; 
mA[306] = 0.0f; 
mA[307] = 0.0f; 
mA[308] = 0.0f; 
mA[309] = 0.0f; 
mA[310] = 0.0f; 
mA[311] = 0.0f; 
mA[312] = 0.0f; 
mA[313] = 0.0f; 
mA[314] = 0.0f; 
mA[315] = 0.0f; 
mA[316] = 0.0f; 
mA[317] = 0.0f; 
mA[318] = 0.0f; 
mA[319] = 0.0f; 
mA[320] = 0.0f; 
mA[321] = 0.0f; 
mA[322] = 0.0f; 
mA[323] = 0.0f; 
mA[324] = 0.0f; 
mA[325] = 0.0f; 
mA[326] = 0.0f; 
mA[327] = 0.0f; 
mA[328] = 0.0f; 
mA[329] = 0.0f; 
mA[330] = 0.0f; 
mA[331] = 0.0f; 
mA[332] = 0.0f; 
mA[333] = 0.0f; 
mA[334] = 0.0f; 
mA[335] = 0.0f; 
mA[336] = 0.0f; 
mA[337] = 0.0f; 
mA[338] =  v_v36_aa_fw ; 
mA[339] = 0.0f; 
mA[340] = 0.0f; 
mA[341] = 0.0f; 
mA[342] = 0.0f; 
mA[343] = 0.0f; 
mA[344] = 0.0f; 
mA[345] =  v_v23_tca_bw ; 
mA[346] = 0.0f; 
mA[347] = 0.0f; 
mA[348] = 0.0f; 
mA[349] = 0.0f; 
mA[350] = 0.0f; 
mA[351] = 0.0f; 
mA[352] = 0.0f; 
mA[353] = 0.0f; 
mA[354] = 0.0f; 
mA[355] = 0.0f; 
mA[356] = 0.0f; 
mA[357] = 0.0f; 
mA[358] = 0.0f; 
mA[359] = 0.0f; 
mA[360] = 0.0f; 
mA[361] = 0.0f; 
mA[362] = 0.0f; 
mA[363] = 0.0f; 
mA[364] = 0.0f; 
mA[365] = 0.0f; 
mA[366] = 0.0f; 
mA[367] = 0.0f; 
mA[368] = 0.0f; 
mA[369] = 0.0f; 
mA[370] = 0.0f; 
mA[371] = 0.0f; 
mA[372] = 0.0f; 
mA[373] = 0.0f; 
mA[374] = 0.0f; 
mA[375] = 0.0f; 
mA[376] = 0.0f; 
mA[377] =  v_v24_tca_fw ; 
mA[378] = 0.0f; 
mA[379] = 0.0f; 
mA[380] = 0.0f; 
mA[381] = 0.0f; 
mA[382] = 0.0f; 
mA[383] = 0.0f; 
mA[384] = 0.0f; 
mA[385] = 0.0f; 
mA[386] = 0.0f; 
mA[387] = 0.0f; 
mA[388] = 0.0f; 
mA[389] = 0.0f; 
mA[390] = 0.0f; 
mA[391] = 0.0f; 
mA[392] = 0.0f; 
mA[393] = 0.0f; 
mA[394] = 0.0f; 
mA[395] = 0.0f; 
mA[396] = ( (  -1.0f  * v_v35_acet_fw   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v47_aa_fw   )   ) ; 
mA[397] =  v_v35_acet_bw ; 
mA[398] = 0.0f; 
mA[399] = 0.0f; 
mA[400] = 0.0f; 
mA[401] = 0.0f; 
mA[402] = 0.0f; 
mA[403] = 0.0f; 
mA[404] = 0.0f; 
mA[405] = 0.0f; 
mA[406] = 0.0f; 
mA[407] = 0.0f; 
mA[408] = 0.0f; 
mA[409] = 0.0f; 
mA[410] = 0.0f; 
mA[411] = 0.0f; 
mA[412] = 0.0f; 
mA[413] = 0.0f; 
mA[414] = 0.0f; 
mA[415] = 0.0f; 
mA[416] = 0.0f; 
mA[417] = 0.0f; 
mA[418] = 0.0f; 
mA[419] = 0.0f; 
mA[420] = 0.0f; 
mA[421] = 0.0f; 
mA[422] = 0.0f; 
mA[423] = 0.0f; 
mA[424] = 0.0f; 
mA[425] = 0.0f; 
mA[426] = 0.0f; 
mA[427] = 0.0f; 
mA[428] = 0.0f; 
mA[429] = 0.0f; 
mA[430] = 0.0f; 
mA[431] = 0.0f; 
mA[432] = 0.0f; 
mA[433] = 0.0f; 
mA[434] = 0.0f; 
mA[435] = 0.0f; 
mA[436] = 0.0f; 
mA[437] = 0.0f; 
mA[438] = 0.0f; 
mA[439] = 0.0f; 
mA[440] = 0.0f; 
mA[441] = 0.0f; 
mA[442] = 0.0f; 
mA[443] = 0.0f; 
mA[444] = 0.0f; 
mA[445] = 0.0f; 
mA[446] = 0.0f; 
mA[447] = 0.0f; 
mA[448] = 0.0f; 
mA[449] = 0.0f; 
mA[450] = 0.0f; 
mA[451] = 0.0f; 
mA[452] = 0.0f; 
mA[453] = 0.0f; 
mA[454] = 0.0f; 
mA[455] = 0.0f; 
mA[456] = 0.0f; 
mA[457] = 0.0f; 
mA[458] = 0.0f; 
mA[459] = 0.0f; 
mA[460] = 0.0f; 
mA[461] = 0.0f; 
mA[462] = 0.0f; 
mA[463] = 0.0f; 
mA[464] = 0.0f; 
mA[465] = 0.0f; 
mA[466] = 0.0f; 
mA[467] = 0.0f; 
mA[468] = 0.0f; 
mA[469] = 0.0f; 
mA[470] = 0.0f; 
mA[471] = 0.0f; 
mA[472] = 0.0f; 
mA[473] = 0.0f; 
mA[474] = 0.0f; 
mA[475] = 0.0f; 
mA[476] = 0.0f; 
mA[477] = 0.0f; 
mA[478] = 0.0f; 
mA[479] = 0.0f; 
mA[480] = 0.0f; 
mA[481] = 0.0f; 
mA[482] = 0.0f; 
mA[483] = 0.0f; 
mA[484] = 0.0f; 
mA[485] = 0.0f; 
mA[486] = 0.0f; 
mA[487] = 0.0f; 
mA[488] = 0.0f; 
mA[489] = 0.0f; 
mA[490] = 0.0f; 
mA[491] = 0.0f; 
mA[492] = 0.0f; 
mA[493] = 0.0f; 
mA[494] = (  v_v35_acet_fw  + v_v39_aa_fw  + v_v47_aa_fw   ) ; 
mA[495] = ( (  -1.0f  * v_v35_acet_bw   )  +(  -1.0f  * v_v20_tca_fw   )  +(  -1.0f  * v_v46_aa_fw   )   ) ; 
mA[496] = 0.0f; 
mA[497] = 0.0f; 
mA[498] = 0.0f; 
mA[499] = 0.0f; 
mA[500] = 0.0f; 
mA[501] = 0.0f; 
mA[502] = 0.0f; 
mA[503] = 0.0f; 
mA[504] =  v_v21_tca_fw ; 
mA[505] = 0.0f; 
mA[506] = 0.0f; 
mA[507] = 0.0f; 
mA[508] = 0.0f; 
mA[509] = 0.0f; 
mA[510] = 0.0f; 
mA[511] = 0.0f; 
mA[512] = 0.0f; 
mA[513] = 0.0f; 
mA[514] = 0.0f; 
mA[515] = 0.0f; 
mA[516] = 0.0f; 
mA[517] = 0.0f; 
mA[518] = 0.0f; 
mA[519] = 0.0f; 
mA[520] = 0.0f; 
mA[521] = 0.0f; 
mA[522] = 0.0f; 
mA[523] = 0.0f; 
mA[524] = 0.0f; 
mA[525] = 0.0f; 
mA[526] = 0.0f; 
mA[527] = 0.0f; 
mA[528] = 0.0f; 
mA[529] = 0.0f; 
mA[530] = 0.0f; 
mA[531] = 0.0f; 
mA[532] = 0.0f; 
mA[533] = 0.0f; 
mA[534] = 0.0f; 
mA[535] = 0.0f; 
mA[536] = 0.0f; 
mA[537] = 0.0f; 
mA[538] = 0.0f; 
mA[539] = 0.0f; 
mA[540] = 0.0f; 
mA[541] = 0.0f; 
mA[542] = 0.0f; 
mA[543] = 0.0f; 
mA[544] = 0.0f; 
mA[545] = 0.0f; 
mA[546] = 0.0f; 
mA[547] =  v_v30_glyox_fw ; 
mA[548] = 0.0f; 
mA[549] = 0.0f; 
mA[550] = 0.0f; 
mA[551] = 0.0f; 
mA[552] = 0.0f; 
mA[553] = 0.0f; 
mA[554] = 0.0f; 
mA[555] = 0.0f; 
mA[556] = 0.0f; 
mA[557] = 0.0f; 
mA[558] = 0.0f; 
mA[559] = 0.0f; 
mA[560] = 0.0f; 
mA[561] = 0.0f; 
mA[562] = 0.0f; 
mA[563] = 0.0f; 
mA[564] = 0.0f; 
mA[565] = 0.0f; 
mA[566] = 0.0f; 
mA[567] = 0.0f; 
mA[568] = 0.0f; 
mA[569] = 0.0f; 
mA[570] = 0.0f; 
mA[571] = 0.0f; 
mA[572] = 0.0f; 
mA[573] = 0.0f; 
mA[574] = 0.0f; 
mA[575] = 0.0f; 
mA[576] = 0.0f; 
mA[577] = 0.0f; 
mA[578] = 0.0f; 
mA[579] = 0.0f; 
mA[580] = 0.0f; 
mA[581] = 0.0f; 
mA[582] = 0.0f; 
mA[583] = 0.0f; 
mA[584] = 0.0f; 
mA[585] = 0.0f; 
mA[586] = 0.0f; 
mA[587] = 0.0f; 
mA[588] = 0.0f; 
mA[589] = 0.0f; 
mA[590] = 0.0f; 
mA[591] = 0.0f; 
mA[592] = 0.0f; 
mA[593] = 0.0f; 
mA[594] = ( (  -1.0f  * v_v42_aa_fw   )   ) ; 
mA[595] = 0.0f; 
mA[596] = 0.0f; 
mA[597] = 0.0f; 
mA[598] = 0.0f; 
mA[599] = 0.0f; 
mA[600] = 0.0f; 
mA[601] = 0.0f; 
mA[602] = 0.0f; 
mA[603] = 0.0f; 
mA[604] = 0.0f; 
mA[605] = 0.0f; 
mA[606] = 0.0f; 
mA[607] = 0.0f; 
mA[608] = 0.0f; 
mA[609] = 0.0f; 
mA[610] = 0.0f; 
mA[611] = 0.0f; 
mA[612] = 0.0f; 
mA[613] = 0.0f; 
mA[614] = 0.0f; 
mA[615] = 0.0f; 
mA[616] = 0.0f; 
mA[617] = 0.0f; 
mA[618] = 0.0f; 
mA[619] = 0.0f; 
mA[620] = 0.0f; 
mA[621] = 0.0f; 
mA[622] = 0.0f; 
mA[623] = 0.0f; 
mA[624] = 0.0f; 
mA[625] = 0.0f; 
mA[626] = 0.0f; 
mA[627] = 0.0f; 
mA[628] = 0.0f; 
mA[629] = 0.0f; 
mA[630] = 0.0f; 
mA[631] = 0.0f; 
mA[632] = 0.0f; 
mA[633] = 0.0f; 
mA[634] = 0.0f; 
mA[635] = 0.0f; 
mA[636] = 0.0f; 
mA[637] = 0.0f; 
mA[638] = 0.0f; 
mA[639] = 0.0f; 
mA[640] = 0.0f; 
mA[641] = 0.0f; 
mA[642] = 0.0f; 
mA[643] = 0.0f; 
mA[644] = 0.0f; 
mA[645] = 0.0f; 
mA[646] = 0.0f; 
mA[647] = 0.0f; 
mA[648] = 0.0f; 
mA[649] = 0.0f; 
mA[650] = 0.0f; 
mA[651] = 0.0f; 
mA[652] = 0.0f; 
mA[653] = 0.0f; 
mA[654] = 0.0f; 
mA[655] = 0.0f; 
mA[656] = 0.0f; 
mA[657] = 0.0f; 
mA[658] = 0.0f; 
mA[659] = 0.0f; 
mA[660] = 0.0f; 
mA[661] = 0.0f; 
mA[662] = 0.0f; 
mA[663] = 0.0f; 
mA[664] = 0.0f; 
mA[665] = 0.0f; 
mA[666] = 0.0f; 
mA[667] = 0.0f; 
mA[668] = 0.0f; 
mA[669] = 0.0f; 
mA[670] = 0.0f; 
mA[671] = 0.0f; 
mA[672] = 0.0f; 
mA[673] = 0.0f; 
mA[674] = 0.0f; 
mA[675] = 0.0f; 
mA[676] = 0.0f; 
mA[677] = 0.0f; 
mA[678] = 0.0f; 
mA[679] = 0.0f; 
mA[680] = 0.0f; 
mA[681] = 0.0f; 
mA[682] = 0.0f; 
mA[683] = 0.0f; 
mA[684] = 0.0f; 
mA[685] = 0.0f; 
mA[686] = 0.0f; 
mA[687] = 0.0f; 
mA[688] = 0.0f; 
mA[689] = 0.0f; 
mA[690] = 0.0f; 
mA[691] = 0.0f; 
mA[692] = 0.0f; 
mA[693] = ( (  -1.0f  * v_v40_aa_fw   )   ) ; 
mA[694] = 0.0f; 
mA[695] = 0.0f; 
mA[696] = 0.0f; 
mA[697] = 0.0f; 
mA[698] = 0.0f; 
mA[699] = 0.0f; 
mA[700] = 0.0f; 
mA[701] = 0.0f; 
mA[702] = 0.0f; 
mA[703] = 0.0f; 
mA[704] = 0.0f; 
mA[705] = 0.0f; 
mA[706] = 0.0f; 
mA[707] = 0.0f; 
mA[708] = 0.0f; 
mA[709] = 0.0f; 
mA[710] = 0.0f; 
mA[711] = 0.0f; 
mA[712] = 0.0f; 
mA[713] = 0.0f; 
mA[714] = (  v_v58_aa_fw  + v_v39_aa_fw   ) ; 
mA[715] = 0.0f; 
mA[716] = 0.0f; 
mA[717] = 0.0f; 
mA[718] = 0.0f; 
mA[719] = 0.0f; 
mA[720] = 0.0f; 
mA[721] = 0.0f; 
mA[722] = 0.0f; 
mA[723] = 0.0f; 
mA[724] = 0.0f; 
mA[725] = 0.0f; 
mA[726] = 0.0f; 
mA[727] = 0.0f; 
mA[728] = 0.0f; 
mA[729] = 0.0f; 
mA[730] = 0.0f; 
mA[731] = 0.0f; 
mA[732] = 0.0f; 
mA[733] = 0.0f; 
mA[734] = 0.0f; 
mA[735] = 0.0f; 
mA[736] = 0.0f; 
mA[737] = 0.0f; 
mA[738] = 0.0f; 
mA[739] = 0.0f; 
mA[740] = 0.0f; 
mA[741] = 0.0f; 
mA[742] = 0.0f; 
mA[743] = 0.0f; 
mA[744] = 0.0f; 
mA[745] = 0.0f; 
mA[746] = 0.0f; 
mA[747] = 0.0f; 
mA[748] = 0.0f; 
mA[749] = 0.0f; 
mA[750] = 0.0f; 
mA[751] = 0.0f; 
mA[752] = 0.0f; 
mA[753] = 0.0f; 
mA[754] = 0.0f; 
mA[755] = 0.0f; 
mA[756] = 0.0f; 
mA[757] = 0.0f; 
mA[758] = 0.0f; 
mA[759] = 0.0f; 
mA[760] = 0.0f; 
mA[761] = 0.0f; 
mA[762] = 0.0f; 
mA[763] = 0.0f; 
mA[764] = 0.0f; 
mA[765] = 0.0f; 
mA[766] = 0.0f; 
mA[767] = 0.0f; 
mA[768] = 0.0f; 
mA[769] = 0.0f; 
mA[770] = 0.0f; 
mA[771] = 0.0f; 
mA[772] = 0.0f; 
mA[773] =  v_v50_aa_fw ; 
mA[774] = 0.0f; 
mA[775] = 0.0f; 
mA[776] = 0.0f; 
mA[777] = 0.0f; 
mA[778] = 0.0f; 
mA[779] = 0.0f; 
mA[780] = 0.0f; 
mA[781] = 0.0f; 
mA[782] = 0.0f; 
mA[783] = 0.0f; 
mA[784] = 0.0f; 
mA[785] = 0.0f; 
mA[786] = 0.0f; 
mA[787] = 0.0f; 
mA[788] = 0.0f; 
mA[789] = 0.0f; 
mA[790] = 0.0f; 
mA[791] = 0.0f; 
mA[792] = ( (  -1.0f  * v_v40_aa_fw   )   ) ; 
mA[793] = 0.0f; 
mA[794] = 0.0f; 
mA[795] = 0.0f; 
mA[796] = 0.0f; 
mA[797] = 0.0f; 
mA[798] = 0.0f; 
mA[799] = 0.0f; 
mA[800] = 0.0f; 
mA[801] = 0.0f; 
mA[802] = 0.0f; 
mA[803] = 0.0f; 
mA[804] = 0.0f; 
mA[805] = 0.0f; 
mA[806] = 0.0f; 
mA[807] = 0.0f; 
mA[808] = 0.0f; 
mA[809] = 0.0f; 
mA[810] = 0.0f; 
mA[811] = 0.0f; 
mA[812] = 0.0f; 
mA[813] = (  v_v39_aa_fw  + v_v58_aa_fw   ) ; 
mA[814] = 0.0f; 
mA[815] = 0.0f; 
mA[816] = 0.0f; 
mA[817] = 0.0f; 
mA[818] = 0.0f; 
mA[819] = 0.0f; 
mA[820] = 0.0f; 
mA[821] = 0.0f; 
mA[822] = 0.0f; 
mA[823] = 0.0f; 
mA[824] = 0.0f; 
mA[825] = 0.0f; 
mA[826] = 0.0f; 
mA[827] = 0.0f; 
mA[828] = 0.0f; 
mA[829] = 0.0f; 
mA[830] = 0.0f; 
mA[831] = 0.0f; 
mA[832] = 0.0f; 
mA[833] = 0.0f; 
mA[834] = 0.0f; 
mA[835] = 0.0f; 
mA[836] = 0.0f; 
mA[837] = 0.0f; 
mA[838] = 0.0f; 
mA[839] = 0.0f; 
mA[840] = 0.0f; 
mA[841] = 0.0f; 
mA[842] = 0.0f; 
mA[843] = 0.0f; 
mA[844] = 0.0f; 
mA[845] = 0.0f; 
mA[846] = 0.0f; 
mA[847] = 0.0f; 
mA[848] = 0.0f; 
mA[849] = 0.0f; 
mA[850] = 0.0f; 
mA[851] = 0.0f; 
mA[852] = 0.0f; 
mA[853] = 0.0f; 
mA[854] = 0.0f; 
mA[855] = 0.0f; 
mA[856] = 0.0f; 
mA[857] = 0.0f; 
mA[858] = 0.0f; 
mA[859] = 0.0f; 
mA[860] = 0.0f; 
mA[861] = 0.0f; 
mA[862] = 0.0f; 
mA[863] = 0.0f; 
mA[864] = 0.0f; 
mA[865] = 0.0f; 
mA[866] = 0.0f; 
mA[867] = 0.0f; 
mA[868] = 0.0f; 
mA[869] = 0.0f; 
mA[870] = 0.0f; 
mA[871] = 0.0f; 
mA[872] = 0.0f; 
mA[873] = 0.0f; 
mA[874] = 0.0f; 
mA[875] = 0.0f; 
mA[876] = 0.0f; 
mA[877] = 0.0f; 
mA[878] = 0.0f; 
mA[879] = 0.0f; 
mA[880] = 0.0f; 
mA[881] = 0.0f; 
mA[882] = 0.0f; 
mA[883] = 0.0f; 
mA[884] = 0.0f; 
mA[885] = 0.0f; 
mA[886] = 0.0f; 
mA[887] = 0.0f; 
mA[888] = 0.0f; 
mA[889] = 0.0f; 
mA[890] = 0.0f; 
mA[891] = ( (  -1.0f  * v_v40_aa_fw   )   ) ; 
mA[892] = 0.0f; 
mA[893] = 0.0f; 
mA[894] = 0.0f; 
mA[895] = 0.0f; 
mA[896] = 0.0f; 
mA[897] = 0.0f; 
mA[898] = 0.0f; 
mA[899] = 0.0f; 
mA[900] = 0.0f; 
mA[901] = 0.0f; 
mA[902] = 0.0f; 
mA[903] = 0.0f; 
mA[904] = 0.0f; 
mA[905] = 0.0f; 
mA[906] = 0.0f; 
mA[907] = 0.0f; 
mA[908] = 0.0f; 
mA[909] = 0.0f; 
mA[910] = 0.0f; 
mA[911] = 0.0f; 
mA[912] = (  v_v58_aa_fw  + v_v39_aa_fw   ) ; 
mA[913] = 0.0f; 
mA[914] = 0.0f; 
mA[915] = 0.0f; 
mA[916] = 0.0f; 
mA[917] = 0.0f; 
mA[918] = 0.0f; 
mA[919] = 0.0f; 
mA[920] = 0.0f; 
mA[921] = 0.0f; 
mA[922] = 0.0f; 
mA[923] = 0.0f; 
mA[924] = 0.0f; 
mA[925] = 0.0f; 
mA[926] = 0.0f; 
mA[927] = 0.0f; 
mA[928] = 0.0f; 
mA[929] = 0.0f; 
mA[930] = 0.0f; 
mA[931] = 0.0f; 
mA[932] = 0.0f; 
mA[933] = 0.0f; 
mA[934] = 0.0f; 
mA[935] = 0.0f; 
mA[936] = 0.0f; 
mA[937] = 0.0f; 
mA[938] = 0.0f; 
mA[939] = 0.0f; 
mA[940] = 0.0f; 
mA[941] = 0.0f; 
mA[942] = 0.0f; 
mA[943] = 0.0f; 
mA[944] = 0.0f; 
mA[945] = 0.0f; 
mA[946] = 0.0f; 
mA[947] = 0.0f; 
mA[948] = 0.0f; 
mA[949] = 0.0f; 
mA[950] = 0.0f; 
mA[951] = 0.0f; 
mA[952] = 0.0f; 
mA[953] = 0.0f; 
mA[954] = 0.0f; 
mA[955] = 0.0f; 
mA[956] = 0.0f; 
mA[957] = 0.0f; 
mA[958] = 0.0f; 
mA[959] = 0.0f; 
mA[960] = 0.0f; 
mA[961] = 0.0f; 
mA[962] = 0.0f; 
mA[963] = 0.0f; 
mA[964] = 0.0f; 
mA[965] = 0.0f; 
mA[966] = 0.0f; 
mA[967] = 0.0f; 
mA[968] = 0.0f; 
mA[969] = 0.0f; 
mA[970] =  v_v50_aa_fw ; 
mA[971] = 0.0f; 
mA[972] = 0.0f; 
mA[973] = 0.0f; 
mA[974] = 0.0f; 
mA[975] = 0.0f; 
mA[976] = 0.0f; 
mA[977] = 0.0f; 
mA[978] = 0.0f; 
mA[979] = 0.0f; 
mA[980] = 0.0f; 
mA[981] = 0.0f; 
mA[982] = 0.0f; 
mA[983] = 0.0f; 
mA[984] = 0.0f; 
mA[985] = 0.0f; 
mA[986] = 0.0f; 
mA[987] = 0.0f; 
mA[988] = 0.0f; 
mA[989] = 0.0f; 
mA[990] = ( (  -1.0f  * v_v21_tca_fw   )  +(  -1.0f  * v_v22_tca_bw   )   ) ; 
mA[991] = 0.0f; 
mA[992] = 0.0f; 
mA[993] = 0.0f; 
mA[994] = 0.0f; 
mA[995] = 0.0f; 
mA[996] = 0.0f; 
mA[997] = 0.0f; 
mA[998] = 0.0f; 
mA[999] = 0.0f; 
mA[1000] = 0.0f; 
mA[1001] = 0.0f; 
mA[1002] = 0.0f; 
mA[1003] = 0.0f; 
mA[1004] = 0.0f; 
mA[1005] = 0.0f; 
mA[1006] = 0.0f; 
mA[1007] = 0.0f; 
mA[1008] = 0.0f; 
mA[1009] = 0.0f; 
mA[1010] = 0.0f; 
mA[1011] = 0.0f; 
mA[1012] = 0.0f; 
mA[1013] = 0.0f; 
mA[1014] = 0.0f; 
mA[1015] = 0.0f; 
mA[1016] = 0.0f; 
mA[1017] = 0.0f; 
mA[1018] = 0.0f; 
mA[1019] = 0.0f; 
mA[1020] = 0.0f; 
mA[1021] = 0.0f; 
mA[1022] = 0.0f; 
mA[1023] = 0.0f; 
mA[1024] = 0.0f; 
mA[1025] = 0.0f; 
mA[1026] = 0.0f; 
mA[1027] =  v_v22_tca_fw ; 
mA[1028] = 0.0f; 
mA[1029] = 0.0f; 
mA[1030] = 0.0f; 
mA[1031] = 0.0f; 
mA[1032] = 0.0f; 
mA[1033] = 0.0f; 
mA[1034] = 0.0f; 
mA[1035] = 0.0f; 
mA[1036] = 0.0f; 
mA[1037] = 0.0f; 
mA[1038] = 0.0f; 
mA[1039] = 0.0f; 
mA[1040] = 0.0f; 
mA[1041] = 0.0f; 
mA[1042] = 0.0f; 
mA[1043] = 0.0f; 
mA[1044] = 0.0f; 
mA[1045] = 0.0f; 
mA[1046] = 0.0f; 
mA[1047] = 0.0f; 
mA[1048] = 0.0f; 
mA[1049] = 0.0f; 
mA[1050] = 0.0f; 
mA[1051] = 0.0f; 
mA[1052] = 0.0f; 
mA[1053] = 0.0f; 
mA[1054] = 0.0f; 
mA[1055] = 0.0f; 
mA[1056] = 0.0f; 
mA[1057] = 0.0f; 
mA[1058] = 0.0f; 
mA[1059] = 0.0f; 
mA[1060] = 0.0f; 
mA[1061] = 0.0f; 
mA[1062] = 0.0f; 
mA[1063] = 0.0f; 
mA[1064] = 0.0f; 
mA[1065] = 0.0f; 
mA[1066] = 0.0f; 
mA[1067] = 0.0f; 
mA[1068] = 0.0f; 
mA[1069] = 0.0f; 
mA[1070] = 0.0f; 
mA[1071] = 0.0f; 
mA[1072] = 0.0f; 
mA[1073] = 0.0f; 
mA[1074] = 0.0f; 
mA[1075] = 0.0f; 
mA[1076] = 0.0f; 
mA[1077] = 0.0f; 
mA[1078] = 0.0f; 
mA[1079] = 0.0f; 
mA[1080] = 0.0f; 
mA[1081] = 0.0f; 
mA[1082] = 0.0f; 
mA[1083] = 0.0f; 
mA[1084] = 0.0f; 
mA[1085] = 0.0f; 
mA[1086] = 0.0f; 
mA[1087] = 0.0f; 
mA[1088] = 0.0f; 
mA[1089] = ( (  -1.0f  * v_v21_tca_fw   )  +(  -1.0f  * v_v22_tca_bw   )   ) ; 
mA[1090] = 0.0f; 
mA[1091] = 0.0f; 
mA[1092] = 0.0f; 
mA[1093] = 0.0f; 
mA[1094] = 0.0f; 
mA[1095] = 0.0f; 
mA[1096] = 0.0f; 
mA[1097] = 0.0f; 
mA[1098] = 0.0f; 
mA[1099] = 0.0f; 
mA[1100] = 0.0f; 
mA[1101] = 0.0f; 
mA[1102] = 0.0f; 
mA[1103] = 0.0f; 
mA[1104] = 0.0f; 
mA[1105] = 0.0f; 
mA[1106] = 0.0f; 
mA[1107] = 0.0f; 
mA[1108] = 0.0f; 
mA[1109] = 0.0f; 
mA[1110] = 0.0f; 
mA[1111] = 0.0f; 
mA[1112] = 0.0f; 
mA[1113] = 0.0f; 
mA[1114] = 0.0f; 
mA[1115] = 0.0f; 
mA[1116] = 0.0f; 
mA[1117] = 0.0f; 
mA[1118] = 0.0f; 
mA[1119] = 0.0f; 
mA[1120] = 0.0f; 
mA[1121] = 0.0f; 
mA[1122] = 0.0f; 
mA[1123] = 0.0f; 
mA[1124] = 0.0f; 
mA[1125] = 0.0f; 
mA[1126] =  v_v22_tca_fw ; 
mA[1127] = 0.0f; 
mA[1128] = 0.0f; 
mA[1129] = 0.0f; 
mA[1130] = 0.0f; 
mA[1131] = 0.0f; 
mA[1132] = 0.0f; 
mA[1133] = 0.0f; 
mA[1134] = 0.0f; 
mA[1135] = 0.0f; 
mA[1136] = 0.0f; 
mA[1137] = 0.0f; 
mA[1138] = 0.0f; 
mA[1139] = 0.0f; 
mA[1140] = 0.0f; 
mA[1141] = 0.0f; 
mA[1142] = 0.0f; 
mA[1143] = 0.0f; 
mA[1144] = 0.0f; 
mA[1145] = 0.0f; 
mA[1146] = 0.0f; 
mA[1147] = 0.0f; 
mA[1148] = 0.0f; 
mA[1149] = 0.0f; 
mA[1150] = 0.0f; 
mA[1151] = 0.0f; 
mA[1152] = 0.0f; 
mA[1153] = 0.0f; 
mA[1154] = 0.0f; 
mA[1155] = 0.0f; 
mA[1156] = 0.0f; 
mA[1157] = 0.0f; 
mA[1158] = 0.0f; 
mA[1159] = 0.0f; 
mA[1160] = 0.0f; 
mA[1161] = 0.0f; 
mA[1162] = 0.0f; 
mA[1163] = 0.0f; 
mA[1164] = 0.0f; 
mA[1165] = 0.0f; 
mA[1166] = 0.0f; 
mA[1167] = 0.0f; 
mA[1168] = 0.0f; 
mA[1169] = 0.0f; 
mA[1170] = 0.0f; 
mA[1171] = 0.0f; 
mA[1172] = 0.0f; 
mA[1173] = 0.0f; 
mA[1174] = 0.0f; 
mA[1175] = 0.0f; 
mA[1176] = 0.0f; 
mA[1177] = 0.0f; 
mA[1178] = 0.0f; 
mA[1179] = 0.0f; 
mA[1180] = 0.0f; 
mA[1181] = 0.0f; 
mA[1182] = 0.0f; 
mA[1183] = 0.0f; 
mA[1184] = 0.0f; 
mA[1185] = 0.0f; 
mA[1186] = 0.0f; 
mA[1187] = 0.0f; 
mA[1188] = ( (  -1.0f  * v_v22_tca_bw   )  +(  -1.0f  * v_v21_tca_fw   )   ) ; 
mA[1189] = 0.0f; 
mA[1190] = 0.0f; 
mA[1191] = 0.0f; 
mA[1192] = 0.0f; 
mA[1193] = 0.0f; 
mA[1194] = 0.0f; 
mA[1195] = 0.0f; 
mA[1196] = 0.0f; 
mA[1197] = 0.0f; 
mA[1198] = 0.0f; 
mA[1199] = 0.0f; 
mA[1200] = 0.0f; 
mA[1201] = 0.0f; 
mA[1202] = 0.0f; 
mA[1203] = 0.0f; 
mA[1204] = 0.0f; 
mA[1205] = 0.0f; 
mA[1206] = 0.0f; 
mA[1207] = 0.0f; 
mA[1208] = 0.0f; 
mA[1209] = 0.0f; 
mA[1210] = 0.0f; 
mA[1211] = 0.0f; 
mA[1212] = 0.0f; 
mA[1213] = 0.0f; 
mA[1214] = 0.0f; 
mA[1215] = 0.0f; 
mA[1216] = 0.0f; 
mA[1217] = 0.0f; 
mA[1218] = 0.0f; 
mA[1219] = 0.0f; 
mA[1220] = 0.0f; 
mA[1221] = 0.0f; 
mA[1222] = 0.0f; 
mA[1223] = 0.0f; 
mA[1224] = 0.0f; 
mA[1225] =  v_v22_tca_fw ; 
mA[1226] = 0.0f; 
mA[1227] = 0.0f; 
mA[1228] = 0.0f; 
mA[1229] = 0.0f; 
mA[1230] = 0.0f; 
mA[1231] = 0.0f; 
mA[1232] = 0.0f; 
mA[1233] = 0.0f; 
mA[1234] = 0.0f; 
mA[1235] = 0.0f; 
mA[1236] = 0.0f; 
mA[1237] = 0.0f; 
mA[1238] = 0.0f; 
mA[1239] = 0.0f; 
mA[1240] = 0.0f; 
mA[1241] = 0.0f; 
mA[1242] = 0.0f; 
mA[1243] = 0.0f; 
mA[1244] = 0.0f; 
mA[1245] = 0.0f; 
mA[1246] = 0.0f; 
mA[1247] = 0.0f; 
mA[1248] = 0.0f; 
mA[1249] = 0.0f; 
mA[1250] = 0.0f; 
mA[1251] = 0.0f; 
mA[1252] = 0.0f; 
mA[1253] = 0.0f; 
mA[1254] = 0.0f; 
mA[1255] = 0.0f; 
mA[1256] = 0.0f; 
mA[1257] = 0.0f; 
mA[1258] = 0.0f; 
mA[1259] = 0.0f; 
mA[1260] = 0.0f; 
mA[1261] = 0.0f; 
mA[1262] = 0.0f; 
mA[1263] = 0.0f; 
mA[1264] = 0.0f; 
mA[1265] = 0.0f; 
mA[1266] = 0.0f; 
mA[1267] = 0.0f; 
mA[1268] = 0.0f; 
mA[1269] = 0.0f; 
mA[1270] = 0.0f; 
mA[1271] = 0.0f; 
mA[1272] = 0.0f; 
mA[1273] = 0.0f; 
mA[1274] = 0.0f; 
mA[1275] = 0.0f; 
mA[1276] = 0.0f; 
mA[1277] = 0.0f; 
mA[1278] = 0.0f; 
mA[1279] = 0.0f; 
mA[1280] = 0.0f; 
mA[1281] = 0.0f; 
mA[1282] = 0.0f; 
mA[1283] = 0.0f; 
mA[1284] = 0.0f; 
mA[1285] = 0.0f; 
mA[1286] = 0.0f; 
mA[1287] = ( (  -1.0f  * v_v22_tca_bw   )  +(  -1.0f  * v_v21_tca_fw   )   ) ; 
mA[1288] = 0.0f; 
mA[1289] = 0.0f; 
mA[1290] = 0.0f; 
mA[1291] = 0.0f; 
mA[1292] = 0.0f; 
mA[1293] = 0.0f; 
mA[1294] = 0.0f; 
mA[1295] = 0.0f; 
mA[1296] = 0.0f; 
mA[1297] = 0.0f; 
mA[1298] = 0.0f; 
mA[1299] = 0.0f; 
mA[1300] = 0.0f; 
mA[1301] = 0.0f; 
mA[1302] = 0.0f; 
mA[1303] = 0.0f; 
mA[1304] = 0.0f; 
mA[1305] = 0.0f; 
mA[1306] = 0.0f; 
mA[1307] = 0.0f; 
mA[1308] = 0.0f; 
mA[1309] = 0.0f; 
mA[1310] = 0.0f; 
mA[1311] = 0.0f; 
mA[1312] = 0.0f; 
mA[1313] = 0.0f; 
mA[1314] = 0.0f; 
mA[1315] = 0.0f; 
mA[1316] = 0.0f; 
mA[1317] = 0.0f; 
mA[1318] = 0.0f; 
mA[1319] = 0.0f; 
mA[1320] = 0.0f; 
mA[1321] = 0.0f; 
mA[1322] = 0.0f; 
mA[1323] = 0.0f; 
mA[1324] =  v_v22_tca_fw ; 
mA[1325] = 0.0f; 
mA[1326] = 0.0f; 
mA[1327] = 0.0f; 
mA[1328] = 0.0f; 
mA[1329] = 0.0f; 
mA[1330] = 0.0f; 
mA[1331] = 0.0f; 
mA[1332] = 0.0f; 
mA[1333] = 0.0f; 
mA[1334] = 0.0f; 
mA[1335] = 0.0f; 
mA[1336] = 0.0f; 
mA[1337] = 0.0f; 
mA[1338] = 0.0f; 
mA[1339] = 0.0f; 
mA[1340] = 0.0f; 
mA[1341] = 0.0f; 
mA[1342] = 0.0f; 
mA[1343] = 0.0f; 
mA[1344] = 0.0f; 
mA[1345] = 0.0f; 
mA[1346] = 0.0f; 
mA[1347] = 0.0f; 
mA[1348] = 0.0f; 
mA[1349] = 0.0f; 
mA[1350] = 0.0f; 
mA[1351] = 0.0f; 
mA[1352] = 0.0f; 
mA[1353] = 0.0f; 
mA[1354] = 0.0f; 
mA[1355] = 0.0f; 
mA[1356] = 0.0f; 
mA[1357] = 0.0f; 
mA[1358] = 0.0f; 
mA[1359] = 0.0f; 
mA[1360] = 0.0f; 
mA[1361] = 0.0f; 
mA[1362] = 0.0f; 
mA[1363] = 0.0f; 
mA[1364] = 0.0f; 
mA[1365] = 0.0f; 
mA[1366] = 0.0f; 
mA[1367] = 0.0f; 
mA[1368] = 0.0f; 
mA[1369] = 0.0f; 
mA[1370] = 0.0f; 
mA[1371] = 0.0f; 
mA[1372] = 0.0f; 
mA[1373] = 0.0f; 
mA[1374] = 0.0f; 
mA[1375] = 0.0f; 
mA[1376] = 0.0f; 
mA[1377] = 0.0f; 
mA[1378] = 0.0f; 
mA[1379] = 0.0f; 
mA[1380] = 0.0f; 
mA[1381] = 0.0f; 
mA[1382] = 0.0f; 
mA[1383] = 0.0f; 
mA[1384] = 0.0f; 
mA[1385] = 0.0f; 
mA[1386] = ( (  -1.0f  * v_v21_tca_fw   )  +(  -1.0f  * v_v22_tca_bw   )   ) ; 
mA[1387] = 0.0f; 
mA[1388] = 0.0f; 
mA[1389] = 0.0f; 
mA[1390] = 0.0f; 
mA[1391] = 0.0f; 
mA[1392] = 0.0f; 
mA[1393] = 0.0f; 
mA[1394] = 0.0f; 
mA[1395] = 0.0f; 
mA[1396] = 0.0f; 
mA[1397] = 0.0f; 
mA[1398] = 0.0f; 
mA[1399] = 0.0f; 
mA[1400] = 0.0f; 
mA[1401] = 0.0f; 
mA[1402] = 0.0f; 
mA[1403] = 0.0f; 
mA[1404] = 0.0f; 
mA[1405] = 0.0f; 
mA[1406] = 0.0f; 
mA[1407] = 0.0f; 
mA[1408] = 0.0f; 
mA[1409] = 0.0f; 
mA[1410] = 0.0f; 
mA[1411] = 0.0f; 
mA[1412] = 0.0f; 
mA[1413] = 0.0f; 
mA[1414] = 0.0f; 
mA[1415] = 0.0f; 
mA[1416] = 0.0f; 
mA[1417] = 0.0f; 
mA[1418] = 0.0f; 
mA[1419] = 0.0f; 
mA[1420] = 0.0f; 
mA[1421] = 0.0f; 
mA[1422] = 0.0f; 
mA[1423] =  v_v22_tca_fw ; 
mA[1424] = 0.0f; 
mA[1425] = 0.0f; 
mA[1426] = 0.0f; 
mA[1427] = 0.0f; 
mA[1428] = 0.0f; 
mA[1429] = 0.0f; 
mA[1430] = 0.0f; 
mA[1431] = 0.0f; 
mA[1432] = 0.0f; 
mA[1433] = 0.0f; 
mA[1434] = 0.0f; 
mA[1435] = 0.0f; 
mA[1436] = 0.0f; 
mA[1437] = 0.0f; 
mA[1438] = 0.0f; 
mA[1439] = 0.0f; 
mA[1440] = 0.0f; 
mA[1441] = 0.0f; 
mA[1442] = 0.0f; 
mA[1443] = 0.0f; 
mA[1444] = 0.0f; 
mA[1445] = 0.0f; 
mA[1446] = 0.0f; 
mA[1447] = 0.0f; 
mA[1448] = 0.0f; 
mA[1449] = 0.0f; 
mA[1450] = 0.0f; 
mA[1451] = 0.0f; 
mA[1452] = 0.0f; 
mA[1453] = 0.0f; 
mA[1454] = 0.0f; 
mA[1455] = 0.0f; 
mA[1456] = 0.0f; 
mA[1457] = 0.0f; 
mA[1458] = 0.0f; 
mA[1459] = 0.0f; 
mA[1460] = 0.0f; 
mA[1461] = 0.0f; 
mA[1462] = 0.0f; 
mA[1463] = 0.0f; 
mA[1464] = 0.0f; 
mA[1465] = 0.0f; 
mA[1466] = 0.0f; 
mA[1467] = 0.0f; 
mA[1468] = 0.0f; 
mA[1469] = 0.0f; 
mA[1470] = 0.0f; 
mA[1471] = 0.0f; 
mA[1472] = 0.0f; 
mA[1473] = 0.0f; 
mA[1474] = 0.0f; 
mA[1475] = 0.0f; 
mA[1476] = 0.0f; 
mA[1477] = 0.0f; 
mA[1478] = 0.0f; 
mA[1479] = 0.0f; 
mA[1480] = 0.0f; 
mA[1481] = 0.0f; 
mA[1482] = 0.0f; 
mA[1483] = 0.0f; 
mA[1484] = 0.0f; 
mA[1485] = ( (  -1.0f  * v_v47_aa_fw   )   ) ; 
mA[1486] = 0.0f; 
mA[1487] = 0.0f; 
mA[1488] = 0.0f; 
mA[1489] = 0.0f; 
mA[1490] = 0.0f; 
mA[1491] = 0.0f; 
mA[1492] = 0.0f; 
mA[1493] = 0.0f; 
mA[1494] = 0.0f; 
mA[1495] = 0.0f; 
mA[1496] = 0.0f; 
mA[1497] = 0.0f; 
mA[1498] = 0.0f; 
mA[1499] = 0.0f; 
mA[1500] = 0.0f; 
mA[1501] = 0.0f; 
mA[1502] = 0.0f; 
mA[1503] = 0.0f; 
mA[1504] = 0.0f; 
mA[1505] = 0.0f; 
mA[1506] = 0.0f; 
mA[1507] = 0.0f; 
mA[1508] = 0.0f; 
mA[1509] = 0.0f; 
mA[1510] = 0.0f; 
mA[1511] = 0.0f; 
mA[1512] = 0.0f; 
mA[1513] = 0.0f; 
mA[1514] = 0.0f; 
mA[1515] = 0.0f; 
mA[1516] = 0.0f; 
mA[1517] = 0.0f; 
mA[1518] = 0.0f; 
mA[1519] = 0.0f; 
mA[1520] = 0.0f; 
mA[1521] = 0.0f; 
mA[1522] = 0.0f; 
mA[1523] = 0.0f; 
mA[1524] = 0.0f; 
mA[1525] = 0.0f; 
mA[1526] = 0.0f; 
mA[1527] = 0.0f; 
mA[1528] = 0.0f; 
mA[1529] = 0.0f; 
mA[1530] = 0.0f; 
mA[1531] = 0.0f; 
mA[1532] = 0.0f; 
mA[1533] = 0.0f; 
mA[1534] = (  v_v51_aa_fw_a  + v_v51_aa_fw_b   ) ; 
mA[1535] = 0.0f; 
mA[1536] = 0.0f; 
mA[1537] = 0.0f; 
mA[1538] = 0.0f; 
mA[1539] = 0.0f; 
mA[1540] = 0.0f; 
mA[1541] = 0.0f; 
mA[1542] = 0.0f; 
mA[1543] = 0.0f; 
mA[1544] = 0.0f; 
mA[1545] = 0.0f; 
mA[1546] = 0.0f; 
mA[1547] = 0.0f; 
mA[1548] = 0.0f; 
mA[1549] = 0.0f; 
mA[1550] = 0.0f; 
mA[1551] = 0.0f; 
mA[1552] = 0.0f; 
mA[1553] = 0.0f; 
mA[1554] = 0.0f; 
mA[1555] = 0.0f; 
mA[1556] = 0.0f; 
mA[1557] = 0.0f; 
mA[1558] = 0.0f; 
mA[1559] = 0.0f; 
mA[1560] = 0.0f; 
mA[1561] = 0.0f; 
mA[1562] = 0.0f; 
mA[1563] = 0.0f; 
mA[1564] = 0.0f; 
mA[1565] = 0.0f; 
mA[1566] = 0.0f; 
mA[1567] = 0.0f; 
mA[1568] = 0.0f; 
mA[1569] = 0.0f; 
mA[1570] = 0.0f; 
mA[1571] = 0.0f; 
mA[1572] = 0.0f; 
mA[1573] = 0.0f; 
mA[1574] = 0.0f; 
mA[1575] = 0.0f; 
mA[1576] = 0.0f; 
mA[1577] = 0.0f; 
mA[1578] = 0.0f; 
mA[1579] = 0.0f; 
mA[1580] = 0.0f; 
mA[1581] = 0.0f; 
mA[1582] = 0.0f; 
mA[1583] = 0.0f; 
mA[1584] = ( (  -1.0f  * v_v04_glyc_fw   )  +(  -1.0f  * v_v05_glyc_bw   )   ) ; 
mA[1585] = 0.0f; 
mA[1586] = 0.0f; 
mA[1587] = 0.0f; 
mA[1588] = 0.0f; 
mA[1589] = 0.0f; 
mA[1590] = 0.0f; 
mA[1591] = 0.0f; 
mA[1592] = 0.0f; 
mA[1593] =  v_v04_glyc_bw ; 
mA[1594] = 0.0f; 
mA[1595] = 0.0f; 
mA[1596] = 0.0f; 
mA[1597] = 0.0f; 
mA[1598] = 0.0f; 
mA[1599] = 0.0f; 
mA[1600] = 0.0f; 
mA[1601] = 0.0f; 
mA[1602] = 0.0f; 
mA[1603] =  v_v05_glyc_fw ; 
mA[1604] = 0.0f; 
mA[1605] = 0.0f; 
mA[1606] = 0.0f; 
mA[1607] = 0.0f; 
mA[1608] = 0.0f; 
mA[1609] = 0.0f; 
mA[1610] = 0.0f; 
mA[1611] = 0.0f; 
mA[1612] = 0.0f; 
mA[1613] = 0.0f; 
mA[1614] = 0.0f; 
mA[1615] = 0.0f; 
mA[1616] = 0.0f; 
mA[1617] = 0.0f; 
mA[1618] = 0.0f; 
mA[1619] = 0.0f; 
mA[1620] = 0.0f; 
mA[1621] = 0.0f; 
mA[1622] = 0.0f; 
mA[1623] = 0.0f; 
mA[1624] = 0.0f; 
mA[1625] = 0.0f; 
mA[1626] = 0.0f; 
mA[1627] = 0.0f; 
mA[1628] = 0.0f; 
mA[1629] = 0.0f; 
mA[1630] = 0.0f; 
mA[1631] = 0.0f; 
mA[1632] = 0.0f; 
mA[1633] = 0.0f; 
mA[1634] = 0.0f; 
mA[1635] = 0.0f; 
mA[1636] = 0.0f; 
mA[1637] = 0.0f; 
mA[1638] = 0.0f; 
mA[1639] = 0.0f; 
mA[1640] = 0.0f; 
mA[1641] = 0.0f; 
mA[1642] = 0.0f; 
mA[1643] = 0.0f; 
mA[1644] = 0.0f; 
mA[1645] = 0.0f; 
mA[1646] = 0.0f; 
mA[1647] = 0.0f; 
mA[1648] = 0.0f; 
mA[1649] = 0.0f; 
mA[1650] = 0.0f; 
mA[1651] = 0.0f; 
mA[1652] = 0.0f; 
mA[1653] = 0.0f; 
mA[1654] = 0.0f; 
mA[1655] = 0.0f; 
mA[1656] = 0.0f; 
mA[1657] = 0.0f; 
mA[1658] = 0.0f; 
mA[1659] = 0.0f; 
mA[1660] = 0.0f; 
mA[1661] = 0.0f; 
mA[1662] = 0.0f; 
mA[1663] = 0.0f; 
mA[1664] = 0.0f; 
mA[1665] = 0.0f; 
mA[1666] = 0.0f; 
mA[1667] = 0.0f; 
mA[1668] = 0.0f; 
mA[1669] = 0.0f; 
mA[1670] = 0.0f; 
mA[1671] = 0.0f; 
mA[1672] = 0.0f; 
mA[1673] = 0.0f; 
mA[1674] = 0.0f; 
mA[1675] = 0.0f; 
mA[1676] = 0.0f; 
mA[1677] = 0.0f; 
mA[1678] = 0.0f; 
mA[1679] = 0.0f; 
mA[1680] = 0.0f; 
mA[1681] = 0.0f; 
mA[1682] = 0.0f; 
mA[1683] = ( (  -1.0f  * v_v05_glyc_bw   )  +(  -1.0f  * v_v04_glyc_fw   )   ) ; 
mA[1684] = 0.0f; 
mA[1685] = 0.0f; 
mA[1686] = 0.0f; 
mA[1687] = 0.0f; 
mA[1688] = 0.0f; 
mA[1689] = 0.0f; 
mA[1690] =  v_v04_glyc_bw ; 
mA[1691] = 0.0f; 
mA[1692] = 0.0f; 
mA[1693] = 0.0f; 
mA[1694] = 0.0f; 
mA[1695] = 0.0f; 
mA[1696] = 0.0f; 
mA[1697] = 0.0f; 
mA[1698] = 0.0f; 
mA[1699] = 0.0f; 
mA[1700] = 0.0f; 
mA[1701] = 0.0f; 
mA[1702] =  v_v05_glyc_fw ; 
mA[1703] = 0.0f; 
mA[1704] = 0.0f; 
mA[1705] = 0.0f; 
mA[1706] = 0.0f; 
mA[1707] = 0.0f; 
mA[1708] = 0.0f; 
mA[1709] = 0.0f; 
mA[1710] = 0.0f; 
mA[1711] = 0.0f; 
mA[1712] = 0.0f; 
mA[1713] = 0.0f; 
mA[1714] = 0.0f; 
mA[1715] = 0.0f; 
mA[1716] = 0.0f; 
mA[1717] = 0.0f; 
mA[1718] = 0.0f; 
mA[1719] = 0.0f; 
mA[1720] = 0.0f; 
mA[1721] = 0.0f; 
mA[1722] = 0.0f; 
mA[1723] = 0.0f; 
mA[1724] = 0.0f; 
mA[1725] = 0.0f; 
mA[1726] = 0.0f; 
mA[1727] = 0.0f; 
mA[1728] = 0.0f; 
mA[1729] = 0.0f; 
mA[1730] = 0.0f; 
mA[1731] = 0.0f; 
mA[1732] = 0.0f; 
mA[1733] = 0.0f; 
mA[1734] = 0.0f; 
mA[1735] = 0.0f; 
mA[1736] = 0.0f; 
mA[1737] = 0.0f; 
mA[1738] = 0.0f; 
mA[1739] = 0.0f; 
mA[1740] = 0.0f; 
mA[1741] = 0.0f; 
mA[1742] = 0.0f; 
mA[1743] = 0.0f; 
mA[1744] = 0.0f; 
mA[1745] = 0.0f; 
mA[1746] = 0.0f; 
mA[1747] = 0.0f; 
mA[1748] = 0.0f; 
mA[1749] = 0.0f; 
mA[1750] = 0.0f; 
mA[1751] = 0.0f; 
mA[1752] = 0.0f; 
mA[1753] = 0.0f; 
mA[1754] = 0.0f; 
mA[1755] = 0.0f; 
mA[1756] = 0.0f; 
mA[1757] = 0.0f; 
mA[1758] = 0.0f; 
mA[1759] = 0.0f; 
mA[1760] = 0.0f; 
mA[1761] = 0.0f; 
mA[1762] = 0.0f; 
mA[1763] = 0.0f; 
mA[1764] = 0.0f; 
mA[1765] = 0.0f; 
mA[1766] = 0.0f; 
mA[1767] = 0.0f; 
mA[1768] = 0.0f; 
mA[1769] = 0.0f; 
mA[1770] = 0.0f; 
mA[1771] = 0.0f; 
mA[1772] = 0.0f; 
mA[1773] = 0.0f; 
mA[1774] = 0.0f; 
mA[1775] = 0.0f; 
mA[1776] = 0.0f; 
mA[1777] = 0.0f; 
mA[1778] = 0.0f; 
mA[1779] = 0.0f; 
mA[1780] = 0.0f; 
mA[1781] = 0.0f; 
mA[1782] = ( (  -1.0f  * v_v17_ppp_fw   )  +(  -1.0f  * v_v14_ppp_fw   )   ) ; 
mA[1783] = 0.0f; 
mA[1784] = 0.0f; 
mA[1785] = 0.0f; 
mA[1786] =  v_v14_ppp_bw ; 
mA[1787] = 0.0f; 
mA[1788] = 0.0f; 
mA[1789] = 0.0f; 
mA[1790] = 0.0f; 
mA[1791] = 0.0f; 
mA[1792] = 0.0f; 
mA[1793] = 0.0f; 
mA[1794] = 0.0f; 
mA[1795] = 0.0f; 
mA[1796] = 0.0f; 
mA[1797] = 0.0f; 
mA[1798] = 0.0f; 
mA[1799] = 0.0f; 
mA[1800] = 0.0f; 
mA[1801] = 0.0f; 
mA[1802] = 0.0f; 
mA[1803] = 0.0f; 
mA[1804] = 0.0f; 
mA[1805] = 0.0f; 
mA[1806] = 0.0f; 
mA[1807] = 0.0f; 
mA[1808] = 0.0f; 
mA[1809] = 0.0f; 
mA[1810] = 0.0f; 
mA[1811] = 0.0f; 
mA[1812] = 0.0f; 
mA[1813] = 0.0f; 
mA[1814] = 0.0f; 
mA[1815] = 0.0f; 
mA[1816] = 0.0f; 
mA[1817] = 0.0f; 
mA[1818] = 0.0f; 
mA[1819] = 0.0f; 
mA[1820] = 0.0f; 
mA[1821] = 0.0f; 
mA[1822] = 0.0f; 
mA[1823] = 0.0f; 
mA[1824] = 0.0f; 
mA[1825] = 0.0f; 
mA[1826] = 0.0f; 
mA[1827] = 0.0f; 
mA[1828] = 0.0f; 
mA[1829] = 0.0f; 
mA[1830] = 0.0f; 
mA[1831] = 0.0f; 
mA[1832] = 0.0f; 
mA[1833] = 0.0f; 
mA[1834] = 0.0f; 
mA[1835] = 0.0f; 
mA[1836] = 0.0f; 
mA[1837] = 0.0f; 
mA[1838] =  v_v17_ppp_bw ; 
mA[1839] = 0.0f; 
mA[1840] = 0.0f; 
mA[1841] = 0.0f; 
mA[1842] = 0.0f; 
mA[1843] = 0.0f; 
mA[1844] = 0.0f; 
mA[1845] = 0.0f; 
mA[1846] = 0.0f; 
mA[1847] = 0.0f; 
mA[1848] = 0.0f; 
mA[1849] = 0.0f; 
mA[1850] = 0.0f; 
mA[1851] = 0.0f; 
mA[1852] = 0.0f; 
mA[1853] = 0.0f; 
mA[1854] = 0.0f; 
mA[1855] = 0.0f; 
mA[1856] = 0.0f; 
mA[1857] = 0.0f; 
mA[1858] = 0.0f; 
mA[1859] = 0.0f; 
mA[1860] = 0.0f; 
mA[1861] = 0.0f; 
mA[1862] = 0.0f; 
mA[1863] = 0.0f; 
mA[1864] = 0.0f; 
mA[1865] = 0.0f; 
mA[1866] = 0.0f; 
mA[1867] = 0.0f; 
mA[1868] = 0.0f; 
mA[1869] = 0.0f; 
mA[1870] = 0.0f; 
mA[1871] = 0.0f; 
mA[1872] = 0.0f; 
mA[1873] = 0.0f; 
mA[1874] = 0.0f; 
mA[1875] = 0.0f; 
mA[1876] = 0.0f; 
mA[1877] = 0.0f; 
mA[1878] = 0.0f; 
mA[1879] = 0.0f; 
mA[1880] = 0.0f; 
mA[1881] = ( (  -1.0f  * v_v14_ppp_fw   )  +(  -1.0f  * v_v17_ppp_fw   )   ) ; 
mA[1882] = 0.0f; 
mA[1883] = 0.0f; 
mA[1884] = 0.0f; 
mA[1885] =  v_v14_ppp_bw ; 
mA[1886] = 0.0f; 
mA[1887] = 0.0f; 
mA[1888] = 0.0f; 
mA[1889] = 0.0f; 
mA[1890] = 0.0f; 
mA[1891] = 0.0f; 
mA[1892] = 0.0f; 
mA[1893] = 0.0f; 
mA[1894] = 0.0f; 
mA[1895] = 0.0f; 
mA[1896] = 0.0f; 
mA[1897] = 0.0f; 
mA[1898] = 0.0f; 
mA[1899] = 0.0f; 
mA[1900] = 0.0f; 
mA[1901] = 0.0f; 
mA[1902] = 0.0f; 
mA[1903] = 0.0f; 
mA[1904] = 0.0f; 
mA[1905] = 0.0f; 
mA[1906] = 0.0f; 
mA[1907] = 0.0f; 
mA[1908] = 0.0f; 
mA[1909] = 0.0f; 
mA[1910] = 0.0f; 
mA[1911] = 0.0f; 
mA[1912] = 0.0f; 
mA[1913] = 0.0f; 
mA[1914] = 0.0f; 
mA[1915] = 0.0f; 
mA[1916] = 0.0f; 
mA[1917] = 0.0f; 
mA[1918] = 0.0f; 
mA[1919] = 0.0f; 
mA[1920] = 0.0f; 
mA[1921] = 0.0f; 
mA[1922] = 0.0f; 
mA[1923] = 0.0f; 
mA[1924] = 0.0f; 
mA[1925] = 0.0f; 
mA[1926] = 0.0f; 
mA[1927] = 0.0f; 
mA[1928] = 0.0f; 
mA[1929] = 0.0f; 
mA[1930] = 0.0f; 
mA[1931] = 0.0f; 
mA[1932] = 0.0f; 
mA[1933] = 0.0f; 
mA[1934] = 0.0f; 
mA[1935] = 0.0f; 
mA[1936] = 0.0f; 
mA[1937] =  v_v17_ppp_bw ; 
mA[1938] = 0.0f; 
mA[1939] = 0.0f; 
mA[1940] = 0.0f; 
mA[1941] = 0.0f; 
mA[1942] = 0.0f; 
mA[1943] = 0.0f; 
mA[1944] = 0.0f; 
mA[1945] = 0.0f; 
mA[1946] = 0.0f; 
mA[1947] = 0.0f; 
mA[1948] = 0.0f; 
mA[1949] = 0.0f; 
mA[1950] = 0.0f; 
mA[1951] = 0.0f; 
mA[1952] = 0.0f; 
mA[1953] = 0.0f; 
mA[1954] = 0.0f; 
mA[1955] = 0.0f; 
mA[1956] = 0.0f; 
mA[1957] = 0.0f; 
mA[1958] = 0.0f; 
mA[1959] = 0.0f; 
mA[1960] = 0.0f; 
mA[1961] = 0.0f; 
mA[1962] = 0.0f; 
mA[1963] = 0.0f; 
mA[1964] = 0.0f; 
mA[1965] = 0.0f; 
mA[1966] = 0.0f; 
mA[1967] = 0.0f; 
mA[1968] = 0.0f; 
mA[1969] = 0.0f; 
mA[1970] = 0.0f; 
mA[1971] = 0.0f; 
mA[1972] = 0.0f; 
mA[1973] = 0.0f; 
mA[1974] = 0.0f; 
mA[1975] = 0.0f; 
mA[1976] = 0.0f; 
mA[1977] = 0.0f; 
mA[1978] = 0.0f; 
mA[1979] = 0.0f; 
mA[1980] = ( (  -1.0f  * v_v14_ppp_bw   )  +(  -1.0f  * v_v02_glyc_fw   )  +(  -1.0f  * v_v16_ppp_bw   )   ) ; 
mA[1981] = 0.0f; 
mA[1982] = 0.0f; 
mA[1983] = 0.0f; 
mA[1984] =  v_v03_glyc_fw ; 
mA[1985] = 0.0f; 
mA[1986] = 0.0f; 
mA[1987] = 0.0f; 
mA[1988] = 0.0f; 
mA[1989] = 0.0f; 
mA[1990] = 0.0f; 
mA[1991] =  v_v02_glyc_bw ; 
mA[1992] = 0.0f; 
mA[1993] = 0.0f; 
mA[1994] = 0.0f; 
mA[1995] = 0.0f; 
mA[1996] = 0.0f; 
mA[1997] = 0.0f; 
mA[1998] = 0.0f; 
mA[1999] = 0.0f; 
mA[2000] = 0.0f; 
mA[2001] = 0.0f; 
mA[2002] = 0.0f; 
mA[2003] = 0.0f; 
mA[2004] = 0.0f; 
mA[2005] = 0.0f; 
mA[2006] = 0.0f; 
mA[2007] = 0.0f; 
mA[2008] = 0.0f; 
mA[2009] = 0.0f; 
mA[2010] = 0.0f; 
mA[2011] = 0.0f; 
mA[2012] = 0.0f; 
mA[2013] = 0.0f; 
mA[2014] = 0.0f; 
mA[2015] = 0.0f; 
mA[2016] = 0.0f; 
mA[2017] = 0.0f; 
mA[2018] = 0.0f; 
mA[2019] = 0.0f; 
mA[2020] = 0.0f; 
mA[2021] = 0.0f; 
mA[2022] = 0.0f; 
mA[2023] = 0.0f; 
mA[2024] = 0.0f; 
mA[2025] = 0.0f; 
mA[2026] = 0.0f; 
mA[2027] = 0.0f; 
mA[2028] = 0.0f; 
mA[2029] = 0.0f; 
mA[2030] = 0.0f; 
mA[2031] = 0.0f; 
mA[2032] = 0.0f; 
mA[2033] = 0.0f; 
mA[2034] = 0.0f; 
mA[2035] = 0.0f; 
mA[2036] = 0.0f; 
mA[2037] = 0.0f; 
mA[2038] = 0.0f; 
mA[2039] = 0.0f; 
mA[2040] = 0.0f; 
mA[2041] = 0.0f; 
mA[2042] = 0.0f; 
mA[2043] = 0.0f; 
mA[2044] =  v_v16_ppp_fw ; 
mA[2045] = 0.0f; 
mA[2046] =  v_v14_ppp_fw ; 
mA[2047] = 0.0f; 
mA[2048] = 0.0f; 
mA[2049] = 0.0f; 
mA[2050] = 0.0f; 
mA[2051] = 0.0f; 
mA[2052] = 0.0f; 
mA[2053] = 0.0f; 
mA[2054] = 0.0f; 
mA[2055] = 0.0f; 
mA[2056] = 0.0f; 
mA[2057] = 0.0f; 
mA[2058] = 0.0f; 
mA[2059] = 0.0f; 
mA[2060] = 0.0f; 
mA[2061] = 0.0f; 
mA[2062] = 0.0f; 
mA[2063] = 0.0f; 
mA[2064] = 0.0f; 
mA[2065] = 0.0f; 
mA[2066] = 0.0f; 
mA[2067] = 0.0f; 
mA[2068] = 0.0f; 
mA[2069] = 0.0f; 
mA[2070] = 0.0f; 
mA[2071] = 0.0f; 
mA[2072] = 0.0f; 
mA[2073] = 0.0f; 
mA[2074] = 0.0f; 
mA[2075] = 0.0f; 
mA[2076] = 0.0f; 
mA[2077] = 0.0f; 
mA[2078] = 0.0f; 
mA[2079] = ( (  -1.0f  * v_v14_ppp_bw   )  +(  -1.0f  * v_v16_ppp_bw   )  +(  -1.0f  * v_v02_glyc_fw   )   ) ; 
mA[2080] = 0.0f; 
mA[2081] = 0.0f; 
mA[2082] = 0.0f; 
mA[2083] =  v_v03_glyc_fw ; 
mA[2084] = 0.0f; 
mA[2085] = 0.0f; 
mA[2086] = 0.0f; 
mA[2087] = 0.0f; 
mA[2088] = 0.0f; 
mA[2089] = 0.0f; 
mA[2090] =  v_v02_glyc_bw ; 
mA[2091] = 0.0f; 
mA[2092] = 0.0f; 
mA[2093] = 0.0f; 
mA[2094] = 0.0f; 
mA[2095] = 0.0f; 
mA[2096] = 0.0f; 
mA[2097] = 0.0f; 
mA[2098] = 0.0f; 
mA[2099] = 0.0f; 
mA[2100] = 0.0f; 
mA[2101] = 0.0f; 
mA[2102] = 0.0f; 
mA[2103] = 0.0f; 
mA[2104] = 0.0f; 
mA[2105] = 0.0f; 
mA[2106] = 0.0f; 
mA[2107] = 0.0f; 
mA[2108] = 0.0f; 
mA[2109] = 0.0f; 
mA[2110] = 0.0f; 
mA[2111] = 0.0f; 
mA[2112] = 0.0f; 
mA[2113] = 0.0f; 
mA[2114] = 0.0f; 
mA[2115] = 0.0f; 
mA[2116] = 0.0f; 
mA[2117] = 0.0f; 
mA[2118] = 0.0f; 
mA[2119] = 0.0f; 
mA[2120] = 0.0f; 
mA[2121] = 0.0f; 
mA[2122] = 0.0f; 
mA[2123] = 0.0f; 
mA[2124] = 0.0f; 
mA[2125] = 0.0f; 
mA[2126] = 0.0f; 
mA[2127] = 0.0f; 
mA[2128] = 0.0f; 
mA[2129] = 0.0f; 
mA[2130] = 0.0f; 
mA[2131] = 0.0f; 
mA[2132] = 0.0f; 
mA[2133] = 0.0f; 
mA[2134] = 0.0f; 
mA[2135] = 0.0f; 
mA[2136] = 0.0f; 
mA[2137] = 0.0f; 
mA[2138] = 0.0f; 
mA[2139] = 0.0f; 
mA[2140] = 0.0f; 
mA[2141] = 0.0f; 
mA[2142] = 0.0f; 
mA[2143] =  v_v16_ppp_fw ; 
mA[2144] = 0.0f; 
mA[2145] = 0.0f; 
mA[2146] = 0.0f; 
mA[2147] = 0.0f; 
mA[2148] = 0.0f; 
mA[2149] = 0.0f; 
mA[2150] = 0.0f; 
mA[2151] = 0.0f; 
mA[2152] = 0.0f; 
mA[2153] = 0.0f; 
mA[2154] = 0.0f; 
mA[2155] = 0.0f; 
mA[2156] = 0.0f; 
mA[2157] = 0.0f; 
mA[2158] = 0.0f; 
mA[2159] = 0.0f; 
mA[2160] = 0.0f; 
mA[2161] = 0.0f; 
mA[2162] = 0.0f; 
mA[2163] = 0.0f; 
mA[2164] = 0.0f; 
mA[2165] = 0.0f; 
mA[2166] = 0.0f; 
mA[2167] = 0.0f; 
mA[2168] = 0.0f; 
mA[2169] = 0.0f; 
mA[2170] = 0.0f; 
mA[2171] = 0.0f; 
mA[2172] = 0.0f; 
mA[2173] = 0.0f; 
mA[2174] =  v_v14_ppp_fw ; 
mA[2175] = 0.0f; 
mA[2176] = 0.0f; 
mA[2177] = 0.0f; 
mA[2178] = ( (  -1.0f  * v_v14_ppp_bw   )  +(  -1.0f  * v_v16_ppp_bw   )  +(  -1.0f  * v_v02_glyc_fw   )   ) ; 
mA[2179] = 0.0f; 
mA[2180] = 0.0f; 
mA[2181] = 0.0f; 
mA[2182] =  v_v03_glyc_fw ; 
mA[2183] = 0.0f; 
mA[2184] = 0.0f; 
mA[2185] = 0.0f; 
mA[2186] = 0.0f; 
mA[2187] = 0.0f; 
mA[2188] = 0.0f; 
mA[2189] =  v_v02_glyc_bw ; 
mA[2190] = 0.0f; 
mA[2191] =  v_v16_ppp_fw ; 
mA[2192] = 0.0f; 
mA[2193] = 0.0f; 
mA[2194] = 0.0f; 
mA[2195] = 0.0f; 
mA[2196] = 0.0f; 
mA[2197] = 0.0f; 
mA[2198] = 0.0f; 
mA[2199] = 0.0f; 
mA[2200] = 0.0f; 
mA[2201] = 0.0f; 
mA[2202] = 0.0f; 
mA[2203] = 0.0f; 
mA[2204] = 0.0f; 
mA[2205] = 0.0f; 
mA[2206] = 0.0f; 
mA[2207] = 0.0f; 
mA[2208] = 0.0f; 
mA[2209] = 0.0f; 
mA[2210] = 0.0f; 
mA[2211] = 0.0f; 
mA[2212] = 0.0f; 
mA[2213] = 0.0f; 
mA[2214] = 0.0f; 
mA[2215] = 0.0f; 
mA[2216] = 0.0f; 
mA[2217] = 0.0f; 
mA[2218] = 0.0f; 
mA[2219] = 0.0f; 
mA[2220] = 0.0f; 
mA[2221] = 0.0f; 
mA[2222] = 0.0f; 
mA[2223] = 0.0f; 
mA[2224] = 0.0f; 
mA[2225] = 0.0f; 
mA[2226] = 0.0f; 
mA[2227] = 0.0f; 
mA[2228] = 0.0f; 
mA[2229] = 0.0f; 
mA[2230] = 0.0f; 
mA[2231] = 0.0f; 
mA[2232] = 0.0f; 
mA[2233] = 0.0f; 
mA[2234] = 0.0f; 
mA[2235] = 0.0f; 
mA[2236] = 0.0f; 
mA[2237] = 0.0f; 
mA[2238] = 0.0f; 
mA[2239] = 0.0f; 
mA[2240] = 0.0f; 
mA[2241] = 0.0f; 
mA[2242] = 0.0f; 
mA[2243] = 0.0f; 
mA[2244] = 0.0f; 
mA[2245] = 0.0f; 
mA[2246] = 0.0f; 
mA[2247] = 0.0f; 
mA[2248] = 0.0f; 
mA[2249] = 0.0f; 
mA[2250] = 0.0f; 
mA[2251] = 0.0f; 
mA[2252] = 0.0f; 
mA[2253] = 0.0f; 
mA[2254] = 0.0f; 
mA[2255] = 0.0f; 
mA[2256] = 0.0f; 
mA[2257] = 0.0f; 
mA[2258] = 0.0f; 
mA[2259] = 0.0f; 
mA[2260] = 0.0f; 
mA[2261] = 0.0f; 
mA[2262] = 0.0f; 
mA[2263] = 0.0f; 
mA[2264] = 0.0f; 
mA[2265] = 0.0f; 
mA[2266] = 0.0f; 
mA[2267] = 0.0f; 
mA[2268] = 0.0f; 
mA[2269] = 0.0f; 
mA[2270] = 0.0f; 
mA[2271] = 0.0f; 
mA[2272] = 0.0f; 
mA[2273] =  v_v14_ppp_fw ; 
mA[2274] = 0.0f; 
mA[2275] = 0.0f; 
mA[2276] = 0.0f; 
mA[2277] = ( (  -1.0f  * v_v16_ppp_bw   )  +(  -1.0f  * v_v02_glyc_fw   )  +(  -1.0f  * v_v14_ppp_bw   )   ) ; 
mA[2278] = 0.0f; 
mA[2279] = 0.0f; 
mA[2280] = 0.0f; 
mA[2281] =  v_v03_glyc_fw ; 
mA[2282] = 0.0f; 
mA[2283] = 0.0f; 
mA[2284] = 0.0f; 
mA[2285] = 0.0f; 
mA[2286] = 0.0f; 
mA[2287] = 0.0f; 
mA[2288] =  v_v02_glyc_bw ; 
mA[2289] = 0.0f; 
mA[2290] =  v_v16_ppp_fw ; 
mA[2291] = 0.0f; 
mA[2292] = 0.0f; 
mA[2293] = 0.0f; 
mA[2294] = 0.0f; 
mA[2295] = 0.0f; 
mA[2296] = 0.0f; 
mA[2297] = 0.0f; 
mA[2298] = 0.0f; 
mA[2299] = 0.0f; 
mA[2300] = 0.0f; 
mA[2301] = 0.0f; 
mA[2302] = 0.0f; 
mA[2303] = 0.0f; 
mA[2304] = 0.0f; 
mA[2305] = 0.0f; 
mA[2306] = 0.0f; 
mA[2307] = 0.0f; 
mA[2308] = 0.0f; 
mA[2309] = 0.0f; 
mA[2310] = 0.0f; 
mA[2311] = 0.0f; 
mA[2312] = 0.0f; 
mA[2313] = 0.0f; 
mA[2314] = 0.0f; 
mA[2315] = 0.0f; 
mA[2316] = 0.0f; 
mA[2317] = 0.0f; 
mA[2318] = 0.0f; 
mA[2319] = 0.0f; 
mA[2320] = 0.0f; 
mA[2321] = 0.0f; 
mA[2322] = 0.0f; 
mA[2323] = 0.0f; 
mA[2324] = 0.0f; 
mA[2325] = 0.0f; 
mA[2326] = 0.0f; 
mA[2327] = 0.0f; 
mA[2328] = 0.0f; 
mA[2329] = 0.0f; 
mA[2330] = 0.0f; 
mA[2331] = 0.0f; 
mA[2332] = 0.0f; 
mA[2333] = 0.0f; 
mA[2334] = 0.0f; 
mA[2335] = 0.0f; 
mA[2336] = 0.0f; 
mA[2337] = 0.0f; 
mA[2338] = 0.0f; 
mA[2339] = 0.0f; 
mA[2340] = 0.0f; 
mA[2341] = 0.0f; 
mA[2342] = 0.0f; 
mA[2343] = 0.0f; 
mA[2344] = 0.0f; 
mA[2345] = 0.0f; 
mA[2346] = 0.0f; 
mA[2347] = 0.0f; 
mA[2348] = 0.0f; 
mA[2349] = 0.0f; 
mA[2350] = 0.0f; 
mA[2351] = 0.0f; 
mA[2352] = 0.0f; 
mA[2353] = 0.0f; 
mA[2354] = 0.0f; 
mA[2355] = 0.0f; 
mA[2356] = 0.0f; 
mA[2357] = 0.0f; 
mA[2358] = 0.0f; 
mA[2359] = 0.0f; 
mA[2360] = 0.0f; 
mA[2361] = 0.0f; 
mA[2362] = 0.0f; 
mA[2363] = 0.0f; 
mA[2364] = 0.0f; 
mA[2365] = 0.0f; 
mA[2366] = 0.0f; 
mA[2367] = 0.0f; 
mA[2368] = 0.0f; 
mA[2369] =  v_v04_glyc_fw ; 
mA[2370] = 0.0f; 
mA[2371] = 0.0f; 
mA[2372] = 0.0f; 
mA[2373] = 0.0f; 
mA[2374] = 0.0f; 
mA[2375] = 0.0f; 
mA[2376] = ( (  -1.0f  * v_v03_glyc_fw   )  +(  -1.0f  * v_v04_glyc_bw   )   ) ; 
mA[2377] = 0.0f; 
mA[2378] = 0.0f; 
mA[2379] = 0.0f; 
mA[2380] = 0.0f; 
mA[2381] = 0.0f; 
mA[2382] = 0.0f; 
mA[2383] = 0.0f; 
mA[2384] = 0.0f; 
mA[2385] = 0.0f; 
mA[2386] = 0.0f; 
mA[2387] = 0.0f; 
mA[2388] = 0.0f; 
mA[2389] = 0.0f; 
mA[2390] = 0.0f; 
mA[2391] = 0.0f; 
mA[2392] = 0.0f; 
mA[2393] = 0.0f; 
mA[2394] = 0.0f; 
mA[2395] = 0.0f; 
mA[2396] = 0.0f; 
mA[2397] = 0.0f; 
mA[2398] = 0.0f; 
mA[2399] = 0.0f; 
mA[2400] = 0.0f; 
mA[2401] = 0.0f; 
mA[2402] = 0.0f; 
mA[2403] = 0.0f; 
mA[2404] = 0.0f; 
mA[2405] = 0.0f; 
mA[2406] = 0.0f; 
mA[2407] = 0.0f; 
mA[2408] = 0.0f; 
mA[2409] = 0.0f; 
mA[2410] = 0.0f; 
mA[2411] = 0.0f; 
mA[2412] = 0.0f; 
mA[2413] = 0.0f; 
mA[2414] = 0.0f; 
mA[2415] = 0.0f; 
mA[2416] = 0.0f; 
mA[2417] = 0.0f; 
mA[2418] = 0.0f; 
mA[2419] = 0.0f; 
mA[2420] = 0.0f; 
mA[2421] = 0.0f; 
mA[2422] = 0.0f; 
mA[2423] = 0.0f; 
mA[2424] = 0.0f; 
mA[2425] = 0.0f; 
mA[2426] = 0.0f; 
mA[2427] = 0.0f; 
mA[2428] = 0.0f; 
mA[2429] = 0.0f; 
mA[2430] = 0.0f; 
mA[2431] = 0.0f; 
mA[2432] = 0.0f; 
mA[2433] = 0.0f; 
mA[2434] = 0.0f; 
mA[2435] = 0.0f; 
mA[2436] = 0.0f; 
mA[2437] = 0.0f; 
mA[2438] = 0.0f; 
mA[2439] = 0.0f; 
mA[2440] = 0.0f; 
mA[2441] = 0.0f; 
mA[2442] = 0.0f; 
mA[2443] = 0.0f; 
mA[2444] = 0.0f; 
mA[2445] = 0.0f; 
mA[2446] = 0.0f; 
mA[2447] = 0.0f; 
mA[2448] = 0.0f; 
mA[2449] = 0.0f; 
mA[2450] = 0.0f; 
mA[2451] = 0.0f; 
mA[2452] = 0.0f; 
mA[2453] = 0.0f; 
mA[2454] = 0.0f; 
mA[2455] = 0.0f; 
mA[2456] = 0.0f; 
mA[2457] = 0.0f; 
mA[2458] = 0.0f; 
mA[2459] = 0.0f; 
mA[2460] = 0.0f; 
mA[2461] = 0.0f; 
mA[2462] = 0.0f; 
mA[2463] = 0.0f; 
mA[2464] = 0.0f; 
mA[2465] = 0.0f; 
mA[2466] =  v_v04_glyc_fw ; 
mA[2467] = 0.0f; 
mA[2468] = 0.0f; 
mA[2469] = 0.0f; 
mA[2470] = 0.0f; 
mA[2471] = 0.0f; 
mA[2472] = 0.0f; 
mA[2473] = 0.0f; 
mA[2474] = 0.0f; 
mA[2475] = ( (  -1.0f  * v_v04_glyc_bw   )  +(  -1.0f  * v_v03_glyc_fw   )   ) ; 
mA[2476] = 0.0f; 
mA[2477] = 0.0f; 
mA[2478] = 0.0f; 
mA[2479] = 0.0f; 
mA[2480] = 0.0f; 
mA[2481] = 0.0f; 
mA[2482] = 0.0f; 
mA[2483] = 0.0f; 
mA[2484] = 0.0f; 
mA[2485] = 0.0f; 
mA[2486] = 0.0f; 
mA[2487] = 0.0f; 
mA[2488] = 0.0f; 
mA[2489] = 0.0f; 
mA[2490] = 0.0f; 
mA[2491] = 0.0f; 
mA[2492] = 0.0f; 
mA[2493] = 0.0f; 
mA[2494] = 0.0f; 
mA[2495] = 0.0f; 
mA[2496] = 0.0f; 
mA[2497] = 0.0f; 
mA[2498] = 0.0f; 
mA[2499] = 0.0f; 
mA[2500] = 0.0f; 
mA[2501] = 0.0f; 
mA[2502] = 0.0f; 
mA[2503] = 0.0f; 
mA[2504] = 0.0f; 
mA[2505] = 0.0f; 
mA[2506] = 0.0f; 
mA[2507] = 0.0f; 
mA[2508] = 0.0f; 
mA[2509] = 0.0f; 
mA[2510] = 0.0f; 
mA[2511] = 0.0f; 
mA[2512] = 0.0f; 
mA[2513] = 0.0f; 
mA[2514] = 0.0f; 
mA[2515] = 0.0f; 
mA[2516] = 0.0f; 
mA[2517] = 0.0f; 
mA[2518] = 0.0f; 
mA[2519] = 0.0f; 
mA[2520] = 0.0f; 
mA[2521] = 0.0f; 
mA[2522] = 0.0f; 
mA[2523] = 0.0f; 
mA[2524] = 0.0f; 
mA[2525] = 0.0f; 
mA[2526] = 0.0f; 
mA[2527] = 0.0f; 
mA[2528] = 0.0f; 
mA[2529] = 0.0f; 
mA[2530] = 0.0f; 
mA[2531] = 0.0f; 
mA[2532] = 0.0f; 
mA[2533] = 0.0f; 
mA[2534] = 0.0f; 
mA[2535] = 0.0f; 
mA[2536] = 0.0f; 
mA[2537] = 0.0f; 
mA[2538] = 0.0f; 
mA[2539] = 0.0f; 
mA[2540] = 0.0f; 
mA[2541] = 0.0f; 
mA[2542] = 0.0f; 
mA[2543] = 0.0f; 
mA[2544] = 0.0f; 
mA[2545] = 0.0f; 
mA[2546] = 0.0f; 
mA[2547] = 0.0f; 
mA[2548] = 0.0f; 
mA[2549] = 0.0f; 
mA[2550] = 0.0f; 
mA[2551] = 0.0f; 
mA[2552] = 0.0f; 
mA[2553] = 0.0f; 
mA[2554] = 0.0f; 
mA[2555] = 0.0f; 
mA[2556] = 0.0f; 
mA[2557] = 0.0f; 
mA[2558] = 0.0f; 
mA[2559] = 0.0f; 
mA[2560] = 0.0f; 
mA[2561] = 0.0f; 
mA[2562] = 0.0f; 
mA[2563] = 0.0f; 
mA[2564] = 0.0f; 
mA[2565] = 0.0f; 
mA[2566] = 0.0f; 
mA[2567] = 0.0f; 
mA[2568] = 0.0f; 
mA[2569] = 0.0f; 
mA[2570] = 0.0f; 
mA[2571] = 0.0f; 
mA[2572] = 0.0f; 
mA[2573] = 0.0f; 
mA[2574] = ( (  -1.0f  * v_v04_glyc_bw   )  +(  -1.0f  * v_v03_glyc_fw   )   ) ; 
mA[2575] = 0.0f; 
mA[2576] = 0.0f; 
mA[2577] = 0.0f; 
mA[2578] = 0.0f; 
mA[2579] = 0.0f; 
mA[2580] = 0.0f; 
mA[2581] = 0.0f; 
mA[2582] = 0.0f; 
mA[2583] =  v_v04_glyc_fw ; 
mA[2584] = 0.0f; 
mA[2585] = 0.0f; 
mA[2586] = 0.0f; 
mA[2587] = 0.0f; 
mA[2588] = 0.0f; 
mA[2589] = 0.0f; 
mA[2590] = 0.0f; 
mA[2591] = 0.0f; 
mA[2592] = 0.0f; 
mA[2593] = 0.0f; 
mA[2594] = 0.0f; 
mA[2595] = 0.0f; 
mA[2596] = 0.0f; 
mA[2597] = 0.0f; 
mA[2598] = 0.0f; 
mA[2599] = 0.0f; 
mA[2600] = 0.0f; 
mA[2601] = 0.0f; 
mA[2602] = 0.0f; 
mA[2603] = 0.0f; 
mA[2604] = 0.0f; 
mA[2605] = 0.0f; 
mA[2606] = 0.0f; 
mA[2607] = 0.0f; 
mA[2608] = 0.0f; 
mA[2609] = 0.0f; 
mA[2610] = 0.0f; 
mA[2611] = 0.0f; 
mA[2612] = 0.0f; 
mA[2613] = 0.0f; 
mA[2614] = 0.0f; 
mA[2615] = 0.0f; 
mA[2616] = 0.0f; 
mA[2617] = 0.0f; 
mA[2618] = 0.0f; 
mA[2619] = 0.0f; 
mA[2620] = 0.0f; 
mA[2621] = 0.0f; 
mA[2622] = 0.0f; 
mA[2623] = 0.0f; 
mA[2624] = 0.0f; 
mA[2625] = 0.0f; 
mA[2626] = 0.0f; 
mA[2627] = 0.0f; 
mA[2628] = 0.0f; 
mA[2629] = 0.0f; 
mA[2630] = 0.0f; 
mA[2631] = 0.0f; 
mA[2632] = 0.0f; 
mA[2633] = 0.0f; 
mA[2634] = 0.0f; 
mA[2635] = 0.0f; 
mA[2636] = 0.0f; 
mA[2637] = 0.0f; 
mA[2638] = 0.0f; 
mA[2639] = 0.0f; 
mA[2640] = 0.0f; 
mA[2641] = 0.0f; 
mA[2642] = 0.0f; 
mA[2643] = 0.0f; 
mA[2644] = 0.0f; 
mA[2645] = 0.0f; 
mA[2646] = 0.0f; 
mA[2647] = 0.0f; 
mA[2648] = 0.0f; 
mA[2649] = 0.0f; 
mA[2650] = 0.0f; 
mA[2651] = 0.0f; 
mA[2652] = 0.0f; 
mA[2653] = 0.0f; 
mA[2654] = 0.0f; 
mA[2655] = 0.0f; 
mA[2656] = 0.0f; 
mA[2657] = 0.0f; 
mA[2658] = 0.0f; 
mA[2659] = 0.0f; 
mA[2660] = 0.0f; 
mA[2661] = 0.0f; 
mA[2662] = 0.0f; 
mA[2663] = 0.0f; 
mA[2664] = 0.0f; 
mA[2665] = 0.0f; 
mA[2666] = 0.0f; 
mA[2667] = 0.0f; 
mA[2668] = 0.0f; 
mA[2669] = 0.0f; 
mA[2670] = 0.0f; 
mA[2671] = 0.0f; 
mA[2672] = 0.0f; 
mA[2673] = ( (  -1.0f  * v_v03_glyc_fw   )  +(  -1.0f  * v_v04_glyc_bw   )   ) ; 
mA[2674] = 0.0f; 
mA[2675] = 0.0f; 
mA[2676] = 0.0f; 
mA[2677] = 0.0f; 
mA[2678] = 0.0f; 
mA[2679] = 0.0f; 
mA[2680] = 0.0f; 
mA[2681] = 0.0f; 
mA[2682] =  v_v04_glyc_fw ; 
mA[2683] = 0.0f; 
mA[2684] = 0.0f; 
mA[2685] = 0.0f; 
mA[2686] = 0.0f; 
mA[2687] = 0.0f; 
mA[2688] = 0.0f; 
mA[2689] = 0.0f; 
mA[2690] = 0.0f; 
mA[2691] = 0.0f; 
mA[2692] = 0.0f; 
mA[2693] = 0.0f; 
mA[2694] = 0.0f; 
mA[2695] = 0.0f; 
mA[2696] = 0.0f; 
mA[2697] = 0.0f; 
mA[2698] = 0.0f; 
mA[2699] = 0.0f; 
mA[2700] = 0.0f; 
mA[2701] = 0.0f; 
mA[2702] = 0.0f; 
mA[2703] = 0.0f; 
mA[2704] = 0.0f; 
mA[2705] = 0.0f; 
mA[2706] = 0.0f; 
mA[2707] = 0.0f; 
mA[2708] = 0.0f; 
mA[2709] = 0.0f; 
mA[2710] = 0.0f; 
mA[2711] = 0.0f; 
mA[2712] = 0.0f; 
mA[2713] = 0.0f; 
mA[2714] = 0.0f; 
mA[2715] = 0.0f; 
mA[2716] = 0.0f; 
mA[2717] = 0.0f; 
mA[2718] = 0.0f; 
mA[2719] = 0.0f; 
mA[2720] = 0.0f; 
mA[2721] = 0.0f; 
mA[2722] = 0.0f; 
mA[2723] = 0.0f; 
mA[2724] = 0.0f; 
mA[2725] = 0.0f; 
mA[2726] = 0.0f; 
mA[2727] = 0.0f; 
mA[2728] = 0.0f; 
mA[2729] = 0.0f; 
mA[2730] = 0.0f; 
mA[2731] = 0.0f; 
mA[2732] = 0.0f; 
mA[2733] = 0.0f; 
mA[2734] = 0.0f; 
mA[2735] = 0.0f; 
mA[2736] = 0.0f; 
mA[2737] = 0.0f; 
mA[2738] = 0.0f; 
mA[2739] = 0.0f; 
mA[2740] = 0.0f; 
mA[2741] = 0.0f; 
mA[2742] = 0.0f; 
mA[2743] = 0.0f; 
mA[2744] = 0.0f; 
mA[2745] = 0.0f; 
mA[2746] = 0.0f; 
mA[2747] = 0.0f; 
mA[2748] = 0.0f; 
mA[2749] = 0.0f; 
mA[2750] = 0.0f; 
mA[2751] = 0.0f; 
mA[2752] = 0.0f; 
mA[2753] = 0.0f; 
mA[2754] = 0.0f; 
mA[2755] = 0.0f; 
mA[2756] = 0.0f; 
mA[2757] = 0.0f; 
mA[2758] = 0.0f; 
mA[2759] = 0.0f; 
mA[2760] = 0.0f; 
mA[2761] = 0.0f; 
mA[2762] = 0.0f; 
mA[2763] = 0.0f; 
mA[2764] = 0.0f; 
mA[2765] = 0.0f; 
mA[2766] = 0.0f; 
mA[2767] = 0.0f; 
mA[2768] = 0.0f; 
mA[2769] = 0.0f; 
mA[2770] = 0.0f; 
mA[2771] = 0.0f; 
mA[2772] = ( (  -1.0f  * v_v26_tca_fw_a   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v27_tca_bw_b   )  +(  -1.0f  * v_v27_tca_bw_a   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v26_tca_fw_b   )   ) ; 
mA[2773] = 0.0f; 
mA[2774] = 0.0f; 
mA[2775] = 0.0f; 
mA[2776] = 0.0f; 
mA[2777] = 0.0f; 
mA[2778] = 0.0f; 
mA[2779] = 0.0f; 
mA[2780] = 0.0f; 
mA[2781] = 0.0f; 
mA[2782] = 0.0f; 
mA[2783] = 0.0f; 
mA[2784] = 0.0f; 
mA[2785] = 0.0f; 
mA[2786] = 0.0f; 
mA[2787] = 0.0f; 
mA[2788] = 0.0f; 
mA[2789] = 0.0f; 
mA[2790] = 0.0f; 
mA[2791] = 0.0f; 
mA[2792] = 0.0f; 
mA[2793] = 0.0f; 
mA[2794] = 0.0f; 
mA[2795] = 0.0f; 
mA[2796] = 0.0f; 
mA[2797] = 0.0f; 
mA[2798] = 0.0f; 
mA[2799] =  v_v27_tca_fw_a ; 
mA[2800] = 0.0f; 
mA[2801] =  v_v27_tca_fw_b ; 
mA[2802] = 0.0f; 
mA[2803] = 0.0f; 
mA[2804] = 0.0f; 
mA[2805] = 0.0f; 
mA[2806] = 0.0f; 
mA[2807] = 0.0f; 
mA[2808] = 0.0f; 
mA[2809] = 0.0f; 
mA[2810] = 0.0f; 
mA[2811] = 0.0f; 
mA[2812] = 0.0f; 
mA[2813] = 0.0f; 
mA[2814] = 0.0f; 
mA[2815] = 0.0f; 
mA[2816] = 0.0f; 
mA[2817] = 0.0f; 
mA[2818] = 0.0f; 
mA[2819] = 0.0f; 
mA[2820] = 0.0f; 
mA[2821] = 0.0f; 
mA[2822] =  v_v26_tca_bw_a ; 
mA[2823] = 0.0f; 
mA[2824] =  v_v26_tca_bw_b ; 
mA[2825] = 0.0f; 
mA[2826] = 0.0f; 
mA[2827] = 0.0f; 
mA[2828] = 0.0f; 
mA[2829] = 0.0f; 
mA[2830] = 0.0f; 
mA[2831] = 0.0f; 
mA[2832] = 0.0f; 
mA[2833] = 0.0f; 
mA[2834] = 0.0f; 
mA[2835] = 0.0f; 
mA[2836] = 0.0f; 
mA[2837] = 0.0f; 
mA[2838] = 0.0f; 
mA[2839] = 0.0f; 
mA[2840] = 0.0f; 
mA[2841] = 0.0f; 
mA[2842] = 0.0f; 
mA[2843] = 0.0f; 
mA[2844] = 0.0f; 
mA[2845] = 0.0f; 
mA[2846] = 0.0f; 
mA[2847] = 0.0f; 
mA[2848] = 0.0f; 
mA[2849] = 0.0f; 
mA[2850] = 0.0f; 
mA[2851] = 0.0f; 
mA[2852] = 0.0f; 
mA[2853] = 0.0f; 
mA[2854] = 0.0f; 
mA[2855] = 0.0f; 
mA[2856] = 0.0f; 
mA[2857] = 0.0f; 
mA[2858] = 0.0f; 
mA[2859] = 0.0f; 
mA[2860] = 0.0f; 
mA[2861] = 0.0f; 
mA[2862] = 0.0f; 
mA[2863] = 0.0f; 
mA[2864] = 0.0f; 
mA[2865] = 0.0f; 
mA[2866] = 0.0f; 
mA[2867] = 0.0f; 
mA[2868] = 0.0f; 
mA[2869] = 0.0f; 
mA[2870] = 0.0f; 
mA[2871] = ( (  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v26_tca_fw_b   )  +(  -1.0f  * v_v27_tca_bw_a   )  +(  -1.0f  * v_v27_tca_bw_b   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v26_tca_fw_a   )   ) ; 
mA[2872] = 0.0f; 
mA[2873] = 0.0f; 
mA[2874] = 0.0f; 
mA[2875] = 0.0f; 
mA[2876] = 0.0f; 
mA[2877] = 0.0f; 
mA[2878] = 0.0f; 
mA[2879] = 0.0f; 
mA[2880] = 0.0f; 
mA[2881] = 0.0f; 
mA[2882] = 0.0f; 
mA[2883] = 0.0f; 
mA[2884] = 0.0f; 
mA[2885] = 0.0f; 
mA[2886] = 0.0f; 
mA[2887] = 0.0f; 
mA[2888] = 0.0f; 
mA[2889] = 0.0f; 
mA[2890] = 0.0f; 
mA[2891] = 0.0f; 
mA[2892] = 0.0f; 
mA[2893] = 0.0f; 
mA[2894] = 0.0f; 
mA[2895] = 0.0f; 
mA[2896] = 0.0f; 
mA[2897] = 0.0f; 
mA[2898] = (  v_v27_tca_fw_a  + v_v27_tca_fw_b   ) ; 
mA[2899] = 0.0f; 
mA[2900] = 0.0f; 
mA[2901] = 0.0f; 
mA[2902] = 0.0f; 
mA[2903] = 0.0f; 
mA[2904] = 0.0f; 
mA[2905] = 0.0f; 
mA[2906] = 0.0f; 
mA[2907] = 0.0f; 
mA[2908] = 0.0f; 
mA[2909] = 0.0f; 
mA[2910] = 0.0f; 
mA[2911] = 0.0f; 
mA[2912] = 0.0f; 
mA[2913] = 0.0f; 
mA[2914] = 0.0f; 
mA[2915] = 0.0f; 
mA[2916] = 0.0f; 
mA[2917] = 0.0f; 
mA[2918] = 0.0f; 
mA[2919] = 0.0f; 
mA[2920] = 0.0f; 
mA[2921] = (  v_v26_tca_bw_b  + v_v26_tca_bw_a   ) ; 
mA[2922] = 0.0f; 
mA[2923] = 0.0f; 
mA[2924] = 0.0f; 
mA[2925] = 0.0f; 
mA[2926] = 0.0f; 
mA[2927] = 0.0f; 
mA[2928] = 0.0f; 
mA[2929] = 0.0f; 
mA[2930] = 0.0f; 
mA[2931] = 0.0f; 
mA[2932] = 0.0f; 
mA[2933] = 0.0f; 
mA[2934] = 0.0f; 
mA[2935] = 0.0f; 
mA[2936] = 0.0f; 
mA[2937] = 0.0f; 
mA[2938] = 0.0f; 
mA[2939] = 0.0f; 
mA[2940] = 0.0f; 
mA[2941] = 0.0f; 
mA[2942] = 0.0f; 
mA[2943] = 0.0f; 
mA[2944] = 0.0f; 
mA[2945] = 0.0f; 
mA[2946] = 0.0f; 
mA[2947] = 0.0f; 
mA[2948] = 0.0f; 
mA[2949] = 0.0f; 
mA[2950] = 0.0f; 
mA[2951] = 0.0f; 
mA[2952] = 0.0f; 
mA[2953] = 0.0f; 
mA[2954] = 0.0f; 
mA[2955] = 0.0f; 
mA[2956] = 0.0f; 
mA[2957] = 0.0f; 
mA[2958] = 0.0f; 
mA[2959] = 0.0f; 
mA[2960] = 0.0f; 
mA[2961] = 0.0f; 
mA[2962] = 0.0f; 
mA[2963] = 0.0f; 
mA[2964] = 0.0f; 
mA[2965] = 0.0f; 
mA[2966] = 0.0f; 
mA[2967] = 0.0f; 
mA[2968] = 0.0f; 
mA[2969] = 0.0f; 
mA[2970] = ( (  -1.0f  * v_v26_tca_fw_a   )  +(  -1.0f  * v_v27_tca_bw_b   )  +(  -1.0f  * v_v27_tca_bw_a   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v26_tca_fw_b   )  +(  -1.0f  * v_v39_aa_fw   )   ) ; 
mA[2971] = 0.0f; 
mA[2972] = 0.0f; 
mA[2973] = 0.0f; 
mA[2974] = 0.0f; 
mA[2975] = 0.0f; 
mA[2976] = 0.0f; 
mA[2977] = 0.0f; 
mA[2978] = 0.0f; 
mA[2979] = 0.0f; 
mA[2980] = 0.0f; 
mA[2981] = 0.0f; 
mA[2982] = 0.0f; 
mA[2983] = 0.0f; 
mA[2984] = 0.0f; 
mA[2985] = 0.0f; 
mA[2986] = 0.0f; 
mA[2987] = 0.0f; 
mA[2988] = 0.0f; 
mA[2989] = 0.0f; 
mA[2990] = 0.0f; 
mA[2991] = 0.0f; 
mA[2992] = 0.0f; 
mA[2993] = 0.0f; 
mA[2994] = 0.0f; 
mA[2995] =  v_v27_tca_fw_b ; 
mA[2996] = 0.0f; 
mA[2997] =  v_v27_tca_fw_a ; 
mA[2998] = 0.0f; 
mA[2999] = 0.0f; 
mA[3000] = 0.0f; 
mA[3001] = 0.0f; 
mA[3002] = 0.0f; 
mA[3003] = 0.0f; 
mA[3004] = 0.0f; 
mA[3005] = 0.0f; 
mA[3006] = 0.0f; 
mA[3007] = 0.0f; 
mA[3008] = 0.0f; 
mA[3009] = 0.0f; 
mA[3010] = 0.0f; 
mA[3011] = 0.0f; 
mA[3012] = 0.0f; 
mA[3013] = 0.0f; 
mA[3014] = 0.0f; 
mA[3015] = 0.0f; 
mA[3016] = 0.0f; 
mA[3017] = 0.0f; 
mA[3018] =  v_v26_tca_bw_b ; 
mA[3019] = 0.0f; 
mA[3020] =  v_v26_tca_bw_a ; 
mA[3021] = 0.0f; 
mA[3022] = 0.0f; 
mA[3023] = 0.0f; 
mA[3024] = 0.0f; 
mA[3025] = 0.0f; 
mA[3026] = 0.0f; 
mA[3027] = 0.0f; 
mA[3028] = 0.0f; 
mA[3029] = 0.0f; 
mA[3030] = 0.0f; 
mA[3031] = 0.0f; 
mA[3032] = 0.0f; 
mA[3033] = 0.0f; 
mA[3034] = 0.0f; 
mA[3035] = 0.0f; 
mA[3036] = 0.0f; 
mA[3037] = 0.0f; 
mA[3038] = 0.0f; 
mA[3039] = 0.0f; 
mA[3040] = 0.0f; 
mA[3041] = 0.0f; 
mA[3042] = 0.0f; 
mA[3043] = 0.0f; 
mA[3044] = 0.0f; 
mA[3045] = 0.0f; 
mA[3046] = 0.0f; 
mA[3047] = 0.0f; 
mA[3048] = 0.0f; 
mA[3049] = 0.0f; 
mA[3050] = 0.0f; 
mA[3051] = 0.0f; 
mA[3052] = 0.0f; 
mA[3053] = 0.0f; 
mA[3054] = 0.0f; 
mA[3055] = 0.0f; 
mA[3056] = 0.0f; 
mA[3057] = 0.0f; 
mA[3058] =  v_v02_glyc_fw ; 
mA[3059] = 0.0f; 
mA[3060] = 0.0f; 
mA[3061] = 0.0f; 
mA[3062] = 0.0f; 
mA[3063] = 0.0f; 
mA[3064] = 0.0f; 
mA[3065] = 0.0f; 
mA[3066] = 0.0f; 
mA[3067] = 0.0f; 
mA[3068] = 0.0f; 
mA[3069] = ( (  -1.0f  * v_v02_glyc_bw   )  +(  -1.0f  * v_v01_SX_Gluc_In_b   )   ) ; 
mA[3070] = 0.0f; 
mA[3071] = 0.0f; 
mA[3072] = 0.0f; 
mA[3073] = 0.0f; 
mA[3074] = 0.0f; 
mA[3075] = 0.0f; 
mA[3076] = 0.0f; 
mA[3077] = 0.0f; 
mA[3078] = 0.0f; 
mA[3079] = 0.0f; 
mA[3080] = 0.0f; 
mA[3081] = 0.0f; 
mA[3082] = 0.0f; 
mA[3083] = 0.0f; 
mA[3084] = 0.0f; 
mA[3085] = 0.0f; 
mA[3086] = 0.0f; 
mA[3087] = 0.0f; 
mA[3088] = 0.0f; 
mA[3089] = 0.0f; 
mA[3090] = 0.0f; 
mA[3091] = 0.0f; 
mA[3092] = 0.0f; 
mA[3093] = 0.0f; 
mA[3094] = 0.0f; 
mA[3095] = 0.0f; 
mA[3096] = 0.0f; 
mA[3097] = 0.0f; 
mA[3098] = 0.0f; 
mA[3099] = 0.0f; 
mA[3100] = 0.0f; 
mA[3101] = 0.0f; 
mA[3102] = 0.0f; 
mA[3103] = 0.0f; 
mA[3104] = 0.0f; 
mA[3105] = 0.0f; 
mA[3106] = 0.0f; 
mA[3107] = 0.0f; 
mA[3108] = 0.0f; 
mA[3109] = 0.0f; 
mA[3110] = 0.0f; 
mA[3111] = 0.0f; 
mA[3112] = 0.0f; 
mA[3113] = 0.0f; 
mA[3114] = 0.0f; 
mA[3115] = 0.0f; 
mA[3116] = 0.0f; 
mA[3117] = 0.0f; 
mA[3118] = 0.0f; 
mA[3119] = 0.0f; 
mA[3120] = 0.0f; 
mA[3121] = 0.0f; 
mA[3122] = 0.0f; 
mA[3123] = 0.0f; 
mA[3124] = 0.0f; 
mA[3125] = 0.0f; 
mA[3126] = 0.0f; 
mA[3127] = 0.0f; 
mA[3128] = 0.0f; 
mA[3129] = 0.0f; 
mA[3130] = 0.0f; 
mA[3131] = 0.0f; 
mA[3132] = 0.0f; 
mA[3133] = 0.0f; 
mA[3134] = 0.0f; 
mA[3135] = 0.0f; 
mA[3136] = 0.0f; 
mA[3137] = 0.0f; 
mA[3138] = 0.0f; 
mA[3139] = 0.0f; 
mA[3140] = 0.0f; 
mA[3141] = 0.0f; 
mA[3142] = 0.0f; 
mA[3143] = 0.0f; 
mA[3144] = 0.0f; 
mA[3145] = 0.0f; 
mA[3146] = 0.0f; 
mA[3147] = 0.0f; 
mA[3148] = 0.0f; 
mA[3149] = 0.0f; 
mA[3150] = 0.0f; 
mA[3151] = 0.0f; 
mA[3152] = 0.0f; 
mA[3153] = 0.0f; 
mA[3154] = 0.0f; 
mA[3155] = 0.0f; 
mA[3156] = 0.0f; 
mA[3157] =  v_v02_glyc_fw ; 
mA[3158] = 0.0f; 
mA[3159] = 0.0f; 
mA[3160] = 0.0f; 
mA[3161] = 0.0f; 
mA[3162] = 0.0f; 
mA[3163] = 0.0f; 
mA[3164] = 0.0f; 
mA[3165] = 0.0f; 
mA[3166] = 0.0f; 
mA[3167] = 0.0f; 
mA[3168] = ( (  -1.0f  * v_v01_SX_Gluc_In_b   )  +(  -1.0f  * v_v02_glyc_bw   )   ) ; 
mA[3169] = 0.0f; 
mA[3170] = 0.0f; 
mA[3171] = 0.0f; 
mA[3172] = 0.0f; 
mA[3173] = 0.0f; 
mA[3174] = 0.0f; 
mA[3175] = 0.0f; 
mA[3176] = 0.0f; 
mA[3177] = 0.0f; 
mA[3178] = 0.0f; 
mA[3179] = 0.0f; 
mA[3180] = 0.0f; 
mA[3181] = 0.0f; 
mA[3182] = 0.0f; 
mA[3183] = 0.0f; 
mA[3184] = 0.0f; 
mA[3185] = 0.0f; 
mA[3186] = 0.0f; 
mA[3187] = 0.0f; 
mA[3188] = 0.0f; 
mA[3189] = 0.0f; 
mA[3190] = 0.0f; 
mA[3191] = 0.0f; 
mA[3192] = 0.0f; 
mA[3193] = 0.0f; 
mA[3194] = 0.0f; 
mA[3195] = 0.0f; 
mA[3196] = 0.0f; 
mA[3197] = 0.0f; 
mA[3198] = 0.0f; 
mA[3199] = 0.0f; 
mA[3200] = 0.0f; 
mA[3201] = 0.0f; 
mA[3202] = 0.0f; 
mA[3203] = 0.0f; 
mA[3204] = 0.0f; 
mA[3205] = 0.0f; 
mA[3206] = 0.0f; 
mA[3207] = 0.0f; 
mA[3208] = 0.0f; 
mA[3209] = 0.0f; 
mA[3210] = 0.0f; 
mA[3211] = 0.0f; 
mA[3212] = 0.0f; 
mA[3213] = 0.0f; 
mA[3214] = 0.0f; 
mA[3215] = 0.0f; 
mA[3216] = 0.0f; 
mA[3217] = 0.0f; 
mA[3218] = 0.0f; 
mA[3219] = 0.0f; 
mA[3220] = 0.0f; 
mA[3221] = 0.0f; 
mA[3222] = 0.0f; 
mA[3223] = 0.0f; 
mA[3224] = 0.0f; 
mA[3225] = 0.0f; 
mA[3226] = 0.0f; 
mA[3227] = 0.0f; 
mA[3228] = 0.0f; 
mA[3229] = 0.0f; 
mA[3230] = 0.0f; 
mA[3231] =  v_v09_ppp_fw ; 
mA[3232] = 0.0f; 
mA[3233] = 0.0f; 
mA[3234] = 0.0f; 
mA[3235] = 0.0f; 
mA[3236] = 0.0f; 
mA[3237] = 0.0f; 
mA[3238] = 0.0f; 
mA[3239] = 0.0f; 
mA[3240] = 0.0f; 
mA[3241] = 0.0f; 
mA[3242] = 0.0f; 
mA[3243] = 0.0f; 
mA[3244] = 0.0f; 
mA[3245] = 0.0f; 
mA[3246] = 0.0f; 
mA[3247] = 0.0f; 
mA[3248] = 0.0f; 
mA[3249] = 0.0f; 
mA[3250] = 0.0f; 
mA[3251] = 0.0f; 
mA[3252] = 0.0f; 
mA[3253] = 0.0f; 
mA[3254] = 0.0f; 
mA[3255] = 0.0f; 
mA[3256] =  v_v02_glyc_fw ; 
mA[3257] = 0.0f; 
mA[3258] = 0.0f; 
mA[3259] = 0.0f; 
mA[3260] = 0.0f; 
mA[3261] = 0.0f; 
mA[3262] = 0.0f; 
mA[3263] = 0.0f; 
mA[3264] = 0.0f; 
mA[3265] = 0.0f; 
mA[3266] = 0.0f; 
mA[3267] = ( (  -1.0f  * v_v01_SX_Gluc_In_b   )  +(  -1.0f  * v_v02_glyc_bw   )   ) ; 
mA[3268] = 0.0f; 
mA[3269] = 0.0f; 
mA[3270] = 0.0f; 
mA[3271] = 0.0f; 
mA[3272] = 0.0f; 
mA[3273] = 0.0f; 
mA[3274] = 0.0f; 
mA[3275] = 0.0f; 
mA[3276] = 0.0f; 
mA[3277] = 0.0f; 
mA[3278] = 0.0f; 
mA[3279] = 0.0f; 
mA[3280] = 0.0f; 
mA[3281] = 0.0f; 
mA[3282] = 0.0f; 
mA[3283] = 0.0f; 
mA[3284] = 0.0f; 
mA[3285] = 0.0f; 
mA[3286] = 0.0f; 
mA[3287] = 0.0f; 
mA[3288] = 0.0f; 
mA[3289] = 0.0f; 
mA[3290] = 0.0f; 
mA[3291] = 0.0f; 
mA[3292] = 0.0f; 
mA[3293] = 0.0f; 
mA[3294] = 0.0f; 
mA[3295] = 0.0f; 
mA[3296] = 0.0f; 
mA[3297] = 0.0f; 
mA[3298] = 0.0f; 
mA[3299] = 0.0f; 
mA[3300] = 0.0f; 
mA[3301] = 0.0f; 
mA[3302] = 0.0f; 
mA[3303] = 0.0f; 
mA[3304] = 0.0f; 
mA[3305] = 0.0f; 
mA[3306] = 0.0f; 
mA[3307] = 0.0f; 
mA[3308] = 0.0f; 
mA[3309] = 0.0f; 
mA[3310] = 0.0f; 
mA[3311] = 0.0f; 
mA[3312] = 0.0f; 
mA[3313] = 0.0f; 
mA[3314] = 0.0f; 
mA[3315] = 0.0f; 
mA[3316] = 0.0f; 
mA[3317] = 0.0f; 
mA[3318] = 0.0f; 
mA[3319] = 0.0f; 
mA[3320] = 0.0f; 
mA[3321] = 0.0f; 
mA[3322] = 0.0f; 
mA[3323] = 0.0f; 
mA[3324] = 0.0f; 
mA[3325] = 0.0f; 
mA[3326] = 0.0f; 
mA[3327] = 0.0f; 
mA[3328] = 0.0f; 
mA[3329] = 0.0f; 
mA[3330] =  v_v09_ppp_fw ; 
mA[3331] = 0.0f; 
mA[3332] = 0.0f; 
mA[3333] = 0.0f; 
mA[3334] = 0.0f; 
mA[3335] = 0.0f; 
mA[3336] = 0.0f; 
mA[3337] = 0.0f; 
mA[3338] = 0.0f; 
mA[3339] = 0.0f; 
mA[3340] = 0.0f; 
mA[3341] = 0.0f; 
mA[3342] = 0.0f; 
mA[3343] = 0.0f; 
mA[3344] = 0.0f; 
mA[3345] = 0.0f; 
mA[3346] = 0.0f; 
mA[3347] = 0.0f; 
mA[3348] = 0.0f; 
mA[3349] = 0.0f; 
mA[3350] = 0.0f; 
mA[3351] = 0.0f; 
mA[3352] = 0.0f; 
mA[3353] = 0.0f; 
mA[3354] = 0.0f; 
mA[3355] =  v_v02_glyc_fw ; 
mA[3356] = 0.0f; 
mA[3357] = 0.0f; 
mA[3358] = 0.0f; 
mA[3359] = 0.0f; 
mA[3360] = 0.0f; 
mA[3361] = 0.0f; 
mA[3362] = 0.0f; 
mA[3363] = 0.0f; 
mA[3364] = 0.0f; 
mA[3365] = 0.0f; 
mA[3366] = ( (  -1.0f  * v_v01_SX_Gluc_In_b   )  +(  -1.0f  * v_v02_glyc_bw   )   ) ; 
mA[3367] = 0.0f; 
mA[3368] = 0.0f; 
mA[3369] = 0.0f; 
mA[3370] = 0.0f; 
mA[3371] = 0.0f; 
mA[3372] = 0.0f; 
mA[3373] = 0.0f; 
mA[3374] = 0.0f; 
mA[3375] = 0.0f; 
mA[3376] = 0.0f; 
mA[3377] = 0.0f; 
mA[3378] = 0.0f; 
mA[3379] = 0.0f; 
mA[3380] = 0.0f; 
mA[3381] = 0.0f; 
mA[3382] = 0.0f; 
mA[3383] = 0.0f; 
mA[3384] = 0.0f; 
mA[3385] = 0.0f; 
mA[3386] = 0.0f; 
mA[3387] = 0.0f; 
mA[3388] = 0.0f; 
mA[3389] = 0.0f; 
mA[3390] = 0.0f; 
mA[3391] = 0.0f; 
mA[3392] = 0.0f; 
mA[3393] = 0.0f; 
mA[3394] = 0.0f; 
mA[3395] = 0.0f; 
mA[3396] = 0.0f; 
mA[3397] = 0.0f; 
mA[3398] = 0.0f; 
mA[3399] = 0.0f; 
mA[3400] = 0.0f; 
mA[3401] = 0.0f; 
mA[3402] = 0.0f; 
mA[3403] = 0.0f; 
mA[3404] = 0.0f; 
mA[3405] = 0.0f; 
mA[3406] = 0.0f; 
mA[3407] = 0.0f; 
mA[3408] = 0.0f; 
mA[3409] = 0.0f; 
mA[3410] = 0.0f; 
mA[3411] = 0.0f; 
mA[3412] = 0.0f; 
mA[3413] = 0.0f; 
mA[3414] = 0.0f; 
mA[3415] = 0.0f; 
mA[3416] = 0.0f; 
mA[3417] = 0.0f; 
mA[3418] = 0.0f; 
mA[3419] = 0.0f; 
mA[3420] = 0.0f; 
mA[3421] = 0.0f; 
mA[3422] = 0.0f; 
mA[3423] = 0.0f; 
mA[3424] = 0.0f; 
mA[3425] = 0.0f; 
mA[3426] = 0.0f; 
mA[3427] = 0.0f; 
mA[3428] = 0.0f; 
mA[3429] =  v_v09_ppp_fw ; 
mA[3430] = 0.0f; 
mA[3431] = 0.0f; 
mA[3432] = 0.0f; 
mA[3433] = 0.0f; 
mA[3434] = 0.0f; 
mA[3435] = 0.0f; 
mA[3436] = 0.0f; 
mA[3437] = 0.0f; 
mA[3438] = 0.0f; 
mA[3439] = 0.0f; 
mA[3440] = 0.0f; 
mA[3441] = 0.0f; 
mA[3442] = 0.0f; 
mA[3443] = 0.0f; 
mA[3444] = 0.0f; 
mA[3445] = 0.0f; 
mA[3446] =  v_v05_glyc_bw ; 
mA[3447] = 0.0f; 
mA[3448] = 0.0f; 
mA[3449] = 0.0f; 
mA[3450] = 0.0f; 
mA[3451] = 0.0f; 
mA[3452] =  v_v16_ppp_bw ; 
mA[3453] = 0.0f; 
mA[3454] = 0.0f; 
mA[3455] = 0.0f; 
mA[3456] =  v_v04_glyc_bw ; 
mA[3457] = 0.0f; 
mA[3458] = 0.0f; 
mA[3459] = 0.0f; 
mA[3460] = 0.0f; 
mA[3461] = 0.0f; 
mA[3462] = 0.0f; 
mA[3463] = 0.0f; 
mA[3464] = 0.0f; 
mA[3465] = ( (  -1.0f  * v_v13_ppp_fw   )  +(  -1.0f  * v_v19_ed_fw   )  +(  -1.0f  * v_v16_ppp_fw   )  +(  -1.0f  * v_v05_glyc_fw   )  +(  -1.0f  * v_v04_glyc_fw   )  +(  -1.0f  * v_v06_glyc_bw   )  +(  -1.0f  * v_v57_aa_fw   )   ) ; 
mA[3466] = 0.0f; 
mA[3467] = 0.0f; 
mA[3468] = 0.0f; 
mA[3469] = 0.0f; 
mA[3470] = 0.0f; 
mA[3471] = 0.0f; 
mA[3472] = 0.0f; 
mA[3473] = 0.0f; 
mA[3474] = 0.0f; 
mA[3475] = 0.0f; 
mA[3476] = 0.0f; 
mA[3477] = 0.0f; 
mA[3478] = 0.0f; 
mA[3479] = 0.0f; 
mA[3480] = 0.0f; 
mA[3481] = 0.0f; 
mA[3482] = 0.0f; 
mA[3483] = 0.0f; 
mA[3484] = 0.0f; 
mA[3485] = 0.0f; 
mA[3486] = 0.0f; 
mA[3487] = 0.0f; 
mA[3488] = 0.0f; 
mA[3489] = 0.0f; 
mA[3490] = 0.0f; 
mA[3491] = 0.0f; 
mA[3492] = 0.0f; 
mA[3493] = 0.0f; 
mA[3494] = 0.0f; 
mA[3495] = 0.0f; 
mA[3496] = 0.0f; 
mA[3497] = 0.0f; 
mA[3498] = 0.0f; 
mA[3499] = 0.0f; 
mA[3500] = 0.0f; 
mA[3501] = 0.0f; 
mA[3502] = 0.0f; 
mA[3503] = 0.0f; 
mA[3504] = 0.0f; 
mA[3505] = 0.0f; 
mA[3506] = 0.0f; 
mA[3507] = 0.0f; 
mA[3508] = 0.0f; 
mA[3509] = 0.0f; 
mA[3510] = 0.0f; 
mA[3511] = 0.0f; 
mA[3512] = 0.0f; 
mA[3513] = 0.0f; 
mA[3514] = 0.0f; 
mA[3515] = 0.0f; 
mA[3516] = 0.0f; 
mA[3517] = 0.0f; 
mA[3518] = 0.0f; 
mA[3519] = 0.0f; 
mA[3520] =  v_v06_glyc_fw ; 
mA[3521] = 0.0f; 
mA[3522] = 0.0f; 
mA[3523] =  v_v13_ppp_bw ; 
mA[3524] = 0.0f; 
mA[3525] = 0.0f; 
mA[3526] = 0.0f; 
mA[3527] = 0.0f; 
mA[3528] = 0.0f; 
mA[3529] = 0.0f; 
mA[3530] = 0.0f; 
mA[3531] = 0.0f; 
mA[3532] = 0.0f; 
mA[3533] = 0.0f; 
mA[3534] = 0.0f; 
mA[3535] = 0.0f; 
mA[3536] = 0.0f; 
mA[3537] = 0.0f; 
mA[3538] = 0.0f; 
mA[3539] = 0.0f; 
mA[3540] = 0.0f; 
mA[3541] = 0.0f; 
mA[3542] = 0.0f; 
mA[3543] = 0.0f; 
mA[3544] = 0.0f; 
mA[3545] =  v_v05_glyc_bw ; 
mA[3546] = 0.0f; 
mA[3547] = 0.0f; 
mA[3548] = 0.0f; 
mA[3549] = 0.0f; 
mA[3550] = 0.0f; 
mA[3551] =  v_v16_ppp_bw ; 
mA[3552] = 0.0f; 
mA[3553] = 0.0f; 
mA[3554] = 0.0f; 
mA[3555] =  v_v04_glyc_bw ; 
mA[3556] = 0.0f; 
mA[3557] = 0.0f; 
mA[3558] = 0.0f; 
mA[3559] = 0.0f; 
mA[3560] = 0.0f; 
mA[3561] = 0.0f; 
mA[3562] = 0.0f; 
mA[3563] = 0.0f; 
mA[3564] = ( (  -1.0f  * v_v16_ppp_fw   )  +(  -1.0f  * v_v19_ed_fw   )  +(  -1.0f  * v_v13_ppp_fw   )  +(  -1.0f  * v_v04_glyc_fw   )  +(  -1.0f  * v_v05_glyc_fw   )  +(  -1.0f  * v_v57_aa_fw   )  +(  -1.0f  * v_v06_glyc_bw   )   ) ; 
mA[3565] = 0.0f; 
mA[3566] = 0.0f; 
mA[3567] = 0.0f; 
mA[3568] = 0.0f; 
mA[3569] = 0.0f; 
mA[3570] = 0.0f; 
mA[3571] = 0.0f; 
mA[3572] = 0.0f; 
mA[3573] = 0.0f; 
mA[3574] = 0.0f; 
mA[3575] = 0.0f; 
mA[3576] = 0.0f; 
mA[3577] = 0.0f; 
mA[3578] = 0.0f; 
mA[3579] = 0.0f; 
mA[3580] = 0.0f; 
mA[3581] = 0.0f; 
mA[3582] = 0.0f; 
mA[3583] = 0.0f; 
mA[3584] = 0.0f; 
mA[3585] = 0.0f; 
mA[3586] = 0.0f; 
mA[3587] = 0.0f; 
mA[3588] = 0.0f; 
mA[3589] = 0.0f; 
mA[3590] = 0.0f; 
mA[3591] = 0.0f; 
mA[3592] = 0.0f; 
mA[3593] = 0.0f; 
mA[3594] = 0.0f; 
mA[3595] = 0.0f; 
mA[3596] = 0.0f; 
mA[3597] = 0.0f; 
mA[3598] = 0.0f; 
mA[3599] = 0.0f; 
mA[3600] = 0.0f; 
mA[3601] = 0.0f; 
mA[3602] = 0.0f; 
mA[3603] = 0.0f; 
mA[3604] = 0.0f; 
mA[3605] = 0.0f; 
mA[3606] = 0.0f; 
mA[3607] = 0.0f; 
mA[3608] = 0.0f; 
mA[3609] = 0.0f; 
mA[3610] = 0.0f; 
mA[3611] = 0.0f; 
mA[3612] = 0.0f; 
mA[3613] = 0.0f; 
mA[3614] = 0.0f; 
mA[3615] = 0.0f; 
mA[3616] = 0.0f; 
mA[3617] = 0.0f; 
mA[3618] = 0.0f; 
mA[3619] =  v_v06_glyc_fw ; 
mA[3620] = 0.0f; 
mA[3621] = 0.0f; 
mA[3622] =  v_v13_ppp_bw ; 
mA[3623] = 0.0f; 
mA[3624] = 0.0f; 
mA[3625] = 0.0f; 
mA[3626] = (  v_v58_aa_fw  + v_v39_aa_fw   ) ; 
mA[3627] = 0.0f; 
mA[3628] = 0.0f; 
mA[3629] = 0.0f; 
mA[3630] = 0.0f; 
mA[3631] = 0.0f; 
mA[3632] = 0.0f; 
mA[3633] = 0.0f; 
mA[3634] = 0.0f; 
mA[3635] = 0.0f; 
mA[3636] = 0.0f; 
mA[3637] = 0.0f; 
mA[3638] = 0.0f; 
mA[3639] = 0.0f; 
mA[3640] = 0.0f; 
mA[3641] = 0.0f; 
mA[3642] = 0.0f; 
mA[3643] = 0.0f; 
mA[3644] = 0.0f; 
mA[3645] = 0.0f; 
mA[3646] = 0.0f; 
mA[3647] = 0.0f; 
mA[3648] = 0.0f; 
mA[3649] = 0.0f; 
mA[3650] = 0.0f; 
mA[3651] = 0.0f; 
mA[3652] = 0.0f; 
mA[3653] = 0.0f; 
mA[3654] = 0.0f; 
mA[3655] = 0.0f; 
mA[3656] = 0.0f; 
mA[3657] = 0.0f; 
mA[3658] = 0.0f; 
mA[3659] = 0.0f; 
mA[3660] = 0.0f; 
mA[3661] = 0.0f; 
mA[3662] = 0.0f; 
mA[3663] = ( (  -1.0f  * v_v37_aa_fw   )   ) ; 
mA[3664] = 0.0f; 
mA[3665] = 0.0f; 
mA[3666] = 0.0f; 
mA[3667] =  v_v57_aa_fw ; 
mA[3668] = 0.0f; 
mA[3669] = 0.0f; 
mA[3670] = 0.0f; 
mA[3671] = 0.0f; 
mA[3672] = 0.0f; 
mA[3673] = 0.0f; 
mA[3674] = 0.0f; 
mA[3675] = 0.0f; 
mA[3676] = 0.0f; 
mA[3677] = 0.0f; 
mA[3678] = 0.0f; 
mA[3679] = 0.0f; 
mA[3680] = 0.0f; 
mA[3681] = 0.0f; 
mA[3682] = 0.0f; 
mA[3683] = 0.0f; 
mA[3684] = 0.0f; 
mA[3685] = 0.0f; 
mA[3686] = 0.0f; 
mA[3687] = 0.0f; 
mA[3688] = 0.0f; 
mA[3689] = 0.0f; 
mA[3690] = 0.0f; 
mA[3691] = 0.0f; 
mA[3692] = 0.0f; 
mA[3693] = 0.0f; 
mA[3694] = 0.0f; 
mA[3695] = 0.0f; 
mA[3696] = 0.0f; 
mA[3697] = 0.0f; 
mA[3698] = 0.0f; 
mA[3699] = 0.0f; 
mA[3700] = 0.0f; 
mA[3701] = 0.0f; 
mA[3702] = 0.0f; 
mA[3703] = 0.0f; 
mA[3704] = 0.0f; 
mA[3705] = 0.0f; 
mA[3706] = 0.0f; 
mA[3707] = 0.0f; 
mA[3708] = 0.0f; 
mA[3709] = 0.0f; 
mA[3710] = 0.0f; 
mA[3711] = 0.0f; 
mA[3712] = 0.0f; 
mA[3713] = 0.0f; 
mA[3714] = 0.0f; 
mA[3715] = 0.0f; 
mA[3716] = 0.0f; 
mA[3717] = 0.0f; 
mA[3718] = 0.0f; 
mA[3719] = 0.0f; 
mA[3720] = 0.0f; 
mA[3721] = 0.0f; 
mA[3722] = 0.0f; 
mA[3723] = 0.0f; 
mA[3724] = 0.0f; 
mA[3725] = (  v_v58_aa_fw  + v_v39_aa_fw   ) ; 
mA[3726] = 0.0f; 
mA[3727] = 0.0f; 
mA[3728] = 0.0f; 
mA[3729] = 0.0f; 
mA[3730] = 0.0f; 
mA[3731] = 0.0f; 
mA[3732] = 0.0f; 
mA[3733] = 0.0f; 
mA[3734] = 0.0f; 
mA[3735] = 0.0f; 
mA[3736] = 0.0f; 
mA[3737] = 0.0f; 
mA[3738] = 0.0f; 
mA[3739] = 0.0f; 
mA[3740] = 0.0f; 
mA[3741] = 0.0f; 
mA[3742] = 0.0f; 
mA[3743] = 0.0f; 
mA[3744] = 0.0f; 
mA[3745] = 0.0f; 
mA[3746] = 0.0f; 
mA[3747] = 0.0f; 
mA[3748] = 0.0f; 
mA[3749] = 0.0f; 
mA[3750] = 0.0f; 
mA[3751] = 0.0f; 
mA[3752] = 0.0f; 
mA[3753] = 0.0f; 
mA[3754] = 0.0f; 
mA[3755] = 0.0f; 
mA[3756] = 0.0f; 
mA[3757] = 0.0f; 
mA[3758] = 0.0f; 
mA[3759] = 0.0f; 
mA[3760] = 0.0f; 
mA[3761] = 0.0f; 
mA[3762] = ( (  -1.0f  * v_v37_aa_fw   )   ) ; 
mA[3763] = 0.0f; 
mA[3764] = 0.0f; 
mA[3765] = 0.0f; 
mA[3766] =  v_v57_aa_fw ; 
mA[3767] = 0.0f; 
mA[3768] = 0.0f; 
mA[3769] = 0.0f; 
mA[3770] = 0.0f; 
mA[3771] = 0.0f; 
mA[3772] = 0.0f; 
mA[3773] = 0.0f; 
mA[3774] = 0.0f; 
mA[3775] = 0.0f; 
mA[3776] = 0.0f; 
mA[3777] = 0.0f; 
mA[3778] = 0.0f; 
mA[3779] = 0.0f; 
mA[3780] = 0.0f; 
mA[3781] = 0.0f; 
mA[3782] = 0.0f; 
mA[3783] = 0.0f; 
mA[3784] = 0.0f; 
mA[3785] = 0.0f; 
mA[3786] = 0.0f; 
mA[3787] = 0.0f; 
mA[3788] = 0.0f; 
mA[3789] = 0.0f; 
mA[3790] = 0.0f; 
mA[3791] = 0.0f; 
mA[3792] = 0.0f; 
mA[3793] = 0.0f; 
mA[3794] = 0.0f; 
mA[3795] = 0.0f; 
mA[3796] = 0.0f; 
mA[3797] = 0.0f; 
mA[3798] = 0.0f; 
mA[3799] = 0.0f; 
mA[3800] = 0.0f; 
mA[3801] = 0.0f; 
mA[3802] = 0.0f; 
mA[3803] = 0.0f; 
mA[3804] = 0.0f; 
mA[3805] = 0.0f; 
mA[3806] = 0.0f; 
mA[3807] = 0.0f; 
mA[3808] = 0.0f; 
mA[3809] = 0.0f; 
mA[3810] = 0.0f; 
mA[3811] = 0.0f; 
mA[3812] = 0.0f; 
mA[3813] = 0.0f; 
mA[3814] = 0.0f; 
mA[3815] = 0.0f; 
mA[3816] = 0.0f; 
mA[3817] = 0.0f; 
mA[3818] = 0.0f; 
mA[3819] = 0.0f; 
mA[3820] = 0.0f; 
mA[3821] = 0.0f; 
mA[3822] = 0.0f; 
mA[3823] = 0.0f; 
mA[3824] = (  v_v58_aa_fw  + v_v39_aa_fw   ) ; 
mA[3825] = 0.0f; 
mA[3826] = 0.0f; 
mA[3827] = 0.0f; 
mA[3828] = 0.0f; 
mA[3829] = 0.0f; 
mA[3830] = 0.0f; 
mA[3831] = 0.0f; 
mA[3832] = 0.0f; 
mA[3833] = 0.0f; 
mA[3834] = 0.0f; 
mA[3835] = 0.0f; 
mA[3836] = 0.0f; 
mA[3837] = 0.0f; 
mA[3838] = 0.0f; 
mA[3839] = 0.0f; 
mA[3840] = 0.0f; 
mA[3841] = 0.0f; 
mA[3842] = 0.0f; 
mA[3843] = 0.0f; 
mA[3844] = 0.0f; 
mA[3845] = 0.0f; 
mA[3846] = 0.0f; 
mA[3847] = 0.0f; 
mA[3848] = 0.0f; 
mA[3849] = 0.0f; 
mA[3850] = 0.0f; 
mA[3851] = 0.0f; 
mA[3852] = 0.0f; 
mA[3853] = 0.0f; 
mA[3854] = 0.0f; 
mA[3855] = 0.0f; 
mA[3856] = 0.0f; 
mA[3857] = 0.0f; 
mA[3858] = 0.0f; 
mA[3859] = 0.0f; 
mA[3860] = 0.0f; 
mA[3861] = ( (  -1.0f  * v_v37_aa_fw   )   ) ; 
mA[3862] = 0.0f; 
mA[3863] = 0.0f; 
mA[3864] = 0.0f; 
mA[3865] =  v_v57_aa_fw ; 
mA[3866] = 0.0f; 
mA[3867] = 0.0f; 
mA[3868] = 0.0f; 
mA[3869] = 0.0f; 
mA[3870] = 0.0f; 
mA[3871] = 0.0f; 
mA[3872] = 0.0f; 
mA[3873] = 0.0f; 
mA[3874] = 0.0f; 
mA[3875] = 0.0f; 
mA[3876] = 0.0f; 
mA[3877] = 0.0f; 
mA[3878] = 0.0f; 
mA[3879] = 0.0f; 
mA[3880] = 0.0f; 
mA[3881] = 0.0f; 
mA[3882] = 0.0f; 
mA[3883] = 0.0f; 
mA[3884] = 0.0f; 
mA[3885] = 0.0f; 
mA[3886] = 0.0f; 
mA[3887] = 0.0f; 
mA[3888] = 0.0f; 
mA[3889] = 0.0f; 
mA[3890] = 0.0f; 
mA[3891] = 0.0f; 
mA[3892] = 0.0f; 
mA[3893] = 0.0f; 
mA[3894] = 0.0f; 
mA[3895] = 0.0f; 
mA[3896] = 0.0f; 
mA[3897] = 0.0f; 
mA[3898] = 0.0f; 
mA[3899] = 0.0f; 
mA[3900] = 0.0f; 
mA[3901] = 0.0f; 
mA[3902] = 0.0f; 
mA[3903] = 0.0f; 
mA[3904] = 0.0f; 
mA[3905] = 0.0f; 
mA[3906] = 0.0f; 
mA[3907] = 0.0f; 
mA[3908] = 0.0f; 
mA[3909] = 0.0f; 
mA[3910] = 0.0f; 
mA[3911] = 0.0f; 
mA[3912] = 0.0f; 
mA[3913] = 0.0f; 
mA[3914] = 0.0f; 
mA[3915] = 0.0f; 
mA[3916] = 0.0f; 
mA[3917] = 0.0f; 
mA[3918] = 0.0f; 
mA[3919] = 0.0f; 
mA[3920] = 0.0f; 
mA[3921] = 0.0f; 
mA[3922] = 0.0f; 
mA[3923] = (  v_v58_aa_fw  + v_v39_aa_fw   ) ; 
mA[3924] = 0.0f; 
mA[3925] = 0.0f; 
mA[3926] = 0.0f; 
mA[3927] = 0.0f; 
mA[3928] = 0.0f; 
mA[3929] = 0.0f; 
mA[3930] = 0.0f; 
mA[3931] = 0.0f; 
mA[3932] = 0.0f; 
mA[3933] = 0.0f; 
mA[3934] = 0.0f; 
mA[3935] = 0.0f; 
mA[3936] = 0.0f; 
mA[3937] = 0.0f; 
mA[3938] = 0.0f; 
mA[3939] = 0.0f; 
mA[3940] = 0.0f; 
mA[3941] = 0.0f; 
mA[3942] = 0.0f; 
mA[3943] = 0.0f; 
mA[3944] = 0.0f; 
mA[3945] = 0.0f; 
mA[3946] = 0.0f; 
mA[3947] = 0.0f; 
mA[3948] = 0.0f; 
mA[3949] = 0.0f; 
mA[3950] = 0.0f; 
mA[3951] = 0.0f; 
mA[3952] = 0.0f; 
mA[3953] = 0.0f; 
mA[3954] = 0.0f; 
mA[3955] = 0.0f; 
mA[3956] = 0.0f; 
mA[3957] = 0.0f; 
mA[3958] = 0.0f; 
mA[3959] = 0.0f; 
mA[3960] = ( (  -1.0f  * v_v37_aa_fw   )   ) ; 
mA[3961] = 0.0f; 
mA[3962] = 0.0f; 
mA[3963] = 0.0f; 
mA[3964] =  v_v57_aa_fw ; 
mA[3965] = 0.0f; 
mA[3966] = 0.0f; 
mA[3967] = 0.0f; 
mA[3968] = 0.0f; 
mA[3969] = 0.0f; 
mA[3970] = 0.0f; 
mA[3971] = 0.0f; 
mA[3972] = 0.0f; 
mA[3973] = 0.0f; 
mA[3974] = 0.0f; 
mA[3975] = 0.0f; 
mA[3976] = 0.0f; 
mA[3977] = 0.0f; 
mA[3978] = 0.0f; 
mA[3979] = 0.0f; 
mA[3980] = 0.0f; 
mA[3981] = 0.0f; 
mA[3982] = 0.0f; 
mA[3983] = 0.0f; 
mA[3984] = 0.0f; 
mA[3985] = 0.0f; 
mA[3986] = 0.0f; 
mA[3987] = 0.0f; 
mA[3988] = 0.0f; 
mA[3989] = 0.0f; 
mA[3990] = 0.0f; 
mA[3991] = 0.0f; 
mA[3992] = 0.0f; 
mA[3993] = 0.0f; 
mA[3994] = 0.0f; 
mA[3995] = 0.0f; 
mA[3996] = 0.0f; 
mA[3997] = 0.0f; 
mA[3998] = 0.0f; 
mA[3999] = 0.0f; 
mA[4000] = 0.0f; 
mA[4001] = 0.0f; 
mA[4002] = 0.0f; 
mA[4003] = 0.0f; 
mA[4004] = 0.0f; 
mA[4005] = 0.0f; 
mA[4006] = 0.0f; 
mA[4007] = 0.0f; 
mA[4008] = 0.0f; 
mA[4009] = 0.0f; 
mA[4010] = 0.0f; 
mA[4011] = 0.0f; 
mA[4012] = 0.0f; 
mA[4013] = 0.0f; 
mA[4014] = 0.0f; 
mA[4015] = 0.0f; 
mA[4016] = 0.0f; 
mA[4017] = 0.0f; 
mA[4018] = (  v_v43_aa_fw  + v_v55_aa_fw  + v_v53_aa_fw  + v_v52_aa_fw  + v_v56_aa_fw  + v_v48_aa_fw_c  + v_v40_aa_fw  + v_v42_aa_fw  + v_v48_aa_fw_b  + v_v48_aa_fw_a  + v_v54_aa_fw  + v_v48_aa_fw_d   ) ; 
mA[4019] = 0.0f; 
mA[4020] = 0.0f; 
mA[4021] = 0.0f; 
mA[4022] = 0.0f; 
mA[4023] = 0.0f; 
mA[4024] = 0.0f; 
mA[4025] = 0.0f; 
mA[4026] = 0.0f; 
mA[4027] = 0.0f; 
mA[4028] = 0.0f; 
mA[4029] = 0.0f; 
mA[4030] = 0.0f; 
mA[4031] = 0.0f; 
mA[4032] = 0.0f; 
mA[4033] = 0.0f; 
mA[4034] = 0.0f; 
mA[4035] = 0.0f; 
mA[4036] = 0.0f; 
mA[4037] = 0.0f; 
mA[4038] = 0.0f; 
mA[4039] = 0.0f; 
mA[4040] = 0.0f; 
mA[4041] = 0.0f; 
mA[4042] = 0.0f; 
mA[4043] = 0.0f; 
mA[4044] = 0.0f; 
mA[4045] = 0.0f; 
mA[4046] = 0.0f; 
mA[4047] = 0.0f; 
mA[4048] = 0.0f; 
mA[4049] = 0.0f; 
mA[4050] = 0.0f; 
mA[4051] = 0.0f; 
mA[4052] = 0.0f; 
mA[4053] = 0.0f; 
mA[4054] = 0.0f; 
mA[4055] =  v_v37_aa_fw ; 
mA[4056] = 0.0f; 
mA[4057] = 0.0f; 
mA[4058] = 0.0f; 
mA[4059] = ( (  -1.0f  * v_v57_aa_fw   )  +(  -1.0f  * v_v36_aa_fw   )   ) ; 
mA[4060] = 0.0f; 
mA[4061] = 0.0f; 
mA[4062] = 0.0f; 
mA[4063] = 0.0f; 
mA[4064] = 0.0f; 
mA[4065] = 0.0f; 
mA[4066] = 0.0f; 
mA[4067] = 0.0f; 
mA[4068] = 0.0f; 
mA[4069] = 0.0f; 
mA[4070] = 0.0f; 
mA[4071] = 0.0f; 
mA[4072] = 0.0f; 
mA[4073] = 0.0f; 
mA[4074] = 0.0f; 
mA[4075] = 0.0f; 
mA[4076] = 0.0f; 
mA[4077] = 0.0f; 
mA[4078] = 0.0f; 
mA[4079] = 0.0f; 
mA[4080] = 0.0f; 
mA[4081] = 0.0f; 
mA[4082] = 0.0f; 
mA[4083] = 0.0f; 
mA[4084] = 0.0f; 
mA[4085] = 0.0f; 
mA[4086] = 0.0f; 
mA[4087] = 0.0f; 
mA[4088] = 0.0f; 
mA[4089] = 0.0f; 
mA[4090] = 0.0f; 
mA[4091] = 0.0f; 
mA[4092] = 0.0f; 
mA[4093] = 0.0f; 
mA[4094] = 0.0f; 
mA[4095] = 0.0f; 
mA[4096] = 0.0f; 
mA[4097] = 0.0f; 
mA[4098] = 0.0f; 
mA[4099] = 0.0f; 
mA[4100] = 0.0f; 
mA[4101] = 0.0f; 
mA[4102] = 0.0f; 
mA[4103] = 0.0f; 
mA[4104] = 0.0f; 
mA[4105] = 0.0f; 
mA[4106] = 0.0f; 
mA[4107] = 0.0f; 
mA[4108] = 0.0f; 
mA[4109] = 0.0f; 
mA[4110] = 0.0f; 
mA[4111] = 0.0f; 
mA[4112] = 0.0f; 
mA[4113] = 0.0f; 
mA[4114] = 0.0f; 
mA[4115] = 0.0f; 
mA[4116] = 0.0f; 
mA[4117] = (  v_v48_aa_fw_c  + v_v52_aa_fw  + v_v48_aa_fw_d  + v_v40_aa_fw  + v_v56_aa_fw  + v_v42_aa_fw  + v_v43_aa_fw  + v_v48_aa_fw_a  + v_v53_aa_fw  + v_v55_aa_fw  + v_v54_aa_fw  + v_v48_aa_fw_b   ) ; 
mA[4118] = 0.0f; 
mA[4119] = 0.0f; 
mA[4120] = 0.0f; 
mA[4121] = 0.0f; 
mA[4122] = 0.0f; 
mA[4123] = 0.0f; 
mA[4124] = 0.0f; 
mA[4125] = 0.0f; 
mA[4126] = 0.0f; 
mA[4127] = 0.0f; 
mA[4128] = 0.0f; 
mA[4129] = 0.0f; 
mA[4130] = 0.0f; 
mA[4131] = 0.0f; 
mA[4132] = 0.0f; 
mA[4133] = 0.0f; 
mA[4134] = 0.0f; 
mA[4135] = 0.0f; 
mA[4136] = 0.0f; 
mA[4137] = 0.0f; 
mA[4138] = 0.0f; 
mA[4139] = 0.0f; 
mA[4140] = 0.0f; 
mA[4141] = 0.0f; 
mA[4142] = 0.0f; 
mA[4143] = 0.0f; 
mA[4144] = 0.0f; 
mA[4145] = 0.0f; 
mA[4146] = 0.0f; 
mA[4147] = 0.0f; 
mA[4148] = 0.0f; 
mA[4149] = 0.0f; 
mA[4150] = 0.0f; 
mA[4151] = 0.0f; 
mA[4152] = 0.0f; 
mA[4153] = 0.0f; 
mA[4154] =  v_v37_aa_fw ; 
mA[4155] = 0.0f; 
mA[4156] = 0.0f; 
mA[4157] = 0.0f; 
mA[4158] = ( (  -1.0f  * v_v36_aa_fw   )  +(  -1.0f  * v_v57_aa_fw   )   ) ; 
mA[4159] = 0.0f; 
mA[4160] = 0.0f; 
mA[4161] = 0.0f; 
mA[4162] = 0.0f; 
mA[4163] = 0.0f; 
mA[4164] = 0.0f; 
mA[4165] = 0.0f; 
mA[4166] = 0.0f; 
mA[4167] = 0.0f; 
mA[4168] = 0.0f; 
mA[4169] = 0.0f; 
mA[4170] = 0.0f; 
mA[4171] = 0.0f; 
mA[4172] = 0.0f; 
mA[4173] = 0.0f; 
mA[4174] = 0.0f; 
mA[4175] = 0.0f; 
mA[4176] = 0.0f; 
mA[4177] = 0.0f; 
mA[4178] = 0.0f; 
mA[4179] = 0.0f; 
mA[4180] = 0.0f; 
mA[4181] = 0.0f; 
mA[4182] = 0.0f; 
mA[4183] = 0.0f; 
mA[4184] = 0.0f; 
mA[4185] = 0.0f; 
mA[4186] = 0.0f; 
mA[4187] = 0.0f; 
mA[4188] = 0.0f; 
mA[4189] = 0.0f; 
mA[4190] = 0.0f; 
mA[4191] = 0.0f; 
mA[4192] = 0.0f; 
mA[4193] = 0.0f; 
mA[4194] = 0.0f; 
mA[4195] = 0.0f; 
mA[4196] = 0.0f; 
mA[4197] = 0.0f; 
mA[4198] = 0.0f; 
mA[4199] = 0.0f; 
mA[4200] = 0.0f; 
mA[4201] = 0.0f; 
mA[4202] = 0.0f; 
mA[4203] = 0.0f; 
mA[4204] = 0.0f; 
mA[4205] = 0.0f; 
mA[4206] = 0.0f; 
mA[4207] = 0.0f; 
mA[4208] = 0.0f; 
mA[4209] = 0.0f; 
mA[4210] = 0.0f; 
mA[4211] = 0.0f; 
mA[4212] = 0.0f; 
mA[4213] = 0.0f; 
mA[4214] = 0.0f; 
mA[4215] = 0.0f; 
mA[4216] = (  v_v55_aa_fw  + v_v56_aa_fw  + v_v48_aa_fw_d  + v_v53_aa_fw  + v_v42_aa_fw  + v_v40_aa_fw  + v_v43_aa_fw  + v_v48_aa_fw_b  + v_v54_aa_fw  + v_v48_aa_fw_a  + v_v52_aa_fw  + v_v48_aa_fw_c   ) ; 
mA[4217] = 0.0f; 
mA[4218] = 0.0f; 
mA[4219] = 0.0f; 
mA[4220] = 0.0f; 
mA[4221] = 0.0f; 
mA[4222] = 0.0f; 
mA[4223] = 0.0f; 
mA[4224] = 0.0f; 
mA[4225] = 0.0f; 
mA[4226] = 0.0f; 
mA[4227] = 0.0f; 
mA[4228] = 0.0f; 
mA[4229] = 0.0f; 
mA[4230] = 0.0f; 
mA[4231] = 0.0f; 
mA[4232] = 0.0f; 
mA[4233] = 0.0f; 
mA[4234] = 0.0f; 
mA[4235] = 0.0f; 
mA[4236] = 0.0f; 
mA[4237] = 0.0f; 
mA[4238] = 0.0f; 
mA[4239] = 0.0f; 
mA[4240] = 0.0f; 
mA[4241] = 0.0f; 
mA[4242] = 0.0f; 
mA[4243] = 0.0f; 
mA[4244] = 0.0f; 
mA[4245] = 0.0f; 
mA[4246] = 0.0f; 
mA[4247] = 0.0f; 
mA[4248] = 0.0f; 
mA[4249] = 0.0f; 
mA[4250] = 0.0f; 
mA[4251] = 0.0f; 
mA[4252] = 0.0f; 
mA[4253] =  v_v37_aa_fw ; 
mA[4254] = 0.0f; 
mA[4255] = 0.0f; 
mA[4256] = 0.0f; 
mA[4257] = ( (  -1.0f  * v_v57_aa_fw   )  +(  -1.0f  * v_v36_aa_fw   )   ) ; 
mA[4258] = 0.0f; 
mA[4259] = 0.0f; 
mA[4260] = 0.0f; 
mA[4261] = 0.0f; 
mA[4262] = 0.0f; 
mA[4263] = 0.0f; 
mA[4264] = 0.0f; 
mA[4265] = 0.0f; 
mA[4266] = 0.0f; 
mA[4267] = 0.0f; 
mA[4268] = 0.0f; 
mA[4269] = 0.0f; 
mA[4270] = 0.0f; 
mA[4271] = 0.0f; 
mA[4272] = 0.0f; 
mA[4273] = 0.0f; 
mA[4274] = 0.0f; 
mA[4275] = 0.0f; 
mA[4276] = 0.0f; 
mA[4277] = 0.0f; 
mA[4278] = 0.0f; 
mA[4279] = 0.0f; 
mA[4280] = 0.0f; 
mA[4281] = 0.0f; 
mA[4282] = 0.0f; 
mA[4283] = 0.0f; 
mA[4284] = 0.0f; 
mA[4285] = 0.0f; 
mA[4286] = 0.0f; 
mA[4287] = 0.0f; 
mA[4288] = 0.0f; 
mA[4289] = 0.0f; 
mA[4290] = 0.0f; 
mA[4291] = 0.0f; 
mA[4292] = 0.0f; 
mA[4293] = 0.0f; 
mA[4294] = 0.0f; 
mA[4295] = 0.0f; 
mA[4296] = 0.0f; 
mA[4297] = 0.0f; 
mA[4298] = 0.0f; 
mA[4299] = 0.0f; 
mA[4300] = 0.0f; 
mA[4301] = 0.0f; 
mA[4302] = 0.0f; 
mA[4303] = 0.0f; 
mA[4304] = 0.0f; 
mA[4305] = 0.0f; 
mA[4306] = 0.0f; 
mA[4307] = 0.0f; 
mA[4308] = 0.0f; 
mA[4309] = 0.0f; 
mA[4310] = 0.0f; 
mA[4311] = 0.0f; 
mA[4312] = 0.0f; 
mA[4313] = 0.0f; 
mA[4314] = 0.0f; 
mA[4315] = (  v_v56_aa_fw  + v_v52_aa_fw  + v_v40_aa_fw  + v_v48_aa_fw_a  + v_v48_aa_fw_c  + v_v48_aa_fw_d  + v_v43_aa_fw  + v_v42_aa_fw  + v_v48_aa_fw_b  + v_v53_aa_fw  + v_v54_aa_fw  + v_v55_aa_fw   ) ; 
mA[4316] = 0.0f; 
mA[4317] = 0.0f; 
mA[4318] = 0.0f; 
mA[4319] = 0.0f; 
mA[4320] = 0.0f; 
mA[4321] = 0.0f; 
mA[4322] = 0.0f; 
mA[4323] = 0.0f; 
mA[4324] = 0.0f; 
mA[4325] = 0.0f; 
mA[4326] = 0.0f; 
mA[4327] = 0.0f; 
mA[4328] = 0.0f; 
mA[4329] = 0.0f; 
mA[4330] = 0.0f; 
mA[4331] = 0.0f; 
mA[4332] = 0.0f; 
mA[4333] = 0.0f; 
mA[4334] = 0.0f; 
mA[4335] = 0.0f; 
mA[4336] = 0.0f; 
mA[4337] = 0.0f; 
mA[4338] = 0.0f; 
mA[4339] = 0.0f; 
mA[4340] = 0.0f; 
mA[4341] = 0.0f; 
mA[4342] = 0.0f; 
mA[4343] = 0.0f; 
mA[4344] = 0.0f; 
mA[4345] = 0.0f; 
mA[4346] = 0.0f; 
mA[4347] = 0.0f; 
mA[4348] = 0.0f; 
mA[4349] = 0.0f; 
mA[4350] = 0.0f; 
mA[4351] = 0.0f; 
mA[4352] =  v_v37_aa_fw ; 
mA[4353] = 0.0f; 
mA[4354] = 0.0f; 
mA[4355] = 0.0f; 
mA[4356] = ( (  -1.0f  * v_v36_aa_fw   )  +(  -1.0f  * v_v57_aa_fw   )   ) ; 
mA[4357] = 0.0f; 
mA[4358] = 0.0f; 
mA[4359] = 0.0f; 
mA[4360] = 0.0f; 
mA[4361] = 0.0f; 
mA[4362] = 0.0f; 
mA[4363] = 0.0f; 
mA[4364] = 0.0f; 
mA[4365] = 0.0f; 
mA[4366] = 0.0f; 
mA[4367] = 0.0f; 
mA[4368] = 0.0f; 
mA[4369] = 0.0f; 
mA[4370] = 0.0f; 
mA[4371] = 0.0f; 
mA[4372] = 0.0f; 
mA[4373] = 0.0f; 
mA[4374] = 0.0f; 
mA[4375] = 0.0f; 
mA[4376] = 0.0f; 
mA[4377] = 0.0f; 
mA[4378] = 0.0f; 
mA[4379] = 0.0f; 
mA[4380] = 0.0f; 
mA[4381] = 0.0f; 
mA[4382] = 0.0f; 
mA[4383] = 0.0f; 
mA[4384] = 0.0f; 
mA[4385] = 0.0f; 
mA[4386] = 0.0f; 
mA[4387] = 0.0f; 
mA[4388] = 0.0f; 
mA[4389] = 0.0f; 
mA[4390] = 0.0f; 
mA[4391] = 0.0f; 
mA[4392] = 0.0f; 
mA[4393] = 0.0f; 
mA[4394] = 0.0f; 
mA[4395] = 0.0f; 
mA[4396] = 0.0f; 
mA[4397] = 0.0f; 
mA[4398] = 0.0f; 
mA[4399] = 0.0f; 
mA[4400] = 0.0f; 
mA[4401] = 0.0f; 
mA[4402] = 0.0f; 
mA[4403] = 0.0f; 
mA[4404] = 0.0f; 
mA[4405] = 0.0f; 
mA[4406] = 0.0f; 
mA[4407] = 0.0f; 
mA[4408] = 0.0f; 
mA[4409] = 0.0f; 
mA[4410] = 0.0f; 
mA[4411] = 0.0f; 
mA[4412] = 0.0f; 
mA[4413] = 0.0f; 
mA[4414] = 0.0f; 
mA[4415] = 0.0f; 
mA[4416] = 0.0f; 
mA[4417] = 0.0f; 
mA[4418] = 0.0f; 
mA[4419] = 0.0f; 
mA[4420] = 0.0f; 
mA[4421] = 0.0f; 
mA[4422] = 0.0f; 
mA[4423] = 0.0f; 
mA[4424] = 0.0f; 
mA[4425] = 0.0f; 
mA[4426] = 0.0f; 
mA[4427] = 0.0f; 
mA[4428] = 0.0f; 
mA[4429] = 0.0f; 
mA[4430] = 0.0f; 
mA[4431] = 0.0f; 
mA[4432] = 0.0f; 
mA[4433] = 0.0f; 
mA[4434] = 0.0f; 
mA[4435] = 0.0f; 
mA[4436] = 0.0f; 
mA[4437] = 0.0f; 
mA[4438] = 0.0f; 
mA[4439] = 0.0f; 
mA[4440] = 0.0f; 
mA[4441] = 0.0f; 
mA[4442] = 0.0f; 
mA[4443] = 0.0f; 
mA[4444] = 0.0f; 
mA[4445] = 0.0f; 
mA[4446] = 0.0f; 
mA[4447] = 0.0f; 
mA[4448] = 0.0f; 
mA[4449] = 0.0f; 
mA[4450] = 0.0f; 
mA[4451] = 0.0f; 
mA[4452] = 0.0f; 
mA[4453] = 0.0f; 
mA[4454] = 0.0f; 
mA[4455] = ( (  -1.0f  * v_v44_aa_fw   )  +(  -1.0f  * v_v46_aa_fw   )  +(  -1.0f  * v_v45_aa_bw   )   ) ; 
mA[4456] = 0.0f; 
mA[4457] = 0.0f; 
mA[4458] = 0.0f; 
mA[4459] = 0.0f; 
mA[4460] = 0.0f; 
mA[4461] = 0.0f; 
mA[4462] = 0.0f; 
mA[4463] = 0.0f; 
mA[4464] = 0.0f; 
mA[4465] = 0.0f; 
mA[4466] = 0.0f; 
mA[4467] = 0.0f; 
mA[4468] = 0.0f; 
mA[4469] = 0.0f; 
mA[4470] = 0.0f; 
mA[4471] = 0.0f; 
mA[4472] = 0.0f; 
mA[4473] = 0.0f; 
mA[4474] = 0.0f; 
mA[4475] = 0.0f; 
mA[4476] = 0.0f; 
mA[4477] = 0.0f; 
mA[4478] = 0.0f; 
mA[4479] = 0.0f; 
mA[4480] = 0.0f; 
mA[4481] = 0.0f; 
mA[4482] = 0.0f; 
mA[4483] = 0.0f; 
mA[4484] = 0.0f; 
mA[4485] = 0.0f; 
mA[4486] =  v_v44_aa_bw ; 
mA[4487] = 0.0f; 
mA[4488] = 0.0f; 
mA[4489] = 0.0f; 
mA[4490] = 0.0f; 
mA[4491] = 0.0f; 
mA[4492] = 0.0f; 
mA[4493] = 0.0f; 
mA[4494] = 0.0f; 
mA[4495] = 0.0f; 
mA[4496] = 0.0f; 
mA[4497] = 0.0f; 
mA[4498] = 0.0f; 
mA[4499] = 0.0f; 
mA[4500] = 0.0f; 
mA[4501] = 0.0f; 
mA[4502] = 0.0f; 
mA[4503] = 0.0f; 
mA[4504] = 0.0f; 
mA[4505] = 0.0f; 
mA[4506] = 0.0f; 
mA[4507] = 0.0f; 
mA[4508] = 0.0f; 
mA[4509] = 0.0f; 
mA[4510] = 0.0f; 
mA[4511] = 0.0f; 
mA[4512] = 0.0f; 
mA[4513] = 0.0f; 
mA[4514] = 0.0f; 
mA[4515] = 0.0f; 
mA[4516] = 0.0f; 
mA[4517] = 0.0f; 
mA[4518] = 0.0f; 
mA[4519] = 0.0f; 
mA[4520] = 0.0f; 
mA[4521] = 0.0f; 
mA[4522] = 0.0f; 
mA[4523] = 0.0f; 
mA[4524] = 0.0f; 
mA[4525] = 0.0f; 
mA[4526] = 0.0f; 
mA[4527] = 0.0f; 
mA[4528] = 0.0f; 
mA[4529] = 0.0f; 
mA[4530] = 0.0f; 
mA[4531] = 0.0f; 
mA[4532] = 0.0f; 
mA[4533] = 0.0f; 
mA[4534] = 0.0f; 
mA[4535] = 0.0f; 
mA[4536] = 0.0f; 
mA[4537] = 0.0f; 
mA[4538] = 0.0f; 
mA[4539] = 0.0f; 
mA[4540] = 0.0f; 
mA[4541] = 0.0f; 
mA[4542] = 0.0f; 
mA[4543] = 0.0f; 
mA[4544] = 0.0f; 
mA[4545] = 0.0f; 
mA[4546] = 0.0f; 
mA[4547] = 0.0f; 
mA[4548] = 0.0f; 
mA[4549] = 0.0f; 
mA[4550] = 0.0f; 
mA[4551] = 0.0f; 
mA[4552] = 0.0f; 
mA[4553] = 0.0f; 
mA[4554] = ( (  -1.0f  * v_v29_glyox_fw_a   )  +(  -1.0f  * v_v29_glyox_fw_b   )   ) ; 
mA[4555] = 0.0f; 
mA[4556] = 0.0f; 
mA[4557] = 0.0f; 
mA[4558] = 0.0f; 
mA[4559] = 0.0f; 
mA[4560] = 0.0f; 
mA[4561] = 0.0f; 
mA[4562] = 0.0f; 
mA[4563] =  v_v30_glyox_fw ; 
mA[4564] = 0.0f; 
mA[4565] = 0.0f; 
mA[4566] = 0.0f; 
mA[4567] = 0.0f; 
mA[4568] = 0.0f; 
mA[4569] = 0.0f; 
mA[4570] = 0.0f; 
mA[4571] = 0.0f; 
mA[4572] = 0.0f; 
mA[4573] = 0.0f; 
mA[4574] = 0.0f; 
mA[4575] = 0.0f; 
mA[4576] = 0.0f; 
mA[4577] = 0.0f; 
mA[4578] = 0.0f; 
mA[4579] = 0.0f; 
mA[4580] = 0.0f; 
mA[4581] = 0.0f; 
mA[4582] = 0.0f; 
mA[4583] = 0.0f; 
mA[4584] = 0.0f; 
mA[4585] = 0.0f; 
mA[4586] = 0.0f; 
mA[4587] = 0.0f; 
mA[4588] = 0.0f; 
mA[4589] = 0.0f; 
mA[4590] = 0.0f; 
mA[4591] = 0.0f; 
mA[4592] = 0.0f; 
mA[4593] = 0.0f; 
mA[4594] = 0.0f; 
mA[4595] = 0.0f; 
mA[4596] = 0.0f; 
mA[4597] = 0.0f; 
mA[4598] = 0.0f; 
mA[4599] = 0.0f; 
mA[4600] = 0.0f; 
mA[4601] = 0.0f; 
mA[4602] = 0.0f; 
mA[4603] = 0.0f; 
mA[4604] = 0.0f; 
mA[4605] = 0.0f; 
mA[4606] =  v_v23_tca_fw ; 
mA[4607] = 0.0f; 
mA[4608] = 0.0f; 
mA[4609] = 0.0f; 
mA[4610] = 0.0f; 
mA[4611] = 0.0f; 
mA[4612] = 0.0f; 
mA[4613] = 0.0f; 
mA[4614] = 0.0f; 
mA[4615] = 0.0f; 
mA[4616] =  v_v22_tca_bw ; 
mA[4617] = 0.0f; 
mA[4618] = 0.0f; 
mA[4619] = 0.0f; 
mA[4620] = 0.0f; 
mA[4621] = 0.0f; 
mA[4622] = 0.0f; 
mA[4623] = 0.0f; 
mA[4624] = 0.0f; 
mA[4625] = 0.0f; 
mA[4626] = 0.0f; 
mA[4627] = 0.0f; 
mA[4628] = 0.0f; 
mA[4629] = 0.0f; 
mA[4630] = 0.0f; 
mA[4631] = 0.0f; 
mA[4632] = 0.0f; 
mA[4633] = 0.0f; 
mA[4634] = 0.0f; 
mA[4635] = 0.0f; 
mA[4636] = 0.0f; 
mA[4637] = 0.0f; 
mA[4638] = 0.0f; 
mA[4639] = 0.0f; 
mA[4640] = 0.0f; 
mA[4641] = 0.0f; 
mA[4642] = 0.0f; 
mA[4643] = 0.0f; 
mA[4644] = 0.0f; 
mA[4645] = 0.0f; 
mA[4646] = 0.0f; 
mA[4647] = 0.0f; 
mA[4648] = 0.0f; 
mA[4649] = 0.0f; 
mA[4650] = 0.0f; 
mA[4651] = 0.0f; 
mA[4652] = (  v_v29_glyox_fw_a  + v_v29_glyox_fw_b   ) ; 
mA[4653] = ( (  -1.0f  * v_v22_tca_fw   )  +(  -1.0f  * v_v23_tca_bw   )   ) ; 
mA[4654] = 0.0f; 
mA[4655] = 0.0f; 
mA[4656] = 0.0f; 
mA[4657] = 0.0f; 
mA[4658] = 0.0f; 
mA[4659] = 0.0f; 
mA[4660] = 0.0f; 
mA[4661] = 0.0f; 
mA[4662] = 0.0f; 
mA[4663] = 0.0f; 
mA[4664] = 0.0f; 
mA[4665] = 0.0f; 
mA[4666] = 0.0f; 
mA[4667] = 0.0f; 
mA[4668] = 0.0f; 
mA[4669] = 0.0f; 
mA[4670] = 0.0f; 
mA[4671] = 0.0f; 
mA[4672] = 0.0f; 
mA[4673] = 0.0f; 
mA[4674] = 0.0f; 
mA[4675] = 0.0f; 
mA[4676] = 0.0f; 
mA[4677] = 0.0f; 
mA[4678] = 0.0f; 
mA[4679] = 0.0f; 
mA[4680] = 0.0f; 
mA[4681] = 0.0f; 
mA[4682] = 0.0f; 
mA[4683] = 0.0f; 
mA[4684] = 0.0f; 
mA[4685] = 0.0f; 
mA[4686] = 0.0f; 
mA[4687] = 0.0f; 
mA[4688] = 0.0f; 
mA[4689] = 0.0f; 
mA[4690] = 0.0f; 
mA[4691] = 0.0f; 
mA[4692] = 0.0f; 
mA[4693] = 0.0f; 
mA[4694] = 0.0f; 
mA[4695] = 0.0f; 
mA[4696] = 0.0f; 
mA[4697] = 0.0f; 
mA[4698] = 0.0f; 
mA[4699] = 0.0f; 
mA[4700] = 0.0f; 
mA[4701] = 0.0f; 
mA[4702] = 0.0f; 
mA[4703] = 0.0f; 
mA[4704] = 0.0f; 
mA[4705] =  v_v23_tca_fw ; 
mA[4706] = 0.0f; 
mA[4707] = 0.0f; 
mA[4708] = 0.0f; 
mA[4709] = 0.0f; 
mA[4710] = 0.0f; 
mA[4711] = 0.0f; 
mA[4712] = 0.0f; 
mA[4713] = 0.0f; 
mA[4714] = 0.0f; 
mA[4715] =  v_v22_tca_bw ; 
mA[4716] = 0.0f; 
mA[4717] = 0.0f; 
mA[4718] = 0.0f; 
mA[4719] = 0.0f; 
mA[4720] = 0.0f; 
mA[4721] = 0.0f; 
mA[4722] = 0.0f; 
mA[4723] = 0.0f; 
mA[4724] = 0.0f; 
mA[4725] = 0.0f; 
mA[4726] = 0.0f; 
mA[4727] = 0.0f; 
mA[4728] = 0.0f; 
mA[4729] = 0.0f; 
mA[4730] = 0.0f; 
mA[4731] = 0.0f; 
mA[4732] = 0.0f; 
mA[4733] = 0.0f; 
mA[4734] = 0.0f; 
mA[4735] = 0.0f; 
mA[4736] = 0.0f; 
mA[4737] = 0.0f; 
mA[4738] = 0.0f; 
mA[4739] = 0.0f; 
mA[4740] = 0.0f; 
mA[4741] = 0.0f; 
mA[4742] = 0.0f; 
mA[4743] = 0.0f; 
mA[4744] = 0.0f; 
mA[4745] = 0.0f; 
mA[4746] = 0.0f; 
mA[4747] = 0.0f; 
mA[4748] = 0.0f; 
mA[4749] = 0.0f; 
mA[4750] = 0.0f; 
mA[4751] = 0.0f; 
mA[4752] = ( (  -1.0f  * v_v23_tca_bw   )  +(  -1.0f  * v_v22_tca_fw   )   ) ; 
mA[4753] = 0.0f; 
mA[4754] = 0.0f; 
mA[4755] = 0.0f; 
mA[4756] = 0.0f; 
mA[4757] = 0.0f; 
mA[4758] = 0.0f; 
mA[4759] = 0.0f; 
mA[4760] = 0.0f; 
mA[4761] = 0.0f; 
mA[4762] = 0.0f; 
mA[4763] = 0.0f; 
mA[4764] = 0.0f; 
mA[4765] = 0.0f; 
mA[4766] = 0.0f; 
mA[4767] = 0.0f; 
mA[4768] = 0.0f; 
mA[4769] = 0.0f; 
mA[4770] = 0.0f; 
mA[4771] = 0.0f; 
mA[4772] = 0.0f; 
mA[4773] = 0.0f; 
mA[4774] = 0.0f; 
mA[4775] = 0.0f; 
mA[4776] = 0.0f; 
mA[4777] = 0.0f; 
mA[4778] = 0.0f; 
mA[4779] = 0.0f; 
mA[4780] = 0.0f; 
mA[4781] = 0.0f; 
mA[4782] = 0.0f; 
mA[4783] = 0.0f; 
mA[4784] = 0.0f; 
mA[4785] = 0.0f; 
mA[4786] = 0.0f; 
mA[4787] = 0.0f; 
mA[4788] = 0.0f; 
mA[4789] = 0.0f; 
mA[4790] = 0.0f; 
mA[4791] = 0.0f; 
mA[4792] = 0.0f; 
mA[4793] = 0.0f; 
mA[4794] = 0.0f; 
mA[4795] = 0.0f; 
mA[4796] = 0.0f; 
mA[4797] = 0.0f; 
mA[4798] = 0.0f; 
mA[4799] = 0.0f; 
mA[4800] = 0.0f; 
mA[4801] = 0.0f; 
mA[4802] = 0.0f; 
mA[4803] = 0.0f; 
mA[4804] =  v_v23_tca_fw ; 
mA[4805] = 0.0f; 
mA[4806] = 0.0f; 
mA[4807] = 0.0f; 
mA[4808] = 0.0f; 
mA[4809] = 0.0f; 
mA[4810] = 0.0f; 
mA[4811] = 0.0f; 
mA[4812] = 0.0f; 
mA[4813] = 0.0f; 
mA[4814] =  v_v22_tca_bw ; 
mA[4815] = 0.0f; 
mA[4816] = 0.0f; 
mA[4817] = 0.0f; 
mA[4818] = 0.0f; 
mA[4819] = 0.0f; 
mA[4820] = 0.0f; 
mA[4821] = 0.0f; 
mA[4822] = 0.0f; 
mA[4823] = 0.0f; 
mA[4824] = 0.0f; 
mA[4825] = 0.0f; 
mA[4826] = 0.0f; 
mA[4827] = 0.0f; 
mA[4828] = 0.0f; 
mA[4829] = 0.0f; 
mA[4830] = 0.0f; 
mA[4831] = 0.0f; 
mA[4832] = 0.0f; 
mA[4833] = 0.0f; 
mA[4834] = 0.0f; 
mA[4835] = 0.0f; 
mA[4836] = 0.0f; 
mA[4837] = 0.0f; 
mA[4838] = 0.0f; 
mA[4839] = 0.0f; 
mA[4840] = 0.0f; 
mA[4841] = 0.0f; 
mA[4842] = 0.0f; 
mA[4843] = 0.0f; 
mA[4844] = 0.0f; 
mA[4845] = 0.0f; 
mA[4846] = 0.0f; 
mA[4847] = 0.0f; 
mA[4848] = 0.0f; 
mA[4849] = 0.0f; 
mA[4850] = 0.0f; 
mA[4851] = ( (  -1.0f  * v_v23_tca_bw   )  +(  -1.0f  * v_v22_tca_fw   )   ) ; 
mA[4852] = 0.0f; 
mA[4853] = 0.0f; 
mA[4854] = 0.0f; 
mA[4855] = 0.0f; 
mA[4856] = 0.0f; 
mA[4857] = 0.0f; 
mA[4858] = 0.0f; 
mA[4859] = 0.0f; 
mA[4860] = 0.0f; 
mA[4861] = 0.0f; 
mA[4862] = 0.0f; 
mA[4863] = 0.0f; 
mA[4864] = 0.0f; 
mA[4865] = 0.0f; 
mA[4866] = 0.0f; 
mA[4867] = 0.0f; 
mA[4868] = 0.0f; 
mA[4869] = 0.0f; 
mA[4870] = 0.0f; 
mA[4871] = 0.0f; 
mA[4872] = 0.0f; 
mA[4873] = 0.0f; 
mA[4874] = 0.0f; 
mA[4875] = 0.0f; 
mA[4876] = 0.0f; 
mA[4877] = 0.0f; 
mA[4878] = 0.0f; 
mA[4879] = 0.0f; 
mA[4880] = 0.0f; 
mA[4881] = (  v_v29_glyox_fw_a  + v_v29_glyox_fw_b   ) ; 
mA[4882] = 0.0f; 
mA[4883] = 0.0f; 
mA[4884] = 0.0f; 
mA[4885] = 0.0f; 
mA[4886] = 0.0f; 
mA[4887] = 0.0f; 
mA[4888] = 0.0f; 
mA[4889] = 0.0f; 
mA[4890] = 0.0f; 
mA[4891] = 0.0f; 
mA[4892] = 0.0f; 
mA[4893] = 0.0f; 
mA[4894] = 0.0f; 
mA[4895] = 0.0f; 
mA[4896] = 0.0f; 
mA[4897] = 0.0f; 
mA[4898] = 0.0f; 
mA[4899] = 0.0f; 
mA[4900] = 0.0f; 
mA[4901] = 0.0f; 
mA[4902] = 0.0f; 
mA[4903] = 0.0f; 
mA[4904] = 0.0f; 
mA[4905] = 0.0f; 
mA[4906] = 0.0f; 
mA[4907] = 0.0f; 
mA[4908] = 0.0f; 
mA[4909] = 0.0f; 
mA[4910] = 0.0f; 
mA[4911] = 0.0f; 
mA[4912] = 0.0f; 
mA[4913] =  v_v22_tca_bw ; 
mA[4914] = 0.0f; 
mA[4915] = 0.0f; 
mA[4916] = 0.0f; 
mA[4917] = 0.0f; 
mA[4918] = 0.0f; 
mA[4919] = 0.0f; 
mA[4920] = 0.0f; 
mA[4921] = 0.0f; 
mA[4922] = 0.0f; 
mA[4923] = 0.0f; 
mA[4924] = 0.0f; 
mA[4925] = 0.0f; 
mA[4926] = 0.0f; 
mA[4927] = 0.0f; 
mA[4928] = 0.0f; 
mA[4929] = 0.0f; 
mA[4930] = 0.0f; 
mA[4931] = 0.0f; 
mA[4932] = 0.0f; 
mA[4933] = 0.0f; 
mA[4934] = 0.0f; 
mA[4935] = 0.0f; 
mA[4936] = 0.0f; 
mA[4937] = 0.0f; 
mA[4938] = 0.0f; 
mA[4939] = 0.0f; 
mA[4940] = 0.0f; 
mA[4941] = 0.0f; 
mA[4942] = 0.0f; 
mA[4943] = 0.0f; 
mA[4944] = 0.0f; 
mA[4945] = 0.0f; 
mA[4946] = 0.0f; 
mA[4947] = 0.0f; 
mA[4948] = 0.0f; 
mA[4949] = 0.0f; 
mA[4950] = ( (  -1.0f  * v_v23_tca_bw   )  +(  -1.0f  * v_v22_tca_fw   )   ) ; 
mA[4951] = 0.0f; 
mA[4952] = 0.0f; 
mA[4953] = 0.0f; 
mA[4954] = 0.0f; 
mA[4955] = 0.0f; 
mA[4956] = 0.0f; 
mA[4957] = 0.0f; 
mA[4958] = 0.0f; 
mA[4959] = 0.0f; 
mA[4960] = 0.0f; 
mA[4961] = 0.0f; 
mA[4962] = 0.0f; 
mA[4963] = 0.0f; 
mA[4964] = 0.0f; 
mA[4965] = 0.0f; 
mA[4966] = 0.0f; 
mA[4967] = 0.0f; 
mA[4968] = 0.0f; 
mA[4969] = 0.0f; 
mA[4970] = 0.0f; 
mA[4971] = 0.0f; 
mA[4972] = 0.0f; 
mA[4973] = 0.0f; 
mA[4974] = 0.0f; 
mA[4975] = 0.0f; 
mA[4976] = 0.0f; 
mA[4977] = 0.0f; 
mA[4978] =  v_v29_glyox_fw_b ; 
mA[4979] = 0.0f; 
mA[4980] =  v_v29_glyox_fw_a ; 
mA[4981] = 0.0f; 
mA[4982] = 0.0f; 
mA[4983] = 0.0f; 
mA[4984] = 0.0f; 
mA[4985] = 0.0f; 
mA[4986] = 0.0f; 
mA[4987] = 0.0f; 
mA[4988] = 0.0f; 
mA[4989] = 0.0f; 
mA[4990] = 0.0f; 
mA[4991] = 0.0f; 
mA[4992] = 0.0f; 
mA[4993] = 0.0f; 
mA[4994] = 0.0f; 
mA[4995] = 0.0f; 
mA[4996] = 0.0f; 
mA[4997] = 0.0f; 
mA[4998] = 0.0f; 
mA[4999] = 0.0f; 
mA[5000] = 0.0f; 
mA[5001] =  v_v23_tca_fw ; 
mA[5002] = 0.0f; 
mA[5003] = 0.0f; 
mA[5004] = 0.0f; 
mA[5005] = 0.0f; 
mA[5006] = 0.0f; 
mA[5007] = 0.0f; 
mA[5008] = 0.0f; 
mA[5009] = 0.0f; 
mA[5010] = 0.0f; 
mA[5011] = 0.0f; 
mA[5012] =  v_v22_tca_bw ; 
mA[5013] = 0.0f; 
mA[5014] = 0.0f; 
mA[5015] = 0.0f; 
mA[5016] = 0.0f; 
mA[5017] = 0.0f; 
mA[5018] = 0.0f; 
mA[5019] = 0.0f; 
mA[5020] = 0.0f; 
mA[5021] = 0.0f; 
mA[5022] = 0.0f; 
mA[5023] = 0.0f; 
mA[5024] = 0.0f; 
mA[5025] = 0.0f; 
mA[5026] = 0.0f; 
mA[5027] = 0.0f; 
mA[5028] = 0.0f; 
mA[5029] = 0.0f; 
mA[5030] = 0.0f; 
mA[5031] = 0.0f; 
mA[5032] = 0.0f; 
mA[5033] = 0.0f; 
mA[5034] = 0.0f; 
mA[5035] = 0.0f; 
mA[5036] = 0.0f; 
mA[5037] = 0.0f; 
mA[5038] = 0.0f; 
mA[5039] = 0.0f; 
mA[5040] = 0.0f; 
mA[5041] = 0.0f; 
mA[5042] = 0.0f; 
mA[5043] = 0.0f; 
mA[5044] = 0.0f; 
mA[5045] = 0.0f; 
mA[5046] = 0.0f; 
mA[5047] = 0.0f; 
mA[5048] = 0.0f; 
mA[5049] = ( (  -1.0f  * v_v23_tca_bw   )  +(  -1.0f  * v_v22_tca_fw   )   ) ; 
mA[5050] = 0.0f; 
mA[5051] = 0.0f; 
mA[5052] = 0.0f; 
mA[5053] = 0.0f; 
mA[5054] = 0.0f; 
mA[5055] = 0.0f; 
mA[5056] = 0.0f; 
mA[5057] = 0.0f; 
mA[5058] = 0.0f; 
mA[5059] = 0.0f; 
mA[5060] = 0.0f; 
mA[5061] = 0.0f; 
mA[5062] = 0.0f; 
mA[5063] = 0.0f; 
mA[5064] = 0.0f; 
mA[5065] = 0.0f; 
mA[5066] = 0.0f; 
mA[5067] = 0.0f; 
mA[5068] = 0.0f; 
mA[5069] = 0.0f; 
mA[5070] = 0.0f; 
mA[5071] = 0.0f; 
mA[5072] = 0.0f; 
mA[5073] = 0.0f; 
mA[5074] = 0.0f; 
mA[5075] = 0.0f; 
mA[5076] =  v_v29_glyox_fw_a ; 
mA[5077] = 0.0f; 
mA[5078] =  v_v29_glyox_fw_b ; 
mA[5079] = 0.0f; 
mA[5080] = 0.0f; 
mA[5081] = 0.0f; 
mA[5082] = 0.0f; 
mA[5083] = 0.0f; 
mA[5084] = 0.0f; 
mA[5085] = 0.0f; 
mA[5086] = 0.0f; 
mA[5087] = 0.0f; 
mA[5088] = 0.0f; 
mA[5089] = 0.0f; 
mA[5090] = 0.0f; 
mA[5091] = 0.0f; 
mA[5092] = 0.0f; 
mA[5093] = 0.0f; 
mA[5094] = 0.0f; 
mA[5095] = 0.0f; 
mA[5096] = 0.0f; 
mA[5097] = 0.0f; 
mA[5098] = 0.0f; 
mA[5099] = 0.0f; 
mA[5100] = 0.0f; 
mA[5101] = 0.0f; 
mA[5102] = 0.0f; 
mA[5103] = 0.0f; 
mA[5104] = 0.0f; 
mA[5105] = 0.0f; 
mA[5106] = 0.0f; 
mA[5107] = 0.0f; 
mA[5108] = 0.0f; 
mA[5109] = 0.0f; 
mA[5110] = 0.0f; 
mA[5111] = 0.0f; 
mA[5112] = 0.0f; 
mA[5113] = 0.0f; 
mA[5114] = 0.0f; 
mA[5115] = 0.0f; 
mA[5116] = 0.0f; 
mA[5117] = 0.0f; 
mA[5118] = 0.0f; 
mA[5119] = 0.0f; 
mA[5120] = 0.0f; 
mA[5121] = 0.0f; 
mA[5122] = 0.0f; 
mA[5123] = 0.0f; 
mA[5124] = 0.0f; 
mA[5125] = 0.0f; 
mA[5126] = 0.0f; 
mA[5127] = 0.0f; 
mA[5128] = 0.0f; 
mA[5129] = 0.0f; 
mA[5130] = 0.0f; 
mA[5131] = 0.0f; 
mA[5132] = 0.0f; 
mA[5133] = 0.0f; 
mA[5134] = 0.0f; 
mA[5135] = 0.0f; 
mA[5136] = 0.0f; 
mA[5137] = 0.0f; 
mA[5138] = 0.0f; 
mA[5139] = 0.0f; 
mA[5140] = 0.0f; 
mA[5141] = 0.0f; 
mA[5142] = 0.0f; 
mA[5143] = 0.0f; 
mA[5144] = 0.0f; 
mA[5145] = 0.0f; 
mA[5146] = 0.0f; 
mA[5147] = 0.0f; 
mA[5148] = ( (  -1.0f  * v_v18_ed_fw   )   ) ; 
mA[5149] = 0.0f; 
mA[5150] = 0.0f; 
mA[5151] = 0.0f; 
mA[5152] = 0.0f; 
mA[5153] = 0.0f; 
mA[5154] = 0.0f; 
mA[5155] = 0.0f; 
mA[5156] = 0.0f; 
mA[5157] = 0.0f; 
mA[5158] = 0.0f; 
mA[5159] = 0.0f; 
mA[5160] =  v_v19_ed_fw ; 
mA[5161] = 0.0f; 
mA[5162] = 0.0f; 
mA[5163] = 0.0f; 
mA[5164] = 0.0f; 
mA[5165] = 0.0f; 
mA[5166] = 0.0f; 
mA[5167] = 0.0f; 
mA[5168] = 0.0f; 
mA[5169] = 0.0f; 
mA[5170] = 0.0f; 
mA[5171] = 0.0f; 
mA[5172] = 0.0f; 
mA[5173] = 0.0f; 
mA[5174] = 0.0f; 
mA[5175] = 0.0f; 
mA[5176] = 0.0f; 
mA[5177] = 0.0f; 
mA[5178] = 0.0f; 
mA[5179] = 0.0f; 
mA[5180] = 0.0f; 
mA[5181] = 0.0f; 
mA[5182] = 0.0f; 
mA[5183] = 0.0f; 
mA[5184] = 0.0f; 
mA[5185] = 0.0f; 
mA[5186] = 0.0f; 
mA[5187] = 0.0f; 
mA[5188] = 0.0f; 
mA[5189] = 0.0f; 
mA[5190] = 0.0f; 
mA[5191] = 0.0f; 
mA[5192] = 0.0f; 
mA[5193] = 0.0f; 
mA[5194] = 0.0f; 
mA[5195] = 0.0f; 
mA[5196] = 0.0f; 
mA[5197] = 0.0f; 
mA[5198] = 0.0f; 
mA[5199] = 0.0f; 
mA[5200] = 0.0f; 
mA[5201] = 0.0f; 
mA[5202] = 0.0f; 
mA[5203] = 0.0f; 
mA[5204] = 0.0f; 
mA[5205] = 0.0f; 
mA[5206] = 0.0f; 
mA[5207] = 0.0f; 
mA[5208] = 0.0f; 
mA[5209] = 0.0f; 
mA[5210] = 0.0f; 
mA[5211] = 0.0f; 
mA[5212] = 0.0f; 
mA[5213] = 0.0f; 
mA[5214] = 0.0f; 
mA[5215] = 0.0f; 
mA[5216] = 0.0f; 
mA[5217] = 0.0f; 
mA[5218] = 0.0f; 
mA[5219] = 0.0f; 
mA[5220] = 0.0f; 
mA[5221] = 0.0f; 
mA[5222] = 0.0f; 
mA[5223] = 0.0f; 
mA[5224] = 0.0f; 
mA[5225] = 0.0f; 
mA[5226] = 0.0f; 
mA[5227] = 0.0f; 
mA[5228] = 0.0f; 
mA[5229] =  v_v19_ed_fw ; 
mA[5230] = 0.0f; 
mA[5231] = 0.0f; 
mA[5232] = 0.0f; 
mA[5233] = 0.0f; 
mA[5234] = 0.0f; 
mA[5235] = 0.0f; 
mA[5236] = 0.0f; 
mA[5237] = 0.0f; 
mA[5238] = 0.0f; 
mA[5239] = 0.0f; 
mA[5240] = 0.0f; 
mA[5241] = 0.0f; 
mA[5242] = 0.0f; 
mA[5243] = 0.0f; 
mA[5244] = 0.0f; 
mA[5245] = 0.0f; 
mA[5246] = 0.0f; 
mA[5247] = ( (  -1.0f  * v_v18_ed_fw   )   ) ; 
mA[5248] = 0.0f; 
mA[5249] = 0.0f; 
mA[5250] = 0.0f; 
mA[5251] = 0.0f; 
mA[5252] = 0.0f; 
mA[5253] = 0.0f; 
mA[5254] = 0.0f; 
mA[5255] = 0.0f; 
mA[5256] = 0.0f; 
mA[5257] = 0.0f; 
mA[5258] = 0.0f; 
mA[5259] = 0.0f; 
mA[5260] = 0.0f; 
mA[5261] = 0.0f; 
mA[5262] = 0.0f; 
mA[5263] = 0.0f; 
mA[5264] = 0.0f; 
mA[5265] = 0.0f; 
mA[5266] = 0.0f; 
mA[5267] = 0.0f; 
mA[5268] = 0.0f; 
mA[5269] = 0.0f; 
mA[5270] = 0.0f; 
mA[5271] = 0.0f; 
mA[5272] = 0.0f; 
mA[5273] = 0.0f; 
mA[5274] = 0.0f; 
mA[5275] = 0.0f; 
mA[5276] = 0.0f; 
mA[5277] = 0.0f; 
mA[5278] = 0.0f; 
mA[5279] = 0.0f; 
mA[5280] = 0.0f; 
mA[5281] = 0.0f; 
mA[5282] = 0.0f; 
mA[5283] = 0.0f; 
mA[5284] = 0.0f; 
mA[5285] = 0.0f; 
mA[5286] = 0.0f; 
mA[5287] = 0.0f; 
mA[5288] = 0.0f; 
mA[5289] = 0.0f; 
mA[5290] = 0.0f; 
mA[5291] = 0.0f; 
mA[5292] = 0.0f; 
mA[5293] = 0.0f; 
mA[5294] = 0.0f; 
mA[5295] = 0.0f; 
mA[5296] = 0.0f; 
mA[5297] = 0.0f; 
mA[5298] = 0.0f; 
mA[5299] = 0.0f; 
mA[5300] = 0.0f; 
mA[5301] = 0.0f; 
mA[5302] = 0.0f; 
mA[5303] = 0.0f; 
mA[5304] = 0.0f; 
mA[5305] = 0.0f; 
mA[5306] = 0.0f; 
mA[5307] = 0.0f; 
mA[5308] = 0.0f; 
mA[5309] = 0.0f; 
mA[5310] = 0.0f; 
mA[5311] = 0.0f; 
mA[5312] = 0.0f; 
mA[5313] = 0.0f; 
mA[5314] = 0.0f; 
mA[5315] = 0.0f; 
mA[5316] = 0.0f; 
mA[5317] = 0.0f; 
mA[5318] = 0.0f; 
mA[5319] = 0.0f; 
mA[5320] = 0.0f; 
mA[5321] = 0.0f; 
mA[5322] = 0.0f; 
mA[5323] = 0.0f; 
mA[5324] = 0.0f; 
mA[5325] = 0.0f; 
mA[5326] = 0.0f; 
mA[5327] = 0.0f; 
mA[5328] =  v_v19_ed_fw ; 
mA[5329] = 0.0f; 
mA[5330] = 0.0f; 
mA[5331] = 0.0f; 
mA[5332] = 0.0f; 
mA[5333] = 0.0f; 
mA[5334] = 0.0f; 
mA[5335] = 0.0f; 
mA[5336] = 0.0f; 
mA[5337] = 0.0f; 
mA[5338] = 0.0f; 
mA[5339] = 0.0f; 
mA[5340] = 0.0f; 
mA[5341] = 0.0f; 
mA[5342] = 0.0f; 
mA[5343] = 0.0f; 
mA[5344] = 0.0f; 
mA[5345] = 0.0f; 
mA[5346] = ( (  -1.0f  * v_v18_ed_fw   )   ) ; 
mA[5347] = 0.0f; 
mA[5348] = 0.0f; 
mA[5349] = 0.0f; 
mA[5350] = 0.0f; 
mA[5351] = 0.0f; 
mA[5352] = 0.0f; 
mA[5353] = 0.0f; 
mA[5354] = 0.0f; 
mA[5355] = 0.0f; 
mA[5356] = 0.0f; 
mA[5357] = 0.0f; 
mA[5358] = 0.0f; 
mA[5359] = 0.0f; 
mA[5360] = 0.0f; 
mA[5361] = 0.0f; 
mA[5362] = 0.0f; 
mA[5363] = 0.0f; 
mA[5364] = 0.0f; 
mA[5365] = 0.0f; 
mA[5366] = 0.0f; 
mA[5367] = 0.0f; 
mA[5368] = 0.0f; 
mA[5369] = 0.0f; 
mA[5370] = 0.0f; 
mA[5371] = 0.0f; 
mA[5372] = 0.0f; 
mA[5373] = 0.0f; 
mA[5374] = 0.0f; 
mA[5375] = 0.0f; 
mA[5376] = 0.0f; 
mA[5377] = 0.0f; 
mA[5378] = 0.0f; 
mA[5379] = 0.0f; 
mA[5380] = 0.0f; 
mA[5381] = 0.0f; 
mA[5382] = 0.0f; 
mA[5383] = 0.0f; 
mA[5384] = 0.0f; 
mA[5385] = 0.0f; 
mA[5386] = 0.0f; 
mA[5387] = 0.0f; 
mA[5388] = 0.0f; 
mA[5389] = 0.0f; 
mA[5390] = 0.0f; 
mA[5391] = 0.0f; 
mA[5392] = 0.0f; 
mA[5393] = 0.0f; 
mA[5394] = 0.0f; 
mA[5395] = 0.0f; 
mA[5396] = 0.0f; 
mA[5397] = 0.0f; 
mA[5398] = 0.0f; 
mA[5399] = 0.0f; 
mA[5400] = 0.0f; 
mA[5401] = 0.0f; 
mA[5402] = 0.0f; 
mA[5403] = 0.0f; 
mA[5404] = 0.0f; 
mA[5405] = 0.0f; 
mA[5406] = 0.0f; 
mA[5407] = 0.0f; 
mA[5408] = 0.0f; 
mA[5409] = 0.0f; 
mA[5410] = 0.0f; 
mA[5411] = 0.0f; 
mA[5412] = 0.0f; 
mA[5413] = 0.0f; 
mA[5414] = 0.0f; 
mA[5415] = 0.0f; 
mA[5416] = 0.0f; 
mA[5417] = 0.0f; 
mA[5418] =  v_v27_tca_bw_a ; 
mA[5419] = 0.0f; 
mA[5420] =  v_v27_tca_bw_b ; 
mA[5421] = 0.0f; 
mA[5422] = 0.0f; 
mA[5423] = 0.0f; 
mA[5424] = 0.0f; 
mA[5425] = 0.0f; 
mA[5426] = 0.0f; 
mA[5427] = 0.0f; 
mA[5428] = 0.0f; 
mA[5429] = 0.0f; 
mA[5430] = 0.0f; 
mA[5431] = 0.0f; 
mA[5432] = 0.0f; 
mA[5433] = 0.0f; 
mA[5434] = 0.0f; 
mA[5435] = 0.0f; 
mA[5436] = 0.0f; 
mA[5437] = 0.0f; 
mA[5438] = 0.0f; 
mA[5439] = 0.0f; 
mA[5440] = 0.0f; 
mA[5441] = 0.0f; 
mA[5442] = 0.0f; 
mA[5443] = 0.0f; 
mA[5444] = 0.0f; 
mA[5445] = ( (  -1.0f  * v_v27_tca_fw_a   )  +(  -1.0f  * v_v28_tca_bw   )  +(  -1.0f  * v_v30_glyox_fw   )  +(  -1.0f  * v_v27_tca_fw_b   )   ) ; 
mA[5446] = 0.0f; 
mA[5447] = 0.0f; 
mA[5448] =  v_v28_tca_fw ; 
mA[5449] = 0.0f; 
mA[5450] = 0.0f; 
mA[5451] = 0.0f; 
mA[5452] = 0.0f; 
mA[5453] = 0.0f; 
mA[5454] = 0.0f; 
mA[5455] = 0.0f; 
mA[5456] = 0.0f; 
mA[5457] = 0.0f; 
mA[5458] = 0.0f; 
mA[5459] = 0.0f; 
mA[5460] = 0.0f; 
mA[5461] = 0.0f; 
mA[5462] = 0.0f; 
mA[5463] = 0.0f; 
mA[5464] = 0.0f; 
mA[5465] = 0.0f; 
mA[5466] = 0.0f; 
mA[5467] = 0.0f; 
mA[5468] = 0.0f; 
mA[5469] = 0.0f; 
mA[5470] = 0.0f; 
mA[5471] = 0.0f; 
mA[5472] = 0.0f; 
mA[5473] = 0.0f; 
mA[5474] = 0.0f; 
mA[5475] = 0.0f; 
mA[5476] = 0.0f; 
mA[5477] = 0.0f; 
mA[5478] = 0.0f; 
mA[5479] = 0.0f; 
mA[5480] = 0.0f; 
mA[5481] = 0.0f; 
mA[5482] = 0.0f; 
mA[5483] = 0.0f; 
mA[5484] = 0.0f; 
mA[5485] = 0.0f; 
mA[5486] = 0.0f; 
mA[5487] = 0.0f; 
mA[5488] = 0.0f; 
mA[5489] = 0.0f; 
mA[5490] = 0.0f; 
mA[5491] = 0.0f; 
mA[5492] = 0.0f; 
mA[5493] = 0.0f; 
mA[5494] = 0.0f; 
mA[5495] = 0.0f; 
mA[5496] = 0.0f; 
mA[5497] = 0.0f; 
mA[5498] = 0.0f; 
mA[5499] = 0.0f; 
mA[5500] = 0.0f; 
mA[5501] = 0.0f; 
mA[5502] = 0.0f; 
mA[5503] = 0.0f; 
mA[5504] = 0.0f; 
mA[5505] = 0.0f; 
mA[5506] = 0.0f; 
mA[5507] = 0.0f; 
mA[5508] = 0.0f; 
mA[5509] = 0.0f; 
mA[5510] = 0.0f; 
mA[5511] = 0.0f; 
mA[5512] = 0.0f; 
mA[5513] = 0.0f; 
mA[5514] = 0.0f; 
mA[5515] = 0.0f; 
mA[5516] = 0.0f; 
mA[5517] = (  v_v27_tca_bw_a  + v_v27_tca_bw_b   ) ; 
mA[5518] = 0.0f; 
mA[5519] = 0.0f; 
mA[5520] = 0.0f; 
mA[5521] = 0.0f; 
mA[5522] = 0.0f; 
mA[5523] = 0.0f; 
mA[5524] = 0.0f; 
mA[5525] = 0.0f; 
mA[5526] = 0.0f; 
mA[5527] = 0.0f; 
mA[5528] = 0.0f; 
mA[5529] = 0.0f; 
mA[5530] = 0.0f; 
mA[5531] = 0.0f; 
mA[5532] = 0.0f; 
mA[5533] = 0.0f; 
mA[5534] = 0.0f; 
mA[5535] = 0.0f; 
mA[5536] = 0.0f; 
mA[5537] = 0.0f; 
mA[5538] = 0.0f; 
mA[5539] = 0.0f; 
mA[5540] = 0.0f; 
mA[5541] = 0.0f; 
mA[5542] = 0.0f; 
mA[5543] = 0.0f; 
mA[5544] = ( (  -1.0f  * v_v27_tca_fw_a   )  +(  -1.0f  * v_v30_glyox_fw   )  +(  -1.0f  * v_v27_tca_fw_b   )  +(  -1.0f  * v_v28_tca_bw   )   ) ; 
mA[5545] = 0.0f; 
mA[5546] = 0.0f; 
mA[5547] =  v_v28_tca_fw ; 
mA[5548] = 0.0f; 
mA[5549] = 0.0f; 
mA[5550] = 0.0f; 
mA[5551] = 0.0f; 
mA[5552] = (  v_v32_amphi_fw  + v_v31_amphi_fw   ) ; 
mA[5553] = 0.0f; 
mA[5554] = 0.0f; 
mA[5555] = 0.0f; 
mA[5556] = 0.0f; 
mA[5557] = 0.0f; 
mA[5558] = 0.0f; 
mA[5559] = 0.0f; 
mA[5560] = 0.0f; 
mA[5561] = 0.0f; 
mA[5562] = 0.0f; 
mA[5563] = 0.0f; 
mA[5564] = 0.0f; 
mA[5565] = 0.0f; 
mA[5566] = 0.0f; 
mA[5567] = 0.0f; 
mA[5568] = 0.0f; 
mA[5569] = 0.0f; 
mA[5570] = 0.0f; 
mA[5571] = 0.0f; 
mA[5572] = 0.0f; 
mA[5573] = 0.0f; 
mA[5574] = 0.0f; 
mA[5575] = 0.0f; 
mA[5576] = 0.0f; 
mA[5577] = 0.0f; 
mA[5578] = 0.0f; 
mA[5579] = 0.0f; 
mA[5580] = 0.0f; 
mA[5581] = 0.0f; 
mA[5582] = 0.0f; 
mA[5583] = 0.0f; 
mA[5584] = 0.0f; 
mA[5585] = 0.0f; 
mA[5586] = 0.0f; 
mA[5587] = 0.0f; 
mA[5588] = 0.0f; 
mA[5589] = 0.0f; 
mA[5590] = 0.0f; 
mA[5591] = 0.0f; 
mA[5592] = 0.0f; 
mA[5593] = 0.0f; 
mA[5594] = 0.0f; 
mA[5595] = 0.0f; 
mA[5596] = 0.0f; 
mA[5597] = 0.0f; 
mA[5598] = 0.0f; 
mA[5599] = 0.0f; 
mA[5600] = 0.0f; 
mA[5601] = 0.0f; 
mA[5602] = 0.0f; 
mA[5603] = 0.0f; 
mA[5604] = 0.0f; 
mA[5605] = 0.0f; 
mA[5606] = 0.0f; 
mA[5607] = 0.0f; 
mA[5608] = 0.0f; 
mA[5609] = 0.0f; 
mA[5610] = 0.0f; 
mA[5611] = 0.0f; 
mA[5612] = 0.0f; 
mA[5613] = 0.0f; 
mA[5614] =  v_v27_tca_bw_b ; 
mA[5615] = 0.0f; 
mA[5616] =  v_v27_tca_bw_a ; 
mA[5617] = 0.0f; 
mA[5618] = 0.0f; 
mA[5619] = 0.0f; 
mA[5620] = 0.0f; 
mA[5621] = 0.0f; 
mA[5622] = 0.0f; 
mA[5623] = 0.0f; 
mA[5624] = 0.0f; 
mA[5625] = 0.0f; 
mA[5626] = 0.0f; 
mA[5627] = 0.0f; 
mA[5628] = 0.0f; 
mA[5629] = 0.0f; 
mA[5630] = 0.0f; 
mA[5631] = 0.0f; 
mA[5632] = 0.0f; 
mA[5633] = 0.0f; 
mA[5634] = 0.0f; 
mA[5635] = 0.0f; 
mA[5636] = 0.0f; 
mA[5637] = 0.0f; 
mA[5638] = 0.0f; 
mA[5639] = 0.0f; 
mA[5640] = 0.0f; 
mA[5641] = 0.0f; 
mA[5642] = 0.0f; 
mA[5643] = ( (  -1.0f  * v_v27_tca_fw_a   )  +(  -1.0f  * v_v28_tca_bw   )  +(  -1.0f  * v_v27_tca_fw_b   )  +(  -1.0f  * v_v30_glyox_fw   )   ) ; 
mA[5644] = 0.0f; 
mA[5645] = 0.0f; 
mA[5646] =  v_v28_tca_fw ; 
mA[5647] = 0.0f; 
mA[5648] = 0.0f; 
mA[5649] = 0.0f; 
mA[5650] = 0.0f; 
mA[5651] = 0.0f; 
mA[5652] = 0.0f; 
mA[5653] = 0.0f; 
mA[5654] = 0.0f; 
mA[5655] = 0.0f; 
mA[5656] = 0.0f; 
mA[5657] = 0.0f; 
mA[5658] = 0.0f; 
mA[5659] = 0.0f; 
mA[5660] = 0.0f; 
mA[5661] = 0.0f; 
mA[5662] = 0.0f; 
mA[5663] = 0.0f; 
mA[5664] = 0.0f; 
mA[5665] = 0.0f; 
mA[5666] = 0.0f; 
mA[5667] = 0.0f; 
mA[5668] = 0.0f; 
mA[5669] = 0.0f; 
mA[5670] = 0.0f; 
mA[5671] = 0.0f; 
mA[5672] = 0.0f; 
mA[5673] = 0.0f; 
mA[5674] = 0.0f; 
mA[5675] = 0.0f; 
mA[5676] = 0.0f; 
mA[5677] = 0.0f; 
mA[5678] = 0.0f; 
mA[5679] = 0.0f; 
mA[5680] = 0.0f; 
mA[5681] = 0.0f; 
mA[5682] = 0.0f; 
mA[5683] = 0.0f; 
mA[5684] = 0.0f; 
mA[5685] = 0.0f; 
mA[5686] = 0.0f; 
mA[5687] = 0.0f; 
mA[5688] = 0.0f; 
mA[5689] = 0.0f; 
mA[5690] = 0.0f; 
mA[5691] =  v_v40_aa_fw ; 
mA[5692] = 0.0f; 
mA[5693] = 0.0f; 
mA[5694] = 0.0f; 
mA[5695] = 0.0f; 
mA[5696] = 0.0f; 
mA[5697] =  v_v21_tca_fw ; 
mA[5698] = 0.0f; 
mA[5699] = 0.0f; 
mA[5700] = 0.0f; 
mA[5701] = 0.0f; 
mA[5702] = 0.0f; 
mA[5703] = 0.0f; 
mA[5704] = 0.0f; 
mA[5705] = 0.0f; 
mA[5706] = 0.0f; 
mA[5707] = 0.0f; 
mA[5708] = 0.0f; 
mA[5709] = 0.0f; 
mA[5710] = 0.0f; 
mA[5711] = 0.0f; 
mA[5712] = 0.0f; 
mA[5713] = 0.0f; 
mA[5714] = 0.0f; 
mA[5715] = 0.0f; 
mA[5716] = 0.0f; 
mA[5717] = 0.0f; 
mA[5718] = 0.0f; 
mA[5719] = 0.0f; 
mA[5720] = 0.0f; 
mA[5721] = 0.0f; 
mA[5722] = 0.0f; 
mA[5723] = 0.0f; 
mA[5724] = 0.0f; 
mA[5725] = 0.0f; 
mA[5726] = 0.0f; 
mA[5727] = 0.0f; 
mA[5728] = 0.0f; 
mA[5729] = 0.0f; 
mA[5730] = 0.0f; 
mA[5731] = 0.0f; 
mA[5732] = 0.0f; 
mA[5733] = 0.0f; 
mA[5734] = 0.0f; 
mA[5735] = 0.0f; 
mA[5736] = 0.0f; 
mA[5737] = 0.0f; 
mA[5738] = 0.0f; 
mA[5739] =  v_v28_tca_bw ; 
mA[5740] = 0.0f; 
mA[5741] = 0.0f; 
mA[5742] = ( (  -1.0f  * v_v33_amphi_fw   )  +(  -1.0f  * v_v28_tca_fw   )   ) ; 
mA[5743] = 0.0f; 
mA[5744] = 0.0f; 
mA[5745] =  v_v34_amphi_fw ; 
mA[5746] = 0.0f; 
mA[5747] = 0.0f; 
mA[5748] = 0.0f; 
mA[5749] = 0.0f; 
mA[5750] = 0.0f; 
mA[5751] = 0.0f; 
mA[5752] = 0.0f; 
mA[5753] = 0.0f; 
mA[5754] = 0.0f; 
mA[5755] = 0.0f; 
mA[5756] = 0.0f; 
mA[5757] = 0.0f; 
mA[5758] = 0.0f; 
mA[5759] = 0.0f; 
mA[5760] = 0.0f; 
mA[5761] = 0.0f; 
mA[5762] = 0.0f; 
mA[5763] = 0.0f; 
mA[5764] = 0.0f; 
mA[5765] = 0.0f; 
mA[5766] = 0.0f; 
mA[5767] = 0.0f; 
mA[5768] = 0.0f; 
mA[5769] = 0.0f; 
mA[5770] = 0.0f; 
mA[5771] = 0.0f; 
mA[5772] = 0.0f; 
mA[5773] = 0.0f; 
mA[5774] = 0.0f; 
mA[5775] = 0.0f; 
mA[5776] = 0.0f; 
mA[5777] = 0.0f; 
mA[5778] = 0.0f; 
mA[5779] = 0.0f; 
mA[5780] = 0.0f; 
mA[5781] = 0.0f; 
mA[5782] = 0.0f; 
mA[5783] = 0.0f; 
mA[5784] = 0.0f; 
mA[5785] = 0.0f; 
mA[5786] = 0.0f; 
mA[5787] = 0.0f; 
mA[5788] = 0.0f; 
mA[5789] = 0.0f; 
mA[5790] =  v_v40_aa_fw ; 
mA[5791] = 0.0f; 
mA[5792] = 0.0f; 
mA[5793] =  v_v21_tca_fw ; 
mA[5794] = 0.0f; 
mA[5795] = 0.0f; 
mA[5796] = 0.0f; 
mA[5797] = 0.0f; 
mA[5798] = 0.0f; 
mA[5799] = 0.0f; 
mA[5800] = 0.0f; 
mA[5801] = 0.0f; 
mA[5802] = 0.0f; 
mA[5803] = 0.0f; 
mA[5804] = 0.0f; 
mA[5805] = 0.0f; 
mA[5806] = 0.0f; 
mA[5807] = 0.0f; 
mA[5808] = 0.0f; 
mA[5809] = 0.0f; 
mA[5810] = 0.0f; 
mA[5811] = 0.0f; 
mA[5812] = 0.0f; 
mA[5813] = 0.0f; 
mA[5814] = 0.0f; 
mA[5815] = 0.0f; 
mA[5816] = 0.0f; 
mA[5817] = 0.0f; 
mA[5818] = 0.0f; 
mA[5819] = 0.0f; 
mA[5820] = 0.0f; 
mA[5821] = 0.0f; 
mA[5822] = 0.0f; 
mA[5823] = 0.0f; 
mA[5824] = 0.0f; 
mA[5825] = 0.0f; 
mA[5826] = 0.0f; 
mA[5827] = 0.0f; 
mA[5828] = 0.0f; 
mA[5829] = 0.0f; 
mA[5830] = 0.0f; 
mA[5831] = 0.0f; 
mA[5832] = 0.0f; 
mA[5833] = 0.0f; 
mA[5834] = 0.0f; 
mA[5835] = 0.0f; 
mA[5836] = 0.0f; 
mA[5837] = 0.0f; 
mA[5838] =  v_v28_tca_bw ; 
mA[5839] = 0.0f; 
mA[5840] = 0.0f; 
mA[5841] = ( (  -1.0f  * v_v33_amphi_fw   )  +(  -1.0f  * v_v28_tca_fw   )   ) ; 
mA[5842] = 0.0f; 
mA[5843] = 0.0f; 
mA[5844] =  v_v34_amphi_fw ; 
mA[5845] = 0.0f; 
mA[5846] = 0.0f; 
mA[5847] = 0.0f; 
mA[5848] = 0.0f; 
mA[5849] = 0.0f; 
mA[5850] = 0.0f; 
mA[5851] = 0.0f; 
mA[5852] = 0.0f; 
mA[5853] = 0.0f; 
mA[5854] = 0.0f; 
mA[5855] = 0.0f; 
mA[5856] = 0.0f; 
mA[5857] = 0.0f; 
mA[5858] = 0.0f; 
mA[5859] = 0.0f; 
mA[5860] = 0.0f; 
mA[5861] = 0.0f; 
mA[5862] = 0.0f; 
mA[5863] = 0.0f; 
mA[5864] = 0.0f; 
mA[5865] = 0.0f; 
mA[5866] = 0.0f; 
mA[5867] = 0.0f; 
mA[5868] = 0.0f; 
mA[5869] = 0.0f; 
mA[5870] = 0.0f; 
mA[5871] = 0.0f; 
mA[5872] = 0.0f; 
mA[5873] = 0.0f; 
mA[5874] = 0.0f; 
mA[5875] = 0.0f; 
mA[5876] = 0.0f; 
mA[5877] = 0.0f; 
mA[5878] = 0.0f; 
mA[5879] = 0.0f; 
mA[5880] = 0.0f; 
mA[5881] = 0.0f; 
mA[5882] = 0.0f; 
mA[5883] = 0.0f; 
mA[5884] = 0.0f; 
mA[5885] = 0.0f; 
mA[5886] = 0.0f; 
mA[5887] = 0.0f; 
mA[5888] = 0.0f; 
mA[5889] =  v_v40_aa_fw ; 
mA[5890] =  v_v21_tca_fw ; 
mA[5891] = 0.0f; 
mA[5892] = 0.0f; 
mA[5893] = 0.0f; 
mA[5894] = 0.0f; 
mA[5895] = 0.0f; 
mA[5896] = 0.0f; 
mA[5897] = 0.0f; 
mA[5898] = 0.0f; 
mA[5899] = 0.0f; 
mA[5900] = 0.0f; 
mA[5901] = 0.0f; 
mA[5902] = 0.0f; 
mA[5903] = 0.0f; 
mA[5904] = 0.0f; 
mA[5905] = 0.0f; 
mA[5906] = 0.0f; 
mA[5907] = 0.0f; 
mA[5908] = 0.0f; 
mA[5909] = 0.0f; 
mA[5910] = 0.0f; 
mA[5911] = 0.0f; 
mA[5912] = 0.0f; 
mA[5913] = 0.0f; 
mA[5914] = 0.0f; 
mA[5915] = 0.0f; 
mA[5916] = 0.0f; 
mA[5917] = 0.0f; 
mA[5918] = 0.0f; 
mA[5919] = 0.0f; 
mA[5920] = 0.0f; 
mA[5921] = 0.0f; 
mA[5922] = 0.0f; 
mA[5923] = 0.0f; 
mA[5924] = 0.0f; 
mA[5925] = 0.0f; 
mA[5926] = 0.0f; 
mA[5927] = 0.0f; 
mA[5928] = 0.0f; 
mA[5929] = 0.0f; 
mA[5930] = 0.0f; 
mA[5931] = 0.0f; 
mA[5932] = 0.0f; 
mA[5933] = 0.0f; 
mA[5934] = 0.0f; 
mA[5935] = 0.0f; 
mA[5936] = 0.0f; 
mA[5937] =  v_v28_tca_bw ; 
mA[5938] = 0.0f; 
mA[5939] = 0.0f; 
mA[5940] = ( (  -1.0f  * v_v28_tca_fw   )  +(  -1.0f  * v_v33_amphi_fw   )   ) ; 
mA[5941] = 0.0f; 
mA[5942] = 0.0f; 
mA[5943] = 0.0f; 
mA[5944] = 0.0f; 
mA[5945] = 0.0f; 
mA[5946] = 0.0f; 
mA[5947] = 0.0f; 
mA[5948] = 0.0f; 
mA[5949] = 0.0f; 
mA[5950] = 0.0f; 
mA[5951] = 0.0f; 
mA[5952] = 0.0f; 
mA[5953] = 0.0f; 
mA[5954] = 0.0f; 
mA[5955] = 0.0f; 
mA[5956] = 0.0f; 
mA[5957] = 0.0f; 
mA[5958] = 0.0f; 
mA[5959] = 0.0f; 
mA[5960] = 0.0f; 
mA[5961] = 0.0f; 
mA[5962] = 0.0f; 
mA[5963] = 0.0f; 
mA[5964] = 0.0f; 
mA[5965] = 0.0f; 
mA[5966] = 0.0f; 
mA[5967] = 0.0f; 
mA[5968] = 0.0f; 
mA[5969] = 0.0f; 
mA[5970] = 0.0f; 
mA[5971] = 0.0f; 
mA[5972] = 0.0f; 
mA[5973] = 0.0f; 
mA[5974] = 0.0f; 
mA[5975] = 0.0f; 
mA[5976] = 0.0f; 
mA[5977] = 0.0f; 
mA[5978] = 0.0f; 
mA[5979] = 0.0f; 
mA[5980] = 0.0f; 
mA[5981] = 0.0f; 
mA[5982] = 0.0f; 
mA[5983] = 0.0f; 
mA[5984] = 0.0f; 
mA[5985] = 0.0f; 
mA[5986] = 0.0f; 
mA[5987] = 0.0f; 
mA[5988] = 0.0f; 
mA[5989] = 0.0f; 
mA[5990] = 0.0f; 
mA[5991] = 0.0f; 
mA[5992] = 0.0f; 
mA[5993] = 0.0f; 
mA[5994] = 0.0f; 
mA[5995] = 0.0f; 
mA[5996] = 0.0f; 
mA[5997] = 0.0f; 
mA[5998] = 0.0f; 
mA[5999] = 0.0f; 
mA[6000] = 0.0f; 
mA[6001] = 0.0f; 
mA[6002] = 0.0f; 
mA[6003] = 0.0f; 
mA[6004] = 0.0f; 
mA[6005] = 0.0f; 
mA[6006] = 0.0f; 
mA[6007] = 0.0f; 
mA[6008] = 0.0f; 
mA[6009] = 0.0f; 
mA[6010] = 0.0f; 
mA[6011] = 0.0f; 
mA[6012] = 0.0f; 
mA[6013] = 0.0f; 
mA[6014] = 0.0f; 
mA[6015] = 0.0f; 
mA[6016] = 0.0f; 
mA[6017] = 0.0f; 
mA[6018] = 0.0f; 
mA[6019] = 0.0f; 
mA[6020] = 0.0f; 
mA[6021] = 0.0f; 
mA[6022] = 0.0f; 
mA[6023] = 0.0f; 
mA[6024] = 0.0f; 
mA[6025] = 0.0f; 
mA[6026] = 0.0f; 
mA[6027] = 0.0f; 
mA[6028] = 0.0f; 
mA[6029] = 0.0f; 
mA[6030] = 0.0f; 
mA[6031] = 0.0f; 
mA[6032] = 0.0f; 
mA[6033] = 0.0f; 
mA[6034] = 0.0f; 
mA[6035] = 0.0f; 
mA[6036] =  v_v33_amphi_fw ; 
mA[6037] = 0.0f; 
mA[6038] = 0.0f; 
mA[6039] = ( (  -1.0f  * v_v34_amphi_fw   )  +(  -1.0f  * v_v07_glyc_fw   )   ) ; 
mA[6040] = 0.0f; 
mA[6041] =  v_v55_aa_fw ; 
mA[6042] = 0.0f; 
mA[6043] = 0.0f; 
mA[6044] = 0.0f; 
mA[6045] = 0.0f; 
mA[6046] = 0.0f; 
mA[6047] = 0.0f; 
mA[6048] = 0.0f; 
mA[6049] = 0.0f; 
mA[6050] = 0.0f; 
mA[6051] = 0.0f; 
mA[6052] = 0.0f; 
mA[6053] = 0.0f; 
mA[6054] = 0.0f; 
mA[6055] = 0.0f; 
mA[6056] = 0.0f; 
mA[6057] = 0.0f; 
mA[6058] = 0.0f; 
mA[6059] = 0.0f; 
mA[6060] = 0.0f; 
mA[6061] = 0.0f; 
mA[6062] = 0.0f; 
mA[6063] = 0.0f; 
mA[6064] = 0.0f; 
mA[6065] = 0.0f; 
mA[6066] = 0.0f; 
mA[6067] =  v_v56_aa_fw ; 
mA[6068] =  v_v07_glyc_bw ; 
mA[6069] = 0.0f; 
mA[6070] = 0.0f; 
mA[6071] = 0.0f; 
mA[6072] = 0.0f; 
mA[6073] = 0.0f; 
mA[6074] = 0.0f; 
mA[6075] = 0.0f; 
mA[6076] = 0.0f; 
mA[6077] = 0.0f; 
mA[6078] = 0.0f; 
mA[6079] = 0.0f; 
mA[6080] = 0.0f; 
mA[6081] = 0.0f; 
mA[6082] = 0.0f; 
mA[6083] = 0.0f; 
mA[6084] = 0.0f; 
mA[6085] = 0.0f; 
mA[6086] = 0.0f; 
mA[6087] = 0.0f; 
mA[6088] = 0.0f; 
mA[6089] = 0.0f; 
mA[6090] = 0.0f; 
mA[6091] = 0.0f; 
mA[6092] = 0.0f; 
mA[6093] = 0.0f; 
mA[6094] = 0.0f; 
mA[6095] = 0.0f; 
mA[6096] = 0.0f; 
mA[6097] = 0.0f; 
mA[6098] = 0.0f; 
mA[6099] = 0.0f; 
mA[6100] = 0.0f; 
mA[6101] = 0.0f; 
mA[6102] = 0.0f; 
mA[6103] = 0.0f; 
mA[6104] = 0.0f; 
mA[6105] = 0.0f; 
mA[6106] = 0.0f; 
mA[6107] = 0.0f; 
mA[6108] = 0.0f; 
mA[6109] = 0.0f; 
mA[6110] = 0.0f; 
mA[6111] = 0.0f; 
mA[6112] = 0.0f; 
mA[6113] = 0.0f; 
mA[6114] = 0.0f; 
mA[6115] = 0.0f; 
mA[6116] = 0.0f; 
mA[6117] = 0.0f; 
mA[6118] = 0.0f; 
mA[6119] = 0.0f; 
mA[6120] = 0.0f; 
mA[6121] = 0.0f; 
mA[6122] = 0.0f; 
mA[6123] = 0.0f; 
mA[6124] = 0.0f; 
mA[6125] = 0.0f; 
mA[6126] = 0.0f; 
mA[6127] = 0.0f; 
mA[6128] = 0.0f; 
mA[6129] = 0.0f; 
mA[6130] = 0.0f; 
mA[6131] = 0.0f; 
mA[6132] = 0.0f; 
mA[6133] = 0.0f; 
mA[6134] = 0.0f; 
mA[6135] =  v_v33_amphi_fw ; 
mA[6136] = 0.0f; 
mA[6137] = 0.0f; 
mA[6138] = ( (  -1.0f  * v_v34_amphi_fw   )  +(  -1.0f  * v_v07_glyc_fw   )   ) ; 
mA[6139] = 0.0f; 
mA[6140] = (  v_v01_SX_Gluc_In_b  + v_v57_aa_fw  + v_v08_glyc_fw   ) ; 
mA[6141] = 0.0f; 
mA[6142] = 0.0f; 
mA[6143] = 0.0f; 
mA[6144] = 0.0f; 
mA[6145] = 0.0f; 
mA[6146] = 0.0f; 
mA[6147] = 0.0f; 
mA[6148] = 0.0f; 
mA[6149] = 0.0f; 
mA[6150] = 0.0f; 
mA[6151] = 0.0f; 
mA[6152] = 0.0f; 
mA[6153] = 0.0f; 
mA[6154] = 0.0f; 
mA[6155] = 0.0f; 
mA[6156] = 0.0f; 
mA[6157] = 0.0f; 
mA[6158] = 0.0f; 
mA[6159] = 0.0f; 
mA[6160] = 0.0f; 
mA[6161] = 0.0f; 
mA[6162] = 0.0f; 
mA[6163] = 0.0f; 
mA[6164] = 0.0f; 
mA[6165] = 0.0f; 
mA[6166] = 0.0f; 
mA[6167] =  v_v07_glyc_bw ; 
mA[6168] = 0.0f; 
mA[6169] = 0.0f; 
mA[6170] = 0.0f; 
mA[6171] = 0.0f; 
mA[6172] = 0.0f; 
mA[6173] = 0.0f; 
mA[6174] = 0.0f; 
mA[6175] = 0.0f; 
mA[6176] = 0.0f; 
mA[6177] = 0.0f; 
mA[6178] = 0.0f; 
mA[6179] = 0.0f; 
mA[6180] = 0.0f; 
mA[6181] = 0.0f; 
mA[6182] = 0.0f; 
mA[6183] = 0.0f; 
mA[6184] = 0.0f; 
mA[6185] = 0.0f; 
mA[6186] = 0.0f; 
mA[6187] = 0.0f; 
mA[6188] = 0.0f; 
mA[6189] = 0.0f; 
mA[6190] = 0.0f; 
mA[6191] = 0.0f; 
mA[6192] = 0.0f; 
mA[6193] = 0.0f; 
mA[6194] = 0.0f; 
mA[6195] = 0.0f; 
mA[6196] = 0.0f; 
mA[6197] = 0.0f; 
mA[6198] = 0.0f; 
mA[6199] = 0.0f; 
mA[6200] = 0.0f; 
mA[6201] = 0.0f; 
mA[6202] = 0.0f; 
mA[6203] = 0.0f; 
mA[6204] = 0.0f; 
mA[6205] = 0.0f; 
mA[6206] = 0.0f; 
mA[6207] = 0.0f; 
mA[6208] = 0.0f; 
mA[6209] = 0.0f; 
mA[6210] = 0.0f; 
mA[6211] = 0.0f; 
mA[6212] = 0.0f; 
mA[6213] = 0.0f; 
mA[6214] = 0.0f; 
mA[6215] = 0.0f; 
mA[6216] = 0.0f; 
mA[6217] = 0.0f; 
mA[6218] = 0.0f; 
mA[6219] = 0.0f; 
mA[6220] = 0.0f; 
mA[6221] = 0.0f; 
mA[6222] = 0.0f; 
mA[6223] = 0.0f; 
mA[6224] = 0.0f; 
mA[6225] = 0.0f; 
mA[6226] = 0.0f; 
mA[6227] = 0.0f; 
mA[6228] = 0.0f; 
mA[6229] = 0.0f; 
mA[6230] = 0.0f; 
mA[6231] = 0.0f; 
mA[6232] = 0.0f; 
mA[6233] = 0.0f; 
mA[6234] = 0.0f; 
mA[6235] = 0.0f; 
mA[6236] = 0.0f; 
mA[6237] = ( (  -1.0f  * v_v55_aa_fw   )   ) ; 
mA[6238] = 0.0f; 
mA[6239] = 0.0f; 
mA[6240] = 0.0f; 
mA[6241] = 0.0f; 
mA[6242] = 0.0f; 
mA[6243] = 0.0f; 
mA[6244] = 0.0f; 
mA[6245] = 0.0f; 
mA[6246] = 0.0f; 
mA[6247] = 0.0f; 
mA[6248] = 0.0f; 
mA[6249] = 0.0f; 
mA[6250] = 0.0f; 
mA[6251] = 0.0f; 
mA[6252] = 0.0f; 
mA[6253] = 0.0f; 
mA[6254] = 0.0f; 
mA[6255] = 0.0f; 
mA[6256] = 0.0f; 
mA[6257] = 0.0f; 
mA[6258] = 0.0f; 
mA[6259] = 0.0f; 
mA[6260] = 0.0f; 
mA[6261] = 0.0f; 
mA[6262] = 0.0f; 
mA[6263] = 0.0f; 
mA[6264] = 0.0f; 
mA[6265] = 0.0f; 
mA[6266] = 0.0f; 
mA[6267] = 0.0f; 
mA[6268] = 0.0f; 
mA[6269] = 0.0f; 
mA[6270] = 0.0f; 
mA[6271] = 0.0f; 
mA[6272] = 0.0f; 
mA[6273] = 0.0f; 
mA[6274] = 0.0f; 
mA[6275] = 0.0f; 
mA[6276] = 0.0f; 
mA[6277] =  v_v20_tca_fw ; 
mA[6278] =  v_v42_aa_fw ; 
mA[6279] = 0.0f; 
mA[6280] = 0.0f; 
mA[6281] = 0.0f; 
mA[6282] = 0.0f; 
mA[6283] = 0.0f; 
mA[6284] = 0.0f; 
mA[6285] = 0.0f; 
mA[6286] = 0.0f; 
mA[6287] = 0.0f; 
mA[6288] = 0.0f; 
mA[6289] = 0.0f; 
mA[6290] = 0.0f; 
mA[6291] = 0.0f; 
mA[6292] = 0.0f; 
mA[6293] = 0.0f; 
mA[6294] = 0.0f; 
mA[6295] = 0.0f; 
mA[6296] = 0.0f; 
mA[6297] = 0.0f; 
mA[6298] = 0.0f; 
mA[6299] = 0.0f; 
mA[6300] = 0.0f; 
mA[6301] = 0.0f; 
mA[6302] = 0.0f; 
mA[6303] = 0.0f; 
mA[6304] = 0.0f; 
mA[6305] = 0.0f; 
mA[6306] = 0.0f; 
mA[6307] = 0.0f; 
mA[6308] = 0.0f; 
mA[6309] = 0.0f; 
mA[6310] = 0.0f; 
mA[6311] = 0.0f; 
mA[6312] = 0.0f; 
mA[6313] = 0.0f; 
mA[6314] = 0.0f; 
mA[6315] = 0.0f; 
mA[6316] = 0.0f; 
mA[6317] = 0.0f; 
mA[6318] = 0.0f; 
mA[6319] = 0.0f; 
mA[6320] = 0.0f; 
mA[6321] = 0.0f; 
mA[6322] = 0.0f; 
mA[6323] = 0.0f; 
mA[6324] = 0.0f; 
mA[6325] = 0.0f; 
mA[6326] = 0.0f; 
mA[6327] = 0.0f; 
mA[6328] = 0.0f; 
mA[6329] = 0.0f; 
mA[6330] = 0.0f; 
mA[6331] = 0.0f; 
mA[6332] = 0.0f; 
mA[6333] = 0.0f; 
mA[6334] = 0.0f; 
mA[6335] = 0.0f; 
mA[6336] = ( (  -1.0f  * v_v19_ed_fw   )  +(  -1.0f  * v_v01_SX_Gluc_In_b   )  +(  -1.0f  * v_v32_amphi_fw   )  +(  -1.0f  * v_v51_aa_fw_a   )  +(  -1.0f  * v_v51_aa_fw_b   )  +(  -1.0f  * v_v57_aa_fw   )  +(  -1.0f  * v_v08_glyc_fw   )  +(  -1.0f  * v_v31_amphi_fw   )   ) ; 
mA[6337] = 0.0f; 
mA[6338] = 0.0f; 
mA[6339] = 0.0f; 
mA[6340] = 0.0f; 
mA[6341] = 0.0f; 
mA[6342] = 0.0f; 
mA[6343] = 0.0f; 
mA[6344] = 0.0f; 
mA[6345] = 0.0f; 
mA[6346] = 0.0f; 
mA[6347] = 0.0f; 
mA[6348] = 0.0f; 
mA[6349] = 0.0f; 
mA[6350] = 0.0f; 
mA[6351] = 0.0f; 
mA[6352] = 0.0f; 
mA[6353] = 0.0f; 
mA[6354] = 0.0f; 
mA[6355] = 0.0f; 
mA[6356] = 0.0f; 
mA[6357] = 0.0f; 
mA[6358] = 0.0f; 
mA[6359] = 0.0f; 
mA[6360] = 0.0f; 
mA[6361] = 0.0f; 
mA[6362] = 0.0f; 
mA[6363] = 0.0f; 
mA[6364] = 0.0f; 
mA[6365] = 0.0f; 
mA[6366] = 0.0f; 
mA[6367] = 0.0f; 
mA[6368] = 0.0f; 
mA[6369] = 0.0f; 
mA[6370] = 0.0f; 
mA[6371] = 0.0f; 
mA[6372] = 0.0f; 
mA[6373] = 0.0f; 
mA[6374] = 0.0f; 
mA[6375] = 0.0f; 
mA[6376] = 0.0f; 
mA[6377] = 0.0f; 
mA[6378] = 0.0f; 
mA[6379] = 0.0f; 
mA[6380] = 0.0f; 
mA[6381] = 0.0f; 
mA[6382] = 0.0f; 
mA[6383] = 0.0f; 
mA[6384] = 0.0f; 
mA[6385] = 0.0f; 
mA[6386] = 0.0f; 
mA[6387] = 0.0f; 
mA[6388] = 0.0f; 
mA[6389] = 0.0f; 
mA[6390] = 0.0f; 
mA[6391] = 0.0f; 
mA[6392] = 0.0f; 
mA[6393] = 0.0f; 
mA[6394] = 0.0f; 
mA[6395] = 0.0f; 
mA[6396] = 0.0f; 
mA[6397] = 0.0f; 
mA[6398] = 0.0f; 
mA[6399] = 0.0f; 
mA[6400] = 0.0f; 
mA[6401] = 0.0f; 
mA[6402] = 0.0f; 
mA[6403] = 0.0f; 
mA[6404] = 0.0f; 
mA[6405] = 0.0f; 
mA[6406] = 0.0f; 
mA[6407] = 0.0f; 
mA[6408] = 0.0f; 
mA[6409] = 0.0f; 
mA[6410] = 0.0f; 
mA[6411] = 0.0f; 
mA[6412] = 0.0f; 
mA[6413] = 0.0f; 
mA[6414] = 0.0f; 
mA[6415] = 0.0f; 
mA[6416] = 0.0f; 
mA[6417] = 0.0f; 
mA[6418] = 0.0f; 
mA[6419] = 0.0f; 
mA[6420] = 0.0f; 
mA[6421] = 0.0f; 
mA[6422] = 0.0f; 
mA[6423] = 0.0f; 
mA[6424] = 0.0f; 
mA[6425] = 0.0f; 
mA[6426] = 0.0f; 
mA[6427] = 0.0f; 
mA[6428] = 0.0f; 
mA[6429] = 0.0f; 
mA[6430] = 0.0f; 
mA[6431] = 0.0f; 
mA[6432] = 0.0f; 
mA[6433] = 0.0f; 
mA[6434] = 0.0f; 
mA[6435] = ( (  -1.0f  * v_v12_ppp_fw   )  +(  -1.0f  * v_v15_ppp_fw   )   ) ; 
mA[6436] = 0.0f; 
mA[6437] = 0.0f; 
mA[6438] =  v_v12_ppp_bw ; 
mA[6439] = 0.0f; 
mA[6440] = 0.0f; 
mA[6441] = 0.0f; 
mA[6442] = 0.0f; 
mA[6443] =  v_v15_ppp_bw ; 
mA[6444] = 0.0f; 
mA[6445] = 0.0f; 
mA[6446] = 0.0f; 
mA[6447] = 0.0f; 
mA[6448] = 0.0f; 
mA[6449] = 0.0f; 
mA[6450] = 0.0f; 
mA[6451] = 0.0f; 
mA[6452] = 0.0f; 
mA[6453] = 0.0f; 
mA[6454] = 0.0f; 
mA[6455] = 0.0f; 
mA[6456] = 0.0f; 
mA[6457] = 0.0f; 
mA[6458] = 0.0f; 
mA[6459] = 0.0f; 
mA[6460] = 0.0f; 
mA[6461] = 0.0f; 
mA[6462] = 0.0f; 
mA[6463] = 0.0f; 
mA[6464] = 0.0f; 
mA[6465] = 0.0f; 
mA[6466] = 0.0f; 
mA[6467] = 0.0f; 
mA[6468] = 0.0f; 
mA[6469] = 0.0f; 
mA[6470] = 0.0f; 
mA[6471] = 0.0f; 
mA[6472] = 0.0f; 
mA[6473] = 0.0f; 
mA[6474] = 0.0f; 
mA[6475] = 0.0f; 
mA[6476] = 0.0f; 
mA[6477] = 0.0f; 
mA[6478] = 0.0f; 
mA[6479] = 0.0f; 
mA[6480] = 0.0f; 
mA[6481] = 0.0f; 
mA[6482] = 0.0f; 
mA[6483] = 0.0f; 
mA[6484] = 0.0f; 
mA[6485] = 0.0f; 
mA[6486] = 0.0f; 
mA[6487] = 0.0f; 
mA[6488] = 0.0f; 
mA[6489] = 0.0f; 
mA[6490] = 0.0f; 
mA[6491] = 0.0f; 
mA[6492] = 0.0f; 
mA[6493] = 0.0f; 
mA[6494] = 0.0f; 
mA[6495] = 0.0f; 
mA[6496] = 0.0f; 
mA[6497] = 0.0f; 
mA[6498] = 0.0f; 
mA[6499] = 0.0f; 
mA[6500] = 0.0f; 
mA[6501] = 0.0f; 
mA[6502] = 0.0f; 
mA[6503] =  v_v57_aa_fw ; 
mA[6504] = 0.0f; 
mA[6505] = 0.0f; 
mA[6506] = 0.0f; 
mA[6507] = 0.0f; 
mA[6508] = 0.0f; 
mA[6509] = 0.0f; 
mA[6510] = 0.0f; 
mA[6511] = 0.0f; 
mA[6512] = 0.0f; 
mA[6513] = 0.0f; 
mA[6514] = 0.0f; 
mA[6515] = 0.0f; 
mA[6516] = 0.0f; 
mA[6517] = 0.0f; 
mA[6518] = 0.0f; 
mA[6519] = 0.0f; 
mA[6520] = 0.0f; 
mA[6521] = 0.0f; 
mA[6522] = 0.0f; 
mA[6523] = 0.0f; 
mA[6524] = 0.0f; 
mA[6525] = 0.0f; 
mA[6526] = 0.0f; 
mA[6527] = 0.0f; 
mA[6528] = 0.0f; 
mA[6529] = 0.0f; 
mA[6530] = 0.0f; 
mA[6531] = 0.0f; 
mA[6532] = 0.0f; 
mA[6533] = 0.0f; 
mA[6534] = ( (  -1.0f  * v_v15_ppp_fw   )  +(  -1.0f  * v_v12_ppp_fw   )   ) ; 
mA[6535] = 0.0f; 
mA[6536] = 0.0f; 
mA[6537] =  v_v12_ppp_bw ; 
mA[6538] = 0.0f; 
mA[6539] = 0.0f; 
mA[6540] = 0.0f; 
mA[6541] = 0.0f; 
mA[6542] =  v_v15_ppp_bw ; 
mA[6543] = 0.0f; 
mA[6544] = 0.0f; 
mA[6545] = 0.0f; 
mA[6546] = 0.0f; 
mA[6547] = 0.0f; 
mA[6548] = 0.0f; 
mA[6549] = 0.0f; 
mA[6550] = 0.0f; 
mA[6551] = 0.0f; 
mA[6552] = 0.0f; 
mA[6553] = 0.0f; 
mA[6554] = 0.0f; 
mA[6555] = 0.0f; 
mA[6556] = 0.0f; 
mA[6557] = 0.0f; 
mA[6558] = 0.0f; 
mA[6559] = 0.0f; 
mA[6560] = 0.0f; 
mA[6561] = 0.0f; 
mA[6562] = 0.0f; 
mA[6563] = 0.0f; 
mA[6564] = 0.0f; 
mA[6565] = 0.0f; 
mA[6566] = 0.0f; 
mA[6567] = 0.0f; 
mA[6568] = 0.0f; 
mA[6569] = 0.0f; 
mA[6570] = 0.0f; 
mA[6571] = 0.0f; 
mA[6572] = 0.0f; 
mA[6573] = 0.0f; 
mA[6574] = 0.0f; 
mA[6575] = 0.0f; 
mA[6576] = 0.0f; 
mA[6577] = 0.0f; 
mA[6578] = 0.0f; 
mA[6579] = 0.0f; 
mA[6580] = 0.0f; 
mA[6581] = 0.0f; 
mA[6582] = 0.0f; 
mA[6583] = 0.0f; 
mA[6584] = 0.0f; 
mA[6585] = 0.0f; 
mA[6586] = 0.0f; 
mA[6587] = 0.0f; 
mA[6588] = 0.0f; 
mA[6589] = 0.0f; 
mA[6590] = 0.0f; 
mA[6591] = 0.0f; 
mA[6592] = 0.0f; 
mA[6593] = 0.0f; 
mA[6594] = 0.0f; 
mA[6595] = 0.0f; 
mA[6596] = 0.0f; 
mA[6597] = 0.0f; 
mA[6598] = 0.0f; 
mA[6599] = 0.0f; 
mA[6600] = 0.0f; 
mA[6601] = 0.0f; 
mA[6602] =  v_v57_aa_fw ; 
mA[6603] = 0.0f; 
mA[6604] = 0.0f; 
mA[6605] = 0.0f; 
mA[6606] = 0.0f; 
mA[6607] = 0.0f; 
mA[6608] = 0.0f; 
mA[6609] = 0.0f; 
mA[6610] = 0.0f; 
mA[6611] = 0.0f; 
mA[6612] = 0.0f; 
mA[6613] = 0.0f; 
mA[6614] = 0.0f; 
mA[6615] = 0.0f; 
mA[6616] = 0.0f; 
mA[6617] = 0.0f; 
mA[6618] = 0.0f; 
mA[6619] = 0.0f; 
mA[6620] = 0.0f; 
mA[6621] = 0.0f; 
mA[6622] = 0.0f; 
mA[6623] = 0.0f; 
mA[6624] = 0.0f; 
mA[6625] = 0.0f; 
mA[6626] = 0.0f; 
mA[6627] = 0.0f; 
mA[6628] = 0.0f; 
mA[6629] = 0.0f; 
mA[6630] = 0.0f; 
mA[6631] = 0.0f; 
mA[6632] = 0.0f; 
mA[6633] = ( (  -1.0f  * v_v15_ppp_fw   )  +(  -1.0f  * v_v12_ppp_fw   )   ) ; 
mA[6634] = 0.0f; 
mA[6635] = 0.0f; 
mA[6636] =  v_v12_ppp_bw ; 
mA[6637] = 0.0f; 
mA[6638] = 0.0f; 
mA[6639] = 0.0f; 
mA[6640] = 0.0f; 
mA[6641] =  v_v15_ppp_bw ; 
mA[6642] = 0.0f; 
mA[6643] = 0.0f; 
mA[6644] = 0.0f; 
mA[6645] = 0.0f; 
mA[6646] = 0.0f; 
mA[6647] = 0.0f; 
mA[6648] = 0.0f; 
mA[6649] = 0.0f; 
mA[6650] = 0.0f; 
mA[6651] = 0.0f; 
mA[6652] = 0.0f; 
mA[6653] = 0.0f; 
mA[6654] = 0.0f; 
mA[6655] = 0.0f; 
mA[6656] = 0.0f; 
mA[6657] = 0.0f; 
mA[6658] = 0.0f; 
mA[6659] = 0.0f; 
mA[6660] = 0.0f; 
mA[6661] = 0.0f; 
mA[6662] = 0.0f; 
mA[6663] = 0.0f; 
mA[6664] = 0.0f; 
mA[6665] = 0.0f; 
mA[6666] = 0.0f; 
mA[6667] = 0.0f; 
mA[6668] = 0.0f; 
mA[6669] = 0.0f; 
mA[6670] = 0.0f; 
mA[6671] = 0.0f; 
mA[6672] = 0.0f; 
mA[6673] = 0.0f; 
mA[6674] = 0.0f; 
mA[6675] = 0.0f; 
mA[6676] = 0.0f; 
mA[6677] = 0.0f; 
mA[6678] = 0.0f; 
mA[6679] = 0.0f; 
mA[6680] = 0.0f; 
mA[6681] = 0.0f; 
mA[6682] = 0.0f; 
mA[6683] = 0.0f; 
mA[6684] = 0.0f; 
mA[6685] = 0.0f; 
mA[6686] = 0.0f; 
mA[6687] = 0.0f; 
mA[6688] = 0.0f; 
mA[6689] = 0.0f; 
mA[6690] = 0.0f; 
mA[6691] = 0.0f; 
mA[6692] = 0.0f; 
mA[6693] = 0.0f; 
mA[6694] = 0.0f; 
mA[6695] = 0.0f; 
mA[6696] = 0.0f; 
mA[6697] = 0.0f; 
mA[6698] = 0.0f; 
mA[6699] = 0.0f; 
mA[6700] = 0.0f; 
mA[6701] = 0.0f; 
mA[6702] = 0.0f; 
mA[6703] = 0.0f; 
mA[6704] = 0.0f; 
mA[6705] = 0.0f; 
mA[6706] = 0.0f; 
mA[6707] = 0.0f; 
mA[6708] = 0.0f; 
mA[6709] = 0.0f; 
mA[6710] = 0.0f; 
mA[6711] = 0.0f; 
mA[6712] = 0.0f; 
mA[6713] = 0.0f; 
mA[6714] = 0.0f; 
mA[6715] = 0.0f; 
mA[6716] = 0.0f; 
mA[6717] = 0.0f; 
mA[6718] = 0.0f; 
mA[6719] = 0.0f; 
mA[6720] = 0.0f; 
mA[6721] = 0.0f; 
mA[6722] = 0.0f; 
mA[6723] = 0.0f; 
mA[6724] = 0.0f; 
mA[6725] = 0.0f; 
mA[6726] = 0.0f; 
mA[6727] = 0.0f; 
mA[6728] = 0.0f; 
mA[6729] =  v_v12_ppp_fw ; 
mA[6730] = 0.0f; 
mA[6731] = 0.0f; 
mA[6732] = ( (  -1.0f  * v_v10_ppp_fw   )  +(  -1.0f  * v_v12_ppp_bw   )  +(  -1.0f  * v_v11_ppp_bw   )   ) ; 
mA[6733] = 0.0f; 
mA[6734] = 0.0f; 
mA[6735] = 0.0f; 
mA[6736] = 0.0f; 
mA[6737] = 0.0f; 
mA[6738] = 0.0f; 
mA[6739] = 0.0f; 
mA[6740] = 0.0f; 
mA[6741] = 0.0f; 
mA[6742] = 0.0f; 
mA[6743] = 0.0f; 
mA[6744] = 0.0f; 
mA[6745] = 0.0f; 
mA[6746] = 0.0f; 
mA[6747] = 0.0f; 
mA[6748] = 0.0f; 
mA[6749] = 0.0f; 
mA[6750] = 0.0f; 
mA[6751] = 0.0f; 
mA[6752] = 0.0f; 
mA[6753] = 0.0f; 
mA[6754] = 0.0f; 
mA[6755] = 0.0f; 
mA[6756] =  v_v11_ppp_fw ; 
mA[6757] = 0.0f; 
mA[6758] = 0.0f; 
mA[6759] = 0.0f; 
mA[6760] = 0.0f; 
mA[6761] = 0.0f; 
mA[6762] = 0.0f; 
mA[6763] = 0.0f; 
mA[6764] = 0.0f; 
mA[6765] = 0.0f; 
mA[6766] = 0.0f; 
mA[6767] = 0.0f; 
mA[6768] = 0.0f; 
mA[6769] = 0.0f; 
mA[6770] = 0.0f; 
mA[6771] = 0.0f; 
mA[6772] = 0.0f; 
mA[6773] = 0.0f; 
mA[6774] = 0.0f; 
mA[6775] = 0.0f; 
mA[6776] = 0.0f; 
mA[6777] = 0.0f; 
mA[6778] = 0.0f; 
mA[6779] = 0.0f; 
mA[6780] = 0.0f; 
mA[6781] = 0.0f; 
mA[6782] = 0.0f; 
mA[6783] = 0.0f; 
mA[6784] = 0.0f; 
mA[6785] = 0.0f; 
mA[6786] = 0.0f; 
mA[6787] = 0.0f; 
mA[6788] = 0.0f; 
mA[6789] = 0.0f; 
mA[6790] = 0.0f; 
mA[6791] = 0.0f; 
mA[6792] = 0.0f; 
mA[6793] = 0.0f; 
mA[6794] = 0.0f; 
mA[6795] = 0.0f; 
mA[6796] = 0.0f; 
mA[6797] = 0.0f; 
mA[6798] = 0.0f; 
mA[6799] = 0.0f; 
mA[6800] = 0.0f; 
mA[6801] = 0.0f; 
mA[6802] = 0.0f; 
mA[6803] = 0.0f; 
mA[6804] = 0.0f; 
mA[6805] = 0.0f; 
mA[6806] = 0.0f; 
mA[6807] = 0.0f; 
mA[6808] = 0.0f; 
mA[6809] = 0.0f; 
mA[6810] = 0.0f; 
mA[6811] = 0.0f; 
mA[6812] = 0.0f; 
mA[6813] = 0.0f; 
mA[6814] = 0.0f; 
mA[6815] = 0.0f; 
mA[6816] = 0.0f; 
mA[6817] = 0.0f; 
mA[6818] = 0.0f; 
mA[6819] = 0.0f; 
mA[6820] = 0.0f; 
mA[6821] = 0.0f; 
mA[6822] = 0.0f; 
mA[6823] = 0.0f; 
mA[6824] = 0.0f; 
mA[6825] = 0.0f; 
mA[6826] = 0.0f; 
mA[6827] = 0.0f; 
mA[6828] =  v_v12_ppp_fw ; 
mA[6829] = 0.0f; 
mA[6830] = 0.0f; 
mA[6831] = ( (  -1.0f  * v_v11_ppp_bw   )  +(  -1.0f  * v_v10_ppp_fw   )  +(  -1.0f  * v_v12_ppp_bw   )   ) ; 
mA[6832] = 0.0f; 
mA[6833] = 0.0f; 
mA[6834] = 0.0f; 
mA[6835] = 0.0f; 
mA[6836] = 0.0f; 
mA[6837] = 0.0f; 
mA[6838] = 0.0f; 
mA[6839] = 0.0f; 
mA[6840] = 0.0f; 
mA[6841] = 0.0f; 
mA[6842] = 0.0f; 
mA[6843] = 0.0f; 
mA[6844] = 0.0f; 
mA[6845] = 0.0f; 
mA[6846] = 0.0f; 
mA[6847] = 0.0f; 
mA[6848] = 0.0f; 
mA[6849] = 0.0f; 
mA[6850] = 0.0f; 
mA[6851] = 0.0f; 
mA[6852] = 0.0f; 
mA[6853] = 0.0f; 
mA[6854] = 0.0f; 
mA[6855] =  v_v11_ppp_fw ; 
mA[6856] = 0.0f; 
mA[6857] = 0.0f; 
mA[6858] = 0.0f; 
mA[6859] = 0.0f; 
mA[6860] = 0.0f; 
mA[6861] = 0.0f; 
mA[6862] = 0.0f; 
mA[6863] = 0.0f; 
mA[6864] = 0.0f; 
mA[6865] = 0.0f; 
mA[6866] = 0.0f; 
mA[6867] = 0.0f; 
mA[6868] = 0.0f; 
mA[6869] = 0.0f; 
mA[6870] = 0.0f; 
mA[6871] = 0.0f; 
mA[6872] = 0.0f; 
mA[6873] = 0.0f; 
mA[6874] = 0.0f; 
mA[6875] = 0.0f; 
mA[6876] = 0.0f; 
mA[6877] = 0.0f; 
mA[6878] = 0.0f; 
mA[6879] = 0.0f; 
mA[6880] = 0.0f; 
mA[6881] = 0.0f; 
mA[6882] = 0.0f; 
mA[6883] = 0.0f; 
mA[6884] = 0.0f; 
mA[6885] = 0.0f; 
mA[6886] = 0.0f; 
mA[6887] = 0.0f; 
mA[6888] = 0.0f; 
mA[6889] = 0.0f; 
mA[6890] = 0.0f; 
mA[6891] = 0.0f; 
mA[6892] = 0.0f; 
mA[6893] = 0.0f; 
mA[6894] = 0.0f; 
mA[6895] = 0.0f; 
mA[6896] = 0.0f; 
mA[6897] = 0.0f; 
mA[6898] = 0.0f; 
mA[6899] = 0.0f; 
mA[6900] = 0.0f; 
mA[6901] = 0.0f; 
mA[6902] = 0.0f; 
mA[6903] = 0.0f; 
mA[6904] = 0.0f; 
mA[6905] = 0.0f; 
mA[6906] = 0.0f; 
mA[6907] = 0.0f; 
mA[6908] = 0.0f; 
mA[6909] = 0.0f; 
mA[6910] = 0.0f; 
mA[6911] = 0.0f; 
mA[6912] = 0.0f; 
mA[6913] = 0.0f; 
mA[6914] = 0.0f; 
mA[6915] = 0.0f; 
mA[6916] = 0.0f; 
mA[6917] = 0.0f; 
mA[6918] = 0.0f; 
mA[6919] = 0.0f; 
mA[6920] = 0.0f; 
mA[6921] = 0.0f; 
mA[6922] = 0.0f; 
mA[6923] = 0.0f; 
mA[6924] = 0.0f; 
mA[6925] = 0.0f; 
mA[6926] = 0.0f; 
mA[6927] =  v_v12_ppp_fw ; 
mA[6928] = 0.0f; 
mA[6929] = 0.0f; 
mA[6930] = ( (  -1.0f  * v_v10_ppp_fw   )  +(  -1.0f  * v_v12_ppp_bw   )  +(  -1.0f  * v_v11_ppp_bw   )   ) ; 
mA[6931] = 0.0f; 
mA[6932] = 0.0f; 
mA[6933] = 0.0f; 
mA[6934] = 0.0f; 
mA[6935] = 0.0f; 
mA[6936] = 0.0f; 
mA[6937] = 0.0f; 
mA[6938] = 0.0f; 
mA[6939] = 0.0f; 
mA[6940] = 0.0f; 
mA[6941] = 0.0f; 
mA[6942] = 0.0f; 
mA[6943] = 0.0f; 
mA[6944] = 0.0f; 
mA[6945] = 0.0f; 
mA[6946] = 0.0f; 
mA[6947] = 0.0f; 
mA[6948] = 0.0f; 
mA[6949] = 0.0f; 
mA[6950] = 0.0f; 
mA[6951] = 0.0f; 
mA[6952] = 0.0f; 
mA[6953] = 0.0f; 
mA[6954] =  v_v11_ppp_fw ; 
mA[6955] = 0.0f; 
mA[6956] = 0.0f; 
mA[6957] = 0.0f; 
mA[6958] = 0.0f; 
mA[6959] = 0.0f; 
mA[6960] = 0.0f; 
mA[6961] = 0.0f; 
mA[6962] = 0.0f; 
mA[6963] = 0.0f; 
mA[6964] = 0.0f; 
mA[6965] = 0.0f; 
mA[6966] = 0.0f; 
mA[6967] = 0.0f; 
mA[6968] = 0.0f; 
mA[6969] = 0.0f; 
mA[6970] = 0.0f; 
mA[6971] = 0.0f; 
mA[6972] = 0.0f; 
mA[6973] = 0.0f; 
mA[6974] = 0.0f; 
mA[6975] = 0.0f; 
mA[6976] = 0.0f; 
mA[6977] = 0.0f; 
mA[6978] = 0.0f; 
mA[6979] = 0.0f; 
mA[6980] = 0.0f; 
mA[6981] = 0.0f; 
mA[6982] = 0.0f; 
mA[6983] = 0.0f; 
mA[6984] = 0.0f; 
mA[6985] = 0.0f; 
mA[6986] = 0.0f; 
mA[6987] = 0.0f; 
mA[6988] = 0.0f; 
mA[6989] = 0.0f; 
mA[6990] = 0.0f; 
mA[6991] = 0.0f; 
mA[6992] = 0.0f; 
mA[6993] = 0.0f; 
mA[6994] = 0.0f; 
mA[6995] = 0.0f; 
mA[6996] = 0.0f; 
mA[6997] = 0.0f; 
mA[6998] = 0.0f; 
mA[6999] = 0.0f; 
mA[7000] = 0.0f; 
mA[7001] = 0.0f; 
mA[7002] = 0.0f; 
mA[7003] = 0.0f; 
mA[7004] = 0.0f; 
mA[7005] = 0.0f; 
mA[7006] = 0.0f; 
mA[7007] = 0.0f; 
mA[7008] = 0.0f; 
mA[7009] = 0.0f; 
mA[7010] = 0.0f; 
mA[7011] = 0.0f; 
mA[7012] = 0.0f; 
mA[7013] = 0.0f; 
mA[7014] = 0.0f; 
mA[7015] = 0.0f; 
mA[7016] = 0.0f; 
mA[7017] = 0.0f; 
mA[7018] = 0.0f; 
mA[7019] = 0.0f; 
mA[7020] = 0.0f; 
mA[7021] = 0.0f; 
mA[7022] = 0.0f; 
mA[7023] = 0.0f; 
mA[7024] = 0.0f; 
mA[7025] = 0.0f; 
mA[7026] = 0.0f; 
mA[7027] = 0.0f; 
mA[7028] = 0.0f; 
mA[7029] = ( (  -1.0f  * v_v15_ppp_bw   )  +(  -1.0f  * v_v17_ppp_bw   )   ) ; 
mA[7030] = 0.0f; 
mA[7031] = 0.0f; 
mA[7032] = 0.0f; 
mA[7033] = 0.0f; 
mA[7034] = 0.0f; 
mA[7035] = 0.0f; 
mA[7036] = 0.0f; 
mA[7037] = 0.0f; 
mA[7038] = 0.0f; 
mA[7039] = 0.0f; 
mA[7040] = 0.0f; 
mA[7041] = 0.0f; 
mA[7042] =  v_v17_ppp_fw ; 
mA[7043] = 0.0f; 
mA[7044] =  v_v15_ppp_fw ; 
mA[7045] = 0.0f; 
mA[7046] = 0.0f; 
mA[7047] = 0.0f; 
mA[7048] = 0.0f; 
mA[7049] = 0.0f; 
mA[7050] = 0.0f; 
mA[7051] = 0.0f; 
mA[7052] = 0.0f; 
mA[7053] = 0.0f; 
mA[7054] = 0.0f; 
mA[7055] = 0.0f; 
mA[7056] = 0.0f; 
mA[7057] = 0.0f; 
mA[7058] = 0.0f; 
mA[7059] = 0.0f; 
mA[7060] = 0.0f; 
mA[7061] = 0.0f; 
mA[7062] = 0.0f; 
mA[7063] = 0.0f; 
mA[7064] = 0.0f; 
mA[7065] = 0.0f; 
mA[7066] = 0.0f; 
mA[7067] = 0.0f; 
mA[7068] = 0.0f; 
mA[7069] = 0.0f; 
mA[7070] = 0.0f; 
mA[7071] = 0.0f; 
mA[7072] = 0.0f; 
mA[7073] = 0.0f; 
mA[7074] = 0.0f; 
mA[7075] = 0.0f; 
mA[7076] = 0.0f; 
mA[7077] = 0.0f; 
mA[7078] = 0.0f; 
mA[7079] = 0.0f; 
mA[7080] = 0.0f; 
mA[7081] = 0.0f; 
mA[7082] = 0.0f; 
mA[7083] = 0.0f; 
mA[7084] = 0.0f; 
mA[7085] = 0.0f; 
mA[7086] = 0.0f; 
mA[7087] = 0.0f; 
mA[7088] = 0.0f; 
mA[7089] = 0.0f; 
mA[7090] = 0.0f; 
mA[7091] = 0.0f; 
mA[7092] = 0.0f; 
mA[7093] = 0.0f; 
mA[7094] = 0.0f; 
mA[7095] = 0.0f; 
mA[7096] = 0.0f; 
mA[7097] = 0.0f; 
mA[7098] = 0.0f; 
mA[7099] = 0.0f; 
mA[7100] = 0.0f; 
mA[7101] = 0.0f; 
mA[7102] = 0.0f; 
mA[7103] = 0.0f; 
mA[7104] = 0.0f; 
mA[7105] = 0.0f; 
mA[7106] = 0.0f; 
mA[7107] = 0.0f; 
mA[7108] = 0.0f; 
mA[7109] = 0.0f; 
mA[7110] = 0.0f; 
mA[7111] = 0.0f; 
mA[7112] = 0.0f; 
mA[7113] = 0.0f; 
mA[7114] = 0.0f; 
mA[7115] = 0.0f; 
mA[7116] = 0.0f; 
mA[7117] = 0.0f; 
mA[7118] = 0.0f; 
mA[7119] = 0.0f; 
mA[7120] = 0.0f; 
mA[7121] = 0.0f; 
mA[7122] = 0.0f; 
mA[7123] = 0.0f; 
mA[7124] = 0.0f; 
mA[7125] = 0.0f; 
mA[7126] = 0.0f; 
mA[7127] = 0.0f; 
mA[7128] = ( (  -1.0f  * v_v15_ppp_bw   )  +(  -1.0f  * v_v17_ppp_bw   )   ) ; 
mA[7129] = 0.0f; 
mA[7130] = 0.0f; 
mA[7131] = 0.0f; 
mA[7132] = 0.0f; 
mA[7133] = 0.0f; 
mA[7134] = 0.0f; 
mA[7135] = 0.0f; 
mA[7136] = 0.0f; 
mA[7137] = 0.0f; 
mA[7138] = 0.0f; 
mA[7139] = 0.0f; 
mA[7140] = 0.0f; 
mA[7141] =  v_v17_ppp_fw ; 
mA[7142] = 0.0f; 
mA[7143] = 0.0f; 
mA[7144] = 0.0f; 
mA[7145] = 0.0f; 
mA[7146] = 0.0f; 
mA[7147] = 0.0f; 
mA[7148] = 0.0f; 
mA[7149] = 0.0f; 
mA[7150] = 0.0f; 
mA[7151] = 0.0f; 
mA[7152] = 0.0f; 
mA[7153] = 0.0f; 
mA[7154] = 0.0f; 
mA[7155] = 0.0f; 
mA[7156] = 0.0f; 
mA[7157] = 0.0f; 
mA[7158] = 0.0f; 
mA[7159] = 0.0f; 
mA[7160] = 0.0f; 
mA[7161] = 0.0f; 
mA[7162] = 0.0f; 
mA[7163] = 0.0f; 
mA[7164] = 0.0f; 
mA[7165] = 0.0f; 
mA[7166] = 0.0f; 
mA[7167] = 0.0f; 
mA[7168] = 0.0f; 
mA[7169] = 0.0f; 
mA[7170] = 0.0f; 
mA[7171] = 0.0f; 
mA[7172] = 0.0f; 
mA[7173] = 0.0f; 
mA[7174] = 0.0f; 
mA[7175] = 0.0f; 
mA[7176] = 0.0f; 
mA[7177] = 0.0f; 
mA[7178] = 0.0f; 
mA[7179] = 0.0f; 
mA[7180] = 0.0f; 
mA[7181] = 0.0f; 
mA[7182] = 0.0f; 
mA[7183] = 0.0f; 
mA[7184] = 0.0f; 
mA[7185] = 0.0f; 
mA[7186] = 0.0f; 
mA[7187] = 0.0f; 
mA[7188] = 0.0f; 
mA[7189] = 0.0f; 
mA[7190] = 0.0f; 
mA[7191] = 0.0f; 
mA[7192] = 0.0f; 
mA[7193] = 0.0f; 
mA[7194] = 0.0f; 
mA[7195] = 0.0f; 
mA[7196] = 0.0f; 
mA[7197] = 0.0f; 
mA[7198] = 0.0f; 
mA[7199] = 0.0f; 
mA[7200] = 0.0f; 
mA[7201] = 0.0f; 
mA[7202] = 0.0f; 
mA[7203] = 0.0f; 
mA[7204] = 0.0f; 
mA[7205] = 0.0f; 
mA[7206] = 0.0f; 
mA[7207] = 0.0f; 
mA[7208] = 0.0f; 
mA[7209] = 0.0f; 
mA[7210] = 0.0f; 
mA[7211] = 0.0f; 
mA[7212] = 0.0f; 
mA[7213] = 0.0f; 
mA[7214] = 0.0f; 
mA[7215] = 0.0f; 
mA[7216] = 0.0f; 
mA[7217] = 0.0f; 
mA[7218] = 0.0f; 
mA[7219] =  v_v15_ppp_fw ; 
mA[7220] = 0.0f; 
mA[7221] = 0.0f; 
mA[7222] = 0.0f; 
mA[7223] = 0.0f; 
mA[7224] = 0.0f; 
mA[7225] = 0.0f; 
mA[7226] = 0.0f; 
mA[7227] = ( (  -1.0f  * v_v17_ppp_bw   )  +(  -1.0f  * v_v15_ppp_bw   )   ) ; 
mA[7228] = 0.0f; 
mA[7229] = 0.0f; 
mA[7230] = 0.0f; 
mA[7231] = 0.0f; 
mA[7232] = 0.0f; 
mA[7233] = 0.0f; 
mA[7234] = 0.0f; 
mA[7235] = 0.0f; 
mA[7236] = 0.0f; 
mA[7237] = 0.0f; 
mA[7238] = 0.0f; 
mA[7239] = 0.0f; 
mA[7240] = 0.0f; 
mA[7241] = 0.0f; 
mA[7242] = 0.0f; 
mA[7243] = 0.0f; 
mA[7244] = 0.0f; 
mA[7245] = 0.0f; 
mA[7246] = 0.0f; 
mA[7247] = 0.0f; 
mA[7248] = 0.0f; 
mA[7249] = 0.0f; 
mA[7250] = 0.0f; 
mA[7251] = 0.0f; 
mA[7252] = 0.0f; 
mA[7253] = 0.0f; 
mA[7254] = 0.0f; 
mA[7255] = 0.0f; 
mA[7256] = 0.0f; 
mA[7257] = 0.0f; 
mA[7258] = 0.0f; 
mA[7259] = 0.0f; 
mA[7260] = 0.0f; 
mA[7261] = 0.0f; 
mA[7262] = 0.0f; 
mA[7263] = 0.0f; 
mA[7264] = 0.0f; 
mA[7265] = 0.0f; 
mA[7266] = 0.0f; 
mA[7267] = 0.0f; 
mA[7268] = 0.0f; 
mA[7269] = 0.0f; 
mA[7270] =  v_v17_ppp_fw ; 
mA[7271] = 0.0f; 
mA[7272] = 0.0f; 
mA[7273] = 0.0f; 
mA[7274] = 0.0f; 
mA[7275] = 0.0f; 
mA[7276] = 0.0f; 
mA[7277] = 0.0f; 
mA[7278] = 0.0f; 
mA[7279] = 0.0f; 
mA[7280] = 0.0f; 
mA[7281] = 0.0f; 
mA[7282] = 0.0f; 
mA[7283] = 0.0f; 
mA[7284] = 0.0f; 
mA[7285] = 0.0f; 
mA[7286] = 0.0f; 
mA[7287] = 0.0f; 
mA[7288] = 0.0f; 
mA[7289] = 0.0f; 
mA[7290] = 0.0f; 
mA[7291] = 0.0f; 
mA[7292] = 0.0f; 
mA[7293] = 0.0f; 
mA[7294] = 0.0f; 
mA[7295] = 0.0f; 
mA[7296] = 0.0f; 
mA[7297] = 0.0f; 
mA[7298] = 0.0f; 
mA[7299] = 0.0f; 
mA[7300] = 0.0f; 
mA[7301] = 0.0f; 
mA[7302] = 0.0f; 
mA[7303] = 0.0f; 
mA[7304] = 0.0f; 
mA[7305] = 0.0f; 
mA[7306] = 0.0f; 
mA[7307] = 0.0f; 
mA[7308] = 0.0f; 
mA[7309] = 0.0f; 
mA[7310] = 0.0f; 
mA[7311] = 0.0f; 
mA[7312] = 0.0f; 
mA[7313] = 0.0f; 
mA[7314] = 0.0f; 
mA[7315] = 0.0f; 
mA[7316] = 0.0f; 
mA[7317] = 0.0f; 
mA[7318] =  v_v15_ppp_fw ; 
mA[7319] = 0.0f; 
mA[7320] = 0.0f; 
mA[7321] = 0.0f; 
mA[7322] = 0.0f; 
mA[7323] = 0.0f; 
mA[7324] = 0.0f; 
mA[7325] = 0.0f; 
mA[7326] = ( (  -1.0f  * v_v17_ppp_bw   )  +(  -1.0f  * v_v15_ppp_bw   )   ) ; 
mA[7327] = 0.0f; 
mA[7328] = 0.0f; 
mA[7329] = 0.0f; 
mA[7330] = 0.0f; 
mA[7331] = 0.0f; 
mA[7332] = 0.0f; 
mA[7333] = 0.0f; 
mA[7334] = 0.0f; 
mA[7335] = 0.0f; 
mA[7336] = 0.0f; 
mA[7337] = 0.0f; 
mA[7338] = 0.0f; 
mA[7339] = 0.0f; 
mA[7340] = 0.0f; 
mA[7341] = 0.0f; 
mA[7342] = 0.0f; 
mA[7343] = 0.0f; 
mA[7344] = 0.0f; 
mA[7345] = 0.0f; 
mA[7346] = 0.0f; 
mA[7347] = 0.0f; 
mA[7348] = 0.0f; 
mA[7349] = 0.0f; 
mA[7350] = 0.0f; 
mA[7351] = 0.0f; 
mA[7352] = 0.0f; 
mA[7353] = 0.0f; 
mA[7354] = 0.0f; 
mA[7355] = 0.0f; 
mA[7356] = 0.0f; 
mA[7357] = 0.0f; 
mA[7358] = 0.0f; 
mA[7359] = 0.0f; 
mA[7360] = 0.0f; 
mA[7361] = 0.0f; 
mA[7362] = 0.0f; 
mA[7363] = 0.0f; 
mA[7364] = 0.0f; 
mA[7365] = 0.0f; 
mA[7366] = 0.0f; 
mA[7367] = 0.0f; 
mA[7368] = 0.0f; 
mA[7369] =  v_v17_ppp_fw ; 
mA[7370] = 0.0f; 
mA[7371] = 0.0f; 
mA[7372] = 0.0f; 
mA[7373] = 0.0f; 
mA[7374] = 0.0f; 
mA[7375] = 0.0f; 
mA[7376] = 0.0f; 
mA[7377] = 0.0f; 
mA[7378] = 0.0f; 
mA[7379] = 0.0f; 
mA[7380] = 0.0f; 
mA[7381] = 0.0f; 
mA[7382] = 0.0f; 
mA[7383] = 0.0f; 
mA[7384] = 0.0f; 
mA[7385] = 0.0f; 
mA[7386] = 0.0f; 
mA[7387] = 0.0f; 
mA[7388] = 0.0f; 
mA[7389] = 0.0f; 
mA[7390] = 0.0f; 
mA[7391] = 0.0f; 
mA[7392] = 0.0f; 
mA[7393] = 0.0f; 
mA[7394] = 0.0f; 
mA[7395] = 0.0f; 
mA[7396] = 0.0f; 
mA[7397] = 0.0f; 
mA[7398] = 0.0f; 
mA[7399] = 0.0f; 
mA[7400] = 0.0f; 
mA[7401] = 0.0f; 
mA[7402] = 0.0f; 
mA[7403] = 0.0f; 
mA[7404] = 0.0f; 
mA[7405] = 0.0f; 
mA[7406] = 0.0f; 
mA[7407] = 0.0f; 
mA[7408] = 0.0f; 
mA[7409] = 0.0f; 
mA[7410] = 0.0f; 
mA[7411] = 0.0f; 
mA[7412] = 0.0f; 
mA[7413] = 0.0f; 
mA[7414] = 0.0f; 
mA[7415] = 0.0f; 
mA[7416] = 0.0f; 
mA[7417] =  v_v15_ppp_fw ; 
mA[7418] = 0.0f; 
mA[7419] = 0.0f; 
mA[7420] = 0.0f; 
mA[7421] = 0.0f; 
mA[7422] = 0.0f; 
mA[7423] = 0.0f; 
mA[7424] = 0.0f; 
mA[7425] = ( (  -1.0f  * v_v17_ppp_bw   )  +(  -1.0f  * v_v15_ppp_bw   )   ) ; 
mA[7426] = 0.0f; 
mA[7427] = 0.0f; 
mA[7428] = 0.0f; 
mA[7429] = 0.0f; 
mA[7430] = 0.0f; 
mA[7431] = 0.0f; 
mA[7432] = 0.0f; 
mA[7433] = 0.0f; 
mA[7434] = 0.0f; 
mA[7435] = 0.0f; 
mA[7436] = 0.0f; 
mA[7437] = 0.0f; 
mA[7438] = 0.0f; 
mA[7439] = 0.0f; 
mA[7440] = 0.0f; 
mA[7441] = 0.0f; 
mA[7442] = 0.0f; 
mA[7443] = 0.0f; 
mA[7444] = 0.0f; 
mA[7445] = 0.0f; 
mA[7446] = 0.0f; 
mA[7447] = 0.0f; 
mA[7448] = 0.0f; 
mA[7449] = 0.0f; 
mA[7450] = 0.0f; 
mA[7451] = 0.0f; 
mA[7452] = 0.0f; 
mA[7453] = 0.0f; 
mA[7454] = 0.0f; 
mA[7455] = 0.0f; 
mA[7456] = 0.0f; 
mA[7457] = 0.0f; 
mA[7458] = 0.0f; 
mA[7459] = 0.0f; 
mA[7460] = 0.0f; 
mA[7461] = 0.0f; 
mA[7462] = 0.0f; 
mA[7463] = 0.0f; 
mA[7464] = 0.0f; 
mA[7465] = 0.0f; 
mA[7466] = 0.0f; 
mA[7467] = 0.0f; 
mA[7468] = 0.0f; 
mA[7469] = 0.0f; 
mA[7470] = 0.0f; 
mA[7471] = 0.0f; 
mA[7472] = 0.0f; 
mA[7473] = 0.0f; 
mA[7474] = 0.0f; 
mA[7475] = 0.0f; 
mA[7476] = 0.0f; 
mA[7477] = 0.0f; 
mA[7478] = 0.0f; 
mA[7479] = 0.0f; 
mA[7480] = 0.0f; 
mA[7481] = 0.0f; 
mA[7482] = 0.0f; 
mA[7483] = 0.0f; 
mA[7484] = 0.0f; 
mA[7485] = 0.0f; 
mA[7486] = 0.0f; 
mA[7487] = 0.0f; 
mA[7488] = 0.0f; 
mA[7489] = 0.0f; 
mA[7490] = 0.0f; 
mA[7491] = 0.0f; 
mA[7492] = 0.0f; 
mA[7493] =  v_v44_aa_fw ; 
mA[7494] = 0.0f; 
mA[7495] = 0.0f; 
mA[7496] = 0.0f; 
mA[7497] = 0.0f; 
mA[7498] = 0.0f; 
mA[7499] = 0.0f; 
mA[7500] = 0.0f; 
mA[7501] = 0.0f; 
mA[7502] = 0.0f; 
mA[7503] = 0.0f; 
mA[7504] = 0.0f; 
mA[7505] = 0.0f; 
mA[7506] = 0.0f; 
mA[7507] = 0.0f; 
mA[7508] = 0.0f; 
mA[7509] = 0.0f; 
mA[7510] = 0.0f; 
mA[7511] = 0.0f; 
mA[7512] = 0.0f; 
mA[7513] = 0.0f; 
mA[7514] = 0.0f; 
mA[7515] = 0.0f; 
mA[7516] = 0.0f; 
mA[7517] = 0.0f; 
mA[7518] = 0.0f; 
mA[7519] = 0.0f; 
mA[7520] = 0.0f; 
mA[7521] = 0.0f; 
mA[7522] = 0.0f; 
mA[7523] = 0.0f; 
mA[7524] = ( (  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v44_aa_bw   )   ) ; 
mA[7525] = 0.0f; 
mA[7526] = 0.0f; 
mA[7527] = 0.0f; 
mA[7528] = 0.0f; 
mA[7529] = 0.0f; 
mA[7530] = 0.0f; 
mA[7531] = 0.0f; 
mA[7532] = 0.0f; 
mA[7533] = 0.0f; 
mA[7534] = 0.0f; 
mA[7535] = 0.0f; 
mA[7536] = 0.0f; 
mA[7537] = 0.0f; 
mA[7538] = 0.0f; 
mA[7539] = 0.0f; 
mA[7540] = 0.0f; 
mA[7541] = 0.0f; 
mA[7542] = 0.0f; 
mA[7543] = 0.0f; 
mA[7544] = 0.0f; 
mA[7545] = 0.0f; 
mA[7546] = 0.0f; 
mA[7547] = 0.0f; 
mA[7548] = 0.0f; 
mA[7549] = 0.0f; 
mA[7550] = 0.0f; 
mA[7551] = 0.0f; 
mA[7552] = 0.0f; 
mA[7553] = 0.0f; 
mA[7554] = 0.0f; 
mA[7555] = 0.0f; 
mA[7556] = 0.0f; 
mA[7557] = 0.0f; 
mA[7558] = 0.0f; 
mA[7559] = 0.0f; 
mA[7560] = 0.0f; 
mA[7561] =  v_v47_aa_fw ; 
mA[7562] = 0.0f; 
mA[7563] = 0.0f; 
mA[7564] = 0.0f; 
mA[7565] = 0.0f; 
mA[7566] = 0.0f; 
mA[7567] = 0.0f; 
mA[7568] = 0.0f; 
mA[7569] = 0.0f; 
mA[7570] = 0.0f; 
mA[7571] = 0.0f; 
mA[7572] = 0.0f; 
mA[7573] = 0.0f; 
mA[7574] = 0.0f; 
mA[7575] = 0.0f; 
mA[7576] = 0.0f; 
mA[7577] = 0.0f; 
mA[7578] = 0.0f; 
mA[7579] = 0.0f; 
mA[7580] = 0.0f; 
mA[7581] = 0.0f; 
mA[7582] = 0.0f; 
mA[7583] = 0.0f; 
mA[7584] = 0.0f; 
mA[7585] = 0.0f; 
mA[7586] = 0.0f; 
mA[7587] = 0.0f; 
mA[7588] = 0.0f; 
mA[7589] = 0.0f; 
mA[7590] = 0.0f; 
mA[7591] = 0.0f; 
mA[7592] = 0.0f; 
mA[7593] = 0.0f; 
mA[7594] = 0.0f; 
mA[7595] = 0.0f; 
mA[7596] = 0.0f; 
mA[7597] = 0.0f; 
mA[7598] = 0.0f; 
mA[7599] = 0.0f; 
mA[7600] = 0.0f; 
mA[7601] = 0.0f; 
mA[7602] = 0.0f; 
mA[7603] = 0.0f; 
mA[7604] = 0.0f; 
mA[7605] = 0.0f; 
mA[7606] = 0.0f; 
mA[7607] = 0.0f; 
mA[7608] = 0.0f; 
mA[7609] = 0.0f; 
mA[7610] = 0.0f; 
mA[7611] = 0.0f; 
mA[7612] = 0.0f; 
mA[7613] = 0.0f; 
mA[7614] = 0.0f; 
mA[7615] = 0.0f; 
mA[7616] = 0.0f; 
mA[7617] = 0.0f; 
mA[7618] = 0.0f; 
mA[7619] = 0.0f; 
mA[7620] = 0.0f; 
mA[7621] = 0.0f; 
mA[7622] = 0.0f; 
mA[7623] = ( (  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v44_aa_bw   )   ) ; 
mA[7624] = 0.0f; 
mA[7625] = 0.0f; 
mA[7626] = 0.0f; 
mA[7627] = 0.0f; 
mA[7628] = 0.0f; 
mA[7629] = 0.0f; 
mA[7630] = 0.0f; 
mA[7631] = 0.0f; 
mA[7632] = 0.0f; 
mA[7633] = 0.0f; 
mA[7634] = 0.0f; 
mA[7635] = 0.0f; 
mA[7636] = 0.0f; 
mA[7637] = 0.0f; 
mA[7638] = 0.0f; 
mA[7639] = 0.0f; 
mA[7640] = 0.0f; 
mA[7641] = 0.0f; 
mA[7642] = 0.0f; 
mA[7643] = 0.0f; 
mA[7644] = 0.0f; 
mA[7645] = 0.0f; 
mA[7646] = 0.0f; 
mA[7647] = 0.0f; 
mA[7648] = 0.0f; 
mA[7649] = 0.0f; 
mA[7650] = 0.0f; 
mA[7651] = 0.0f; 
mA[7652] = 0.0f; 
mA[7653] = 0.0f; 
mA[7654] = 0.0f; 
mA[7655] = 0.0f; 
mA[7656] = 0.0f; 
mA[7657] = 0.0f; 
mA[7658] = 0.0f; 
mA[7659] = 0.0f; 
mA[7660] = 0.0f; 
mA[7661] = 0.0f; 
mA[7662] = 0.0f; 
mA[7663] = 0.0f; 
mA[7664] = 0.0f; 
mA[7665] = 0.0f; 
mA[7666] = 0.0f; 
mA[7667] = 0.0f; 
mA[7668] = 0.0f; 
mA[7669] = 0.0f; 
mA[7670] = 0.0f; 
mA[7671] = 0.0f; 
mA[7672] =  v_v26_tca_fw_a ; 
mA[7673] = 0.0f; 
mA[7674] =  v_v26_tca_fw_b ; 
mA[7675] = 0.0f; 
mA[7676] = 0.0f; 
mA[7677] = 0.0f; 
mA[7678] = 0.0f; 
mA[7679] = 0.0f; 
mA[7680] = 0.0f; 
mA[7681] = 0.0f; 
mA[7682] = 0.0f; 
mA[7683] = 0.0f; 
mA[7684] = 0.0f; 
mA[7685] = 0.0f; 
mA[7686] = 0.0f; 
mA[7687] = 0.0f; 
mA[7688] = 0.0f; 
mA[7689] = 0.0f; 
mA[7690] = 0.0f; 
mA[7691] = 0.0f; 
mA[7692] = 0.0f; 
mA[7693] = 0.0f; 
mA[7694] = 0.0f; 
mA[7695] = 0.0f; 
mA[7696] = 0.0f; 
mA[7697] = 0.0f; 
mA[7698] = 0.0f; 
mA[7699] = 0.0f; 
mA[7700] = 0.0f; 
mA[7701] = 0.0f; 
mA[7702] = 0.0f; 
mA[7703] = 0.0f; 
mA[7704] = 0.0f; 
mA[7705] = 0.0f; 
mA[7706] = 0.0f; 
mA[7707] = 0.0f; 
mA[7708] = 0.0f; 
mA[7709] = 0.0f; 
mA[7710] = 0.0f; 
mA[7711] = 0.0f; 
mA[7712] = 0.0f; 
mA[7713] = 0.0f; 
mA[7714] = 0.0f; 
mA[7715] = 0.0f; 
mA[7716] = 0.0f; 
mA[7717] = 0.0f; 
mA[7718] = 0.0f; 
mA[7719] = 0.0f; 
mA[7720] = 0.0f; 
mA[7721] = 0.0f; 
mA[7722] = ( (  -1.0f  * v_v26_tca_bw_b   )  +(  -1.0f  * v_v26_tca_bw_a   )  +(  -1.0f  * v_v51_aa_fw_a   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v25_tca_fw_b   )  +(  -1.0f  * v_v25_tca_fw_a   )  +(  -1.0f  * v_v29_glyox_fw_b   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v51_aa_fw_b   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v29_glyox_fw_a   )   ) ; 
mA[7723] = 0.0f; 
mA[7724] = 0.0f; 
mA[7725] =  v_v25_tca_bw_a ; 
mA[7726] = 0.0f; 
mA[7727] =  v_v25_tca_bw_b ; 
mA[7728] = 0.0f; 
mA[7729] = 0.0f; 
mA[7730] = 0.0f; 
mA[7731] = 0.0f; 
mA[7732] = 0.0f; 
mA[7733] = 0.0f; 
mA[7734] = 0.0f; 
mA[7735] = 0.0f; 
mA[7736] = 0.0f; 
mA[7737] = 0.0f; 
mA[7738] = 0.0f; 
mA[7739] = 0.0f; 
mA[7740] = 0.0f; 
mA[7741] = 0.0f; 
mA[7742] = 0.0f; 
mA[7743] = 0.0f; 
mA[7744] = 0.0f; 
mA[7745] = 0.0f; 
mA[7746] = 0.0f; 
mA[7747] = 0.0f; 
mA[7748] = 0.0f; 
mA[7749] = 0.0f; 
mA[7750] = 0.0f; 
mA[7751] = 0.0f; 
mA[7752] = 0.0f; 
mA[7753] = 0.0f; 
mA[7754] = 0.0f; 
mA[7755] = 0.0f; 
mA[7756] = 0.0f; 
mA[7757] = 0.0f; 
mA[7758] = 0.0f; 
mA[7759] = 0.0f; 
mA[7760] = 0.0f; 
mA[7761] = 0.0f; 
mA[7762] = 0.0f; 
mA[7763] = 0.0f; 
mA[7764] = 0.0f; 
mA[7765] = 0.0f; 
mA[7766] = 0.0f; 
mA[7767] = 0.0f; 
mA[7768] = 0.0f; 
mA[7769] = 0.0f; 
mA[7770] = 0.0f; 
mA[7771] = (  v_v26_tca_fw_b  + v_v26_tca_fw_a   ) ; 
mA[7772] = 0.0f; 
mA[7773] = 0.0f; 
mA[7774] = 0.0f; 
mA[7775] = 0.0f; 
mA[7776] = 0.0f; 
mA[7777] = 0.0f; 
mA[7778] = 0.0f; 
mA[7779] = 0.0f; 
mA[7780] = 0.0f; 
mA[7781] = 0.0f; 
mA[7782] = 0.0f; 
mA[7783] = 0.0f; 
mA[7784] = 0.0f; 
mA[7785] = 0.0f; 
mA[7786] = 0.0f; 
mA[7787] = 0.0f; 
mA[7788] = 0.0f; 
mA[7789] = 0.0f; 
mA[7790] = 0.0f; 
mA[7791] = 0.0f; 
mA[7792] = 0.0f; 
mA[7793] = 0.0f; 
mA[7794] = 0.0f; 
mA[7795] = 0.0f; 
mA[7796] = 0.0f; 
mA[7797] = 0.0f; 
mA[7798] = 0.0f; 
mA[7799] = 0.0f; 
mA[7800] = 0.0f; 
mA[7801] = 0.0f; 
mA[7802] = 0.0f; 
mA[7803] = 0.0f; 
mA[7804] = 0.0f; 
mA[7805] = 0.0f; 
mA[7806] = 0.0f; 
mA[7807] = 0.0f; 
mA[7808] = 0.0f; 
mA[7809] = 0.0f; 
mA[7810] = 0.0f; 
mA[7811] = 0.0f; 
mA[7812] = 0.0f; 
mA[7813] = 0.0f; 
mA[7814] = 0.0f; 
mA[7815] = 0.0f; 
mA[7816] = 0.0f; 
mA[7817] = 0.0f; 
mA[7818] = 0.0f; 
mA[7819] = 0.0f; 
mA[7820] = 0.0f; 
mA[7821] = ( (  -1.0f  * v_v25_tca_fw_b   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v29_glyox_fw_a   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v29_glyox_fw_b   )  +(  -1.0f  * v_v26_tca_bw_b   )  +(  -1.0f  * v_v51_aa_fw_b   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v26_tca_bw_a   )  +(  -1.0f  * v_v25_tca_fw_a   )  +(  -1.0f  * v_v51_aa_fw_a   )   ) ; 
mA[7822] = 0.0f; 
mA[7823] = 0.0f; 
mA[7824] = (  v_v25_tca_bw_b  + v_v25_tca_bw_a   ) ; 
mA[7825] = 0.0f; 
mA[7826] = 0.0f; 
mA[7827] = 0.0f; 
mA[7828] = 0.0f; 
mA[7829] = 0.0f; 
mA[7830] = 0.0f; 
mA[7831] = 0.0f; 
mA[7832] = 0.0f; 
mA[7833] = 0.0f; 
mA[7834] = 0.0f; 
mA[7835] = 0.0f; 
mA[7836] = 0.0f; 
mA[7837] = 0.0f; 
mA[7838] = 0.0f; 
mA[7839] = 0.0f; 
mA[7840] = 0.0f; 
mA[7841] = 0.0f; 
mA[7842] = 0.0f; 
mA[7843] = 0.0f; 
mA[7844] = 0.0f; 
mA[7845] = 0.0f; 
mA[7846] = 0.0f; 
mA[7847] = 0.0f; 
mA[7848] = 0.0f; 
mA[7849] = 0.0f; 
mA[7850] = 0.0f; 
mA[7851] = 0.0f; 
mA[7852] = 0.0f; 
mA[7853] = 0.0f; 
mA[7854] = 0.0f; 
mA[7855] = 0.0f; 
mA[7856] = 0.0f; 
mA[7857] = 0.0f; 
mA[7858] = 0.0f; 
mA[7859] = 0.0f; 
mA[7860] = 0.0f; 
mA[7861] = 0.0f; 
mA[7862] = 0.0f; 
mA[7863] = 0.0f; 
mA[7864] = 0.0f; 
mA[7865] = 0.0f; 
mA[7866] = 0.0f; 
mA[7867] = 0.0f; 
mA[7868] =  v_v26_tca_fw_b ; 
mA[7869] = 0.0f; 
mA[7870] =  v_v26_tca_fw_a ; 
mA[7871] = 0.0f; 
mA[7872] = 0.0f; 
mA[7873] = 0.0f; 
mA[7874] = 0.0f; 
mA[7875] = 0.0f; 
mA[7876] = 0.0f; 
mA[7877] = 0.0f; 
mA[7878] = 0.0f; 
mA[7879] = 0.0f; 
mA[7880] = 0.0f; 
mA[7881] = 0.0f; 
mA[7882] = 0.0f; 
mA[7883] = 0.0f; 
mA[7884] = 0.0f; 
mA[7885] = 0.0f; 
mA[7886] = 0.0f; 
mA[7887] = 0.0f; 
mA[7888] = 0.0f; 
mA[7889] = 0.0f; 
mA[7890] = 0.0f; 
mA[7891] = 0.0f; 
mA[7892] = 0.0f; 
mA[7893] = 0.0f; 
mA[7894] = 0.0f; 
mA[7895] = 0.0f; 
mA[7896] = 0.0f; 
mA[7897] = 0.0f; 
mA[7898] = 0.0f; 
mA[7899] = 0.0f; 
mA[7900] = 0.0f; 
mA[7901] = 0.0f; 
mA[7902] = 0.0f; 
mA[7903] = 0.0f; 
mA[7904] = 0.0f; 
mA[7905] = 0.0f; 
mA[7906] = 0.0f; 
mA[7907] = 0.0f; 
mA[7908] = 0.0f; 
mA[7909] = 0.0f; 
mA[7910] = 0.0f; 
mA[7911] = 0.0f; 
mA[7912] = 0.0f; 
mA[7913] = 0.0f; 
mA[7914] = 0.0f; 
mA[7915] = 0.0f; 
mA[7916] = 0.0f; 
mA[7917] = 0.0f; 
mA[7918] = 0.0f; 
mA[7919] = 0.0f; 
mA[7920] = ( (  -1.0f  * v_v25_tca_fw_a   )  +(  -1.0f  * v_v25_tca_fw_b   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v51_aa_fw_b   )  +(  -1.0f  * v_v51_aa_fw_a   )  +(  -1.0f  * v_v29_glyox_fw_a   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v26_tca_bw_a   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v26_tca_bw_b   )  +(  -1.0f  * v_v29_glyox_fw_b   )   ) ; 
mA[7921] =  v_v25_tca_bw_b ; 
mA[7922] = 0.0f; 
mA[7923] =  v_v25_tca_bw_a ; 
mA[7924] = 0.0f; 
mA[7925] = 0.0f; 
mA[7926] = 0.0f; 
mA[7927] = 0.0f; 
mA[7928] = 0.0f; 
mA[7929] = 0.0f; 
mA[7930] = 0.0f; 
mA[7931] = 0.0f; 
mA[7932] = 0.0f; 
mA[7933] = 0.0f; 
mA[7934] = 0.0f; 
mA[7935] = 0.0f; 
mA[7936] = 0.0f; 
mA[7937] = 0.0f; 
mA[7938] = 0.0f; 
mA[7939] = 0.0f; 
mA[7940] = 0.0f; 
mA[7941] = 0.0f; 
mA[7942] = 0.0f; 
mA[7943] = 0.0f; 
mA[7944] = 0.0f; 
mA[7945] = 0.0f; 
mA[7946] = 0.0f; 
mA[7947] = 0.0f; 
mA[7948] = 0.0f; 
mA[7949] = 0.0f; 
mA[7950] = 0.0f; 
mA[7951] = 0.0f; 
mA[7952] = 0.0f; 
mA[7953] = 0.0f; 
mA[7954] = 0.0f; 
mA[7955] = 0.0f; 
mA[7956] = 0.0f; 
mA[7957] = 0.0f; 
mA[7958] = 0.0f; 
mA[7959] = 0.0f; 
mA[7960] = 0.0f; 
mA[7961] = 0.0f; 
mA[7962] = 0.0f; 
mA[7963] = 0.0f; 
mA[7964] = 0.0f; 
mA[7965] = 0.0f; 
mA[7966] = 0.0f; 
mA[7967] = 0.0f; 
mA[7968] = 0.0f; 
mA[7969] = 0.0f; 
mA[7970] = 0.0f; 
mA[7971] = 0.0f; 
mA[7972] = 0.0f; 
mA[7973] = 0.0f; 
mA[7974] = 0.0f; 
mA[7975] = 0.0f; 
mA[7976] = 0.0f; 
mA[7977] = 0.0f; 
mA[7978] = 0.0f; 
mA[7979] = 0.0f; 
mA[7980] = 0.0f; 
mA[7981] = 0.0f; 
mA[7982] = 0.0f; 
mA[7983] = 0.0f; 
mA[7984] = 0.0f; 
mA[7985] = 0.0f; 
mA[7986] = 0.0f; 
mA[7987] = 0.0f; 
mA[7988] = 0.0f; 
mA[7989] = 0.0f; 
mA[7990] = 0.0f; 
mA[7991] = 0.0f; 
mA[7992] = 0.0f; 
mA[7993] = 0.0f; 
mA[7994] = 0.0f; 
mA[7995] = 0.0f; 
mA[7996] = 0.0f; 
mA[7997] = 0.0f; 
mA[7998] = 0.0f; 
mA[7999] = 0.0f; 
mA[8000] = 0.0f; 
mA[8001] = 0.0f; 
mA[8002] = 0.0f; 
mA[8003] = 0.0f; 
mA[8004] = 0.0f; 
mA[8005] = 0.0f; 
mA[8006] = 0.0f; 
mA[8007] = 0.0f; 
mA[8008] = 0.0f; 
mA[8009] = 0.0f; 
mA[8010] = 0.0f; 
mA[8011] = 0.0f; 
mA[8012] = 0.0f; 
mA[8013] = 0.0f; 
mA[8014] = 0.0f; 
mA[8015] = 0.0f; 
mA[8016] = (  v_v51_aa_fw_a  + v_v25_tca_fw_a  + v_v48_aa_fw_c  + v_v48_aa_fw_a   ) ; 
mA[8017] = 0.0f; 
mA[8018] = (  v_v25_tca_fw_b  + v_v48_aa_fw_d  + v_v51_aa_fw_b  + v_v48_aa_fw_b   ) ; 
mA[8019] = ( (  -1.0f  * v_v25_tca_bw_b   )  +(  -1.0f  * v_v24_tca_fw   )  +(  -1.0f  * v_v25_tca_bw_a   )   ) ; 
mA[8020] = 0.0f; 
mA[8021] = 0.0f; 
mA[8022] = 0.0f; 
mA[8023] = 0.0f; 
mA[8024] = 0.0f; 
mA[8025] = 0.0f; 
mA[8026] = 0.0f; 
mA[8027] = 0.0f; 
mA[8028] = 0.0f; 
mA[8029] = 0.0f; 
mA[8030] = 0.0f; 
mA[8031] = 0.0f; 
mA[8032] = 0.0f; 
mA[8033] = 0.0f; 
mA[8034] = 0.0f; 
mA[8035] = 0.0f; 
mA[8036] = 0.0f; 
mA[8037] = 0.0f; 
mA[8038] = 0.0f; 
mA[8039] = 0.0f; 
mA[8040] = 0.0f; 
mA[8041] = 0.0f; 
mA[8042] = 0.0f; 
mA[8043] = 0.0f; 
mA[8044] = 0.0f; 
mA[8045] = 0.0f; 
mA[8046] = 0.0f; 
mA[8047] = 0.0f; 
mA[8048] = 0.0f; 
mA[8049] = 0.0f; 
mA[8050] = 0.0f; 
mA[8051] = 0.0f; 
mA[8052] = 0.0f; 
mA[8053] = 0.0f; 
mA[8054] = 0.0f; 
mA[8055] = 0.0f; 
mA[8056] = 0.0f; 
mA[8057] = 0.0f; 
mA[8058] = 0.0f; 
mA[8059] = 0.0f; 
mA[8060] = 0.0f; 
mA[8061] = 0.0f; 
mA[8062] = 0.0f; 
mA[8063] = 0.0f; 
mA[8064] = 0.0f; 
mA[8065] = 0.0f; 
mA[8066] = 0.0f; 
mA[8067] = 0.0f; 
mA[8068] = 0.0f; 
mA[8069] = 0.0f; 
mA[8070] = 0.0f; 
mA[8071] = 0.0f; 
mA[8072] = 0.0f; 
mA[8073] = 0.0f; 
mA[8074] = 0.0f; 
mA[8075] = 0.0f; 
mA[8076] = 0.0f; 
mA[8077] = 0.0f; 
mA[8078] = 0.0f; 
mA[8079] = 0.0f; 
mA[8080] = 0.0f; 
mA[8081] = 0.0f; 
mA[8082] = 0.0f; 
mA[8083] = 0.0f; 
mA[8084] = 0.0f; 
mA[8085] = 0.0f; 
mA[8086] = 0.0f; 
mA[8087] = 0.0f; 
mA[8088] = 0.0f; 
mA[8089] = 0.0f; 
mA[8090] = 0.0f; 
mA[8091] = 0.0f; 
mA[8092] = 0.0f; 
mA[8093] = 0.0f; 
mA[8094] = 0.0f; 
mA[8095] = 0.0f; 
mA[8096] = 0.0f; 
mA[8097] = 0.0f; 
mA[8098] = 0.0f; 
mA[8099] = 0.0f; 
mA[8100] = 0.0f; 
mA[8101] = 0.0f; 
mA[8102] = 0.0f; 
mA[8103] = 0.0f; 
mA[8104] = 0.0f; 
mA[8105] = 0.0f; 
mA[8106] = 0.0f; 
mA[8107] = 0.0f; 
mA[8108] = 0.0f; 
mA[8109] = 0.0f; 
mA[8110] = 0.0f; 
mA[8111] = 0.0f; 
mA[8112] = 0.0f; 
mA[8113] = 0.0f; 
mA[8114] = 0.0f; 
mA[8115] = (  v_v25_tca_fw_b  + v_v48_aa_fw_a  + v_v48_aa_fw_d  + v_v51_aa_fw_b  + v_v48_aa_fw_c  + v_v48_aa_fw_b  + v_v25_tca_fw_a  + v_v51_aa_fw_a   ) ; 
mA[8116] = 0.0f; 
mA[8117] = 0.0f; 
mA[8118] = ( (  -1.0f  * v_v24_tca_fw   )  +(  -1.0f  * v_v25_tca_bw_b   )  +(  -1.0f  * v_v25_tca_bw_a   )   ) ; 
mA[8119] = 0.0f; 
mA[8120] = 0.0f; 
mA[8121] = 0.0f; 
mA[8122] = 0.0f; 
mA[8123] = 0.0f; 
mA[8124] = 0.0f; 
mA[8125] = 0.0f; 
mA[8126] = 0.0f; 
mA[8127] = 0.0f; 
mA[8128] = 0.0f; 
mA[8129] = 0.0f; 
mA[8130] = 0.0f; 
mA[8131] = 0.0f; 
mA[8132] = 0.0f; 
mA[8133] = 0.0f; 
mA[8134] = 0.0f; 
mA[8135] = 0.0f; 
mA[8136] = 0.0f; 
mA[8137] = 0.0f; 
mA[8138] = 0.0f; 
mA[8139] = 0.0f; 
mA[8140] = 0.0f; 
mA[8141] = 0.0f; 
mA[8142] = 0.0f; 
mA[8143] = 0.0f; 
mA[8144] = 0.0f; 
mA[8145] = 0.0f; 
mA[8146] = 0.0f; 
mA[8147] = 0.0f; 
mA[8148] = 0.0f; 
mA[8149] = 0.0f; 
mA[8150] = 0.0f; 
mA[8151] = 0.0f; 
mA[8152] = 0.0f; 
mA[8153] = 0.0f; 
mA[8154] = 0.0f; 
mA[8155] = 0.0f; 
mA[8156] = 0.0f; 
mA[8157] = 0.0f; 
mA[8158] = 0.0f; 
mA[8159] = 0.0f; 
mA[8160] = 0.0f; 
mA[8161] = 0.0f; 
mA[8162] = 0.0f; 
mA[8163] = 0.0f; 
mA[8164] = 0.0f; 
mA[8165] = 0.0f; 
mA[8166] = 0.0f; 
mA[8167] = 0.0f; 
mA[8168] = 0.0f; 
mA[8169] = 0.0f; 
mA[8170] = 0.0f; 
mA[8171] = 0.0f; 
mA[8172] = 0.0f; 
mA[8173] = 0.0f; 
mA[8174] = 0.0f; 
mA[8175] = 0.0f; 
mA[8176] = 0.0f; 
mA[8177] = 0.0f; 
mA[8178] = 0.0f; 
mA[8179] = 0.0f; 
mA[8180] = 0.0f; 
mA[8181] = 0.0f; 
mA[8182] = 0.0f; 
mA[8183] = 0.0f; 
mA[8184] = 0.0f; 
mA[8185] = 0.0f; 
mA[8186] = 0.0f; 
mA[8187] = 0.0f; 
mA[8188] = 0.0f; 
mA[8189] = 0.0f; 
mA[8190] = 0.0f; 
mA[8191] = 0.0f; 
mA[8192] = 0.0f; 
mA[8193] = 0.0f; 
mA[8194] = 0.0f; 
mA[8195] = 0.0f; 
mA[8196] = 0.0f; 
mA[8197] = 0.0f; 
mA[8198] = 0.0f; 
mA[8199] = 0.0f; 
mA[8200] = 0.0f; 
mA[8201] = 0.0f; 
mA[8202] = 0.0f; 
mA[8203] = 0.0f; 
mA[8204] = 0.0f; 
mA[8205] = 0.0f; 
mA[8206] = 0.0f; 
mA[8207] = 0.0f; 
mA[8208] = 0.0f; 
mA[8209] = 0.0f; 
mA[8210] = 0.0f; 
mA[8211] = 0.0f; 
mA[8212] = (  v_v48_aa_fw_b  + v_v48_aa_fw_d  + v_v25_tca_fw_b  + v_v51_aa_fw_b   ) ; 
mA[8213] = 0.0f; 
mA[8214] = (  v_v25_tca_fw_a  + v_v51_aa_fw_a  + v_v48_aa_fw_a  + v_v48_aa_fw_c   ) ; 
mA[8215] = 0.0f; 
mA[8216] = 0.0f; 
mA[8217] = ( (  -1.0f  * v_v24_tca_fw   )  +(  -1.0f  * v_v25_tca_bw_b   )  +(  -1.0f  * v_v25_tca_bw_a   )   ) ; 
mA[8218] = 0.0f; 
mA[8219] = 0.0f; 
mA[8220] = 0.0f; 
mA[8221] = 0.0f; 
mA[8222] = 0.0f; 
mA[8223] = 0.0f; 
mA[8224] = 0.0f; 
mA[8225] = 0.0f; 
mA[8226] = 0.0f; 
mA[8227] = 0.0f; 
mA[8228] = 0.0f; 
mA[8229] = 0.0f; 
mA[8230] = 0.0f; 
mA[8231] = 0.0f; 
mA[8232] = 0.0f; 
mA[8233] = 0.0f; 
mA[8234] = 0.0f; 
mA[8235] = 0.0f; 
mA[8236] = 0.0f; 
mA[8237] = 0.0f; 
mA[8238] = 0.0f; 
mA[8239] = 0.0f; 
mA[8240] = 0.0f; 
mA[8241] = 0.0f; 
mA[8242] = 0.0f; 
mA[8243] = 0.0f; 
mA[8244] = 0.0f; 
mA[8245] = 0.0f; 
mA[8246] = 0.0f; 
mA[8247] = 0.0f; 
mA[8248] = 0.0f; 
mA[8249] = 0.0f; 
mA[8250] = 0.0f; 
mA[8251] = 0.0f; 
mA[8252] =  v_v16_ppp_bw ; 
mA[8253] = 0.0f; 
mA[8254] = 0.0f; 
mA[8255] = 0.0f; 
mA[8256] = 0.0f; 
mA[8257] = 0.0f; 
mA[8258] = 0.0f; 
mA[8259] = 0.0f; 
mA[8260] = 0.0f; 
mA[8261] = 0.0f; 
mA[8262] = 0.0f; 
mA[8263] = 0.0f; 
mA[8264] = 0.0f; 
mA[8265] = 0.0f; 
mA[8266] = 0.0f; 
mA[8267] = 0.0f; 
mA[8268] = 0.0f; 
mA[8269] = 0.0f; 
mA[8270] = 0.0f; 
mA[8271] = 0.0f; 
mA[8272] = 0.0f; 
mA[8273] = 0.0f; 
mA[8274] = 0.0f; 
mA[8275] = 0.0f; 
mA[8276] = 0.0f; 
mA[8277] = 0.0f; 
mA[8278] = 0.0f; 
mA[8279] = 0.0f; 
mA[8280] = 0.0f; 
mA[8281] = 0.0f; 
mA[8282] = 0.0f; 
mA[8283] = 0.0f; 
mA[8284] = 0.0f; 
mA[8285] = 0.0f; 
mA[8286] = 0.0f; 
mA[8287] = 0.0f; 
mA[8288] = 0.0f; 
mA[8289] = 0.0f; 
mA[8290] = 0.0f; 
mA[8291] = 0.0f; 
mA[8292] = 0.0f; 
mA[8293] = 0.0f; 
mA[8294] = 0.0f; 
mA[8295] = 0.0f; 
mA[8296] = 0.0f; 
mA[8297] = 0.0f; 
mA[8298] = 0.0f; 
mA[8299] = 0.0f; 
mA[8300] = 0.0f; 
mA[8301] = 0.0f; 
mA[8302] = 0.0f; 
mA[8303] =  v_v17_ppp_bw ; 
mA[8304] = 0.0f; 
mA[8305] = 0.0f; 
mA[8306] = 0.0f; 
mA[8307] = 0.0f; 
mA[8308] = 0.0f; 
mA[8309] = 0.0f; 
mA[8310] = 0.0f; 
mA[8311] = 0.0f; 
mA[8312] = 0.0f; 
mA[8313] = 0.0f; 
mA[8314] = 0.0f; 
mA[8315] = 0.0f; 
mA[8316] = ( (  -1.0f  * v_v17_ppp_fw   )  +(  -1.0f  * v_v16_ppp_fw   )   ) ; 
mA[8317] = 0.0f; 
mA[8318] = 0.0f; 
mA[8319] = 0.0f; 
mA[8320] = 0.0f; 
mA[8321] = 0.0f; 
mA[8322] = 0.0f; 
mA[8323] = 0.0f; 
mA[8324] = 0.0f; 
mA[8325] = 0.0f; 
mA[8326] = 0.0f; 
mA[8327] = 0.0f; 
mA[8328] = 0.0f; 
mA[8329] = 0.0f; 
mA[8330] = 0.0f; 
mA[8331] = 0.0f; 
mA[8332] = 0.0f; 
mA[8333] = 0.0f; 
mA[8334] = 0.0f; 
mA[8335] = 0.0f; 
mA[8336] = 0.0f; 
mA[8337] = 0.0f; 
mA[8338] = 0.0f; 
mA[8339] = 0.0f; 
mA[8340] = 0.0f; 
mA[8341] = 0.0f; 
mA[8342] = 0.0f; 
mA[8343] = 0.0f; 
mA[8344] = 0.0f; 
mA[8345] = 0.0f; 
mA[8346] = 0.0f; 
mA[8347] = 0.0f; 
mA[8348] = 0.0f; 
mA[8349] = 0.0f; 
mA[8350] = 0.0f; 
mA[8351] =  v_v16_ppp_bw ; 
mA[8352] = 0.0f; 
mA[8353] = 0.0f; 
mA[8354] = 0.0f; 
mA[8355] = 0.0f; 
mA[8356] = 0.0f; 
mA[8357] = 0.0f; 
mA[8358] = 0.0f; 
mA[8359] = 0.0f; 
mA[8360] = 0.0f; 
mA[8361] = 0.0f; 
mA[8362] = 0.0f; 
mA[8363] = 0.0f; 
mA[8364] = 0.0f; 
mA[8365] = 0.0f; 
mA[8366] = 0.0f; 
mA[8367] = 0.0f; 
mA[8368] = 0.0f; 
mA[8369] = 0.0f; 
mA[8370] = 0.0f; 
mA[8371] = 0.0f; 
mA[8372] = 0.0f; 
mA[8373] = 0.0f; 
mA[8374] = 0.0f; 
mA[8375] = 0.0f; 
mA[8376] = 0.0f; 
mA[8377] = 0.0f; 
mA[8378] = 0.0f; 
mA[8379] = 0.0f; 
mA[8380] = 0.0f; 
mA[8381] = 0.0f; 
mA[8382] = 0.0f; 
mA[8383] = 0.0f; 
mA[8384] = 0.0f; 
mA[8385] = 0.0f; 
mA[8386] = 0.0f; 
mA[8387] = 0.0f; 
mA[8388] = 0.0f; 
mA[8389] = 0.0f; 
mA[8390] = 0.0f; 
mA[8391] = 0.0f; 
mA[8392] = 0.0f; 
mA[8393] = 0.0f; 
mA[8394] = 0.0f; 
mA[8395] = 0.0f; 
mA[8396] = 0.0f; 
mA[8397] = 0.0f; 
mA[8398] = 0.0f; 
mA[8399] = 0.0f; 
mA[8400] = 0.0f; 
mA[8401] = 0.0f; 
mA[8402] =  v_v17_ppp_bw ; 
mA[8403] = 0.0f; 
mA[8404] = 0.0f; 
mA[8405] = 0.0f; 
mA[8406] = 0.0f; 
mA[8407] = 0.0f; 
mA[8408] = 0.0f; 
mA[8409] = 0.0f; 
mA[8410] = 0.0f; 
mA[8411] = 0.0f; 
mA[8412] = 0.0f; 
mA[8413] = 0.0f; 
mA[8414] = 0.0f; 
mA[8415] = ( (  -1.0f  * v_v16_ppp_fw   )  +(  -1.0f  * v_v17_ppp_fw   )   ) ; 
mA[8416] = 0.0f; 
mA[8417] = 0.0f; 
mA[8418] = 0.0f; 
mA[8419] = 0.0f; 
mA[8420] = 0.0f; 
mA[8421] = 0.0f; 
mA[8422] = 0.0f; 
mA[8423] = 0.0f; 
mA[8424] = 0.0f; 
mA[8425] = 0.0f; 
mA[8426] = 0.0f; 
mA[8427] = 0.0f; 
mA[8428] = 0.0f; 
mA[8429] = 0.0f; 
mA[8430] = 0.0f; 
mA[8431] = 0.0f; 
mA[8432] = 0.0f; 
mA[8433] = 0.0f; 
mA[8434] = 0.0f; 
mA[8435] = 0.0f; 
mA[8436] = 0.0f; 
mA[8437] = 0.0f; 
mA[8438] = 0.0f; 
mA[8439] = 0.0f; 
mA[8440] = 0.0f; 
mA[8441] = 0.0f; 
mA[8442] = 0.0f; 
mA[8443] = 0.0f; 
mA[8444] = 0.0f; 
mA[8445] = 0.0f; 
mA[8446] = 0.0f; 
mA[8447] = 0.0f; 
mA[8448] =  v_v14_ppp_bw ; 
mA[8449] = 0.0f; 
mA[8450] = 0.0f; 
mA[8451] = 0.0f; 
mA[8452] = 0.0f; 
mA[8453] = 0.0f; 
mA[8454] = 0.0f; 
mA[8455] = 0.0f; 
mA[8456] = 0.0f; 
mA[8457] = 0.0f; 
mA[8458] = 0.0f; 
mA[8459] = 0.0f; 
mA[8460] = 0.0f; 
mA[8461] = 0.0f; 
mA[8462] = 0.0f; 
mA[8463] = 0.0f; 
mA[8464] = 0.0f; 
mA[8465] = 0.0f; 
mA[8466] = 0.0f; 
mA[8467] = 0.0f; 
mA[8468] = 0.0f; 
mA[8469] = 0.0f; 
mA[8470] = 0.0f; 
mA[8471] = 0.0f; 
mA[8472] = 0.0f; 
mA[8473] = 0.0f; 
mA[8474] = 0.0f; 
mA[8475] = 0.0f; 
mA[8476] = 0.0f; 
mA[8477] = 0.0f; 
mA[8478] = 0.0f; 
mA[8479] = 0.0f; 
mA[8480] = 0.0f; 
mA[8481] = 0.0f; 
mA[8482] = 0.0f; 
mA[8483] = 0.0f; 
mA[8484] = 0.0f; 
mA[8485] = 0.0f; 
mA[8486] = 0.0f; 
mA[8487] = 0.0f; 
mA[8488] = 0.0f; 
mA[8489] = 0.0f; 
mA[8490] = 0.0f; 
mA[8491] = 0.0f; 
mA[8492] = 0.0f; 
mA[8493] = 0.0f; 
mA[8494] = 0.0f; 
mA[8495] = 0.0f; 
mA[8496] = 0.0f; 
mA[8497] = 0.0f; 
mA[8498] = 0.0f; 
mA[8499] =  v_v15_ppp_bw ; 
mA[8500] = 0.0f; 
mA[8501] = 0.0f; 
mA[8502] = 0.0f; 
mA[8503] = 0.0f; 
mA[8504] = 0.0f; 
mA[8505] = 0.0f; 
mA[8506] = 0.0f; 
mA[8507] = 0.0f; 
mA[8508] = 0.0f; 
mA[8509] = 0.0f; 
mA[8510] = 0.0f; 
mA[8511] = 0.0f; 
mA[8512] = 0.0f; 
mA[8513] = 0.0f; 
mA[8514] = ( (  -1.0f  * v_v14_ppp_fw   )  +(  -1.0f  * v_v13_ppp_fw   )  +(  -1.0f  * v_v15_ppp_fw   )   ) ; 
mA[8515] = 0.0f; 
mA[8516] = 0.0f; 
mA[8517] = 0.0f; 
mA[8518] = 0.0f; 
mA[8519] = 0.0f; 
mA[8520] =  v_v13_ppp_bw ; 
mA[8521] = 0.0f; 
mA[8522] = 0.0f; 
mA[8523] = 0.0f; 
mA[8524] = 0.0f; 
mA[8525] = 0.0f; 
mA[8526] = 0.0f; 
mA[8527] = 0.0f; 
mA[8528] = 0.0f; 
mA[8529] = 0.0f; 
mA[8530] = 0.0f; 
mA[8531] = 0.0f; 
mA[8532] = 0.0f; 
mA[8533] = 0.0f; 
mA[8534] = 0.0f; 
mA[8535] = 0.0f; 
mA[8536] = 0.0f; 
mA[8537] = 0.0f; 
mA[8538] = 0.0f; 
mA[8539] = 0.0f; 
mA[8540] = 0.0f; 
mA[8541] = 0.0f; 
mA[8542] = 0.0f; 
mA[8543] = 0.0f; 
mA[8544] = 0.0f; 
mA[8545] = 0.0f; 
mA[8546] = 0.0f; 
mA[8547] = 0.0f; 
mA[8548] = 0.0f; 
mA[8549] = 0.0f; 
mA[8550] = 0.0f; 
mA[8551] = 0.0f; 
mA[8552] = 0.0f; 
mA[8553] = 0.0f; 
mA[8554] = 0.0f; 
mA[8555] = 0.0f; 
mA[8556] = 0.0f; 
mA[8557] = 0.0f; 
mA[8558] = 0.0f; 
mA[8559] = 0.0f; 
mA[8560] = 0.0f; 
mA[8561] = 0.0f; 
mA[8562] = 0.0f; 
mA[8563] = 0.0f; 
mA[8564] = 0.0f; 
mA[8565] = 0.0f; 
mA[8566] = 0.0f; 
mA[8567] = 0.0f; 
mA[8568] = 0.0f; 
mA[8569] = 0.0f; 
mA[8570] = 0.0f; 
mA[8571] =  v_v46_aa_fw ; 
mA[8572] = 0.0f; 
mA[8573] = 0.0f; 
mA[8574] = 0.0f; 
mA[8575] = 0.0f; 
mA[8576] = 0.0f; 
mA[8577] = 0.0f; 
mA[8578] = 0.0f; 
mA[8579] = 0.0f; 
mA[8580] = 0.0f; 
mA[8581] = 0.0f; 
mA[8582] = 0.0f; 
mA[8583] = 0.0f; 
mA[8584] = 0.0f; 
mA[8585] = 0.0f; 
mA[8586] = 0.0f; 
mA[8587] = 0.0f; 
mA[8588] = 0.0f; 
mA[8589] = 0.0f; 
mA[8590] = 0.0f; 
mA[8591] = 0.0f; 
mA[8592] = 0.0f; 
mA[8593] = 0.0f; 
mA[8594] = 0.0f; 
mA[8595] = 0.0f; 
mA[8596] = 0.0f; 
mA[8597] = 0.0f; 
mA[8598] = 0.0f; 
mA[8599] = 0.0f; 
mA[8600] = 0.0f; 
mA[8601] = 0.0f; 
mA[8602] = 0.0f; 
mA[8603] = 0.0f; 
mA[8604] = 0.0f; 
mA[8605] = 0.0f; 
mA[8606] = 0.0f; 
mA[8607] = 0.0f; 
mA[8608] = 0.0f; 
mA[8609] = 0.0f; 
mA[8610] = 0.0f; 
mA[8611] = 0.0f; 
mA[8612] = 0.0f; 
mA[8613] = ( (  -1.0f  * v_v50_aa_fw   )   ) ; 
mA[8614] = 0.0f; 
mA[8615] = 0.0f; 
mA[8616] = 0.0f; 
mA[8617] = 0.0f; 
mA[8618] = 0.0f; 
mA[8619] = 0.0f; 
mA[8620] = 0.0f; 
mA[8621] = 0.0f; 
mA[8622] = 0.0f; 
mA[8623] = 0.0f; 
mA[8624] = 0.0f; 
mA[8625] = 0.0f; 
mA[8626] = 0.0f; 
mA[8627] = 0.0f; 
mA[8628] = 0.0f; 
mA[8629] =  v_v46_aa_fw ; 
mA[8630] = 0.0f; 
mA[8631] = 0.0f; 
mA[8632] = 0.0f; 
mA[8633] = 0.0f; 
mA[8634] = 0.0f; 
mA[8635] = 0.0f; 
mA[8636] = 0.0f; 
mA[8637] = 0.0f; 
mA[8638] = 0.0f; 
mA[8639] = 0.0f; 
mA[8640] = 0.0f; 
mA[8641] = 0.0f; 
mA[8642] = 0.0f; 
mA[8643] = 0.0f; 
mA[8644] = 0.0f; 
mA[8645] = 0.0f; 
mA[8646] = 0.0f; 
mA[8647] = 0.0f; 
mA[8648] = 0.0f; 
mA[8649] = 0.0f; 
mA[8650] = 0.0f; 
mA[8651] = 0.0f; 
mA[8652] = 0.0f; 
mA[8653] = 0.0f; 
mA[8654] = 0.0f; 
mA[8655] = 0.0f; 
mA[8656] = 0.0f; 
mA[8657] = 0.0f; 
mA[8658] = 0.0f; 
mA[8659] = 0.0f; 
mA[8660] = 0.0f; 
mA[8661] = 0.0f; 
mA[8662] = 0.0f; 
mA[8663] = 0.0f; 
mA[8664] = 0.0f; 
mA[8665] = 0.0f; 
mA[8666] = 0.0f; 
mA[8667] = 0.0f; 
mA[8668] = 0.0f; 
mA[8669] = 0.0f; 
mA[8670] = 0.0f; 
mA[8671] = 0.0f; 
mA[8672] = 0.0f; 
mA[8673] = 0.0f; 
mA[8674] = 0.0f; 
mA[8675] = 0.0f; 
mA[8676] = 0.0f; 
mA[8677] = 0.0f; 
mA[8678] = 0.0f; 
mA[8679] = 0.0f; 
mA[8680] = 0.0f; 
mA[8681] = 0.0f; 
mA[8682] = 0.0f; 
mA[8683] = 0.0f; 
mA[8684] = 0.0f; 
mA[8685] = 0.0f; 
mA[8686] = 0.0f; 
mA[8687] = 0.0f; 
mA[8688] = 0.0f; 
mA[8689] = 0.0f; 
mA[8690] = 0.0f; 
mA[8691] = 0.0f; 
mA[8692] = 0.0f; 
mA[8693] = 0.0f; 
mA[8694] = 0.0f; 
mA[8695] = 0.0f; 
mA[8696] = 0.0f; 
mA[8697] = 0.0f; 
mA[8698] = 0.0f; 
mA[8699] = 0.0f; 
mA[8700] = 0.0f; 
mA[8701] = 0.0f; 
mA[8702] = 0.0f; 
mA[8703] = 0.0f; 
mA[8704] = 0.0f; 
mA[8705] = 0.0f; 
mA[8706] = 0.0f; 
mA[8707] = 0.0f; 
mA[8708] = 0.0f; 
mA[8709] = 0.0f; 
mA[8710] = 0.0f; 
mA[8711] = 0.0f; 
mA[8712] = ( (  -1.0f  * v_v50_aa_fw   )   ) ; 
mA[8713] = 0.0f; 
mA[8714] = 0.0f; 
mA[8715] = 0.0f; 
mA[8716] = 0.0f; 
mA[8717] = 0.0f; 
mA[8718] = 0.0f; 
mA[8719] = 0.0f; 
mA[8720] = 0.0f; 
mA[8721] = 0.0f; 
mA[8722] = 0.0f; 
mA[8723] = 0.0f; 
mA[8724] = 0.0f; 
mA[8725] = 0.0f; 
mA[8726] = 0.0f; 
mA[8727] = 0.0f; 
mA[8728] = 0.0f; 
mA[8729] = 0.0f; 
mA[8730] = 0.0f; 
mA[8731] = 0.0f; 
mA[8732] = 0.0f; 
mA[8733] = 0.0f; 
mA[8734] = 0.0f; 
mA[8735] = 0.0f; 
mA[8736] = 0.0f; 
mA[8737] = 0.0f; 
mA[8738] = 0.0f; 
mA[8739] = 0.0f; 
mA[8740] = 0.0f; 
mA[8741] = 0.0f; 
mA[8742] = 0.0f; 
mA[8743] = 0.0f; 
mA[8744] = 0.0f; 
mA[8745] = 0.0f; 
mA[8746] = 0.0f; 
mA[8747] = 0.0f; 
mA[8748] = 0.0f; 
mA[8749] = 0.0f; 
mA[8750] = 0.0f; 
mA[8751] = 0.0f; 
mA[8752] = 0.0f; 
mA[8753] = 0.0f; 
mA[8754] = 0.0f; 
mA[8755] = 0.0f; 
mA[8756] = 0.0f; 
mA[8757] = 0.0f; 
mA[8758] = 0.0f; 
mA[8759] = 0.0f; 
mA[8760] = 0.0f; 
mA[8761] = 0.0f; 
mA[8762] = 0.0f; 
mA[8763] = 0.0f; 
mA[8764] = 0.0f; 
mA[8765] = 0.0f; 
mA[8766] = 0.0f; 
mA[8767] = 0.0f; 
mA[8768] = 0.0f; 
mA[8769] = 0.0f; 
mA[8770] = 0.0f; 
mA[8771] = 0.0f; 
mA[8772] = 0.0f; 
mA[8773] = 0.0f; 
mA[8774] = 0.0f; 
mA[8775] = 0.0f; 
mA[8776] = 0.0f; 
mA[8777] = 0.0f; 
mA[8778] = 0.0f; 
mA[8779] = 0.0f; 
mA[8780] = 0.0f; 
mA[8781] = 0.0f; 
mA[8782] = 0.0f; 
mA[8783] = 0.0f; 
mA[8784] = 0.0f; 
mA[8785] = 0.0f; 
mA[8786] = 0.0f; 
mA[8787] = 0.0f; 
mA[8788] = 0.0f; 
mA[8789] = 0.0f; 
mA[8790] = 0.0f; 
mA[8791] = 0.0f; 
mA[8792] = 0.0f; 
mA[8793] = 0.0f; 
mA[8794] = 0.0f; 
mA[8795] = 0.0f; 
mA[8796] = 0.0f; 
mA[8797] = 0.0f; 
mA[8798] = 0.0f; 
mA[8799] = 0.0f; 
mA[8800] = 0.0f; 
mA[8801] = 0.0f; 
mA[8802] = 0.0f; 
mA[8803] = 0.0f; 
mA[8804] = 0.0f; 
mA[8805] = 0.0f; 
mA[8806] = 0.0f; 
mA[8807] = 0.0f; 
mA[8808] = 0.0f; 
mA[8809] = 0.0f; 
mA[8810] = 0.0f; 
mA[8811] = ( (  -1.0f  * v_v56_aa_fw   )   ) ; 
mA[8812] = 0.0f; 
mA[8813] = 0.0f; 
mA[8814] = 0.0f; 
mA[8815] = 0.0f; 
mA[8816] = 0.0f; 
mA[8817] = 0.0f; 
mA[8818] = 0.0f; 
mA[8819] = 0.0f; 
mA[8820] = 0.0f; 
mA[8821] = 0.0f; 
mA[8822] = 0.0f; 
mA[8823] = 0.0f; 
mA[8824] = 0.0f; 
mA[8825] = 0.0f; 
mA[8826] = 0.0f; 
mA[8827] = 0.0f; 
mA[8828] = 0.0f; 
mA[8829] = 0.0f; 
mA[8830] = 0.0f; 
mA[8831] = 0.0f; 
mA[8832] = 0.0f; 
mA[8833] = 0.0f; 
mA[8834] = 0.0f; 
mA[8835] = 0.0f; 
mA[8836] = 0.0f; 
mA[8837] = 0.0f; 
mA[8838] = 0.0f; 
mA[8839] = 0.0f; 
mA[8840] = 0.0f; 
mA[8841] = 0.0f; 
mA[8842] = 0.0f; 
mA[8843] = 0.0f; 
mA[8844] = 0.0f; 
mA[8845] = 0.0f; 
mA[8846] = 0.0f; 
mA[8847] = 0.0f; 
mA[8848] = 0.0f; 
mA[8849] = 0.0f; 
mA[8850] = 0.0f; 
mA[8851] = 0.0f; 
mA[8852] = 0.0f; 
mA[8853] = 0.0f; 
mA[8854] = 0.0f; 
mA[8855] =  v_v06_glyc_bw ; 
mA[8856] = 0.0f; 
mA[8857] = 0.0f; 
mA[8858] = 0.0f; 
mA[8859] = 0.0f; 
mA[8860] = 0.0f; 
mA[8861] = 0.0f; 
mA[8862] = 0.0f; 
mA[8863] = 0.0f; 
mA[8864] = 0.0f; 
mA[8865] = 0.0f; 
mA[8866] = 0.0f; 
mA[8867] = 0.0f; 
mA[8868] = 0.0f; 
mA[8869] = 0.0f; 
mA[8870] = 0.0f; 
mA[8871] = 0.0f; 
mA[8872] = 0.0f; 
mA[8873] = 0.0f; 
mA[8874] = 0.0f; 
mA[8875] = 0.0f; 
mA[8876] = 0.0f; 
mA[8877] = 0.0f; 
mA[8878] = 0.0f; 
mA[8879] = 0.0f; 
mA[8880] = 0.0f; 
mA[8881] =  v_v07_glyc_fw ; 
mA[8882] = 0.0f; 
mA[8883] = 0.0f; 
mA[8884] = 0.0f; 
mA[8885] = 0.0f; 
mA[8886] = 0.0f; 
mA[8887] = 0.0f; 
mA[8888] = 0.0f; 
mA[8889] = 0.0f; 
mA[8890] = 0.0f; 
mA[8891] = 0.0f; 
mA[8892] = 0.0f; 
mA[8893] = 0.0f; 
mA[8894] = 0.0f; 
mA[8895] = 0.0f; 
mA[8896] =  v_v43_aa_fw ; 
mA[8897] = 0.0f; 
mA[8898] = 0.0f; 
mA[8899] = 0.0f; 
mA[8900] = 0.0f; 
mA[8901] = 0.0f; 
mA[8902] = 0.0f; 
mA[8903] = 0.0f; 
mA[8904] = 0.0f; 
mA[8905] = 0.0f; 
mA[8906] = 0.0f; 
mA[8907] = 0.0f; 
mA[8908] = 0.0f; 
mA[8909] = 0.0f; 
mA[8910] = ( (  -1.0f  * v_v06_glyc_fw   )  +(  -1.0f  * v_v07_glyc_bw   )   ) ; 
mA[8911] = 0.0f; 
mA[8912] = 0.0f; 
mA[8913] = 0.0f; 
mA[8914] = 0.0f; 
mA[8915] = 0.0f; 
mA[8916] = 0.0f; 
mA[8917] = 0.0f; 
mA[8918] = 0.0f; 
mA[8919] = 0.0f; 
mA[8920] = 0.0f; 
mA[8921] = 0.0f; 
mA[8922] = 0.0f; 
mA[8923] = 0.0f; 
mA[8924] = 0.0f; 
mA[8925] = 0.0f; 
mA[8926] = 0.0f; 
mA[8927] = 0.0f; 
mA[8928] = 0.0f; 
mA[8929] = 0.0f; 
mA[8930] = 0.0f; 
mA[8931] = 0.0f; 
mA[8932] = 0.0f; 
mA[8933] = 0.0f; 
mA[8934] = 0.0f; 
mA[8935] = 0.0f; 
mA[8936] = 0.0f; 
mA[8937] = 0.0f; 
mA[8938] = 0.0f; 
mA[8939] = 0.0f; 
mA[8940] = 0.0f; 
mA[8941] = 0.0f; 
mA[8942] = 0.0f; 
mA[8943] = 0.0f; 
mA[8944] = 0.0f; 
mA[8945] = 0.0f; 
mA[8946] = 0.0f; 
mA[8947] = 0.0f; 
mA[8948] = 0.0f; 
mA[8949] = 0.0f; 
mA[8950] = 0.0f; 
mA[8951] = 0.0f; 
mA[8952] = 0.0f; 
mA[8953] = 0.0f; 
mA[8954] =  v_v06_glyc_bw ; 
mA[8955] = 0.0f; 
mA[8956] = 0.0f; 
mA[8957] = 0.0f; 
mA[8958] = 0.0f; 
mA[8959] = 0.0f; 
mA[8960] = 0.0f; 
mA[8961] = 0.0f; 
mA[8962] = 0.0f; 
mA[8963] = 0.0f; 
mA[8964] = 0.0f; 
mA[8965] = 0.0f; 
mA[8966] = 0.0f; 
mA[8967] = 0.0f; 
mA[8968] = 0.0f; 
mA[8969] = 0.0f; 
mA[8970] = 0.0f; 
mA[8971] = 0.0f; 
mA[8972] = 0.0f; 
mA[8973] = 0.0f; 
mA[8974] = 0.0f; 
mA[8975] = 0.0f; 
mA[8976] = 0.0f; 
mA[8977] = 0.0f; 
mA[8978] = 0.0f; 
mA[8979] = 0.0f; 
mA[8980] =  v_v07_glyc_fw ; 
mA[8981] = 0.0f; 
mA[8982] = 0.0f; 
mA[8983] = 0.0f; 
mA[8984] = 0.0f; 
mA[8985] = 0.0f; 
mA[8986] = 0.0f; 
mA[8987] = 0.0f; 
mA[8988] = 0.0f; 
mA[8989] = 0.0f; 
mA[8990] = 0.0f; 
mA[8991] = 0.0f; 
mA[8992] = 0.0f; 
mA[8993] = 0.0f; 
mA[8994] = 0.0f; 
mA[8995] =  v_v43_aa_fw ; 
mA[8996] = 0.0f; 
mA[8997] = 0.0f; 
mA[8998] = 0.0f; 
mA[8999] = 0.0f; 
mA[9000] = 0.0f; 
mA[9001] = 0.0f; 
mA[9002] = 0.0f; 
mA[9003] = 0.0f; 
mA[9004] = 0.0f; 
mA[9005] = 0.0f; 
mA[9006] = 0.0f; 
mA[9007] = 0.0f; 
mA[9008] = 0.0f; 
mA[9009] = ( (  -1.0f  * v_v06_glyc_fw   )  +(  -1.0f  * v_v07_glyc_bw   )   ) ; 
mA[9010] = 0.0f; 
mA[9011] = 0.0f; 
mA[9012] = 0.0f; 
mA[9013] = 0.0f; 
mA[9014] = 0.0f; 
mA[9015] = 0.0f; 
mA[9016] = 0.0f; 
mA[9017] = 0.0f; 
mA[9018] = 0.0f; 
mA[9019] = 0.0f; 
mA[9020] = 0.0f; 
mA[9021] = 0.0f; 
mA[9022] = 0.0f; 
mA[9023] = 0.0f; 
mA[9024] = 0.0f; 
mA[9025] = 0.0f; 
mA[9026] = 0.0f; 
mA[9027] = 0.0f; 
mA[9028] = 0.0f; 
mA[9029] = 0.0f; 
mA[9030] = 0.0f; 
mA[9031] = 0.0f; 
mA[9032] = 0.0f; 
mA[9033] = 0.0f; 
mA[9034] = 0.0f; 
mA[9035] = 0.0f; 
mA[9036] = 0.0f; 
mA[9037] = 0.0f; 
mA[9038] = 0.0f; 
mA[9039] = 0.0f; 
mA[9040] = 0.0f; 
mA[9041] = 0.0f; 
mA[9042] = 0.0f; 
mA[9043] = 0.0f; 
mA[9044] = 0.0f; 
mA[9045] = 0.0f; 
mA[9046] = 0.0f; 
mA[9047] = 0.0f; 
mA[9048] = 0.0f; 
mA[9049] = 0.0f; 
mA[9050] = 0.0f; 
mA[9051] = 0.0f; 
mA[9052] = 0.0f; 
mA[9053] = 0.0f; 
mA[9054] = 0.0f; 
mA[9055] = 0.0f; 
mA[9056] = 0.0f; 
mA[9057] = 0.0f; 
mA[9058] = 0.0f; 
mA[9059] = 0.0f; 
mA[9060] = 0.0f; 
mA[9061] = 0.0f; 
mA[9062] = 0.0f; 
mA[9063] = 0.0f; 
mA[9064] = 0.0f; 
mA[9065] = 0.0f; 
mA[9066] = 0.0f; 
mA[9067] = 0.0f; 
mA[9068] = 0.0f; 
mA[9069] = 0.0f; 
mA[9070] = 0.0f; 
mA[9071] = 0.0f; 
mA[9072] = 0.0f; 
mA[9073] = 0.0f; 
mA[9074] = 0.0f; 
mA[9075] = 0.0f; 
mA[9076] = 0.0f; 
mA[9077] = 0.0f; 
mA[9078] = 0.0f; 
mA[9079] = 0.0f; 
mA[9080] = 0.0f; 
mA[9081] = 0.0f; 
mA[9082] = 0.0f; 
mA[9083] = 0.0f; 
mA[9084] =  v_v11_ppp_bw ; 
mA[9085] = 0.0f; 
mA[9086] = 0.0f; 
mA[9087] = 0.0f; 
mA[9088] = 0.0f; 
mA[9089] = 0.0f; 
mA[9090] = 0.0f; 
mA[9091] = 0.0f; 
mA[9092] = 0.0f; 
mA[9093] = 0.0f; 
mA[9094] = 0.0f; 
mA[9095] = 0.0f; 
mA[9096] = 0.0f; 
mA[9097] = 0.0f; 
mA[9098] = 0.0f; 
mA[9099] = 0.0f; 
mA[9100] = 0.0f; 
mA[9101] = 0.0f; 
mA[9102] =  v_v13_ppp_fw ; 
mA[9103] = 0.0f; 
mA[9104] = 0.0f; 
mA[9105] = 0.0f; 
mA[9106] = 0.0f; 
mA[9107] = 0.0f; 
mA[9108] = ( (  -1.0f  * v_v13_ppp_bw   )  +(  -1.0f  * v_v11_ppp_fw   )   ) ; 
mA[9109] = 0.0f; 
mA[9110] = 0.0f; 
mA[9111] = 0.0f; 
mA[9112] = 0.0f; 
mA[9113] = 0.0f; 
mA[9114] = 0.0f; 
mA[9115] = 0.0f; 
mA[9116] = 0.0f; 
mA[9117] = 0.0f; 
mA[9118] = 0.0f; 
mA[9119] = 0.0f; 
mA[9120] = 0.0f; 
mA[9121] = 0.0f; 
mA[9122] = 0.0f; 
mA[9123] = 0.0f; 
mA[9124] = 0.0f; 
mA[9125] = 0.0f; 
mA[9126] = 0.0f; 
mA[9127] = 0.0f; 
mA[9128] = 0.0f; 
mA[9129] = 0.0f; 
mA[9130] = 0.0f; 
mA[9131] = 0.0f; 
mA[9132] = 0.0f; 
mA[9133] = 0.0f; 
mA[9134] = 0.0f; 
mA[9135] = 0.0f; 
mA[9136] = 0.0f; 
mA[9137] = 0.0f; 
mA[9138] = 0.0f; 
mA[9139] = 0.0f; 
mA[9140] = 0.0f; 
mA[9141] = 0.0f; 
mA[9142] = 0.0f; 
mA[9143] = 0.0f; 
mA[9144] = 0.0f; 
mA[9145] = 0.0f; 
mA[9146] = 0.0f; 
mA[9147] = 0.0f; 
mA[9148] = 0.0f; 
mA[9149] =  v_v13_ppp_fw ; 
mA[9150] = 0.0f; 
mA[9151] = 0.0f; 
mA[9152] = 0.0f; 
mA[9153] = 0.0f; 
mA[9154] = 0.0f; 
mA[9155] = 0.0f; 
mA[9156] = 0.0f; 
mA[9157] = 0.0f; 
mA[9158] = 0.0f; 
mA[9159] = 0.0f; 
mA[9160] = 0.0f; 
mA[9161] = 0.0f; 
mA[9162] = 0.0f; 
mA[9163] = 0.0f; 
mA[9164] = 0.0f; 
mA[9165] = 0.0f; 
mA[9166] = 0.0f; 
mA[9167] = 0.0f; 
mA[9168] = 0.0f; 
mA[9169] = 0.0f; 
mA[9170] = 0.0f; 
mA[9171] = 0.0f; 
mA[9172] = 0.0f; 
mA[9173] = 0.0f; 
mA[9174] = 0.0f; 
mA[9175] = 0.0f; 
mA[9176] = 0.0f; 
mA[9177] = 0.0f; 
mA[9178] = 0.0f; 
mA[9179] = 0.0f; 
mA[9180] = 0.0f; 
mA[9181] = 0.0f; 
mA[9182] = 0.0f; 
mA[9183] =  v_v11_ppp_bw ; 
mA[9184] = 0.0f; 
mA[9185] = 0.0f; 
mA[9186] = 0.0f; 
mA[9187] = 0.0f; 
mA[9188] = 0.0f; 
mA[9189] = 0.0f; 
mA[9190] = 0.0f; 
mA[9191] = 0.0f; 
mA[9192] = 0.0f; 
mA[9193] = 0.0f; 
mA[9194] = 0.0f; 
mA[9195] = 0.0f; 
mA[9196] = 0.0f; 
mA[9197] = 0.0f; 
mA[9198] = 0.0f; 
mA[9199] = 0.0f; 
mA[9200] = 0.0f; 
mA[9201] = 0.0f; 
mA[9202] = 0.0f; 
mA[9203] = 0.0f; 
mA[9204] = 0.0f; 
mA[9205] = 0.0f; 
mA[9206] = 0.0f; 
mA[9207] = ( (  -1.0f  * v_v13_ppp_bw   )  +(  -1.0f  * v_v11_ppp_fw   )   ) ; 
mA[9208] = 0.0f; 
mA[9209] = 0.0f; 
mA[9210] = 0.0f; 
mA[9211] = 0.0f; 
mA[9212] = 0.0f; 
mA[9213] = 0.0f; 
mA[9214] = 0.0f; 
mA[9215] = 0.0f; 
mA[9216] = 0.0f; 
mA[9217] = 0.0f; 
mA[9218] = 0.0f; 
mA[9219] = 0.0f; 
mA[9220] = 0.0f; 
mA[9221] = 0.0f; 
mA[9222] = 0.0f; 
mA[9223] = 0.0f; 
mA[9224] = 0.0f; 
mA[9225] = 0.0f; 
mA[9226] = 0.0f; 
mA[9227] = 0.0f; 
mA[9228] = 0.0f; 
mA[9229] = 0.0f; 
mA[9230] = 0.0f; 
mA[9231] = 0.0f; 
mA[9232] = 0.0f; 
mA[9233] = 0.0f; 
mA[9234] = 0.0f; 
mA[9235] = 0.0f; 
mA[9236] = 0.0f; 
mA[9237] = 0.0f; 
mA[9238] = 0.0f; 
mA[9239] = 0.0f; 
mA[9240] = 0.0f; 
mA[9241] = 0.0f; 
mA[9242] = 0.0f; 
mA[9243] = 0.0f; 
mA[9244] = 0.0f; 
mA[9245] = 0.0f; 
mA[9246] = 0.0f; 
mA[9247] = 0.0f; 
mA[9248] =  v_v13_ppp_fw ; 
mA[9249] = 0.0f; 
mA[9250] = 0.0f; 
mA[9251] = 0.0f; 
mA[9252] = 0.0f; 
mA[9253] = 0.0f; 
mA[9254] = 0.0f; 
mA[9255] = 0.0f; 
mA[9256] = 0.0f; 
mA[9257] = 0.0f; 
mA[9258] = 0.0f; 
mA[9259] = 0.0f; 
mA[9260] = 0.0f; 
mA[9261] = 0.0f; 
mA[9262] = 0.0f; 
mA[9263] = 0.0f; 
mA[9264] = 0.0f; 
mA[9265] = 0.0f; 
mA[9266] = 0.0f; 
mA[9267] = 0.0f; 
mA[9268] = 0.0f; 
mA[9269] = 0.0f; 
mA[9270] = 0.0f; 
mA[9271] = 0.0f; 
mA[9272] = 0.0f; 
mA[9273] = 0.0f; 
mA[9274] = 0.0f; 
mA[9275] = 0.0f; 
mA[9276] = 0.0f; 
mA[9277] = 0.0f; 
mA[9278] = 0.0f; 
mA[9279] = 0.0f; 
mA[9280] = 0.0f; 
mA[9281] = 0.0f; 
mA[9282] =  v_v11_ppp_bw ; 
mA[9283] = 0.0f; 
mA[9284] = 0.0f; 
mA[9285] = 0.0f; 
mA[9286] = 0.0f; 
mA[9287] = 0.0f; 
mA[9288] = 0.0f; 
mA[9289] = 0.0f; 
mA[9290] = 0.0f; 
mA[9291] = 0.0f; 
mA[9292] = 0.0f; 
mA[9293] = 0.0f; 
mA[9294] = 0.0f; 
mA[9295] = 0.0f; 
mA[9296] = 0.0f; 
mA[9297] = 0.0f; 
mA[9298] = 0.0f; 
mA[9299] = 0.0f; 
mA[9300] = 0.0f; 
mA[9301] = 0.0f; 
mA[9302] = 0.0f; 
mA[9303] = 0.0f; 
mA[9304] = 0.0f; 
mA[9305] = 0.0f; 
mA[9306] = ( (  -1.0f  * v_v11_ppp_fw   )  +(  -1.0f  * v_v13_ppp_bw   )   ) ; 
mA[9307] = 0.0f; 
mA[9308] = 0.0f; 
mA[9309] = 0.0f; 
mA[9310] = 0.0f; 
mA[9311] = 0.0f; 
mA[9312] = 0.0f; 
mA[9313] = 0.0f; 
mA[9314] = 0.0f; 
mA[9315] = 0.0f; 
mA[9316] = 0.0f; 
mA[9317] = 0.0f; 
mA[9318] = 0.0f; 
mA[9319] = 0.0f; 
mA[9320] = 0.0f; 
mA[9321] = 0.0f; 
mA[9322] = 0.0f; 
mA[9323] = 0.0f; 
mA[9324] = 0.0f; 
mA[9325] = 0.0f; 
mA[9326] = 0.0f; 
mA[9327] = 0.0f; 
mA[9328] = 0.0f; 
mA[9329] = 0.0f; 
mA[9330] = 0.0f; 
mA[9331] = 0.0f; 
mA[9332] = 0.0f; 
mA[9333] = 0.0f; 
mA[9334] = 0.0f; 
mA[9335] = 0.0f; 
mA[9336] = 0.0f; 
mA[9337] = 0.0f; 
mA[9338] = 0.0f; 
mA[9339] = 0.0f; 
mA[9340] = 0.0f; 
mA[9341] = 0.0f; 
mA[9342] = 0.0f; 
mA[9343] = 0.0f; 
mA[9344] = 0.0f; 
mA[9345] = 0.0f; 
mA[9346] = 0.0f; 
mA[9347] = 0.0f; 
mA[9348] = 0.0f; 
mA[9349] = 0.0f; 
mA[9350] = 0.0f; 
mA[9351] = 0.0f; 
mA[9352] = 0.0f; 
mA[9353] = 0.0f; 
mA[9354] = 0.0f; 
mA[9355] = 0.0f; 
mA[9356] = 0.0f; 
mA[9357] = 0.0f; 
mA[9358] = 0.0f; 
mA[9359] = 0.0f; 
mA[9360] = 0.0f; 
mA[9361] = 0.0f; 
mA[9362] =  v_v18_ed_fw ; 
mA[9363] = 0.0f; 
mA[9364] = 0.0f; 
mA[9365] = 0.0f; 
mA[9366] = 0.0f; 
mA[9367] = 0.0f; 
mA[9368] = 0.0f; 
mA[9369] = 0.0f; 
mA[9370] = 0.0f; 
mA[9371] = 0.0f; 
mA[9372] = 0.0f; 
mA[9373] = 0.0f; 
mA[9374] = 0.0f; 
mA[9375] = 0.0f; 
mA[9376] = 0.0f; 
mA[9377] = 0.0f; 
mA[9378] =  v_v10_ppp_fw ; 
mA[9379] = 0.0f; 
mA[9380] = 0.0f; 
mA[9381] = 0.0f; 
mA[9382] = 0.0f; 
mA[9383] = 0.0f; 
mA[9384] = 0.0f; 
mA[9385] = 0.0f; 
mA[9386] = 0.0f; 
mA[9387] = 0.0f; 
mA[9388] = 0.0f; 
mA[9389] = 0.0f; 
mA[9390] = 0.0f; 
mA[9391] = 0.0f; 
mA[9392] = 0.0f; 
mA[9393] = 0.0f; 
mA[9394] = 0.0f; 
mA[9395] = 0.0f; 
mA[9396] = 0.0f; 
mA[9397] = 0.0f; 
mA[9398] = 0.0f; 
mA[9399] = 0.0f; 
mA[9400] = 0.0f; 
mA[9401] = 0.0f; 
mA[9402] = 0.0f; 
mA[9403] = 0.0f; 
mA[9404] = 0.0f; 
mA[9405] = ( (  -1.0f  * v_v09_ppp_fw   )   ) ; 
mA[9406] = 0.0f; 
mA[9407] = 0.0f; 
mA[9408] = 0.0f; 
mA[9409] = 0.0f; 
mA[9410] = 0.0f; 
mA[9411] = 0.0f; 
mA[9412] = 0.0f; 
mA[9413] = 0.0f; 
mA[9414] = 0.0f; 
mA[9415] = 0.0f; 
mA[9416] = 0.0f; 
mA[9417] = 0.0f; 
mA[9418] = 0.0f; 
mA[9419] = 0.0f; 
mA[9420] = 0.0f; 
mA[9421] = 0.0f; 
mA[9422] = 0.0f; 
mA[9423] = 0.0f; 
mA[9424] = 0.0f; 
mA[9425] = 0.0f; 
mA[9426] = 0.0f; 
mA[9427] = 0.0f; 
mA[9428] = 0.0f; 
mA[9429] = 0.0f; 
mA[9430] = 0.0f; 
mA[9431] = 0.0f; 
mA[9432] = 0.0f; 
mA[9433] = 0.0f; 
mA[9434] = 0.0f; 
mA[9435] = 0.0f; 
mA[9436] = 0.0f; 
mA[9437] = 0.0f; 
mA[9438] = 0.0f; 
mA[9439] = 0.0f; 
mA[9440] = 0.0f; 
mA[9441] = 0.0f; 
mA[9442] = 0.0f; 
mA[9443] = 0.0f; 
mA[9444] = 0.0f; 
mA[9445] = 0.0f; 
mA[9446] = 0.0f; 
mA[9447] = 0.0f; 
mA[9448] = 0.0f; 
mA[9449] = 0.0f; 
mA[9450] = 0.0f; 
mA[9451] = 0.0f; 
mA[9452] = 0.0f; 
mA[9453] = 0.0f; 
mA[9454] = 0.0f; 
mA[9455] = 0.0f; 
mA[9456] = 0.0f; 
mA[9457] = 0.0f; 
mA[9458] = 0.0f; 
mA[9459] = 0.0f; 
mA[9460] = 0.0f; 
mA[9461] =  v_v18_ed_fw ; 
mA[9462] = 0.0f; 
mA[9463] = 0.0f; 
mA[9464] = 0.0f; 
mA[9465] = 0.0f; 
mA[9466] = 0.0f; 
mA[9467] = 0.0f; 
mA[9468] = 0.0f; 
mA[9469] = 0.0f; 
mA[9470] = 0.0f; 
mA[9471] = 0.0f; 
mA[9472] = 0.0f; 
mA[9473] = 0.0f; 
mA[9474] = 0.0f; 
mA[9475] = 0.0f; 
mA[9476] = 0.0f; 
mA[9477] =  v_v10_ppp_fw ; 
mA[9478] = 0.0f; 
mA[9479] = 0.0f; 
mA[9480] = 0.0f; 
mA[9481] = 0.0f; 
mA[9482] = 0.0f; 
mA[9483] = 0.0f; 
mA[9484] = 0.0f; 
mA[9485] = 0.0f; 
mA[9486] = 0.0f; 
mA[9487] = 0.0f; 
mA[9488] = 0.0f; 
mA[9489] = 0.0f; 
mA[9490] = 0.0f; 
mA[9491] = 0.0f; 
mA[9492] = 0.0f; 
mA[9493] = 0.0f; 
mA[9494] = 0.0f; 
mA[9495] = 0.0f; 
mA[9496] = 0.0f; 
mA[9497] = 0.0f; 
mA[9498] = 0.0f; 
mA[9499] = 0.0f; 
mA[9500] = 0.0f; 
mA[9501] = 0.0f; 
mA[9502] = 0.0f; 
mA[9503] = 0.0f; 
mA[9504] = ( (  -1.0f  * v_v09_ppp_fw   )   ) ; 
mA[9505] = 0.0f; 
mA[9506] = 0.0f; 
mA[9507] = 0.0f; 
mA[9508] = 0.0f; 
mA[9509] = 0.0f; 
mA[9510] = 0.0f; 
mA[9511] = 0.0f; 
mA[9512] = 0.0f; 
mA[9513] = 0.0f; 
mA[9514] = 0.0f; 
mA[9515] = 0.0f; 
mA[9516] = 0.0f; 
mA[9517] = 0.0f; 
mA[9518] = 0.0f; 
mA[9519] = 0.0f; 
mA[9520] = 0.0f; 
mA[9521] = 0.0f; 
mA[9522] = 0.0f; 
mA[9523] = 0.0f; 
mA[9524] = 0.0f; 
mA[9525] = 0.0f; 
mA[9526] = 0.0f; 
mA[9527] = 0.0f; 
mA[9528] = 0.0f; 
mA[9529] = 0.0f; 
mA[9530] = 0.0f; 
mA[9531] = 0.0f; 
mA[9532] = 0.0f; 
mA[9533] = 0.0f; 
mA[9534] = 0.0f; 
mA[9535] = 0.0f; 
mA[9536] = 0.0f; 
mA[9537] = 0.0f; 
mA[9538] = 0.0f; 
mA[9539] = 0.0f; 
mA[9540] = 0.0f; 
mA[9541] = 0.0f; 
mA[9542] = 0.0f; 
mA[9543] = 0.0f; 
mA[9544] = 0.0f; 
mA[9545] = 0.0f; 
mA[9546] = 0.0f; 
mA[9547] = 0.0f; 
mA[9548] = 0.0f; 
mA[9549] = 0.0f; 
mA[9550] = 0.0f; 
mA[9551] = 0.0f; 
mA[9552] = 0.0f; 
mA[9553] = 0.0f; 
mA[9554] = 0.0f; 
mA[9555] = 0.0f; 
mA[9556] = 0.0f; 
mA[9557] = 0.0f; 
mA[9558] = 0.0f; 
mA[9559] = 0.0f; 
mA[9560] =  v_v18_ed_fw ; 
mA[9561] = 0.0f; 
mA[9562] = 0.0f; 
mA[9563] = 0.0f; 
mA[9564] = 0.0f; 
mA[9565] = 0.0f; 
mA[9566] = 0.0f; 
mA[9567] = 0.0f; 
mA[9568] = 0.0f; 
mA[9569] = 0.0f; 
mA[9570] = 0.0f; 
mA[9571] = 0.0f; 
mA[9572] = 0.0f; 
mA[9573] = 0.0f; 
mA[9574] = 0.0f; 
mA[9575] = 0.0f; 
mA[9576] =  v_v10_ppp_fw ; 
mA[9577] = 0.0f; 
mA[9578] = 0.0f; 
mA[9579] = 0.0f; 
mA[9580] = 0.0f; 
mA[9581] = 0.0f; 
mA[9582] = 0.0f; 
mA[9583] = 0.0f; 
mA[9584] = 0.0f; 
mA[9585] = 0.0f; 
mA[9586] = 0.0f; 
mA[9587] = 0.0f; 
mA[9588] = 0.0f; 
mA[9589] = 0.0f; 
mA[9590] = 0.0f; 
mA[9591] = 0.0f; 
mA[9592] = 0.0f; 
mA[9593] = 0.0f; 
mA[9594] = 0.0f; 
mA[9595] = 0.0f; 
mA[9596] = 0.0f; 
mA[9597] = 0.0f; 
mA[9598] = 0.0f; 
mA[9599] = 0.0f; 
mA[9600] = 0.0f; 
mA[9601] = 0.0f; 
mA[9602] = 0.0f; 
mA[9603] = ( (  -1.0f  * v_v09_ppp_fw   )   ) ; 
}
//----Init B---------------------------------------------------------------------------
if(idx==1 && idy==0){
mB[0] = 0.0f; 
mB[1] = 0.0f; 
mB[2] = 0.0f; 
mB[3] = 0.0f; 
mB[4] = 0.0f; 
mB[5] = 0.0f; 
mB[6] = 0.0f; 
mB[7] = 0.0f; 
mB[8] = 0.0f; 
mB[9] = 0.0f; 
mB[10] = 0.0f; 
mB[11] = 0.0f; 
mB[12] = 0.0f; 
mB[13] = 0.0f; 
mB[14] = 0.0f; 
mB[15] = 0.0f; 
mB[16] = 0.0f; 
mB[17] = 0.0f; 
mB[18] = 0.0f; 
mB[19] = 0.0f; 
mB[20] = 0.0f; 
mB[21] = 0.0f; 
mB[22] = 0.0f; 
mB[23] = 0.0f; 
mB[24] = 0.0f; 
mB[25] = 0.0f; 
mB[26] = 0.0f; 
mB[27] = 0.0f; 
mB[28] = 0.0f; 
mB[29] = 0.0f; 
mB[30] = 0.0f; 
mB[31] = 0.0f; 
mB[32] = 0.0f; 
mB[33] = 0.0f; 
mB[34] = 0.0f; 
mB[35] = 0.0f; 
mB[36] = 0.0f; 
mB[37] = 0.0f; 
mB[38] = 0.0f; 
mB[39] = 0.0f; 
mB[40] = 0.0f; 
mB[41] = 0.0f; 
mB[42] = 0.0f; 
mB[43] = 0.0f; 
mB[44] = 0.0f; 
mB[45] = 0.0f; 
mB[46] = 0.0f; 
mB[47] = 0.0f; 
mB[48] = 0.0f; 
mB[49] = 0.0f; 
mB[50] = 0.0f; 
mB[51] = 0.0f; 
mB[52] = 0.0f; 
mB[53] = 0.0f; 
mB[54] = 0.0f; 
mB[55] = 0.0f; 
mB[56] = 0.0f; 
mB[57] = 0.0f; 
mB[58] = 0.0f; 
mB[59] = 0.0f; 
mB[60] = 0.0f; 
mB[61] = 0.0f; 
mB[62] = 0.0f; 
mB[63] = 0.0f; 
mB[64] = 0.0f; 
mB[65] = 0.0f; 
mB[66] = 0.0f; 
mB[67] = 0.0f; 
mB[68] = 0.0f; 
mB[69] = 0.0f; 
mB[70] = 0.0f; 
mB[71] = 0.0f; 
mB[72] = (  -1.0f  * v_v15_ppp_bw   ) ; 
mB[73] = 0.0f; 
mB[74] = 0.0f; 
mB[75] = 0.0f; 
mB[76] = 0.0f; 
mB[77] = 0.0f; 
mB[78] = 0.0f; 
mB[79] = 0.0f; 
mB[80] = 0.0f; 
mB[81] = 0.0f; 
mB[82] = 0.0f; 
mB[83] = 0.0f; 
mB[84] = 0.0f; 
mB[85] = 0.0f; 
mB[86] = 0.0f; 
mB[87] = 0.0f; 
mB[88] = 0.0f; 
mB[89] = 0.0f; 
mB[90] = 0.0f; 
mB[91] = 0.0f; 
mB[92] = 0.0f; 
mB[93] = 0.0f; 
mB[94] = 0.0f; 
mB[95] = 0.0f; 
mB[96] = 0.0f; 
mB[97] = 0.0f; 
mB[98] = 0.0f; 
mB[99] = 0.0f; 
mB[100] = 0.0f; 
mB[101] = 0.0f; 
mB[102] = 0.0f; 
mB[103] = 0.0f; 
mB[104] = 0.0f; 
mB[105] = 0.0f; 
mB[106] = 0.0f; 
mB[107] = 0.0f; 
mB[108] = 0.0f; 
mB[109] = 0.0f; 
mB[110] = 0.0f; 
mB[111] = 0.0f; 
mB[112] = 0.0f; 
mB[113] = 0.0f; 
mB[114] = 0.0f; 
mB[115] = 0.0f; 
mB[116] = 0.0f; 
mB[117] = 0.0f; 
mB[118] = 0.0f; 
mB[119] = 0.0f; 
mB[120] = 0.0f; 
mB[121] = 0.0f; 
mB[122] = 0.0f; 
mB[123] = 0.0f; 
mB[124] = 0.0f; 
mB[125] = 0.0f; 
mB[126] = 0.0f; 
mB[127] = 0.0f; 
mB[128] = 0.0f; 
mB[129] = 0.0f; 
mB[130] = (  -1.0f  * v_v01_SX_Gluc_In_b   ) ; 
mB[131] = 0.0f; 
mB[132] = 0.0f; 
mB[133] = 0.0f; 
mB[134] = 0.0f; 
mB[135] = 0.0f; 
mB[136] = 0.0f; 
mB[137] = 0.0f; 
mB[138] = 0.0f; 
mB[139] = 0.0f; 
mB[140] = 0.0f; 
mB[141] = 0.0f; 
mB[142] = 0.0f; 
mB[143] = 0.0f; 
mB[144] = 0.0f; 
mB[145] = 0.0f; 
mB[146] = 0.0f; 
mB[147] = 0.0f; 
mB[148] = 0.0f; 
mB[149] = 0.0f; 
mB[150] = 0.0f; 
mB[151] = 0.0f; 
mB[152] = 0.0f; 
mB[153] = 0.0f; 
mB[154] = 0.0f; 
mB[155] = 0.0f; 
mB[156] = 0.0f; 
mB[157] = 0.0f; 
mB[158] = 0.0f; 
mB[159] = 0.0f; 
mB[160] = 0.0f; 
mB[161] = 0.0f; 
mB[162] = 0.0f; 
mB[163] = 0.0f; 
mB[164] = 0.0f; 
mB[165] = 0.0f; 
mB[166] = 0.0f; 
mB[167] = 0.0f; 
mB[168] = 0.0f; 
mB[169] = 0.0f; 
mB[170] = 0.0f; 
mB[171] = 0.0f; 
mB[172] = 0.0f; 
mB[173] = 0.0f; 
mB[174] = 0.0f; 
mB[175] = 0.0f; 
mB[176] = 0.0f; 
mB[177] = 0.0f; 
mB[178] = 0.0f; 
mB[179] = 0.0f; 
mB[180] = 0.0f; 
mB[181] = 0.0f; 
mB[182] = 0.0f; 
mB[183] = 0.0f; 
mB[184] = 0.0f; 
mB[185] = 0.0f; 
mB[186] = 0.0f; 
mB[187] = 0.0f; 
mB[188] = 0.0f; 
mB[189] = 0.0f; 
mB[190] = 0.0f; 
mB[191] = 0.0f; 
mB[192] = 0.0f; 
mB[193] = 0.0f; 
mB[194] = 0.0f; 
mB[195] = 0.0f; 
mB[196] = 0.0f; 
mB[197] = 0.0f; 
mB[198] = 0.0f; 
mB[199] = 0.0f; 
mB[200] = 0.0f; 
mB[201] = 0.0f; 
mB[202] = 0.0f; 
mB[203] = 0.0f; 
mB[204] = 0.0f; 
mB[205] = 0.0f; 
mB[206] = 0.0f; 
mB[207] = 0.0f; 
mB[208] = 0.0f; 
mB[209] = 0.0f; 
mB[210] = 0.0f; 
mB[211] = 0.0f; 
mB[212] = 0.0f; 
mB[213] = 0.0f; 
mB[214] = 0.0f; 
mB[215] = 0.0f; 
mB[216] = 0.0f; 
mB[217] = 0.0f; 
mB[218] = 0.0f; 
mB[219] = 0.0f; 
mB[220] = 0.0f; 
mB[221] = 0.0f; 
mB[222] = 0.0f; 
mB[223] = 0.0f; 
mB[224] = 0.0f; 
mB[225] = 0.0f; 
mB[226] = 0.0f; 
mB[227] = 0.0f; 
mB[228] = 0.0f; 
mB[229] = 0.0f; 
mB[230] = 0.0f; 
mB[231] = 0.0f; 
mB[232] = 0.0f; 
mB[233] = 0.0f; 
mB[234] = 0.0f; 
mB[235] = 0.0f; 
mB[236] = 0.0f; 
mB[237] = 0.0f; 
mB[238] = 0.0f; 
mB[239] = 0.0f; 
mB[240] = 0.0f; 
mB[241] = 0.0f; 
mB[242] = 0.0f; 
mB[243] = 0.0f; 
mB[244] = 0.0f; 
mB[245] = 0.0f; 
mB[246] = 0.0f; 
mB[247] = 0.0f; 
mB[248] = 0.0f; 
mB[249] = 0.0f; 
mB[250] = 0.0f; 
mB[251] = 0.0f; 
mB[252] = (  -1.0f  * v_v30_glyox_fw   ) ; 
mB[253] = 0.0f; 
mB[254] = 0.0f; 
mB[255] = 0.0f; 
mB[256] = 0.0f; 
mB[257] = 0.0f; 
mB[258] = 0.0f; 
mB[259] = 0.0f; 
mB[260] = 0.0f; 
mB[261] = 0.0f; 
mB[262] = 0.0f; 
mB[263] = 0.0f; 
mB[264] = 0.0f; 
mB[265] = 0.0f; 
mB[266] = 0.0f; 
mB[267] = 0.0f; 
mB[268] = 0.0f; 
mB[269] = 0.0f; 
mB[270] = 0.0f; 
mB[271] = 0.0f; 
mB[272] = 0.0f; 
mB[273] = 0.0f; 
mB[274] = 0.0f; 
mB[275] = 0.0f; 
mB[276] = 0.0f; 
mB[277] = 0.0f; 
mB[278] = 0.0f; 
mB[279] = 0.0f; 
mB[280] = 0.0f; 
mB[281] = 0.0f; 
mB[282] = 0.0f; 
mB[283] = 0.0f; 
mB[284] = 0.0f; 
mB[285] = 0.0f; 
mB[286] = 0.0f; 
mB[287] = 0.0f; 
mB[288] = 0.0f; 
mB[289] = 0.0f; 
mB[290] = 0.0f; 
mB[291] = 0.0f; 
mB[292] = 0.0f; 
mB[293] = 0.0f; 
mB[294] = 0.0f; 
mB[295] = 0.0f; 
mB[296] = 0.0f; 
mB[297] = 0.0f; 
mB[298] = 0.0f; 
mB[299] = 0.0f; 
mB[300] = 0.0f; 
mB[301] = 0.0f; 
mB[302] = 0.0f; 
mB[303] = 0.0f; 
mB[304] = 0.0f; 
mB[305] = 0.0f; 
mB[306] = 0.0f; 
mB[307] = 0.0f; 
mB[308] = 0.0f; 
mB[309] = 0.0f; 
mB[310] = 0.0f; 
mB[311] = 0.0f; 
mB[312] = 0.0f; 
mB[313] = 0.0f; 
mB[314] = 0.0f; 
mB[315] = 0.0f; 
mB[316] = 0.0f; 
mB[317] = 0.0f; 
mB[318] = 0.0f; 
mB[319] = 0.0f; 
mB[320] = 0.0f; 
mB[321] = 0.0f; 
mB[322] = 0.0f; 
mB[323] = 0.0f; 
mB[324] = 0.0f; 
mB[325] = 0.0f; 
mB[326] = 0.0f; 
mB[327] = 0.0f; 
mB[328] = 0.0f; 
mB[329] = 0.0f; 
mB[330] = 0.0f; 
mB[331] = 0.0f; 
mB[332] = 0.0f; 
mB[333] = 0.0f; 
mB[334] = 0.0f; 
mB[335] = 0.0f; 
mB[336] = 0.0f; 
mB[337] = 0.0f; 
mB[338] = 0.0f; 
mB[339] = 0.0f; 
mB[340] = 0.0f; 
mB[341] = 0.0f; 
mB[342] = 0.0f; 
mB[343] = 0.0f; 
mB[344] = (  -1.0f  * v_v23_tca_bw   ) ; 
mB[345] = 0.0f; 
mB[346] = 0.0f; 
mB[347] = 0.0f; 
mB[348] = 0.0f; 
mB[349] = 0.0f; 
mB[350] = 0.0f; 
mB[351] = 0.0f; 
mB[352] = 0.0f; 
mB[353] = 0.0f; 
mB[354] = 0.0f; 
mB[355] = 0.0f; 
mB[356] = 0.0f; 
mB[357] = 0.0f; 
mB[358] = 0.0f; 
mB[359] = 0.0f; 
mB[360] = 0.0f; 
mB[361] = 0.0f; 
mB[362] = 0.0f; 
mB[363] = 0.0f; 
mB[364] = 0.0f; 
mB[365] = 0.0f; 
mB[366] = 0.0f; 
mB[367] = 0.0f; 
mB[368] = 0.0f; 
mB[369] = 0.0f; 
mB[370] = 0.0f; 
mB[371] = 0.0f; 
mB[372] = 0.0f; 
mB[373] = 0.0f; 
mB[374] = 0.0f; 
mB[375] = 0.0f; 
mB[376] = 0.0f; 
mB[377] = 0.0f; 
mB[378] = 0.0f; 
mB[379] = 0.0f; 
mB[380] = 0.0f; 
mB[381] = 0.0f; 
mB[382] = 0.0f; 
mB[383] = 0.0f; 
mB[384] = 0.0f; 
mB[385] = 0.0f; 
mB[386] = 0.0f; 
mB[387] = 0.0f; 
mB[388] = 0.0f; 
mB[389] = 0.0f; 
mB[390] = 0.0f; 
mB[391] = 0.0f; 
mB[392] = 0.0f; 
mB[393] = 0.0f; 
mB[394] = 0.0f; 
mB[395] = 0.0f; 
mB[396] = 0.0f; 
mB[397] = 0.0f; 
mB[398] = 0.0f; 
mB[399] = 0.0f; 
mB[400] = 0.0f; 
mB[401] = 0.0f; 
mB[402] = 0.0f; 
mB[403] = 0.0f; 
mB[404] = 0.0f; 
mB[405] = 0.0f; 
mB[406] = 0.0f; 
mB[407] = 0.0f; 
mB[408] = 0.0f; 
mB[409] = 0.0f; 
mB[410] = 0.0f; 
mB[411] = 0.0f; 
mB[412] = 0.0f; 
mB[413] = 0.0f; 
mB[414] = 0.0f; 
mB[415] = 0.0f; 
mB[416] = 0.0f; 
mB[417] = 0.0f; 
mB[418] = 0.0f; 
mB[419] = 0.0f; 
mB[420] = 0.0f; 
mB[421] = 0.0f; 
mB[422] = 0.0f; 
mB[423] = 0.0f; 
mB[424] = 0.0f; 
mB[425] = 0.0f; 
mB[426] = 0.0f; 
mB[427] = 0.0f; 
mB[428] = 0.0f; 
mB[429] = 0.0f; 
mB[430] = 0.0f; 
mB[431] = 0.0f; 
mB[432] = 0.0f; 
mB[433] = 0.0f; 
mB[434] = 0.0f; 
mB[435] = 0.0f; 
mB[436] = 0.0f; 
mB[437] = 0.0f; 
mB[438] = 0.0f; 
mB[439] = 0.0f; 
mB[440] = 0.0f; 
mB[441] = 0.0f; 
mB[442] = 0.0f; 
mB[443] = 0.0f; 
mB[444] = 0.0f; 
mB[445] = 0.0f; 
mB[446] = 0.0f; 
mB[447] = 0.0f; 
mB[448] = 0.0f; 
mB[449] = 0.0f; 
mB[450] = 0.0f; 
mB[451] = 0.0f; 
mB[452] = 0.0f; 
mB[453] = 0.0f; 
mB[454] = 0.0f; 
mB[455] = 0.0f; 
mB[456] = 0.0f; 
mB[457] = 0.0f; 
mB[458] = 0.0f; 
mB[459] = 0.0f; 
mB[460] = 0.0f; 
mB[461] = 0.0f; 
mB[462] = 0.0f; 
mB[463] = 0.0f; 
mB[464] = 0.0f; 
mB[465] = 0.0f; 
mB[466] = 0.0f; 
mB[467] = 0.0f; 
mB[468] = 0.0f; 
mB[469] = (  -1.0f  * v_v44_aa_bw   ) ; 
mB[470] = 0.0f; 
mB[471] = 0.0f; 
mB[472] = 0.0f; 
mB[473] = 0.0f; 
mB[474] = 0.0f; 
mB[475] = 0.0f; 
mB[476] = 0.0f; 
mB[477] = 0.0f; 
mB[478] = 0.0f; 
mB[479] = 0.0f; 
mB[480] = 0.0f; 
mB[481] = 0.0f; 
mB[482] = 0.0f; 
mB[483] = 0.0f; 
mB[484] = 0.0f; 
mB[485] = 0.0f; 
mB[486] = 0.0f; 
mB[487] = 0.0f; 
mB[488] = 0.0f; 
mB[489] = 0.0f; 
mB[490] = 0.0f; 
mB[491] = 0.0f; 
mB[492] = 0.0f; 
mB[493] = 0.0f; 
mB[494] = 0.0f; 
mB[495] = 0.0f; 
mB[496] = 0.0f; 
mB[497] = 0.0f; 
mB[498] = 0.0f; 
mB[499] = 0.0f; 
mB[500] = 0.0f; 
mB[501] = 0.0f; 
mB[502] = 0.0f; 
mB[503] = 0.0f; 
mB[504] = 0.0f; 
mB[505] = 0.0f; 
mB[506] = 0.0f; 
mB[507] = 0.0f; 
mB[508] = 0.0f; 
mB[509] = 0.0f; 
mB[510] = 0.0f; 
mB[511] = 0.0f; 
mB[512] = 0.0f; 
mB[513] = 0.0f; 
mB[514] = 0.0f; 
mB[515] = 0.0f; 
mB[516] = 0.0f; 
mB[517] = 0.0f; 
mB[518] = 0.0f; 
mB[519] = 0.0f; 
mB[520] = 0.0f; 
mB[521] = 0.0f; 
mB[522] = 0.0f; 
mB[523] = (  -1.0f  * v_v01_SX_Gluc_In_b   ) ; 
mB[524] = 0.0f; 
mB[525] = 0.0f; 
mB[526] = 0.0f; 
mB[527] = 0.0f; 
mB[528] = 0.0f; 
mB[529] = 0.0f; 
mB[530] = 0.0f; 
mB[531] = 0.0f; 
mB[532] = 0.0f; 
mB[533] = 0.0f; 
mB[534] = 0.0f; 
mB[535] = 0.0f; 
mB[536] = 0.0f; 
mB[537] = 0.0f; 
mB[538] = 0.0f; 
mB[539] = 0.0f; 
mB[540] = 0.0f; 
mB[541] = 0.0f; 
mB[542] = 0.0f; 
mB[543] = 0.0f; 
mB[544] = 0.0f; 
mB[545] = 0.0f; 
mB[546] = 0.0f; 
mB[547] = 0.0f; 
mB[548] = 0.0f; 
mB[549] = 0.0f; 
mB[550] = 0.0f; 
mB[551] = 0.0f; 
mB[552] = 0.0f; 
mB[553] = 0.0f; 
mB[554] = 0.0f; 
mB[555] = 0.0f; 
mB[556] = 0.0f; 
mB[557] = 0.0f; 
mB[558] = 0.0f; 
mB[559] = 0.0f; 
mB[560] = 0.0f; 
mB[561] = 0.0f; 
mB[562] = 0.0f; 
mB[563] = 0.0f; 
mB[564] = 0.0f; 
mB[565] = 0.0f; 
mB[566] = 0.0f; 
mB[567] = 0.0f; 
mB[568] = 0.0f; 
mB[569] = 0.0f; 
mB[570] = 0.0f; 
mB[571] = 0.0f; 
mB[572] = 0.0f; 
mB[573] = 0.0f; 
mB[574] = 0.0f; 
mB[575] = 0.0f; 
mB[576] = 0.0f; 
mB[577] = 0.0f; 
mB[578] = 0.0f; 
mB[579] = 0.0f; 
mB[580] = 0.0f; 
mB[581] = 0.0f; 
mB[582] = 0.0f; 
mB[583] = 0.0f; 
mB[584] = 0.0f; 
mB[585] = 0.0f; 
mB[586] = 0.0f; 
mB[587] = 0.0f; 
mB[588] = 0.0f; 
mB[589] = 0.0f; 
mB[590] = 0.0f; 
mB[591] = 0.0f; 
mB[592] = 0.0f; 
mB[593] = 0.0f; 
mB[594] = 0.0f; 
mB[595] = 0.0f; 
mB[596] = 0.0f; 
mB[597] = 0.0f; 
mB[598] = 0.0f; 
mB[599] = 0.0f; 
mB[600] = 0.0f; 
mB[601] = 0.0f; 
mB[602] = 0.0f; 
mB[603] = 0.0f; 
mB[604] = 0.0f; 
mB[605] = 0.0f; 
mB[606] = 0.0f; 
mB[607] = 0.0f; 
mB[608] = 0.0f; 
mB[609] = (  -1.0f  * v_v14_ppp_bw   ) ; 
mB[610] = 0.0f; 
mB[611] = 0.0f; 
mB[612] = 0.0f; 
mB[613] = 0.0f; 
mB[614] = 0.0f; 
mB[615] = 0.0f; 
mB[616] = 0.0f; 
mB[617] = 0.0f; 
mB[618] = 0.0f; 
mB[619] = 0.0f; 
mB[620] = 0.0f; 
mB[621] = 0.0f; 
mB[622] = 0.0f; 
mB[623] = 0.0f; 
mB[624] = 0.0f; 
mB[625] = 0.0f; 
mB[626] = 0.0f; 
mB[627] = 0.0f; 
mB[628] = 0.0f; 
mB[629] = 0.0f; 
mB[630] = 0.0f; 
mB[631] = 0.0f; 
mB[632] = 0.0f; 
mB[633] = 0.0f; 
mB[634] = 0.0f; 
mB[635] = 0.0f; 
mB[636] = 0.0f; 
mB[637] = 0.0f; 
mB[638] = 0.0f; 
mB[639] = 0.0f; 
mB[640] = 0.0f; 
mB[641] = 0.0f; 
mB[642] = 0.0f; 
mB[643] = 0.0f; 
mB[644] = 0.0f; 
mB[645] = 0.0f; 
mB[646] = 0.0f; 
mB[647] = 0.0f; 
mB[648] = 0.0f; 
mB[649] = 0.0f; 
mB[650] = 0.0f; 
mB[651] = 0.0f; 
mB[652] = 0.0f; 
mB[653] = 0.0f; 
mB[654] = 0.0f; 
mB[655] = 0.0f; 
mB[656] = 0.0f; 
mB[657] = 0.0f; 
mB[658] = 0.0f; 
mB[659] = 0.0f; 
mB[660] = 0.0f; 
mB[661] = 0.0f; 
mB[662] = 0.0f; 
mB[663] = 0.0f; 
mB[664] = 0.0f; 
mB[665] = 0.0f; 
mB[666] = 0.0f; 
mB[667] = 0.0f; 
mB[668] = 0.0f; 
mB[669] = 0.0f; 
mB[670] = 0.0f; 
mB[671] = 0.0f; 
mB[672] = 0.0f; 
mB[673] = 0.0f; 
mB[674] = 0.0f; 
mB[675] = 0.0f; 
mB[676] = 0.0f; 
mB[677] = 0.0f; 
mB[678] = 0.0f; 
mB[679] = 0.0f; 
mB[680] = 0.0f; 
mB[681] = 0.0f; 
mB[682] = 0.0f; 
mB[683] = 0.0f; 
mB[684] = 0.0f; 
mB[685] = 0.0f; 
mB[686] = 0.0f; 
mB[687] = 0.0f; 
mB[688] = 0.0f; 
mB[689] = 0.0f; 
mB[690] = 0.0f; 
mB[691] = 0.0f; 
mB[692] = 0.0f; 
mB[693] = 0.0f; 
mB[694] = 0.0f; 
mB[695] = 0.0f; 
mB[696] = 0.0f; 
mB[697] = 0.0f; 
mB[698] = 0.0f; 
mB[699] = 0.0f; 
mB[700] = 0.0f; 
mB[701] = 0.0f; 
mB[702] = 0.0f; 
mB[703] = 0.0f; 
mB[704] = 0.0f; 
mB[705] = 0.0f; 
mB[706] = 0.0f; 
mB[707] = 0.0f; 
mB[708] = 0.0f; 
mB[709] = 0.0f; 
mB[710] = 0.0f; 
mB[711] = 0.0f; 
mB[712] = 0.0f; 
mB[713] = 0.0f; 
mB[714] = 0.0f; 
mB[715] = 0.0f; 
mB[716] = 0.0f; 
mB[717] = 0.0f; 
mB[718] = 0.0f; 
mB[719] = 0.0f; 
mB[720] = (  -1.0f  * v_v01_SX_Gluc_In_b   ) ; 
mB[721] = 0.0f; 
mB[722] = 0.0f; 
mB[723] = 0.0f; 
mB[724] = 0.0f; 
mB[725] = 0.0f; 
mB[726] = 0.0f; 
mB[727] = 0.0f; 
mB[728] = 0.0f; 
mB[729] = 0.0f; 
mB[730] = 0.0f; 
mB[731] = 0.0f; 
mB[732] = 0.0f; 
mB[733] = 0.0f; 
mB[734] = 0.0f; 
mB[735] = 0.0f; 
mB[736] = 0.0f; 
mB[737] = 0.0f; 
mB[738] = 0.0f; 
mB[739] = 0.0f; 
mB[740] = 0.0f; 
mB[741] = 0.0f; 
mB[742] = 0.0f; 
mB[743] = 0.0f; 
mB[744] = 0.0f; 
mB[745] = 0.0f; 
mB[746] = 0.0f; 
mB[747] = 0.0f; 
mB[748] = 0.0f; 
mB[749] = 0.0f; 
mB[750] = 0.0f; 
mB[751] = 0.0f; 
mB[752] = 0.0f; 
mB[753] = 0.0f; 
mB[754] = 0.0f; 
mB[755] = 0.0f; 
mB[756] = 0.0f; 
mB[757] = 0.0f; 
mB[758] = 0.0f; 
mB[759] = 0.0f; 
mB[760] = 0.0f; 
mB[761] = 0.0f; 
mB[762] = 0.0f; 
mB[763] = 0.0f; 
mB[764] = 0.0f; 
mB[765] = 0.0f; 
mB[766] = 0.0f; 
mB[767] = 0.0f; 
mB[768] = 0.0f; 
mB[769] = 0.0f; 
mB[770] = 0.0f; 
mB[771] = 0.0f; 
mB[772] = 0.0f; 
mB[773] = 0.0f; 
mB[774] = 0.0f; 
mB[775] = 0.0f; 
mB[776] = 0.0f; 
mB[777] = 0.0f; 
mB[778] = 0.0f; 
mB[779] = 0.0f; 
mB[780] = 0.0f; 
mB[781] = 0.0f; 
mB[782] = 0.0f; 
mB[783] = 0.0f; 
mB[784] = 0.0f; 
mB[785] = 0.0f; 
mB[786] = 0.0f; 
mB[787] = 0.0f; 
mB[788] = 0.0f; 
mB[789] = 0.0f; 
mB[790] = 0.0f; 
mB[791] = 0.0f; 
mB[792] = 0.0f; 
mB[793] = 0.0f; 
mB[794] = 0.0f; 
mB[795] = 0.0f; 
mB[796] = (  -1.0f  * v_v21_tca_fw   ) ; 
mB[797] = 0.0f; 
mB[798] = 0.0f; 
mB[799] = 0.0f; 
mB[800] = 0.0f; 
mB[801] = 0.0f; 
mB[802] = 0.0f; 
mB[803] = 0.0f; 
mB[804] = 0.0f; 
mB[805] = 0.0f; 
mB[806] = 0.0f; 
mB[807] = 0.0f; 
mB[808] = 0.0f; 
mB[809] = 0.0f; 
mB[810] = 0.0f; 
mB[811] = 0.0f; 
mB[812] = 0.0f; 
mB[813] = 0.0f; 
mB[814] = 0.0f; 
mB[815] = 0.0f; 
mB[816] = 0.0f; 
mB[817] = 0.0f; 
mB[818] = 0.0f; 
mB[819] = 0.0f; 
mB[820] = 0.0f; 
mB[821] = 0.0f; 
mB[822] = 0.0f; 
mB[823] = 0.0f; 
mB[824] = 0.0f; 
mB[825] = 0.0f; 
mB[826] = 0.0f; 
mB[827] = 0.0f; 
mB[828] = 0.0f; 
mB[829] = 0.0f; 
mB[830] = 0.0f; 
mB[831] = 0.0f; 
mB[832] = 0.0f; 
mB[833] = 0.0f; 
mB[834] = 0.0f; 
mB[835] = 0.0f; 
mB[836] = 0.0f; 
mB[837] = 0.0f; 
mB[838] = 0.0f; 
mB[839] = 0.0f; 
mB[840] = 0.0f; 
mB[841] = 0.0f; 
mB[842] = 0.0f; 
mB[843] = 0.0f; 
mB[844] = 0.0f; 
mB[845] = 0.0f; 
mB[846] = 0.0f; 
mB[847] = 0.0f; 
mB[848] = 0.0f; 
mB[849] = 0.0f; 
mB[850] = 0.0f; 
mB[851] = 0.0f; 
mB[852] = 0.0f; 
mB[853] = 0.0f; 
mB[854] = 0.0f; 
mB[855] = 0.0f; 
mB[856] = 0.0f; 
mB[857] = 0.0f; 
mB[858] = 0.0f; 
mB[859] = 0.0f; 
mB[860] = 0.0f; 
mB[861] = 0.0f; 
mB[862] = 0.0f; 
mB[863] = 0.0f; 
mB[864] = 0.0f; 
mB[865] = 0.0f; 
mB[866] = 0.0f; 
mB[867] = 0.0f; 
mB[868] = 0.0f; 
mB[869] = 0.0f; 
mB[870] = 0.0f; 
mB[871] = 0.0f; 
mB[872] = 0.0f; 
mB[873] = 0.0f; 
mB[874] = 0.0f; 
mB[875] = 0.0f; 
mB[876] = 0.0f; 
mB[877] = 0.0f; 
mB[878] = 0.0f; 
mB[879] = 0.0f; 
mB[880] = 0.0f; 
mB[881] = 0.0f; 
mB[882] = 0.0f; 
mB[883] = 0.0f; 
mB[884] = 0.0f; 
mB[885] = 0.0f; 
mB[886] = 0.0f; 
mB[887] = 0.0f; 
mB[888] = 0.0f; 
mB[889] = 0.0f; 
mB[890] = 0.0f; 
mB[891] = 0.0f; 
mB[892] = 0.0f; 
mB[893] = 0.0f; 
mB[894] = 0.0f; 
mB[895] = 0.0f; 
mB[896] = 0.0f; 
mB[897] = 0.0f; 
mB[898] = 0.0f; 
mB[899] = 0.0f; 
mB[900] = 0.0f; 
mB[901] = 0.0f; 
mB[902] = 0.0f; 
mB[903] = 0.0f; 
mB[904] = 0.0f; 
mB[905] = 0.0f; 
mB[906] = 0.0f; 
mB[907] = 0.0f; 
mB[908] = 0.0f; 
mB[909] = 0.0f; 
mB[910] = 0.0f; 
mB[911] = 0.0f; 
mB[912] = 0.0f; 
mB[913] = 0.0f; 
mB[914] = 0.0f; 
mB[915] = 0.0f; 
mB[916] = 0.0f; 
mB[917] = 0.0f; 
mB[918] = 0.0f; 
mB[919] = 0.0f; 
mB[920] = 0.0f; 
mB[921] = 0.0f; 
mB[922] = 0.0f; 
mB[923] = 0.0f; 
mB[924] = 0.0f; 
mB[925] = 0.0f; 
mB[926] = 0.0f; 
mB[927] = 0.0f; 
mB[928] = 0.0f; 
mB[929] = 0.0f; 
mB[930] = 0.0f; 
mB[931] = 0.0f; 
mB[932] = 0.0f; 
mB[933] = 0.0f; 
mB[934] = 0.0f; 
mB[935] = 0.0f; 
mB[936] = 0.0f; 
mB[937] = 0.0f; 
mB[938] = 0.0f; 
mB[939] = 0.0f; 
mB[940] = 0.0f; 
mB[941] = 0.0f; 
mB[942] = 0.0f; 
mB[943] = 0.0f; 
mB[944] = 0.0f; 
mB[945] = 0.0f; 
mB[946] = 0.0f; 
mB[947] = 0.0f; 
mB[948] = 0.0f; 
mB[949] = 0.0f; 
mB[950] = 0.0f; 
mB[951] = 0.0f; 
mB[952] = 0.0f; 
mB[953] = 0.0f; 
mB[954] = 0.0f; 
mB[955] = (  -1.0f  * v_v17_ppp_bw   ) ; 
mB[956] = 0.0f; 
mB[957] = 0.0f; 
mB[958] = 0.0f; 
mB[959] = 0.0f; 
mB[960] = 0.0f; 
mB[961] = 0.0f; 
mB[962] = 0.0f; 
mB[963] = 0.0f; 
mB[964] = 0.0f; 
mB[965] = 0.0f; 
mB[966] = 0.0f; 
mB[967] = 0.0f; 
mB[968] = 0.0f; 
mB[969] = 0.0f; 
mB[970] = 0.0f; 
mB[971] = 0.0f; 
mB[972] = 0.0f; 
mB[973] = 0.0f; 
mB[974] = 0.0f; 
mB[975] = 0.0f; 
mB[976] = 0.0f; 
mB[977] = 0.0f; 
mB[978] = 0.0f; 
mB[979] = 0.0f; 
mB[980] = 0.0f; 
mB[981] = 0.0f; 
mB[982] = 0.0f; 
mB[983] = 0.0f; 
mB[984] = 0.0f; 
mB[985] = 0.0f; 
mB[986] = 0.0f; 
mB[987] = 0.0f; 
mB[988] = 0.0f; 
mB[989] = 0.0f; 
mB[990] = 0.0f; 
mB[991] = 0.0f; 
mB[992] = 0.0f; 
mB[993] = 0.0f; 
mB[994] = 0.0f; 
mB[995] = 0.0f; 
mB[996] = 0.0f; 
mB[997] = 0.0f; 
mB[998] = 0.0f; 
mB[999] = 0.0f; 
mB[1000] = 0.0f; 
mB[1001] = 0.0f; 
mB[1002] = 0.0f; 
mB[1003] = 0.0f; 
mB[1004] = 0.0f; 
mB[1005] = 0.0f; 
mB[1006] = 0.0f; 
mB[1007] = 0.0f; 
mB[1008] = 0.0f; 
mB[1009] = 0.0f; 
mB[1010] = 0.0f; 
mB[1011] = 0.0f; 
mB[1012] = 0.0f; 
mB[1013] = 0.0f; 
mB[1014] = 0.0f; 
mB[1015] = 0.0f; 
mB[1016] = 0.0f; 
mB[1017] = 0.0f; 
mB[1018] = 0.0f; 
mB[1019] = 0.0f; 
mB[1020] = 0.0f; 
mB[1021] = 0.0f; 
mB[1022] = 0.0f; 
mB[1023] = 0.0f; 
mB[1024] = 0.0f; 
mB[1025] = 0.0f; 
mB[1026] = 0.0f; 
mB[1027] = 0.0f; 
mB[1028] = 0.0f; 
mB[1029] = 0.0f; 
mB[1030] = 0.0f; 
mB[1031] = 0.0f; 
mB[1032] = 0.0f; 
mB[1033] = 0.0f; 
mB[1034] = 0.0f; 
mB[1035] = 0.0f; 
mB[1036] = 0.0f; 
mB[1037] = 0.0f; 
mB[1038] = 0.0f; 
mB[1039] = 0.0f; 
mB[1040] = (  -1.0f  * v_v33_amphi_fw   ) ; 
mB[1041] = 0.0f; 
mB[1042] = 0.0f; 
mB[1043] = 0.0f; 
mB[1044] = 0.0f; 
mB[1045] = 0.0f; 
mB[1046] = 0.0f; 
mB[1047] = 0.0f; 
mB[1048] = 0.0f; 
mB[1049] = 0.0f; 
mB[1050] = 0.0f; 
mB[1051] = 0.0f; 
mB[1052] = 0.0f; 
mB[1053] = 0.0f; 
mB[1054] = 0.0f; 
mB[1055] = 0.0f; 
mB[1056] = 0.0f; 
mB[1057] = 0.0f; 
mB[1058] = 0.0f; 
mB[1059] = 0.0f; 
mB[1060] = 0.0f; 
mB[1061] = 0.0f; 
mB[1062] = 0.0f; 
mB[1063] = 0.0f; 
mB[1064] = 0.0f; 
mB[1065] = 0.0f; 
mB[1066] = 0.0f; 
mB[1067] = 0.0f; 
mB[1068] = 0.0f; 
mB[1069] = 0.0f; 
mB[1070] = 0.0f; 
mB[1071] = 0.0f; 
mB[1072] = 0.0f; 
mB[1073] = 0.0f; 
mB[1074] = 0.0f; 
mB[1075] = 0.0f; 
mB[1076] = 0.0f; 
mB[1077] = 0.0f; 
mB[1078] = 0.0f; 
mB[1079] = 0.0f; 
mB[1080] = 0.0f; 
mB[1081] = 0.0f; 
mB[1082] = 0.0f; 
mB[1083] = 0.0f; 
mB[1084] = 0.0f; 
mB[1085] = 0.0f; 
mB[1086] = 0.0f; 
mB[1087] = 0.0f; 
mB[1088] = 0.0f; 
mB[1089] = 0.0f; 
mB[1090] = 0.0f; 
mB[1091] = 0.0f; 
mB[1092] = 0.0f; 
mB[1093] = 0.0f; 
mB[1094] = 0.0f; 
mB[1095] = 0.0f; 
mB[1096] = 0.0f; 
mB[1097] = 0.0f; 
mB[1098] = 0.0f; 
mB[1099] = 0.0f; 
mB[1100] = 0.0f; 
mB[1101] = 0.0f; 
mB[1102] = 0.0f; 
mB[1103] = 0.0f; 
mB[1104] = 0.0f; 
mB[1105] = 0.0f; 
mB[1106] = 0.0f; 
mB[1107] = 0.0f; 
mB[1108] = 0.0f; 
mB[1109] = (  -1.0f  * v_v01_SX_Gluc_In_b   ) ; 
mB[1110] = 0.0f; 
mB[1111] = 0.0f; 
mB[1112] = 0.0f; 
mB[1113] = 0.0f; 
mB[1114] = 0.0f; 
mB[1115] = 0.0f; 
mB[1116] = 0.0f; 
mB[1117] = 0.0f; 
mB[1118] = 0.0f; 
mB[1119] = 0.0f; 
mB[1120] = 0.0f; 
mB[1121] = 0.0f; 
mB[1122] = 0.0f; 
mB[1123] = 0.0f; 
mB[1124] = 0.0f; 
mB[1125] = 0.0f; 
mB[1126] = 0.0f; 
mB[1127] = 0.0f; 
mB[1128] = 0.0f; 
mB[1129] = 0.0f; 
mB[1130] = 0.0f; 
mB[1131] = 0.0f; 
mB[1132] = 0.0f; 
mB[1133] = 0.0f; 
mB[1134] = 0.0f; 
mB[1135] = 0.0f; 
mB[1136] = 0.0f; 
mB[1137] = 0.0f; 
mB[1138] = 0.0f; 
mB[1139] = 0.0f; 
mB[1140] = 0.0f; 
mB[1141] = 0.0f; 
mB[1142] = 0.0f; 
mB[1143] = 0.0f; 
mB[1144] = 0.0f; 
mB[1145] = 0.0f; 
mB[1146] = 0.0f; 
mB[1147] = 0.0f; 
mB[1148] = 0.0f; 
mB[1149] = 0.0f; 
mB[1150] = 0.0f; 
mB[1151] = 0.0f; 
mB[1152] = 0.0f; 
mB[1153] = 0.0f; 
mB[1154] = 0.0f; 
mB[1155] = 0.0f; 
mB[1156] = 0.0f; 
mB[1157] = 0.0f; 
mB[1158] = 0.0f; 
mB[1159] = 0.0f; 
mB[1160] = 0.0f; 
mB[1161] = 0.0f; 
mB[1162] = 0.0f; 
mB[1163] = 0.0f; 
mB[1164] = 0.0f; 
mB[1165] = 0.0f; 
mB[1166] = 0.0f; 
mB[1167] = 0.0f; 
mB[1168] = 0.0f; 
mB[1169] = 0.0f; 
mB[1170] = 0.0f; 
mB[1171] = 0.0f; 
mB[1172] = 0.0f; 
mB[1173] = 0.0f; 
mB[1174] = 0.0f; 
mB[1175] = 0.0f; 
mB[1176] = 0.0f; 
mB[1177] = 0.0f; 
mB[1178] = 0.0f; 
mB[1179] = 0.0f; 
mB[1180] = 0.0f; 
mB[1181] = 0.0f; 
mB[1182] = 0.0f; 
mB[1183] = 0.0f; 
mB[1184] = 0.0f; 
mB[1185] = 0.0f; 
mB[1186] = 0.0f; 
mB[1187] = 0.0f; 
mB[1188] = 0.0f; 
mB[1189] = 0.0f; 
mB[1190] = 0.0f; 
mB[1191] = 0.0f; 
mB[1192] = 0.0f; 
mB[1193] = 0.0f; 
mB[1194] = 0.0f; 
mB[1195] = 0.0f; 
mB[1196] = 0.0f; 
mB[1197] = 0.0f; 
mB[1198] = 0.0f; 
mB[1199] = 0.0f; 
mB[1200] = 0.0f; 
mB[1201] = 0.0f; 
mB[1202] = 0.0f; 
mB[1203] = 0.0f; 
mB[1204] = 0.0f; 
mB[1205] = 0.0f; 
mB[1206] = 0.0f; 
mB[1207] = 0.0f; 
mB[1208] = 0.0f; 
mB[1209] = 0.0f; 
mB[1210] = 0.0f; 
mB[1211] = 0.0f; 
mB[1212] = 0.0f; 
mB[1213] = 0.0f; 
mB[1214] = 0.0f; 
mB[1215] = 0.0f; 
mB[1216] = 0.0f; 
mB[1217] = 0.0f; 
mB[1218] = 0.0f; 
mB[1219] = 0.0f; 
mB[1220] = 0.0f; 
mB[1221] = (  -1.0f  * v_v45_aa_bw   ) ; 
mB[1222] = 0.0f; 
mB[1223] = 0.0f; 
mB[1224] = 0.0f; 
mB[1225] = 0.0f; 
mB[1226] = 0.0f; 
mB[1227] = 0.0f; 
mB[1228] = 0.0f; 
mB[1229] = 0.0f; 
mB[1230] = 0.0f; 
mB[1231] = 0.0f; 
mB[1232] = 0.0f; 
mB[1233] = 0.0f; 
mB[1234] = 0.0f; 
mB[1235] = 0.0f; 
mB[1236] = 0.0f; 
mB[1237] = 0.0f; 
mB[1238] = 0.0f; 
mB[1239] = 0.0f; 
mB[1240] = 0.0f; 
mB[1241] = 0.0f; 
mB[1242] = 0.0f; 
mB[1243] = 0.0f; 
mB[1244] = 0.0f; 
mB[1245] = 0.0f; 
mB[1246] = 0.0f; 
mB[1247] = 0.0f; 
mB[1248] = 0.0f; 
mB[1249] = 0.0f; 
mB[1250] = 0.0f; 
mB[1251] = 0.0f; 
mB[1252] = 0.0f; 
mB[1253] = 0.0f; 
mB[1254] = 0.0f; 
mB[1255] = 0.0f; 
mB[1256] = 0.0f; 
mB[1257] = 0.0f; 
mB[1258] = 0.0f; 
mB[1259] = 0.0f; 
mB[1260] = 0.0f; 
mB[1261] = 0.0f; 
mB[1262] = 0.0f; 
mB[1263] = 0.0f; 
mB[1264] = 0.0f; 
mB[1265] = 0.0f; 
mB[1266] = 0.0f; 
mB[1267] = 0.0f; 
mB[1268] = 0.0f; 
mB[1269] = 0.0f; 
mB[1270] = 0.0f; 
mB[1271] = 0.0f; 
mB[1272] = 0.0f; 
mB[1273] = 0.0f; 
}
//----Init Y---------------------------------------------------------------------------
if(idx==2 && idy==0){
mY[0] = ( (  mr_TKC2_2_M_0  * mr_R5P_1_M_0   )   ) ; 
mY[1] = ( (  mr_Gluc_ext_2_3_M_0   )   ) ; 
mY[2] = ( (  mr_AcCoA_2_M_0  * mr_Glyox_2_M_0   )   ) ; 
mY[3] = ( (  mr_AKG_3_M_0  * mr_CO2_1_M_0   )   ) ; 
mY[4] = ( (  mr_Gly_2_M_0  * mr_MEETHF_1_M_0   )   ) ; 
mY[5] = ( (  mr_Gluc_ext_4_5_M_0   )   ) ; 
mY[6] = ( (  mr_TKC2_2_M_0  * mr_E4P_1_M_0   )   ) ; 
mY[7] = ( (  mr_Gluc_ext_5_6_M_0   )   ) ; 
mY[8] = ( (  mr_AcCoA_2_M_0  * mr_OAC_2_M_0   )   ) ; 
mY[9] = ( (  mr_TAC3_3_M_0  * mr_E4P_1_M_0   )   ) ; 
mY[10] = ( (  mr_CO2_1_M_0  * mr_PEP_3_M_0   )   ) ; 
mY[11] = ( (  mr_Gluc_ext_1_2_M_0   )   ) ; 
mY[12] = ( (  mr_CO2_1_M_0  * mr_MEETHF_1_M_0   )   ) ; 
mY[13] = ( (  mr_TKC2_2_M_0  * mr_R5P_1_M_1   )  +(  mr_TKC2_2_M_1  * mr_R5P_1_M_0   )   ) ; 
mY[14] = ( (  mr_Gluc_ext_2_3_M_1   )   ) ; 
mY[15] = ( (  mr_AcCoA_2_M_0  * mr_Glyox_2_M_1   )  +(  mr_AcCoA_2_M_1  * mr_Glyox_2_M_0   )   ) ; 
mY[16] = ( (  mr_AKG_3_M_0  * mr_CO2_1_M_1   )  +(  mr_AKG_3_M_1  * mr_CO2_1_M_0   )   ) ; 
mY[17] = ( (  mr_Gly_2_M_0  * mr_MEETHF_1_M_1   )  +(  mr_Gly_2_M_1  * mr_MEETHF_1_M_0   )   ) ; 
mY[18] = ( (  mr_Gluc_ext_4_5_M_1   )   ) ; 
mY[19] = ( (  mr_TKC2_2_M_0  * mr_E4P_1_M_1   )  +(  mr_TKC2_2_M_1  * mr_E4P_1_M_0   )   ) ; 
mY[20] = ( (  mr_Gluc_ext_5_6_M_1   )   ) ; 
mY[21] = ( (  mr_AcCoA_2_M_0  * mr_OAC_2_M_1   )  +(  mr_AcCoA_2_M_1  * mr_OAC_2_M_0   )   ) ; 
mY[22] = ( (  mr_TAC3_3_M_0  * mr_E4P_1_M_1   )  +(  mr_TAC3_3_M_1  * mr_E4P_1_M_0   )   ) ; 
mY[23] = ( (  mr_CO2_1_M_0  * mr_PEP_3_M_1   )  +(  mr_CO2_1_M_1  * mr_PEP_3_M_0   )   ) ; 
mY[24] = ( (  mr_Gluc_ext_1_2_M_1   )   ) ; 
mY[25] = ( (  mr_CO2_1_M_0  * mr_MEETHF_1_M_1   )  +(  mr_CO2_1_M_1  * mr_MEETHF_1_M_0   )   ) ; 
mY[26] = ( (  mr_TKC2_2_M_1  * mr_R5P_1_M_1   )   ) ; 
mY[27] = ( (  mr_Gluc_ext_2_3_M_2   )   ) ; 
mY[28] = ( (  mr_AcCoA_2_M_1  * mr_Glyox_2_M_1   )   ) ; 
mY[29] = ( (  mr_AKG_3_M_1  * mr_CO2_1_M_1   )   ) ; 
mY[30] = ( (  mr_Gly_2_M_1  * mr_MEETHF_1_M_1   )   ) ; 
mY[31] = ( (  mr_Gluc_ext_4_5_M_2   )   ) ; 
mY[32] = ( (  mr_TKC2_2_M_1  * mr_E4P_1_M_1   )   ) ; 
mY[33] = ( (  mr_Gluc_ext_5_6_M_2   )   ) ; 
mY[34] = ( (  mr_AcCoA_2_M_1  * mr_OAC_2_M_1   )   ) ; 
mY[35] = ( (  mr_TAC3_3_M_1  * mr_E4P_1_M_1   )   ) ; 
mY[36] = ( (  mr_CO2_1_M_1  * mr_PEP_3_M_1   )   ) ; 
mY[37] = ( (  mr_Gluc_ext_1_2_M_2   )   ) ; 
mY[38] = ( (  mr_CO2_1_M_1  * mr_MEETHF_1_M_1   )   ) ; 
}
mAm = 98; 
mAn = 98; 
mBm = 98; 
mBn = 13; 
mYm = 13; 
mYn = 3; 
barrier(CLK_LOCAL_MEM_FENCE);

//------COMPUTE!-----------------------------------------------------------------------
//LU-DECOMPOSITION (in place): mA_L * mA = mA
if( idx<98 && idy<98 ){ mA_L[ idx+98*idy ] = (idx==idy)?1.0f:0.0f; }
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 0 / 97
if( idx==0 && idy > 0 && idy < 98 ){ 
  mA_L[ idy + 0 ] = mA[ idy + 0 ] / mA[ 0 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>0 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 0 ] * mA[0+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 1 / 97
if( idx==0 && idy > 1 && idy < 98 ){ 
  mA_L[ idy + 98 ] = mA[ idy + 98 ] / mA[ 99 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>1 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 98 ] * mA[1+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 2 / 97
if( idx==0 && idy > 2 && idy < 98 ){ 
  mA_L[ idy + 196 ] = mA[ idy + 196 ] / mA[ 198 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>2 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 196 ] * mA[2+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 3 / 97
if( idx==0 && idy > 3 && idy < 98 ){ 
  mA_L[ idy + 294 ] = mA[ idy + 294 ] / mA[ 297 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>3 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 294 ] * mA[3+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 4 / 97
if( idx==0 && idy > 4 && idy < 98 ){ 
  mA_L[ idy + 392 ] = mA[ idy + 392 ] / mA[ 396 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>4 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 392 ] * mA[4+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 5 / 97
if( idx==0 && idy > 5 && idy < 98 ){ 
  mA_L[ idy + 490 ] = mA[ idy + 490 ] / mA[ 495 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>5 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 490 ] * mA[5+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 6 / 97
if( idx==0 && idy > 6 && idy < 98 ){ 
  mA_L[ idy + 588 ] = mA[ idy + 588 ] / mA[ 594 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>6 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 588 ] * mA[6+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 7 / 97
if( idx==0 && idy > 7 && idy < 98 ){ 
  mA_L[ idy + 686 ] = mA[ idy + 686 ] / mA[ 693 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>7 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 686 ] * mA[7+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 8 / 97
if( idx==0 && idy > 8 && idy < 98 ){ 
  mA_L[ idy + 784 ] = mA[ idy + 784 ] / mA[ 792 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>8 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 784 ] * mA[8+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 9 / 97
if( idx==0 && idy > 9 && idy < 98 ){ 
  mA_L[ idy + 882 ] = mA[ idy + 882 ] / mA[ 891 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>9 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 882 ] * mA[9+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 10 / 97
if( idx==0 && idy > 10 && idy < 98 ){ 
  mA_L[ idy + 980 ] = mA[ idy + 980 ] / mA[ 990 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>10 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 980 ] * mA[10+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 11 / 97
if( idx==0 && idy > 11 && idy < 98 ){ 
  mA_L[ idy + 1078 ] = mA[ idy + 1078 ] / mA[ 1089 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>11 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 1078 ] * mA[11+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 12 / 97
if( idx==0 && idy > 12 && idy < 98 ){ 
  mA_L[ idy + 1176 ] = mA[ idy + 1176 ] / mA[ 1188 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>12 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 1176 ] * mA[12+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 13 / 97
if( idx==0 && idy > 13 && idy < 98 ){ 
  mA_L[ idy + 1274 ] = mA[ idy + 1274 ] / mA[ 1287 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>13 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 1274 ] * mA[13+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 14 / 97
if( idx==0 && idy > 14 && idy < 98 ){ 
  mA_L[ idy + 1372 ] = mA[ idy + 1372 ] / mA[ 1386 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>14 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 1372 ] * mA[14+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 15 / 97
if( idx==0 && idy > 15 && idy < 98 ){ 
  mA_L[ idy + 1470 ] = mA[ idy + 1470 ] / mA[ 1485 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>15 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 1470 ] * mA[15+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 16 / 97
if( idx==0 && idy > 16 && idy < 98 ){ 
  mA_L[ idy + 1568 ] = mA[ idy + 1568 ] / mA[ 1584 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>16 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 1568 ] * mA[16+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 17 / 97
if( idx==0 && idy > 17 && idy < 98 ){ 
  mA_L[ idy + 1666 ] = mA[ idy + 1666 ] / mA[ 1683 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>17 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 1666 ] * mA[17+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 18 / 97
if( idx==0 && idy > 18 && idy < 98 ){ 
  mA_L[ idy + 1764 ] = mA[ idy + 1764 ] / mA[ 1782 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>18 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 1764 ] * mA[18+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 19 / 97
if( idx==0 && idy > 19 && idy < 98 ){ 
  mA_L[ idy + 1862 ] = mA[ idy + 1862 ] / mA[ 1881 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>19 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 1862 ] * mA[19+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 20 / 97
if( idx==0 && idy > 20 && idy < 98 ){ 
  mA_L[ idy + 1960 ] = mA[ idy + 1960 ] / mA[ 1980 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>20 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 1960 ] * mA[20+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 21 / 97
if( idx==0 && idy > 21 && idy < 98 ){ 
  mA_L[ idy + 2058 ] = mA[ idy + 2058 ] / mA[ 2079 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>21 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 2058 ] * mA[21+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 22 / 97
if( idx==0 && idy > 22 && idy < 98 ){ 
  mA_L[ idy + 2156 ] = mA[ idy + 2156 ] / mA[ 2178 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>22 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 2156 ] * mA[22+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 23 / 97
if( idx==0 && idy > 23 && idy < 98 ){ 
  mA_L[ idy + 2254 ] = mA[ idy + 2254 ] / mA[ 2277 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>23 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 2254 ] * mA[23+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 24 / 97
if( idx==0 && idy > 24 && idy < 98 ){ 
  mA_L[ idy + 2352 ] = mA[ idy + 2352 ] / mA[ 2376 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>24 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 2352 ] * mA[24+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 25 / 97
if( idx==0 && idy > 25 && idy < 98 ){ 
  mA_L[ idy + 2450 ] = mA[ idy + 2450 ] / mA[ 2475 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>25 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 2450 ] * mA[25+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 26 / 97
if( idx==0 && idy > 26 && idy < 98 ){ 
  mA_L[ idy + 2548 ] = mA[ idy + 2548 ] / mA[ 2574 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>26 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 2548 ] * mA[26+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 27 / 97
if( idx==0 && idy > 27 && idy < 98 ){ 
  mA_L[ idy + 2646 ] = mA[ idy + 2646 ] / mA[ 2673 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>27 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 2646 ] * mA[27+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 28 / 97
if( idx==0 && idy > 28 && idy < 98 ){ 
  mA_L[ idy + 2744 ] = mA[ idy + 2744 ] / mA[ 2772 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>28 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 2744 ] * mA[28+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 29 / 97
if( idx==0 && idy > 29 && idy < 98 ){ 
  mA_L[ idy + 2842 ] = mA[ idy + 2842 ] / mA[ 2871 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>29 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 2842 ] * mA[29+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 30 / 97
if( idx==0 && idy > 30 && idy < 98 ){ 
  mA_L[ idy + 2940 ] = mA[ idy + 2940 ] / mA[ 2970 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>30 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 2940 ] * mA[30+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 31 / 97
if( idx==0 && idy > 31 && idy < 98 ){ 
  mA_L[ idy + 3038 ] = mA[ idy + 3038 ] / mA[ 3069 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>31 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 3038 ] * mA[31+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 32 / 97
if( idx==0 && idy > 32 && idy < 98 ){ 
  mA_L[ idy + 3136 ] = mA[ idy + 3136 ] / mA[ 3168 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>32 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 3136 ] * mA[32+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 33 / 97
if( idx==0 && idy > 33 && idy < 98 ){ 
  mA_L[ idy + 3234 ] = mA[ idy + 3234 ] / mA[ 3267 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>33 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 3234 ] * mA[33+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 34 / 97
if( idx==0 && idy > 34 && idy < 98 ){ 
  mA_L[ idy + 3332 ] = mA[ idy + 3332 ] / mA[ 3366 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>34 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 3332 ] * mA[34+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 35 / 97
if( idx==0 && idy > 35 && idy < 98 ){ 
  mA_L[ idy + 3430 ] = mA[ idy + 3430 ] / mA[ 3465 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>35 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 3430 ] * mA[35+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 36 / 97
if( idx==0 && idy > 36 && idy < 98 ){ 
  mA_L[ idy + 3528 ] = mA[ idy + 3528 ] / mA[ 3564 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>36 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 3528 ] * mA[36+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 37 / 97
if( idx==0 && idy > 37 && idy < 98 ){ 
  mA_L[ idy + 3626 ] = mA[ idy + 3626 ] / mA[ 3663 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>37 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 3626 ] * mA[37+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 38 / 97
if( idx==0 && idy > 38 && idy < 98 ){ 
  mA_L[ idy + 3724 ] = mA[ idy + 3724 ] / mA[ 3762 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>38 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 3724 ] * mA[38+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 39 / 97
if( idx==0 && idy > 39 && idy < 98 ){ 
  mA_L[ idy + 3822 ] = mA[ idy + 3822 ] / mA[ 3861 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>39 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 3822 ] * mA[39+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 40 / 97
if( idx==0 && idy > 40 && idy < 98 ){ 
  mA_L[ idy + 3920 ] = mA[ idy + 3920 ] / mA[ 3960 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>40 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 3920 ] * mA[40+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 41 / 97
if( idx==0 && idy > 41 && idy < 98 ){ 
  mA_L[ idy + 4018 ] = mA[ idy + 4018 ] / mA[ 4059 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>41 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 4018 ] * mA[41+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 42 / 97
if( idx==0 && idy > 42 && idy < 98 ){ 
  mA_L[ idy + 4116 ] = mA[ idy + 4116 ] / mA[ 4158 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>42 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 4116 ] * mA[42+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 43 / 97
if( idx==0 && idy > 43 && idy < 98 ){ 
  mA_L[ idy + 4214 ] = mA[ idy + 4214 ] / mA[ 4257 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>43 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 4214 ] * mA[43+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 44 / 97
if( idx==0 && idy > 44 && idy < 98 ){ 
  mA_L[ idy + 4312 ] = mA[ idy + 4312 ] / mA[ 4356 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>44 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 4312 ] * mA[44+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 45 / 97
if( idx==0 && idy > 45 && idy < 98 ){ 
  mA_L[ idy + 4410 ] = mA[ idy + 4410 ] / mA[ 4455 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>45 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 4410 ] * mA[45+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 46 / 97
if( idx==0 && idy > 46 && idy < 98 ){ 
  mA_L[ idy + 4508 ] = mA[ idy + 4508 ] / mA[ 4554 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>46 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 4508 ] * mA[46+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 47 / 97
if( idx==0 && idy > 47 && idy < 98 ){ 
  mA_L[ idy + 4606 ] = mA[ idy + 4606 ] / mA[ 4653 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>47 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 4606 ] * mA[47+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 48 / 97
if( idx==0 && idy > 48 && idy < 98 ){ 
  mA_L[ idy + 4704 ] = mA[ idy + 4704 ] / mA[ 4752 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>48 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 4704 ] * mA[48+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 49 / 97
if( idx==0 && idy > 49 && idy < 98 ){ 
  mA_L[ idy + 4802 ] = mA[ idy + 4802 ] / mA[ 4851 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>49 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 4802 ] * mA[49+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 50 / 97
if( idx==0 && idy > 50 && idy < 98 ){ 
  mA_L[ idy + 4900 ] = mA[ idy + 4900 ] / mA[ 4950 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>50 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 4900 ] * mA[50+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 51 / 97
if( idx==0 && idy > 51 && idy < 98 ){ 
  mA_L[ idy + 4998 ] = mA[ idy + 4998 ] / mA[ 5049 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>51 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 4998 ] * mA[51+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 52 / 97
if( idx==0 && idy > 52 && idy < 98 ){ 
  mA_L[ idy + 5096 ] = mA[ idy + 5096 ] / mA[ 5148 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>52 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 5096 ] * mA[52+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 53 / 97
if( idx==0 && idy > 53 && idy < 98 ){ 
  mA_L[ idy + 5194 ] = mA[ idy + 5194 ] / mA[ 5247 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>53 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 5194 ] * mA[53+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 54 / 97
if( idx==0 && idy > 54 && idy < 98 ){ 
  mA_L[ idy + 5292 ] = mA[ idy + 5292 ] / mA[ 5346 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>54 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 5292 ] * mA[54+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 55 / 97
if( idx==0 && idy > 55 && idy < 98 ){ 
  mA_L[ idy + 5390 ] = mA[ idy + 5390 ] / mA[ 5445 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>55 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 5390 ] * mA[55+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 56 / 97
if( idx==0 && idy > 56 && idy < 98 ){ 
  mA_L[ idy + 5488 ] = mA[ idy + 5488 ] / mA[ 5544 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>56 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 5488 ] * mA[56+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 57 / 97
if( idx==0 && idy > 57 && idy < 98 ){ 
  mA_L[ idy + 5586 ] = mA[ idy + 5586 ] / mA[ 5643 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>57 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 5586 ] * mA[57+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 58 / 97
if( idx==0 && idy > 58 && idy < 98 ){ 
  mA_L[ idy + 5684 ] = mA[ idy + 5684 ] / mA[ 5742 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>58 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 5684 ] * mA[58+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 59 / 97
if( idx==0 && idy > 59 && idy < 98 ){ 
  mA_L[ idy + 5782 ] = mA[ idy + 5782 ] / mA[ 5841 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>59 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 5782 ] * mA[59+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 60 / 97
if( idx==0 && idy > 60 && idy < 98 ){ 
  mA_L[ idy + 5880 ] = mA[ idy + 5880 ] / mA[ 5940 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>60 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 5880 ] * mA[60+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 61 / 97
if( idx==0 && idy > 61 && idy < 98 ){ 
  mA_L[ idy + 5978 ] = mA[ idy + 5978 ] / mA[ 6039 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>61 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 5978 ] * mA[61+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 62 / 97
if( idx==0 && idy > 62 && idy < 98 ){ 
  mA_L[ idy + 6076 ] = mA[ idy + 6076 ] / mA[ 6138 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>62 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 6076 ] * mA[62+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 63 / 97
if( idx==0 && idy > 63 && idy < 98 ){ 
  mA_L[ idy + 6174 ] = mA[ idy + 6174 ] / mA[ 6237 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>63 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 6174 ] * mA[63+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 64 / 97
if( idx==0 && idy > 64 && idy < 98 ){ 
  mA_L[ idy + 6272 ] = mA[ idy + 6272 ] / mA[ 6336 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>64 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 6272 ] * mA[64+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 65 / 97
if( idx==0 && idy > 65 && idy < 98 ){ 
  mA_L[ idy + 6370 ] = mA[ idy + 6370 ] / mA[ 6435 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>65 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 6370 ] * mA[65+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 66 / 97
if( idx==0 && idy > 66 && idy < 98 ){ 
  mA_L[ idy + 6468 ] = mA[ idy + 6468 ] / mA[ 6534 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>66 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 6468 ] * mA[66+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 67 / 97
if( idx==0 && idy > 67 && idy < 98 ){ 
  mA_L[ idy + 6566 ] = mA[ idy + 6566 ] / mA[ 6633 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>67 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 6566 ] * mA[67+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 68 / 97
if( idx==0 && idy > 68 && idy < 98 ){ 
  mA_L[ idy + 6664 ] = mA[ idy + 6664 ] / mA[ 6732 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>68 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 6664 ] * mA[68+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 69 / 97
if( idx==0 && idy > 69 && idy < 98 ){ 
  mA_L[ idy + 6762 ] = mA[ idy + 6762 ] / mA[ 6831 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>69 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 6762 ] * mA[69+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 70 / 97
if( idx==0 && idy > 70 && idy < 98 ){ 
  mA_L[ idy + 6860 ] = mA[ idy + 6860 ] / mA[ 6930 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>70 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 6860 ] * mA[70+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 71 / 97
if( idx==0 && idy > 71 && idy < 98 ){ 
  mA_L[ idy + 6958 ] = mA[ idy + 6958 ] / mA[ 7029 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>71 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 6958 ] * mA[71+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 72 / 97
if( idx==0 && idy > 72 && idy < 98 ){ 
  mA_L[ idy + 7056 ] = mA[ idy + 7056 ] / mA[ 7128 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>72 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 7056 ] * mA[72+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 73 / 97
if( idx==0 && idy > 73 && idy < 98 ){ 
  mA_L[ idy + 7154 ] = mA[ idy + 7154 ] / mA[ 7227 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>73 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 7154 ] * mA[73+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 74 / 97
if( idx==0 && idy > 74 && idy < 98 ){ 
  mA_L[ idy + 7252 ] = mA[ idy + 7252 ] / mA[ 7326 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>74 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 7252 ] * mA[74+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 75 / 97
if( idx==0 && idy > 75 && idy < 98 ){ 
  mA_L[ idy + 7350 ] = mA[ idy + 7350 ] / mA[ 7425 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>75 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 7350 ] * mA[75+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 76 / 97
if( idx==0 && idy > 76 && idy < 98 ){ 
  mA_L[ idy + 7448 ] = mA[ idy + 7448 ] / mA[ 7524 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>76 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 7448 ] * mA[76+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 77 / 97
if( idx==0 && idy > 77 && idy < 98 ){ 
  mA_L[ idy + 7546 ] = mA[ idy + 7546 ] / mA[ 7623 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>77 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 7546 ] * mA[77+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 78 / 97
if( idx==0 && idy > 78 && idy < 98 ){ 
  mA_L[ idy + 7644 ] = mA[ idy + 7644 ] / mA[ 7722 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>78 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 7644 ] * mA[78+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 79 / 97
if( idx==0 && idy > 79 && idy < 98 ){ 
  mA_L[ idy + 7742 ] = mA[ idy + 7742 ] / mA[ 7821 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>79 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 7742 ] * mA[79+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 80 / 97
if( idx==0 && idy > 80 && idy < 98 ){ 
  mA_L[ idy + 7840 ] = mA[ idy + 7840 ] / mA[ 7920 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>80 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 7840 ] * mA[80+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 81 / 97
if( idx==0 && idy > 81 && idy < 98 ){ 
  mA_L[ idy + 7938 ] = mA[ idy + 7938 ] / mA[ 8019 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>81 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 7938 ] * mA[81+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 82 / 97
if( idx==0 && idy > 82 && idy < 98 ){ 
  mA_L[ idy + 8036 ] = mA[ idy + 8036 ] / mA[ 8118 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>82 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 8036 ] * mA[82+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 83 / 97
if( idx==0 && idy > 83 && idy < 98 ){ 
  mA_L[ idy + 8134 ] = mA[ idy + 8134 ] / mA[ 8217 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>83 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 8134 ] * mA[83+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 84 / 97
if( idx==0 && idy > 84 && idy < 98 ){ 
  mA_L[ idy + 8232 ] = mA[ idy + 8232 ] / mA[ 8316 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>84 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 8232 ] * mA[84+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 85 / 97
if( idx==0 && idy > 85 && idy < 98 ){ 
  mA_L[ idy + 8330 ] = mA[ idy + 8330 ] / mA[ 8415 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>85 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 8330 ] * mA[85+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 86 / 97
if( idx==0 && idy > 86 && idy < 98 ){ 
  mA_L[ idy + 8428 ] = mA[ idy + 8428 ] / mA[ 8514 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>86 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 8428 ] * mA[86+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 87 / 97
if( idx==0 && idy > 87 && idy < 98 ){ 
  mA_L[ idy + 8526 ] = mA[ idy + 8526 ] / mA[ 8613 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>87 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 8526 ] * mA[87+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 88 / 97
if( idx==0 && idy > 88 && idy < 98 ){ 
  mA_L[ idy + 8624 ] = mA[ idy + 8624 ] / mA[ 8712 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>88 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 8624 ] * mA[88+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 89 / 97
if( idx==0 && idy > 89 && idy < 98 ){ 
  mA_L[ idy + 8722 ] = mA[ idy + 8722 ] / mA[ 8811 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>89 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 8722 ] * mA[89+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 90 / 97
if( idx==0 && idy > 90 && idy < 98 ){ 
  mA_L[ idy + 8820 ] = mA[ idy + 8820 ] / mA[ 8910 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>90 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 8820 ] * mA[90+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 91 / 97
if( idx==0 && idy > 91 && idy < 98 ){ 
  mA_L[ idy + 8918 ] = mA[ idy + 8918 ] / mA[ 9009 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>91 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 8918 ] * mA[91+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 92 / 97
if( idx==0 && idy > 92 && idy < 98 ){ 
  mA_L[ idy + 9016 ] = mA[ idy + 9016 ] / mA[ 9108 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>92 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 9016 ] * mA[92+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 93 / 97
if( idx==0 && idy > 93 && idy < 98 ){ 
  mA_L[ idy + 9114 ] = mA[ idy + 9114 ] / mA[ 9207 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>93 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 9114 ] * mA[93+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 94 / 97
if( idx==0 && idy > 94 && idy < 98 ){ 
  mA_L[ idy + 9212 ] = mA[ idy + 9212 ] / mA[ 9306 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>94 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 9212 ] * mA[94+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 95 / 97
if( idx==0 && idy > 95 && idy < 98 ){ 
  mA_L[ idy + 9310 ] = mA[ idy + 9310 ] / mA[ 9405 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>95 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 9310 ] * mA[95+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 96 / 97
if( idx==0 && idy > 96 && idy < 98 ){ 
  mA_L[ idy + 9408 ] = mA[ idy + 9408 ] / mA[ 9504 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>96 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 9408 ] * mA[96+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 97 / 97
if( idx==0 && idy > 97 && idy < 98 ){ 
  mA_L[ idy + 9506 ] = mA[ idy + 9506 ] / mA[ 9603 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>97 && idx < 98 && idy < 98 ){ 
  mA[ idx + 98*idy ] -= mA_L[ idx + 9506 ] * mA[97+ idy*98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION DONE!
//----------------------------------
//MATRIX MUL: mBY = mB * mY   
//Work item (idx,idy) compute mBY[idx,idy]   
if( idx < 98 && idy < 3 ) {  
float mulsum = 0.0f;
mulsum += mB[ 98*0 + idx ] * mY[ idy * 13 + 0 ];
mulsum += mB[ 98*1 + idx ] * mY[ idy * 13 + 1 ];
mulsum += mB[ 98*2 + idx ] * mY[ idy * 13 + 2 ];
mulsum += mB[ 98*3 + idx ] * mY[ idy * 13 + 3 ];
mulsum += mB[ 98*4 + idx ] * mY[ idy * 13 + 4 ];
mulsum += mB[ 98*5 + idx ] * mY[ idy * 13 + 5 ];
mulsum += mB[ 98*6 + idx ] * mY[ idy * 13 + 6 ];
mulsum += mB[ 98*7 + idx ] * mY[ idy * 13 + 7 ];
mulsum += mB[ 98*8 + idx ] * mY[ idy * 13 + 8 ];
mulsum += mB[ 98*9 + idx ] * mY[ idy * 13 + 9 ];
mulsum += mB[ 98*10 + idx ] * mY[ idy * 13 + 10 ];
mulsum += mB[ 98*11 + idx ] * mY[ idy * 13 + 11 ];
mulsum += mB[ 98*12 + idx ] * mY[ idy * 13 + 12 ];
mBY[idx+98*idy] = mulsum;
}
//MATRIX MUL COMPLETE! 
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System
// Solve L System - Row 0
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  mBY[ 0 + 98*idy ] = (mBY[ 0 + 98*idy ] - sum_i ) / mA_L[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 1
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 1 + 0 ] ;
  mBY[ 1 + 98*idy ] = (mBY[ 1 + 98*idy ] - sum_i ) / mA_L[ 99 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 2
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 2 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 2 + 98 ] ;
  mBY[ 2 + 98*idy ] = (mBY[ 2 + 98*idy ] - sum_i ) / mA_L[ 198 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 3
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 3 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 3 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 3 + 196 ] ;
  mBY[ 3 + 98*idy ] = (mBY[ 3 + 98*idy ] - sum_i ) / mA_L[ 297 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 4
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 4 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 4 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 4 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 4 + 294 ] ;
  mBY[ 4 + 98*idy ] = (mBY[ 4 + 98*idy ] - sum_i ) / mA_L[ 396 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 5
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 5 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 5 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 5 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 5 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 5 + 392 ] ;
  mBY[ 5 + 98*idy ] = (mBY[ 5 + 98*idy ] - sum_i ) / mA_L[ 495 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 6
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 6 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 6 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 6 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 6 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 6 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 6 + 490 ] ;
  mBY[ 6 + 98*idy ] = (mBY[ 6 + 98*idy ] - sum_i ) / mA_L[ 594 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 7
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 7 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 7 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 7 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 7 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 7 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 7 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 7 + 588 ] ;
  mBY[ 7 + 98*idy ] = (mBY[ 7 + 98*idy ] - sum_i ) / mA_L[ 693 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 8
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 8 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 8 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 8 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 8 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 8 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 8 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 8 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 8 + 686 ] ;
  mBY[ 8 + 98*idy ] = (mBY[ 8 + 98*idy ] - sum_i ) / mA_L[ 792 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 9
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 9 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 9 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 9 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 9 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 9 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 9 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 9 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 9 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 9 + 784 ] ;
  mBY[ 9 + 98*idy ] = (mBY[ 9 + 98*idy ] - sum_i ) / mA_L[ 891 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 10
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 10 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 10 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 10 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 10 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 10 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 10 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 10 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 10 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 10 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 10 + 882 ] ;
  mBY[ 10 + 98*idy ] = (mBY[ 10 + 98*idy ] - sum_i ) / mA_L[ 990 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 11
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 11 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 11 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 11 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 11 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 11 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 11 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 11 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 11 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 11 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 11 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 11 + 980 ] ;
  mBY[ 11 + 98*idy ] = (mBY[ 11 + 98*idy ] - sum_i ) / mA_L[ 1089 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 12
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 12 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 12 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 12 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 12 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 12 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 12 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 12 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 12 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 12 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 12 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 12 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 12 + 1078 ] ;
  mBY[ 12 + 98*idy ] = (mBY[ 12 + 98*idy ] - sum_i ) / mA_L[ 1188 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 13
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 13 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 13 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 13 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 13 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 13 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 13 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 13 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 13 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 13 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 13 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 13 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 13 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 13 + 1176 ] ;
  mBY[ 13 + 98*idy ] = (mBY[ 13 + 98*idy ] - sum_i ) / mA_L[ 1287 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 14
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 14 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 14 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 14 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 14 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 14 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 14 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 14 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 14 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 14 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 14 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 14 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 14 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 14 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 14 + 1274 ] ;
  mBY[ 14 + 98*idy ] = (mBY[ 14 + 98*idy ] - sum_i ) / mA_L[ 1386 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 15
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 15 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 15 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 15 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 15 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 15 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 15 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 15 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 15 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 15 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 15 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 15 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 15 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 15 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 15 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 15 + 1372 ] ;
  mBY[ 15 + 98*idy ] = (mBY[ 15 + 98*idy ] - sum_i ) / mA_L[ 1485 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 16
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 16 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 16 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 16 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 16 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 16 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 16 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 16 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 16 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 16 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 16 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 16 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 16 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 16 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 16 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 16 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 16 + 1470 ] ;
  mBY[ 16 + 98*idy ] = (mBY[ 16 + 98*idy ] - sum_i ) / mA_L[ 1584 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 17
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 17 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 17 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 17 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 17 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 17 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 17 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 17 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 17 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 17 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 17 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 17 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 17 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 17 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 17 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 17 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 17 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 17 + 1568 ] ;
  mBY[ 17 + 98*idy ] = (mBY[ 17 + 98*idy ] - sum_i ) / mA_L[ 1683 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 18
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 18 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 18 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 18 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 18 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 18 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 18 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 18 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 18 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 18 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 18 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 18 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 18 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 18 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 18 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 18 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 18 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 18 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 18 + 1666 ] ;
  mBY[ 18 + 98*idy ] = (mBY[ 18 + 98*idy ] - sum_i ) / mA_L[ 1782 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 19
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 19 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 19 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 19 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 19 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 19 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 19 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 19 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 19 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 19 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 19 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 19 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 19 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 19 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 19 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 19 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 19 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 19 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 19 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 19 + 1764 ] ;
  mBY[ 19 + 98*idy ] = (mBY[ 19 + 98*idy ] - sum_i ) / mA_L[ 1881 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 20
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 20 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 20 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 20 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 20 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 20 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 20 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 20 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 20 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 20 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 20 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 20 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 20 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 20 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 20 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 20 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 20 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 20 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 20 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 20 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 20 + 1862 ] ;
  mBY[ 20 + 98*idy ] = (mBY[ 20 + 98*idy ] - sum_i ) / mA_L[ 1980 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 21
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 21 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 21 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 21 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 21 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 21 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 21 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 21 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 21 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 21 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 21 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 21 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 21 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 21 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 21 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 21 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 21 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 21 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 21 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 21 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 21 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 21 + 1960 ] ;
  mBY[ 21 + 98*idy ] = (mBY[ 21 + 98*idy ] - sum_i ) / mA_L[ 2079 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 22
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 22 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 22 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 22 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 22 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 22 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 22 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 22 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 22 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 22 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 22 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 22 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 22 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 22 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 22 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 22 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 22 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 22 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 22 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 22 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 22 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 22 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 22 + 2058 ] ;
  mBY[ 22 + 98*idy ] = (mBY[ 22 + 98*idy ] - sum_i ) / mA_L[ 2178 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 23
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 23 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 23 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 23 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 23 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 23 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 23 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 23 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 23 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 23 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 23 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 23 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 23 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 23 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 23 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 23 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 23 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 23 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 23 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 23 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 23 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 23 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 23 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 23 + 2156 ] ;
  mBY[ 23 + 98*idy ] = (mBY[ 23 + 98*idy ] - sum_i ) / mA_L[ 2277 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 24
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 24 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 24 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 24 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 24 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 24 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 24 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 24 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 24 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 24 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 24 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 24 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 24 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 24 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 24 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 24 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 24 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 24 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 24 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 24 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 24 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 24 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 24 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 24 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 24 + 2254 ] ;
  mBY[ 24 + 98*idy ] = (mBY[ 24 + 98*idy ] - sum_i ) / mA_L[ 2376 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 25
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 25 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 25 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 25 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 25 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 25 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 25 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 25 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 25 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 25 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 25 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 25 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 25 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 25 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 25 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 25 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 25 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 25 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 25 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 25 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 25 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 25 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 25 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 25 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 25 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 25 + 2352 ] ;
  mBY[ 25 + 98*idy ] = (mBY[ 25 + 98*idy ] - sum_i ) / mA_L[ 2475 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 26
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 26 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 26 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 26 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 26 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 26 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 26 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 26 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 26 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 26 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 26 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 26 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 26 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 26 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 26 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 26 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 26 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 26 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 26 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 26 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 26 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 26 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 26 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 26 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 26 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 26 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 26 + 2450 ] ;
  mBY[ 26 + 98*idy ] = (mBY[ 26 + 98*idy ] - sum_i ) / mA_L[ 2574 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 27
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 27 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 27 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 27 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 27 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 27 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 27 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 27 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 27 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 27 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 27 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 27 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 27 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 27 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 27 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 27 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 27 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 27 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 27 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 27 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 27 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 27 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 27 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 27 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 27 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 27 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 27 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 27 + 2548 ] ;
  mBY[ 27 + 98*idy ] = (mBY[ 27 + 98*idy ] - sum_i ) / mA_L[ 2673 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 28
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 28 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 28 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 28 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 28 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 28 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 28 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 28 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 28 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 28 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 28 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 28 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 28 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 28 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 28 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 28 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 28 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 28 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 28 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 28 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 28 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 28 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 28 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 28 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 28 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 28 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 28 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 28 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 28 + 2646 ] ;
  mBY[ 28 + 98*idy ] = (mBY[ 28 + 98*idy ] - sum_i ) / mA_L[ 2772 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 29
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 29 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 29 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 29 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 29 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 29 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 29 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 29 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 29 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 29 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 29 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 29 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 29 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 29 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 29 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 29 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 29 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 29 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 29 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 29 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 29 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 29 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 29 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 29 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 29 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 29 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 29 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 29 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 29 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 29 + 2744 ] ;
  mBY[ 29 + 98*idy ] = (mBY[ 29 + 98*idy ] - sum_i ) / mA_L[ 2871 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 30
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 30 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 30 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 30 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 30 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 30 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 30 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 30 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 30 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 30 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 30 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 30 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 30 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 30 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 30 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 30 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 30 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 30 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 30 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 30 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 30 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 30 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 30 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 30 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 30 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 30 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 30 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 30 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 30 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 30 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 30 + 2842 ] ;
  mBY[ 30 + 98*idy ] = (mBY[ 30 + 98*idy ] - sum_i ) / mA_L[ 2970 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 31
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 31 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 31 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 31 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 31 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 31 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 31 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 31 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 31 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 31 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 31 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 31 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 31 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 31 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 31 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 31 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 31 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 31 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 31 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 31 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 31 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 31 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 31 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 31 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 31 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 31 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 31 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 31 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 31 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 31 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 31 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 31 + 2940 ] ;
  mBY[ 31 + 98*idy ] = (mBY[ 31 + 98*idy ] - sum_i ) / mA_L[ 3069 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 32
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 32 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 32 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 32 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 32 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 32 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 32 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 32 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 32 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 32 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 32 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 32 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 32 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 32 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 32 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 32 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 32 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 32 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 32 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 32 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 32 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 32 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 32 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 32 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 32 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 32 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 32 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 32 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 32 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 32 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 32 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 32 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 32 + 3038 ] ;
  mBY[ 32 + 98*idy ] = (mBY[ 32 + 98*idy ] - sum_i ) / mA_L[ 3168 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 33
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 33 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 33 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 33 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 33 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 33 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 33 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 33 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 33 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 33 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 33 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 33 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 33 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 33 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 33 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 33 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 33 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 33 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 33 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 33 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 33 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 33 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 33 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 33 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 33 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 33 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 33 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 33 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 33 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 33 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 33 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 33 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 33 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 33 + 3136 ] ;
  mBY[ 33 + 98*idy ] = (mBY[ 33 + 98*idy ] - sum_i ) / mA_L[ 3267 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 34
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 34 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 34 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 34 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 34 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 34 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 34 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 34 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 34 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 34 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 34 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 34 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 34 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 34 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 34 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 34 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 34 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 34 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 34 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 34 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 34 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 34 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 34 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 34 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 34 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 34 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 34 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 34 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 34 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 34 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 34 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 34 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 34 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 34 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 34 + 3234 ] ;
  mBY[ 34 + 98*idy ] = (mBY[ 34 + 98*idy ] - sum_i ) / mA_L[ 3366 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 35
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 35 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 35 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 35 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 35 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 35 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 35 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 35 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 35 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 35 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 35 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 35 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 35 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 35 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 35 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 35 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 35 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 35 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 35 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 35 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 35 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 35 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 35 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 35 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 35 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 35 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 35 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 35 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 35 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 35 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 35 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 35 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 35 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 35 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 35 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 35 + 3332 ] ;
  mBY[ 35 + 98*idy ] = (mBY[ 35 + 98*idy ] - sum_i ) / mA_L[ 3465 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 36
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 36 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 36 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 36 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 36 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 36 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 36 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 36 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 36 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 36 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 36 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 36 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 36 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 36 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 36 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 36 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 36 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 36 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 36 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 36 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 36 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 36 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 36 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 36 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 36 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 36 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 36 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 36 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 36 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 36 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 36 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 36 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 36 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 36 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 36 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 36 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 36 + 3430 ] ;
  mBY[ 36 + 98*idy ] = (mBY[ 36 + 98*idy ] - sum_i ) / mA_L[ 3564 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 37
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 37 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 37 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 37 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 37 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 37 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 37 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 37 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 37 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 37 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 37 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 37 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 37 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 37 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 37 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 37 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 37 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 37 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 37 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 37 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 37 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 37 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 37 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 37 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 37 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 37 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 37 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 37 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 37 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 37 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 37 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 37 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 37 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 37 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 37 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 37 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 37 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 37 + 3528 ] ;
  mBY[ 37 + 98*idy ] = (mBY[ 37 + 98*idy ] - sum_i ) / mA_L[ 3663 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 38
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 38 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 38 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 38 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 38 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 38 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 38 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 38 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 38 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 38 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 38 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 38 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 38 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 38 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 38 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 38 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 38 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 38 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 38 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 38 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 38 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 38 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 38 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 38 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 38 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 38 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 38 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 38 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 38 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 38 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 38 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 38 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 38 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 38 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 38 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 38 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 38 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 38 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 38 + 3626 ] ;
  mBY[ 38 + 98*idy ] = (mBY[ 38 + 98*idy ] - sum_i ) / mA_L[ 3762 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 39
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 39 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 39 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 39 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 39 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 39 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 39 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 39 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 39 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 39 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 39 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 39 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 39 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 39 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 39 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 39 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 39 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 39 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 39 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 39 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 39 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 39 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 39 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 39 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 39 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 39 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 39 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 39 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 39 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 39 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 39 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 39 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 39 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 39 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 39 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 39 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 39 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 39 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 39 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 39 + 3724 ] ;
  mBY[ 39 + 98*idy ] = (mBY[ 39 + 98*idy ] - sum_i ) / mA_L[ 3861 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 40
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 40 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 40 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 40 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 40 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 40 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 40 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 40 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 40 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 40 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 40 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 40 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 40 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 40 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 40 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 40 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 40 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 40 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 40 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 40 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 40 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 40 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 40 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 40 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 40 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 40 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 40 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 40 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 40 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 40 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 40 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 40 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 40 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 40 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 40 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 40 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 40 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 40 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 40 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 40 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 40 + 3822 ] ;
  mBY[ 40 + 98*idy ] = (mBY[ 40 + 98*idy ] - sum_i ) / mA_L[ 3960 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 41
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 41 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 41 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 41 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 41 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 41 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 41 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 41 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 41 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 41 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 41 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 41 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 41 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 41 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 41 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 41 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 41 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 41 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 41 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 41 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 41 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 41 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 41 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 41 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 41 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 41 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 41 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 41 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 41 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 41 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 41 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 41 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 41 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 41 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 41 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 41 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 41 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 41 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 41 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 41 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 41 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 41 + 3920 ] ;
  mBY[ 41 + 98*idy ] = (mBY[ 41 + 98*idy ] - sum_i ) / mA_L[ 4059 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 42
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 42 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 42 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 42 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 42 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 42 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 42 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 42 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 42 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 42 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 42 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 42 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 42 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 42 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 42 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 42 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 42 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 42 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 42 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 42 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 42 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 42 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 42 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 42 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 42 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 42 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 42 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 42 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 42 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 42 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 42 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 42 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 42 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 42 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 42 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 42 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 42 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 42 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 42 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 42 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 42 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 42 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 42 + 4018 ] ;
  mBY[ 42 + 98*idy ] = (mBY[ 42 + 98*idy ] - sum_i ) / mA_L[ 4158 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 43
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 43 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 43 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 43 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 43 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 43 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 43 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 43 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 43 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 43 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 43 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 43 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 43 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 43 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 43 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 43 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 43 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 43 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 43 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 43 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 43 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 43 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 43 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 43 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 43 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 43 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 43 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 43 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 43 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 43 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 43 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 43 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 43 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 43 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 43 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 43 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 43 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 43 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 43 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 43 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 43 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 43 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 43 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 43 + 4116 ] ;
  mBY[ 43 + 98*idy ] = (mBY[ 43 + 98*idy ] - sum_i ) / mA_L[ 4257 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 44
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 44 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 44 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 44 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 44 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 44 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 44 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 44 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 44 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 44 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 44 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 44 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 44 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 44 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 44 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 44 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 44 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 44 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 44 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 44 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 44 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 44 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 44 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 44 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 44 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 44 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 44 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 44 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 44 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 44 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 44 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 44 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 44 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 44 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 44 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 44 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 44 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 44 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 44 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 44 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 44 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 44 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 44 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 44 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 44 + 4214 ] ;
  mBY[ 44 + 98*idy ] = (mBY[ 44 + 98*idy ] - sum_i ) / mA_L[ 4356 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 45
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 45 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 45 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 45 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 45 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 45 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 45 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 45 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 45 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 45 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 45 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 45 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 45 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 45 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 45 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 45 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 45 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 45 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 45 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 45 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 45 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 45 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 45 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 45 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 45 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 45 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 45 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 45 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 45 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 45 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 45 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 45 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 45 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 45 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 45 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 45 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 45 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 45 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 45 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 45 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 45 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 45 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 45 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 45 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 45 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 45 + 4312 ] ;
  mBY[ 45 + 98*idy ] = (mBY[ 45 + 98*idy ] - sum_i ) / mA_L[ 4455 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 46
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 46 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 46 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 46 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 46 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 46 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 46 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 46 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 46 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 46 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 46 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 46 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 46 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 46 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 46 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 46 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 46 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 46 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 46 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 46 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 46 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 46 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 46 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 46 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 46 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 46 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 46 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 46 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 46 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 46 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 46 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 46 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 46 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 46 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 46 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 46 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 46 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 46 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 46 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 46 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 46 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 46 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 46 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 46 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 46 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 46 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 46 + 4410 ] ;
  mBY[ 46 + 98*idy ] = (mBY[ 46 + 98*idy ] - sum_i ) / mA_L[ 4554 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 47
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 47 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 47 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 47 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 47 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 47 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 47 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 47 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 47 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 47 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 47 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 47 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 47 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 47 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 47 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 47 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 47 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 47 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 47 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 47 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 47 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 47 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 47 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 47 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 47 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 47 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 47 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 47 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 47 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 47 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 47 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 47 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 47 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 47 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 47 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 47 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 47 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 47 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 47 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 47 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 47 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 47 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 47 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 47 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 47 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 47 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 47 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 47 + 4508 ] ;
  mBY[ 47 + 98*idy ] = (mBY[ 47 + 98*idy ] - sum_i ) / mA_L[ 4653 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 48
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 48 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 48 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 48 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 48 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 48 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 48 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 48 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 48 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 48 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 48 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 48 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 48 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 48 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 48 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 48 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 48 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 48 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 48 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 48 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 48 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 48 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 48 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 48 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 48 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 48 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 48 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 48 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 48 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 48 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 48 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 48 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 48 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 48 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 48 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 48 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 48 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 48 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 48 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 48 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 48 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 48 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 48 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 48 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 48 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 48 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 48 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 48 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 48 + 4606 ] ;
  mBY[ 48 + 98*idy ] = (mBY[ 48 + 98*idy ] - sum_i ) / mA_L[ 4752 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 49
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 49 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 49 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 49 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 49 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 49 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 49 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 49 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 49 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 49 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 49 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 49 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 49 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 49 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 49 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 49 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 49 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 49 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 49 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 49 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 49 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 49 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 49 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 49 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 49 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 49 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 49 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 49 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 49 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 49 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 49 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 49 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 49 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 49 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 49 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 49 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 49 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 49 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 49 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 49 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 49 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 49 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 49 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 49 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 49 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 49 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 49 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 49 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 49 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 49 + 4704 ] ;
  mBY[ 49 + 98*idy ] = (mBY[ 49 + 98*idy ] - sum_i ) / mA_L[ 4851 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 50
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 50 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 50 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 50 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 50 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 50 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 50 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 50 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 50 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 50 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 50 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 50 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 50 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 50 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 50 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 50 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 50 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 50 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 50 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 50 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 50 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 50 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 50 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 50 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 50 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 50 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 50 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 50 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 50 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 50 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 50 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 50 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 50 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 50 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 50 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 50 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 50 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 50 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 50 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 50 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 50 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 50 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 50 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 50 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 50 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 50 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 50 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 50 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 50 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 50 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 50 + 4802 ] ;
  mBY[ 50 + 98*idy ] = (mBY[ 50 + 98*idy ] - sum_i ) / mA_L[ 4950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 51
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 51 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 51 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 51 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 51 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 51 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 51 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 51 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 51 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 51 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 51 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 51 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 51 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 51 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 51 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 51 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 51 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 51 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 51 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 51 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 51 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 51 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 51 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 51 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 51 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 51 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 51 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 51 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 51 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 51 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 51 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 51 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 51 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 51 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 51 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 51 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 51 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 51 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 51 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 51 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 51 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 51 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 51 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 51 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 51 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 51 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 51 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 51 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 51 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 51 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 51 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 51 + 4900 ] ;
  mBY[ 51 + 98*idy ] = (mBY[ 51 + 98*idy ] - sum_i ) / mA_L[ 5049 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 52
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 52 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 52 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 52 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 52 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 52 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 52 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 52 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 52 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 52 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 52 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 52 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 52 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 52 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 52 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 52 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 52 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 52 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 52 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 52 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 52 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 52 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 52 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 52 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 52 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 52 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 52 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 52 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 52 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 52 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 52 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 52 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 52 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 52 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 52 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 52 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 52 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 52 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 52 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 52 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 52 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 52 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 52 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 52 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 52 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 52 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 52 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 52 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 52 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 52 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 52 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 52 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 52 + 4998 ] ;
  mBY[ 52 + 98*idy ] = (mBY[ 52 + 98*idy ] - sum_i ) / mA_L[ 5148 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 53
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 53 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 53 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 53 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 53 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 53 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 53 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 53 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 53 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 53 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 53 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 53 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 53 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 53 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 53 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 53 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 53 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 53 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 53 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 53 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 53 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 53 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 53 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 53 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 53 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 53 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 53 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 53 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 53 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 53 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 53 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 53 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 53 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 53 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 53 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 53 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 53 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 53 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 53 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 53 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 53 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 53 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 53 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 53 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 53 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 53 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 53 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 53 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 53 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 53 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 53 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 53 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 53 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 53 + 5096 ] ;
  mBY[ 53 + 98*idy ] = (mBY[ 53 + 98*idy ] - sum_i ) / mA_L[ 5247 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 54
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 54 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 54 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 54 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 54 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 54 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 54 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 54 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 54 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 54 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 54 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 54 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 54 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 54 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 54 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 54 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 54 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 54 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 54 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 54 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 54 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 54 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 54 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 54 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 54 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 54 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 54 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 54 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 54 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 54 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 54 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 54 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 54 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 54 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 54 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 54 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 54 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 54 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 54 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 54 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 54 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 54 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 54 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 54 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 54 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 54 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 54 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 54 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 54 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 54 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 54 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 54 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 54 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 54 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 54 + 5194 ] ;
  mBY[ 54 + 98*idy ] = (mBY[ 54 + 98*idy ] - sum_i ) / mA_L[ 5346 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 55
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 55 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 55 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 55 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 55 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 55 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 55 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 55 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 55 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 55 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 55 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 55 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 55 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 55 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 55 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 55 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 55 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 55 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 55 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 55 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 55 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 55 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 55 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 55 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 55 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 55 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 55 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 55 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 55 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 55 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 55 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 55 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 55 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 55 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 55 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 55 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 55 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 55 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 55 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 55 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 55 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 55 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 55 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 55 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 55 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 55 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 55 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 55 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 55 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 55 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 55 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 55 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 55 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 55 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 55 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 55 + 5292 ] ;
  mBY[ 55 + 98*idy ] = (mBY[ 55 + 98*idy ] - sum_i ) / mA_L[ 5445 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 56
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 56 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 56 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 56 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 56 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 56 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 56 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 56 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 56 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 56 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 56 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 56 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 56 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 56 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 56 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 56 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 56 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 56 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 56 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 56 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 56 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 56 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 56 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 56 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 56 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 56 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 56 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 56 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 56 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 56 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 56 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 56 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 56 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 56 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 56 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 56 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 56 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 56 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 56 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 56 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 56 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 56 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 56 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 56 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 56 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 56 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 56 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 56 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 56 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 56 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 56 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 56 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 56 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 56 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 56 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 56 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 56 + 5390 ] ;
  mBY[ 56 + 98*idy ] = (mBY[ 56 + 98*idy ] - sum_i ) / mA_L[ 5544 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 57
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 57 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 57 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 57 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 57 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 57 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 57 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 57 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 57 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 57 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 57 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 57 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 57 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 57 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 57 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 57 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 57 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 57 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 57 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 57 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 57 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 57 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 57 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 57 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 57 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 57 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 57 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 57 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 57 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 57 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 57 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 57 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 57 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 57 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 57 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 57 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 57 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 57 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 57 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 57 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 57 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 57 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 57 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 57 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 57 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 57 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 57 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 57 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 57 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 57 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 57 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 57 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 57 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 57 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 57 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 57 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 57 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 57 + 5488 ] ;
  mBY[ 57 + 98*idy ] = (mBY[ 57 + 98*idy ] - sum_i ) / mA_L[ 5643 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 58
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 58 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 58 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 58 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 58 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 58 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 58 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 58 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 58 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 58 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 58 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 58 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 58 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 58 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 58 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 58 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 58 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 58 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 58 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 58 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 58 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 58 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 58 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 58 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 58 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 58 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 58 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 58 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 58 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 58 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 58 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 58 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 58 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 58 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 58 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 58 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 58 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 58 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 58 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 58 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 58 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 58 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 58 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 58 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 58 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 58 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 58 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 58 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 58 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 58 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 58 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 58 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 58 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 58 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 58 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 58 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 58 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 58 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 58 + 5586 ] ;
  mBY[ 58 + 98*idy ] = (mBY[ 58 + 98*idy ] - sum_i ) / mA_L[ 5742 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 59
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 59 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 59 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 59 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 59 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 59 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 59 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 59 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 59 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 59 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 59 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 59 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 59 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 59 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 59 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 59 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 59 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 59 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 59 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 59 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 59 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 59 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 59 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 59 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 59 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 59 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 59 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 59 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 59 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 59 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 59 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 59 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 59 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 59 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 59 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 59 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 59 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 59 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 59 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 59 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 59 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 59 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 59 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 59 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 59 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 59 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 59 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 59 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 59 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 59 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 59 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 59 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 59 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 59 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 59 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 59 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 59 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 59 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 59 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 59 + 5684 ] ;
  mBY[ 59 + 98*idy ] = (mBY[ 59 + 98*idy ] - sum_i ) / mA_L[ 5841 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 60
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 60 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 60 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 60 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 60 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 60 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 60 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 60 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 60 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 60 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 60 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 60 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 60 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 60 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 60 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 60 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 60 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 60 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 60 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 60 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 60 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 60 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 60 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 60 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 60 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 60 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 60 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 60 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 60 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 60 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 60 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 60 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 60 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 60 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 60 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 60 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 60 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 60 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 60 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 60 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 60 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 60 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 60 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 60 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 60 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 60 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 60 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 60 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 60 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 60 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 60 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 60 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 60 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 60 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 60 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 60 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 60 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 60 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 60 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 60 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 60 + 5782 ] ;
  mBY[ 60 + 98*idy ] = (mBY[ 60 + 98*idy ] - sum_i ) / mA_L[ 5940 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 61
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 61 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 61 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 61 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 61 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 61 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 61 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 61 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 61 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 61 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 61 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 61 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 61 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 61 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 61 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 61 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 61 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 61 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 61 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 61 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 61 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 61 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 61 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 61 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 61 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 61 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 61 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 61 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 61 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 61 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 61 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 61 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 61 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 61 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 61 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 61 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 61 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 61 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 61 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 61 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 61 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 61 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 61 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 61 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 61 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 61 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 61 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 61 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 61 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 61 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 61 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 61 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 61 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 61 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 61 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 61 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 61 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 61 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 61 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 61 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 61 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 61 + 5880 ] ;
  mBY[ 61 + 98*idy ] = (mBY[ 61 + 98*idy ] - sum_i ) / mA_L[ 6039 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 62
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 62 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 62 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 62 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 62 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 62 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 62 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 62 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 62 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 62 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 62 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 62 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 62 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 62 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 62 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 62 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 62 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 62 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 62 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 62 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 62 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 62 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 62 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 62 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 62 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 62 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 62 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 62 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 62 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 62 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 62 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 62 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 62 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 62 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 62 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 62 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 62 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 62 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 62 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 62 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 62 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 62 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 62 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 62 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 62 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 62 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 62 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 62 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 62 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 62 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 62 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 62 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 62 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 62 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 62 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 62 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 62 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 62 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 62 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 62 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 62 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 62 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 62 + 5978 ] ;
  mBY[ 62 + 98*idy ] = (mBY[ 62 + 98*idy ] - sum_i ) / mA_L[ 6138 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 63
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 63 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 63 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 63 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 63 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 63 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 63 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 63 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 63 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 63 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 63 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 63 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 63 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 63 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 63 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 63 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 63 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 63 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 63 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 63 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 63 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 63 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 63 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 63 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 63 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 63 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 63 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 63 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 63 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 63 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 63 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 63 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 63 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 63 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 63 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 63 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 63 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 63 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 63 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 63 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 63 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 63 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 63 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 63 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 63 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 63 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 63 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 63 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 63 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 63 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 63 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 63 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 63 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 63 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 63 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 63 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 63 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 63 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 63 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 63 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 63 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 63 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 63 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 63 + 6076 ] ;
  mBY[ 63 + 98*idy ] = (mBY[ 63 + 98*idy ] - sum_i ) / mA_L[ 6237 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 64
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 64 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 64 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 64 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 64 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 64 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 64 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 64 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 64 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 64 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 64 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 64 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 64 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 64 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 64 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 64 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 64 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 64 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 64 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 64 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 64 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 64 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 64 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 64 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 64 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 64 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 64 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 64 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 64 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 64 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 64 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 64 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 64 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 64 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 64 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 64 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 64 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 64 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 64 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 64 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 64 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 64 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 64 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 64 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 64 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 64 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 64 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 64 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 64 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 64 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 64 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 64 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 64 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 64 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 64 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 64 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 64 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 64 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 64 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 64 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 64 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 64 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 64 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 64 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 64 + 6174 ] ;
  mBY[ 64 + 98*idy ] = (mBY[ 64 + 98*idy ] - sum_i ) / mA_L[ 6336 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 65
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 65 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 65 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 65 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 65 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 65 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 65 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 65 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 65 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 65 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 65 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 65 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 65 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 65 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 65 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 65 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 65 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 65 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 65 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 65 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 65 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 65 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 65 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 65 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 65 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 65 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 65 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 65 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 65 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 65 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 65 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 65 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 65 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 65 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 65 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 65 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 65 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 65 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 65 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 65 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 65 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 65 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 65 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 65 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 65 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 65 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 65 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 65 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 65 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 65 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 65 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 65 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 65 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 65 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 65 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 65 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 65 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 65 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 65 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 65 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 65 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 65 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 65 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 65 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 65 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 65 + 6272 ] ;
  mBY[ 65 + 98*idy ] = (mBY[ 65 + 98*idy ] - sum_i ) / mA_L[ 6435 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 66
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 66 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 66 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 66 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 66 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 66 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 66 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 66 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 66 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 66 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 66 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 66 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 66 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 66 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 66 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 66 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 66 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 66 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 66 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 66 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 66 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 66 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 66 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 66 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 66 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 66 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 66 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 66 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 66 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 66 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 66 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 66 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 66 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 66 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 66 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 66 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 66 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 66 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 66 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 66 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 66 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 66 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 66 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 66 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 66 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 66 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 66 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 66 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 66 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 66 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 66 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 66 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 66 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 66 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 66 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 66 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 66 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 66 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 66 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 66 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 66 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 66 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 66 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 66 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 66 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 66 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 66 + 6370 ] ;
  mBY[ 66 + 98*idy ] = (mBY[ 66 + 98*idy ] - sum_i ) / mA_L[ 6534 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 67
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 67 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 67 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 67 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 67 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 67 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 67 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 67 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 67 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 67 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 67 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 67 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 67 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 67 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 67 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 67 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 67 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 67 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 67 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 67 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 67 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 67 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 67 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 67 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 67 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 67 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 67 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 67 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 67 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 67 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 67 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 67 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 67 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 67 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 67 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 67 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 67 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 67 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 67 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 67 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 67 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 67 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 67 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 67 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 67 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 67 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 67 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 67 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 67 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 67 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 67 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 67 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 67 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 67 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 67 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 67 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 67 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 67 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 67 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 67 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 67 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 67 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 67 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 67 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 67 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 67 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 67 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 67 + 6468 ] ;
  mBY[ 67 + 98*idy ] = (mBY[ 67 + 98*idy ] - sum_i ) / mA_L[ 6633 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 68
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 68 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 68 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 68 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 68 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 68 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 68 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 68 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 68 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 68 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 68 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 68 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 68 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 68 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 68 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 68 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 68 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 68 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 68 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 68 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 68 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 68 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 68 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 68 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 68 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 68 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 68 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 68 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 68 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 68 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 68 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 68 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 68 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 68 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 68 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 68 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 68 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 68 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 68 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 68 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 68 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 68 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 68 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 68 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 68 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 68 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 68 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 68 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 68 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 68 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 68 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 68 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 68 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 68 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 68 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 68 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 68 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 68 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 68 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 68 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 68 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 68 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 68 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 68 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 68 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 68 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 68 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 68 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 68 + 6566 ] ;
  mBY[ 68 + 98*idy ] = (mBY[ 68 + 98*idy ] - sum_i ) / mA_L[ 6732 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 69
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 69 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 69 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 69 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 69 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 69 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 69 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 69 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 69 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 69 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 69 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 69 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 69 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 69 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 69 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 69 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 69 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 69 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 69 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 69 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 69 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 69 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 69 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 69 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 69 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 69 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 69 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 69 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 69 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 69 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 69 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 69 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 69 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 69 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 69 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 69 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 69 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 69 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 69 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 69 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 69 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 69 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 69 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 69 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 69 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 69 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 69 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 69 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 69 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 69 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 69 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 69 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 69 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 69 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 69 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 69 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 69 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 69 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 69 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 69 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 69 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 69 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 69 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 69 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 69 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 69 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 69 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 69 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 69 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 69 + 6664 ] ;
  mBY[ 69 + 98*idy ] = (mBY[ 69 + 98*idy ] - sum_i ) / mA_L[ 6831 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 70
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 70 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 70 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 70 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 70 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 70 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 70 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 70 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 70 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 70 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 70 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 70 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 70 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 70 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 70 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 70 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 70 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 70 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 70 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 70 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 70 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 70 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 70 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 70 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 70 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 70 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 70 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 70 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 70 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 70 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 70 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 70 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 70 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 70 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 70 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 70 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 70 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 70 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 70 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 70 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 70 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 70 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 70 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 70 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 70 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 70 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 70 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 70 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 70 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 70 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 70 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 70 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 70 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 70 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 70 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 70 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 70 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 70 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 70 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 70 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 70 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 70 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 70 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 70 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 70 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 70 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 70 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 70 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 70 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 70 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 70 + 6762 ] ;
  mBY[ 70 + 98*idy ] = (mBY[ 70 + 98*idy ] - sum_i ) / mA_L[ 6930 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 71
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 71 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 71 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 71 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 71 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 71 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 71 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 71 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 71 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 71 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 71 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 71 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 71 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 71 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 71 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 71 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 71 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 71 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 71 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 71 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 71 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 71 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 71 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 71 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 71 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 71 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 71 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 71 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 71 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 71 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 71 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 71 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 71 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 71 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 71 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 71 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 71 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 71 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 71 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 71 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 71 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 71 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 71 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 71 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 71 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 71 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 71 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 71 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 71 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 71 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 71 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 71 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 71 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 71 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 71 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 71 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 71 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 71 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 71 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 71 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 71 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 71 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 71 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 71 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 71 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 71 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 71 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 71 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 71 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 71 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 71 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 71 + 6860 ] ;
  mBY[ 71 + 98*idy ] = (mBY[ 71 + 98*idy ] - sum_i ) / mA_L[ 7029 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 72
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 72 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 72 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 72 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 72 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 72 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 72 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 72 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 72 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 72 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 72 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 72 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 72 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 72 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 72 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 72 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 72 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 72 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 72 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 72 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 72 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 72 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 72 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 72 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 72 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 72 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 72 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 72 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 72 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 72 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 72 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 72 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 72 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 72 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 72 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 72 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 72 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 72 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 72 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 72 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 72 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 72 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 72 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 72 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 72 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 72 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 72 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 72 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 72 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 72 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 72 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 72 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 72 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 72 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 72 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 72 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 72 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 72 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 72 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 72 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 72 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 72 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 72 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 72 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 72 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 72 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 72 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 72 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 72 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 72 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 72 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 72 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 72 + 6958 ] ;
  mBY[ 72 + 98*idy ] = (mBY[ 72 + 98*idy ] - sum_i ) / mA_L[ 7128 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 73
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 73 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 73 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 73 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 73 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 73 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 73 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 73 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 73 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 73 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 73 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 73 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 73 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 73 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 73 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 73 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 73 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 73 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 73 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 73 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 73 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 73 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 73 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 73 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 73 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 73 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 73 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 73 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 73 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 73 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 73 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 73 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 73 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 73 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 73 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 73 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 73 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 73 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 73 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 73 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 73 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 73 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 73 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 73 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 73 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 73 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 73 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 73 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 73 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 73 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 73 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 73 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 73 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 73 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 73 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 73 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 73 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 73 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 73 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 73 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 73 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 73 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 73 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 73 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 73 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 73 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 73 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 73 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 73 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 73 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 73 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 73 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 73 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 73 + 7056 ] ;
  mBY[ 73 + 98*idy ] = (mBY[ 73 + 98*idy ] - sum_i ) / mA_L[ 7227 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 74
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 74 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 74 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 74 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 74 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 74 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 74 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 74 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 74 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 74 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 74 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 74 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 74 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 74 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 74 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 74 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 74 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 74 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 74 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 74 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 74 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 74 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 74 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 74 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 74 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 74 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 74 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 74 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 74 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 74 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 74 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 74 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 74 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 74 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 74 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 74 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 74 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 74 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 74 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 74 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 74 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 74 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 74 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 74 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 74 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 74 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 74 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 74 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 74 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 74 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 74 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 74 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 74 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 74 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 74 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 74 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 74 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 74 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 74 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 74 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 74 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 74 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 74 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 74 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 74 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 74 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 74 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 74 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 74 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 74 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 74 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 74 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 74 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 74 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 74 + 7154 ] ;
  mBY[ 74 + 98*idy ] = (mBY[ 74 + 98*idy ] - sum_i ) / mA_L[ 7326 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 75
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 75 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 75 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 75 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 75 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 75 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 75 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 75 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 75 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 75 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 75 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 75 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 75 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 75 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 75 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 75 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 75 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 75 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 75 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 75 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 75 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 75 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 75 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 75 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 75 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 75 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 75 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 75 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 75 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 75 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 75 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 75 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 75 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 75 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 75 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 75 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 75 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 75 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 75 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 75 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 75 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 75 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 75 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 75 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 75 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 75 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 75 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 75 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 75 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 75 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 75 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 75 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 75 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 75 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 75 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 75 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 75 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 75 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 75 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 75 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 75 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 75 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 75 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 75 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 75 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 75 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 75 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 75 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 75 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 75 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 75 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 75 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 75 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 75 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 75 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 75 + 7252 ] ;
  mBY[ 75 + 98*idy ] = (mBY[ 75 + 98*idy ] - sum_i ) / mA_L[ 7425 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 76
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 76 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 76 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 76 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 76 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 76 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 76 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 76 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 76 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 76 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 76 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 76 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 76 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 76 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 76 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 76 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 76 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 76 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 76 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 76 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 76 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 76 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 76 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 76 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 76 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 76 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 76 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 76 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 76 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 76 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 76 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 76 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 76 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 76 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 76 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 76 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 76 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 76 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 76 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 76 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 76 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 76 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 76 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 76 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 76 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 76 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 76 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 76 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 76 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 76 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 76 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 76 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 76 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 76 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 76 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 76 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 76 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 76 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 76 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 76 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 76 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 76 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 76 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 76 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 76 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 76 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 76 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 76 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 76 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 76 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 76 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 76 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 76 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 76 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 76 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 76 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 76 + 7350 ] ;
  mBY[ 76 + 98*idy ] = (mBY[ 76 + 98*idy ] - sum_i ) / mA_L[ 7524 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 77
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 77 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 77 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 77 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 77 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 77 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 77 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 77 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 77 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 77 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 77 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 77 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 77 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 77 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 77 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 77 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 77 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 77 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 77 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 77 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 77 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 77 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 77 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 77 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 77 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 77 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 77 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 77 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 77 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 77 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 77 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 77 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 77 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 77 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 77 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 77 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 77 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 77 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 77 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 77 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 77 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 77 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 77 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 77 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 77 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 77 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 77 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 77 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 77 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 77 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 77 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 77 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 77 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 77 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 77 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 77 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 77 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 77 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 77 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 77 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 77 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 77 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 77 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 77 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 77 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 77 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 77 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 77 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 77 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 77 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 77 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 77 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 77 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 77 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 77 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 77 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 77 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 77 + 7448 ] ;
  mBY[ 77 + 98*idy ] = (mBY[ 77 + 98*idy ] - sum_i ) / mA_L[ 7623 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 78
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 78 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 78 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 78 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 78 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 78 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 78 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 78 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 78 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 78 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 78 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 78 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 78 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 78 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 78 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 78 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 78 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 78 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 78 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 78 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 78 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 78 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 78 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 78 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 78 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 78 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 78 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 78 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 78 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 78 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 78 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 78 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 78 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 78 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 78 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 78 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 78 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 78 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 78 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 78 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 78 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 78 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 78 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 78 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 78 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 78 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 78 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 78 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 78 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 78 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 78 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 78 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 78 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 78 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 78 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 78 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 78 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 78 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 78 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 78 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 78 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 78 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 78 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 78 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 78 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 78 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 78 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 78 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 78 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 78 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 78 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 78 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 78 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 78 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 78 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 78 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 78 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 78 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 78 + 7546 ] ;
  mBY[ 78 + 98*idy ] = (mBY[ 78 + 98*idy ] - sum_i ) / mA_L[ 7722 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 79
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 79 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 79 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 79 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 79 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 79 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 79 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 79 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 79 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 79 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 79 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 79 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 79 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 79 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 79 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 79 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 79 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 79 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 79 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 79 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 79 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 79 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 79 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 79 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 79 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 79 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 79 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 79 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 79 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 79 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 79 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 79 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 79 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 79 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 79 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 79 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 79 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 79 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 79 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 79 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 79 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 79 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 79 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 79 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 79 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 79 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 79 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 79 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 79 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 79 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 79 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 79 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 79 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 79 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 79 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 79 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 79 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 79 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 79 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 79 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 79 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 79 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 79 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 79 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 79 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 79 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 79 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 79 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 79 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 79 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 79 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 79 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 79 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 79 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 79 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 79 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 79 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 79 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 79 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 79 + 7644 ] ;
  mBY[ 79 + 98*idy ] = (mBY[ 79 + 98*idy ] - sum_i ) / mA_L[ 7821 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 80
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 80 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 80 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 80 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 80 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 80 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 80 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 80 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 80 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 80 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 80 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 80 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 80 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 80 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 80 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 80 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 80 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 80 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 80 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 80 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 80 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 80 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 80 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 80 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 80 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 80 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 80 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 80 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 80 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 80 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 80 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 80 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 80 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 80 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 80 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 80 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 80 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 80 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 80 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 80 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 80 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 80 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 80 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 80 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 80 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 80 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 80 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 80 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 80 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 80 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 80 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 80 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 80 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 80 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 80 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 80 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 80 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 80 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 80 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 80 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 80 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 80 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 80 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 80 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 80 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 80 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 80 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 80 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 80 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 80 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 80 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 80 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 80 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 80 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 80 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 80 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 80 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 80 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 80 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 80 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 80 + 7742 ] ;
  mBY[ 80 + 98*idy ] = (mBY[ 80 + 98*idy ] - sum_i ) / mA_L[ 7920 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 81
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 81 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 81 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 81 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 81 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 81 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 81 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 81 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 81 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 81 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 81 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 81 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 81 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 81 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 81 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 81 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 81 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 81 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 81 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 81 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 81 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 81 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 81 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 81 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 81 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 81 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 81 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 81 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 81 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 81 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 81 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 81 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 81 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 81 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 81 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 81 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 81 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 81 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 81 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 81 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 81 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 81 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 81 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 81 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 81 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 81 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 81 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 81 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 81 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 81 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 81 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 81 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 81 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 81 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 81 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 81 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 81 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 81 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 81 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 81 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 81 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 81 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 81 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 81 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 81 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 81 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 81 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 81 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 81 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 81 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 81 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 81 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 81 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 81 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 81 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 81 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 81 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 81 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 81 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 81 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 81 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 81 + 7840 ] ;
  mBY[ 81 + 98*idy ] = (mBY[ 81 + 98*idy ] - sum_i ) / mA_L[ 8019 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 82
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 82 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 82 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 82 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 82 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 82 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 82 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 82 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 82 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 82 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 82 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 82 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 82 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 82 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 82 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 82 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 82 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 82 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 82 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 82 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 82 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 82 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 82 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 82 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 82 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 82 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 82 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 82 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 82 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 82 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 82 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 82 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 82 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 82 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 82 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 82 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 82 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 82 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 82 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 82 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 82 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 82 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 82 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 82 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 82 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 82 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 82 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 82 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 82 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 82 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 82 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 82 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 82 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 82 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 82 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 82 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 82 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 82 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 82 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 82 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 82 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 82 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 82 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 82 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 82 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 82 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 82 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 82 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 82 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 82 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 82 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 82 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 82 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 82 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 82 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 82 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 82 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 82 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 82 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 82 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 82 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 82 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 82 + 7938 ] ;
  mBY[ 82 + 98*idy ] = (mBY[ 82 + 98*idy ] - sum_i ) / mA_L[ 8118 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 83
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 83 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 83 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 83 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 83 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 83 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 83 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 83 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 83 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 83 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 83 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 83 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 83 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 83 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 83 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 83 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 83 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 83 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 83 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 83 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 83 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 83 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 83 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 83 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 83 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 83 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 83 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 83 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 83 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 83 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 83 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 83 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 83 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 83 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 83 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 83 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 83 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 83 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 83 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 83 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 83 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 83 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 83 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 83 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 83 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 83 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 83 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 83 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 83 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 83 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 83 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 83 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 83 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 83 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 83 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 83 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 83 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 83 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 83 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 83 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 83 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 83 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 83 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 83 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 83 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 83 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 83 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 83 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 83 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 83 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 83 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 83 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 83 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 83 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 83 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 83 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 83 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 83 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 83 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 83 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 83 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 83 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 83 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA_L[ 83 + 8036 ] ;
  mBY[ 83 + 98*idy ] = (mBY[ 83 + 98*idy ] - sum_i ) / mA_L[ 8217 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 84
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 84 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 84 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 84 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 84 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 84 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 84 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 84 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 84 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 84 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 84 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 84 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 84 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 84 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 84 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 84 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 84 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 84 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 84 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 84 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 84 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 84 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 84 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 84 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 84 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 84 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 84 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 84 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 84 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 84 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 84 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 84 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 84 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 84 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 84 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 84 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 84 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 84 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 84 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 84 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 84 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 84 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 84 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 84 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 84 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 84 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 84 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 84 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 84 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 84 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 84 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 84 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 84 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 84 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 84 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 84 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 84 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 84 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 84 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 84 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 84 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 84 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 84 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 84 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 84 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 84 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 84 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 84 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 84 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 84 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 84 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 84 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 84 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 84 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 84 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 84 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 84 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 84 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 84 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 84 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 84 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 84 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 84 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA_L[ 84 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA_L[ 84 + 8134 ] ;
  mBY[ 84 + 98*idy ] = (mBY[ 84 + 98*idy ] - sum_i ) / mA_L[ 8316 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 85
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 85 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 85 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 85 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 85 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 85 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 85 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 85 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 85 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 85 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 85 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 85 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 85 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 85 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 85 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 85 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 85 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 85 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 85 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 85 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 85 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 85 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 85 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 85 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 85 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 85 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 85 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 85 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 85 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 85 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 85 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 85 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 85 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 85 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 85 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 85 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 85 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 85 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 85 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 85 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 85 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 85 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 85 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 85 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 85 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 85 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 85 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 85 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 85 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 85 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 85 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 85 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 85 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 85 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 85 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 85 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 85 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 85 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 85 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 85 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 85 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 85 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 85 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 85 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 85 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 85 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 85 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 85 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 85 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 85 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 85 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 85 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 85 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 85 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 85 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 85 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 85 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 85 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 85 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 85 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 85 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 85 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 85 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA_L[ 85 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA_L[ 85 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA_L[ 85 + 8232 ] ;
  mBY[ 85 + 98*idy ] = (mBY[ 85 + 98*idy ] - sum_i ) / mA_L[ 8415 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 86
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 86 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 86 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 86 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 86 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 86 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 86 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 86 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 86 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 86 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 86 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 86 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 86 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 86 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 86 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 86 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 86 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 86 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 86 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 86 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 86 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 86 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 86 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 86 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 86 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 86 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 86 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 86 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 86 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 86 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 86 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 86 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 86 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 86 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 86 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 86 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 86 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 86 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 86 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 86 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 86 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 86 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 86 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 86 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 86 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 86 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 86 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 86 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 86 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 86 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 86 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 86 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 86 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 86 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 86 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 86 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 86 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 86 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 86 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 86 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 86 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 86 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 86 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 86 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 86 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 86 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 86 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 86 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 86 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 86 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 86 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 86 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 86 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 86 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 86 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 86 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 86 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 86 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 86 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 86 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 86 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 86 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 86 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA_L[ 86 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA_L[ 86 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA_L[ 86 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA_L[ 86 + 8330 ] ;
  mBY[ 86 + 98*idy ] = (mBY[ 86 + 98*idy ] - sum_i ) / mA_L[ 8514 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 87
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 87 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 87 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 87 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 87 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 87 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 87 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 87 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 87 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 87 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 87 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 87 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 87 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 87 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 87 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 87 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 87 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 87 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 87 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 87 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 87 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 87 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 87 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 87 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 87 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 87 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 87 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 87 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 87 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 87 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 87 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 87 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 87 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 87 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 87 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 87 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 87 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 87 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 87 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 87 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 87 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 87 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 87 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 87 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 87 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 87 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 87 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 87 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 87 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 87 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 87 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 87 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 87 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 87 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 87 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 87 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 87 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 87 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 87 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 87 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 87 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 87 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 87 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 87 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 87 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 87 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 87 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 87 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 87 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 87 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 87 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 87 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 87 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 87 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 87 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 87 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 87 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 87 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 87 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 87 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 87 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 87 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 87 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA_L[ 87 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA_L[ 87 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA_L[ 87 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA_L[ 87 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA_L[ 87 + 8428 ] ;
  mBY[ 87 + 98*idy ] = (mBY[ 87 + 98*idy ] - sum_i ) / mA_L[ 8613 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 88
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 88 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 88 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 88 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 88 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 88 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 88 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 88 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 88 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 88 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 88 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 88 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 88 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 88 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 88 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 88 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 88 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 88 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 88 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 88 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 88 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 88 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 88 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 88 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 88 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 88 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 88 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 88 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 88 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 88 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 88 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 88 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 88 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 88 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 88 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 88 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 88 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 88 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 88 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 88 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 88 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 88 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 88 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 88 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 88 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 88 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 88 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 88 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 88 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 88 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 88 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 88 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 88 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 88 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 88 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 88 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 88 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 88 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 88 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 88 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 88 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 88 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 88 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 88 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 88 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 88 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 88 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 88 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 88 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 88 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 88 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 88 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 88 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 88 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 88 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 88 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 88 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 88 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 88 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 88 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 88 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 88 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 88 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA_L[ 88 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA_L[ 88 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA_L[ 88 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA_L[ 88 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA_L[ 88 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA_L[ 88 + 8526 ] ;
  mBY[ 88 + 98*idy ] = (mBY[ 88 + 98*idy ] - sum_i ) / mA_L[ 8712 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 89
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 89 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 89 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 89 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 89 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 89 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 89 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 89 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 89 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 89 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 89 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 89 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 89 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 89 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 89 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 89 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 89 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 89 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 89 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 89 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 89 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 89 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 89 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 89 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 89 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 89 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 89 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 89 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 89 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 89 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 89 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 89 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 89 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 89 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 89 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 89 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 89 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 89 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 89 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 89 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 89 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 89 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 89 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 89 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 89 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 89 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 89 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 89 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 89 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 89 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 89 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 89 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 89 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 89 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 89 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 89 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 89 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 89 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 89 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 89 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 89 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 89 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 89 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 89 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 89 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 89 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 89 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 89 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 89 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 89 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 89 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 89 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 89 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 89 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 89 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 89 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 89 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 89 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 89 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 89 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 89 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 89 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 89 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA_L[ 89 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA_L[ 89 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA_L[ 89 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA_L[ 89 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA_L[ 89 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA_L[ 89 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA_L[ 89 + 8624 ] ;
  mBY[ 89 + 98*idy ] = (mBY[ 89 + 98*idy ] - sum_i ) / mA_L[ 8811 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 90
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 90 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 90 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 90 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 90 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 90 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 90 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 90 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 90 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 90 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 90 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 90 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 90 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 90 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 90 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 90 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 90 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 90 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 90 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 90 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 90 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 90 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 90 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 90 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 90 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 90 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 90 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 90 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 90 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 90 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 90 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 90 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 90 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 90 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 90 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 90 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 90 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 90 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 90 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 90 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 90 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 90 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 90 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 90 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 90 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 90 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 90 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 90 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 90 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 90 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 90 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 90 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 90 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 90 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 90 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 90 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 90 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 90 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 90 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 90 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 90 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 90 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 90 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 90 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 90 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 90 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 90 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 90 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 90 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 90 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 90 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 90 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 90 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 90 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 90 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 90 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 90 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 90 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 90 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 90 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 90 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 90 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 90 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA_L[ 90 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA_L[ 90 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA_L[ 90 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA_L[ 90 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA_L[ 90 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA_L[ 90 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA_L[ 90 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA_L[ 90 + 8722 ] ;
  mBY[ 90 + 98*idy ] = (mBY[ 90 + 98*idy ] - sum_i ) / mA_L[ 8910 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 91
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 91 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 91 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 91 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 91 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 91 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 91 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 91 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 91 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 91 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 91 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 91 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 91 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 91 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 91 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 91 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 91 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 91 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 91 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 91 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 91 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 91 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 91 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 91 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 91 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 91 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 91 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 91 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 91 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 91 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 91 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 91 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 91 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 91 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 91 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 91 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 91 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 91 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 91 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 91 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 91 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 91 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 91 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 91 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 91 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 91 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 91 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 91 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 91 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 91 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 91 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 91 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 91 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 91 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 91 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 91 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 91 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 91 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 91 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 91 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 91 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 91 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 91 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 91 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 91 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 91 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 91 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 91 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 91 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 91 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 91 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 91 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 91 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 91 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 91 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 91 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 91 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 91 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 91 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 91 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 91 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 91 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 91 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA_L[ 91 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA_L[ 91 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA_L[ 91 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA_L[ 91 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA_L[ 91 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA_L[ 91 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA_L[ 91 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA_L[ 91 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA_L[ 91 + 8820 ] ;
  mBY[ 91 + 98*idy ] = (mBY[ 91 + 98*idy ] - sum_i ) / mA_L[ 9009 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 92
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 92 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 92 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 92 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 92 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 92 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 92 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 92 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 92 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 92 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 92 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 92 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 92 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 92 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 92 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 92 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 92 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 92 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 92 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 92 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 92 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 92 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 92 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 92 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 92 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 92 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 92 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 92 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 92 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 92 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 92 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 92 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 92 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 92 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 92 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 92 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 92 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 92 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 92 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 92 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 92 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 92 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 92 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 92 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 92 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 92 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 92 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 92 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 92 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 92 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 92 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 92 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 92 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 92 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 92 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 92 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 92 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 92 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 92 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 92 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 92 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 92 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 92 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 92 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 92 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 92 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 92 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 92 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 92 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 92 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 92 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 92 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 92 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 92 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 92 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 92 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 92 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 92 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 92 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 92 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 92 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 92 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 92 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA_L[ 92 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA_L[ 92 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA_L[ 92 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA_L[ 92 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA_L[ 92 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA_L[ 92 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA_L[ 92 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA_L[ 92 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA_L[ 92 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA_L[ 92 + 8918 ] ;
  mBY[ 92 + 98*idy ] = (mBY[ 92 + 98*idy ] - sum_i ) / mA_L[ 9108 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 93
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 93 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 93 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 93 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 93 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 93 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 93 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 93 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 93 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 93 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 93 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 93 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 93 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 93 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 93 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 93 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 93 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 93 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 93 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 93 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 93 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 93 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 93 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 93 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 93 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 93 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 93 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 93 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 93 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 93 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 93 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 93 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 93 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 93 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 93 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 93 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 93 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 93 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 93 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 93 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 93 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 93 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 93 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 93 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 93 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 93 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 93 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 93 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 93 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 93 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 93 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 93 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 93 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 93 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 93 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 93 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 93 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 93 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 93 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 93 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 93 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 93 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 93 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 93 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 93 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 93 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 93 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 93 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 93 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 93 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 93 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 93 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 93 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 93 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 93 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 93 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 93 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 93 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 93 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 93 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 93 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 93 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 93 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA_L[ 93 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA_L[ 93 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA_L[ 93 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA_L[ 93 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA_L[ 93 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA_L[ 93 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA_L[ 93 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA_L[ 93 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA_L[ 93 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA_L[ 93 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA_L[ 93 + 9016 ] ;
  mBY[ 93 + 98*idy ] = (mBY[ 93 + 98*idy ] - sum_i ) / mA_L[ 9207 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 94
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 94 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 94 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 94 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 94 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 94 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 94 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 94 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 94 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 94 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 94 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 94 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 94 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 94 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 94 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 94 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 94 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 94 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 94 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 94 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 94 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 94 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 94 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 94 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 94 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 94 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 94 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 94 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 94 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 94 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 94 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 94 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 94 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 94 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 94 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 94 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 94 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 94 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 94 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 94 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 94 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 94 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 94 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 94 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 94 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 94 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 94 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 94 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 94 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 94 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 94 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 94 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 94 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 94 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 94 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 94 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 94 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 94 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 94 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 94 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 94 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 94 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 94 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 94 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 94 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 94 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 94 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 94 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 94 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 94 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 94 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 94 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 94 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 94 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 94 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 94 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 94 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 94 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 94 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 94 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 94 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 94 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 94 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA_L[ 94 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA_L[ 94 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA_L[ 94 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA_L[ 94 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA_L[ 94 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA_L[ 94 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA_L[ 94 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA_L[ 94 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA_L[ 94 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA_L[ 94 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA_L[ 94 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA_L[ 94 + 9114 ] ;
  mBY[ 94 + 98*idy ] = (mBY[ 94 + 98*idy ] - sum_i ) / mA_L[ 9306 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 95
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 95 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 95 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 95 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 95 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 95 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 95 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 95 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 95 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 95 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 95 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 95 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 95 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 95 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 95 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 95 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 95 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 95 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 95 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 95 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 95 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 95 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 95 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 95 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 95 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 95 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 95 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 95 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 95 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 95 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 95 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 95 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 95 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 95 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 95 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 95 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 95 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 95 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 95 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 95 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 95 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 95 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 95 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 95 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 95 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 95 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 95 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 95 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 95 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 95 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 95 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 95 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 95 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 95 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 95 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 95 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 95 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 95 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 95 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 95 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 95 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 95 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 95 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 95 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 95 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 95 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 95 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 95 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 95 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 95 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 95 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 95 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 95 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 95 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 95 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 95 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 95 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 95 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 95 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 95 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 95 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 95 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 95 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA_L[ 95 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA_L[ 95 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA_L[ 95 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA_L[ 95 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA_L[ 95 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA_L[ 95 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA_L[ 95 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA_L[ 95 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA_L[ 95 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA_L[ 95 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA_L[ 95 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA_L[ 95 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA_L[ 95 + 9212 ] ;
  mBY[ 95 + 98*idy ] = (mBY[ 95 + 98*idy ] - sum_i ) / mA_L[ 9405 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 96
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 96 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 96 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 96 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 96 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 96 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 96 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 96 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 96 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 96 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 96 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 96 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 96 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 96 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 96 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 96 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 96 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 96 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 96 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 96 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 96 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 96 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 96 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 96 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 96 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 96 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 96 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 96 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 96 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 96 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 96 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 96 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 96 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 96 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 96 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 96 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 96 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 96 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 96 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 96 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 96 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 96 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 96 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 96 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 96 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 96 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 96 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 96 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 96 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 96 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 96 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 96 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 96 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 96 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 96 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 96 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 96 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 96 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 96 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 96 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 96 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 96 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 96 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 96 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 96 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 96 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 96 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 96 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 96 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 96 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 96 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 96 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 96 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 96 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 96 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 96 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 96 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 96 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 96 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 96 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 96 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 96 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 96 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA_L[ 96 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA_L[ 96 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA_L[ 96 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA_L[ 96 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA_L[ 96 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA_L[ 96 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA_L[ 96 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA_L[ 96 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA_L[ 96 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA_L[ 96 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA_L[ 96 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA_L[ 96 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA_L[ 96 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA_L[ 96 + 9310 ] ;
  mBY[ 96 + 98*idy ] = (mBY[ 96 + 98*idy ] - sum_i ) / mA_L[ 9504 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 97
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 98*idy ] * mA_L[ 97 + 0 ] ;
  sum_i += mBY[ 1 + 98*idy ] * mA_L[ 97 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA_L[ 97 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA_L[ 97 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA_L[ 97 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA_L[ 97 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA_L[ 97 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA_L[ 97 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA_L[ 97 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA_L[ 97 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA_L[ 97 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA_L[ 97 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA_L[ 97 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA_L[ 97 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA_L[ 97 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA_L[ 97 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA_L[ 97 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA_L[ 97 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA_L[ 97 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA_L[ 97 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA_L[ 97 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA_L[ 97 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA_L[ 97 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA_L[ 97 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA_L[ 97 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA_L[ 97 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA_L[ 97 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA_L[ 97 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA_L[ 97 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA_L[ 97 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA_L[ 97 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA_L[ 97 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA_L[ 97 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA_L[ 97 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA_L[ 97 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA_L[ 97 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA_L[ 97 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA_L[ 97 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA_L[ 97 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA_L[ 97 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA_L[ 97 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA_L[ 97 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA_L[ 97 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA_L[ 97 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA_L[ 97 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA_L[ 97 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA_L[ 97 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA_L[ 97 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA_L[ 97 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA_L[ 97 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA_L[ 97 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA_L[ 97 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA_L[ 97 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA_L[ 97 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA_L[ 97 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA_L[ 97 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA_L[ 97 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA_L[ 97 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA_L[ 97 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA_L[ 97 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA_L[ 97 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA_L[ 97 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA_L[ 97 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA_L[ 97 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA_L[ 97 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA_L[ 97 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA_L[ 97 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA_L[ 97 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA_L[ 97 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA_L[ 97 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA_L[ 97 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA_L[ 97 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA_L[ 97 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA_L[ 97 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA_L[ 97 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA_L[ 97 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA_L[ 97 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA_L[ 97 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA_L[ 97 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA_L[ 97 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA_L[ 97 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA_L[ 97 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA_L[ 97 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA_L[ 97 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA_L[ 97 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA_L[ 97 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA_L[ 97 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA_L[ 97 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA_L[ 97 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA_L[ 97 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA_L[ 97 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA_L[ 97 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA_L[ 97 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA_L[ 97 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA_L[ 97 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA_L[ 97 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA_L[ 97 + 9408 ] ;
  mBY[ 97 + 98*idy ] = (mBY[ 97 + 98*idy ] - sum_i ) / mA_L[ 9603 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System
// Solve U System - Row 97
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  mBY[ 97 + 98*idy ] = (mBY[ 97 + 98*idy ] - sum_i ) / mA[ 9603 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 96
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 96 + 9506 ] ;
  mBY[ 96 + 98*idy ] = (mBY[ 96 + 98*idy ] - sum_i ) / mA[ 9504 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 95
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 95 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 95 + 9506 ] ;
  mBY[ 95 + 98*idy ] = (mBY[ 95 + 98*idy ] - sum_i ) / mA[ 9405 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 94
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 94 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 94 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 94 + 9506 ] ;
  mBY[ 94 + 98*idy ] = (mBY[ 94 + 98*idy ] - sum_i ) / mA[ 9306 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 93
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 93 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 93 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 93 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 93 + 9506 ] ;
  mBY[ 93 + 98*idy ] = (mBY[ 93 + 98*idy ] - sum_i ) / mA[ 9207 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 92
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 92 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 92 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 92 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 92 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 92 + 9506 ] ;
  mBY[ 92 + 98*idy ] = (mBY[ 92 + 98*idy ] - sum_i ) / mA[ 9108 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 91
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 91 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 91 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 91 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 91 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 91 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 91 + 9506 ] ;
  mBY[ 91 + 98*idy ] = (mBY[ 91 + 98*idy ] - sum_i ) / mA[ 9009 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 90
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 90 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 90 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 90 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 90 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 90 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 90 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 90 + 9506 ] ;
  mBY[ 90 + 98*idy ] = (mBY[ 90 + 98*idy ] - sum_i ) / mA[ 8910 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 89
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 89 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 89 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 89 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 89 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 89 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 89 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 89 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 89 + 9506 ] ;
  mBY[ 89 + 98*idy ] = (mBY[ 89 + 98*idy ] - sum_i ) / mA[ 8811 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 88
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 88 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 88 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 88 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 88 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 88 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 88 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 88 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 88 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 88 + 9506 ] ;
  mBY[ 88 + 98*idy ] = (mBY[ 88 + 98*idy ] - sum_i ) / mA[ 8712 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 87
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 87 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 87 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 87 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 87 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 87 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 87 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 87 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 87 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 87 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 87 + 9506 ] ;
  mBY[ 87 + 98*idy ] = (mBY[ 87 + 98*idy ] - sum_i ) / mA[ 8613 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 86
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 86 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 86 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 86 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 86 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 86 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 86 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 86 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 86 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 86 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 86 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 86 + 9506 ] ;
  mBY[ 86 + 98*idy ] = (mBY[ 86 + 98*idy ] - sum_i ) / mA[ 8514 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 85
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 85 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 85 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 85 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 85 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 85 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 85 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 85 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 85 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 85 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 85 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 85 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 85 + 9506 ] ;
  mBY[ 85 + 98*idy ] = (mBY[ 85 + 98*idy ] - sum_i ) / mA[ 8415 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 84
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 84 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 84 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 84 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 84 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 84 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 84 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 84 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 84 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 84 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 84 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 84 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 84 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 84 + 9506 ] ;
  mBY[ 84 + 98*idy ] = (mBY[ 84 + 98*idy ] - sum_i ) / mA[ 8316 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 83
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 83 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 83 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 83 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 83 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 83 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 83 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 83 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 83 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 83 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 83 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 83 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 83 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 83 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 83 + 9506 ] ;
  mBY[ 83 + 98*idy ] = (mBY[ 83 + 98*idy ] - sum_i ) / mA[ 8217 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 82
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 82 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 82 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 82 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 82 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 82 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 82 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 82 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 82 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 82 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 82 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 82 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 82 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 82 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 82 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 82 + 9506 ] ;
  mBY[ 82 + 98*idy ] = (mBY[ 82 + 98*idy ] - sum_i ) / mA[ 8118 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 81
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 81 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 81 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 81 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 81 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 81 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 81 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 81 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 81 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 81 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 81 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 81 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 81 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 81 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 81 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 81 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 81 + 9506 ] ;
  mBY[ 81 + 98*idy ] = (mBY[ 81 + 98*idy ] - sum_i ) / mA[ 8019 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 80
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 80 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 80 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 80 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 80 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 80 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 80 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 80 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 80 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 80 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 80 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 80 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 80 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 80 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 80 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 80 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 80 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 80 + 9506 ] ;
  mBY[ 80 + 98*idy ] = (mBY[ 80 + 98*idy ] - sum_i ) / mA[ 7920 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 79
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 79 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 79 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 79 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 79 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 79 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 79 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 79 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 79 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 79 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 79 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 79 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 79 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 79 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 79 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 79 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 79 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 79 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 79 + 9506 ] ;
  mBY[ 79 + 98*idy ] = (mBY[ 79 + 98*idy ] - sum_i ) / mA[ 7821 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 78
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 78 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 78 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 78 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 78 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 78 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 78 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 78 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 78 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 78 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 78 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 78 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 78 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 78 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 78 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 78 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 78 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 78 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 78 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 78 + 9506 ] ;
  mBY[ 78 + 98*idy ] = (mBY[ 78 + 98*idy ] - sum_i ) / mA[ 7722 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 77
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 77 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 77 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 77 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 77 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 77 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 77 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 77 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 77 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 77 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 77 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 77 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 77 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 77 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 77 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 77 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 77 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 77 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 77 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 77 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 77 + 9506 ] ;
  mBY[ 77 + 98*idy ] = (mBY[ 77 + 98*idy ] - sum_i ) / mA[ 7623 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 76
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 76 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 76 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 76 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 76 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 76 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 76 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 76 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 76 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 76 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 76 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 76 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 76 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 76 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 76 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 76 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 76 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 76 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 76 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 76 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 76 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 76 + 9506 ] ;
  mBY[ 76 + 98*idy ] = (mBY[ 76 + 98*idy ] - sum_i ) / mA[ 7524 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 75
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 75 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 75 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 75 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 75 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 75 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 75 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 75 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 75 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 75 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 75 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 75 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 75 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 75 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 75 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 75 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 75 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 75 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 75 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 75 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 75 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 75 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 75 + 9506 ] ;
  mBY[ 75 + 98*idy ] = (mBY[ 75 + 98*idy ] - sum_i ) / mA[ 7425 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 74
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 74 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 74 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 74 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 74 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 74 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 74 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 74 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 74 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 74 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 74 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 74 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 74 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 74 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 74 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 74 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 74 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 74 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 74 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 74 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 74 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 74 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 74 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 74 + 9506 ] ;
  mBY[ 74 + 98*idy ] = (mBY[ 74 + 98*idy ] - sum_i ) / mA[ 7326 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 73
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 73 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 73 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 73 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 73 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 73 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 73 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 73 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 73 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 73 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 73 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 73 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 73 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 73 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 73 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 73 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 73 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 73 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 73 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 73 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 73 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 73 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 73 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 73 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 73 + 9506 ] ;
  mBY[ 73 + 98*idy ] = (mBY[ 73 + 98*idy ] - sum_i ) / mA[ 7227 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 72
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 72 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 72 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 72 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 72 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 72 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 72 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 72 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 72 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 72 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 72 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 72 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 72 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 72 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 72 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 72 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 72 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 72 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 72 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 72 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 72 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 72 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 72 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 72 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 72 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 72 + 9506 ] ;
  mBY[ 72 + 98*idy ] = (mBY[ 72 + 98*idy ] - sum_i ) / mA[ 7128 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 71
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 71 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 71 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 71 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 71 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 71 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 71 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 71 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 71 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 71 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 71 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 71 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 71 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 71 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 71 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 71 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 71 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 71 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 71 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 71 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 71 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 71 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 71 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 71 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 71 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 71 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 71 + 9506 ] ;
  mBY[ 71 + 98*idy ] = (mBY[ 71 + 98*idy ] - sum_i ) / mA[ 7029 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 70
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 70 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 70 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 70 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 70 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 70 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 70 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 70 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 70 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 70 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 70 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 70 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 70 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 70 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 70 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 70 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 70 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 70 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 70 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 70 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 70 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 70 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 70 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 70 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 70 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 70 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 70 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 70 + 9506 ] ;
  mBY[ 70 + 98*idy ] = (mBY[ 70 + 98*idy ] - sum_i ) / mA[ 6930 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 69
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 69 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 69 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 69 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 69 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 69 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 69 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 69 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 69 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 69 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 69 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 69 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 69 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 69 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 69 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 69 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 69 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 69 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 69 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 69 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 69 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 69 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 69 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 69 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 69 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 69 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 69 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 69 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 69 + 9506 ] ;
  mBY[ 69 + 98*idy ] = (mBY[ 69 + 98*idy ] - sum_i ) / mA[ 6831 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 68
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 68 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 68 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 68 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 68 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 68 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 68 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 68 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 68 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 68 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 68 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 68 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 68 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 68 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 68 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 68 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 68 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 68 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 68 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 68 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 68 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 68 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 68 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 68 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 68 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 68 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 68 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 68 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 68 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 68 + 9506 ] ;
  mBY[ 68 + 98*idy ] = (mBY[ 68 + 98*idy ] - sum_i ) / mA[ 6732 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 67
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 67 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 67 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 67 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 67 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 67 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 67 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 67 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 67 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 67 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 67 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 67 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 67 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 67 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 67 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 67 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 67 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 67 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 67 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 67 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 67 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 67 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 67 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 67 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 67 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 67 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 67 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 67 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 67 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 67 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 67 + 9506 ] ;
  mBY[ 67 + 98*idy ] = (mBY[ 67 + 98*idy ] - sum_i ) / mA[ 6633 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 66
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 66 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 66 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 66 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 66 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 66 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 66 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 66 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 66 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 66 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 66 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 66 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 66 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 66 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 66 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 66 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 66 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 66 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 66 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 66 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 66 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 66 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 66 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 66 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 66 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 66 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 66 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 66 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 66 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 66 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 66 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 66 + 9506 ] ;
  mBY[ 66 + 98*idy ] = (mBY[ 66 + 98*idy ] - sum_i ) / mA[ 6534 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 65
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 65 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 65 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 65 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 65 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 65 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 65 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 65 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 65 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 65 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 65 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 65 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 65 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 65 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 65 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 65 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 65 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 65 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 65 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 65 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 65 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 65 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 65 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 65 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 65 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 65 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 65 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 65 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 65 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 65 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 65 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 65 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 65 + 9506 ] ;
  mBY[ 65 + 98*idy ] = (mBY[ 65 + 98*idy ] - sum_i ) / mA[ 6435 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 64
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 64 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 64 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 64 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 64 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 64 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 64 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 64 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 64 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 64 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 64 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 64 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 64 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 64 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 64 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 64 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 64 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 64 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 64 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 64 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 64 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 64 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 64 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 64 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 64 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 64 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 64 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 64 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 64 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 64 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 64 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 64 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 64 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 64 + 9506 ] ;
  mBY[ 64 + 98*idy ] = (mBY[ 64 + 98*idy ] - sum_i ) / mA[ 6336 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 63
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 63 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 63 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 63 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 63 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 63 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 63 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 63 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 63 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 63 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 63 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 63 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 63 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 63 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 63 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 63 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 63 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 63 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 63 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 63 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 63 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 63 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 63 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 63 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 63 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 63 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 63 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 63 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 63 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 63 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 63 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 63 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 63 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 63 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 63 + 9506 ] ;
  mBY[ 63 + 98*idy ] = (mBY[ 63 + 98*idy ] - sum_i ) / mA[ 6237 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 62
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 62 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 62 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 62 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 62 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 62 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 62 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 62 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 62 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 62 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 62 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 62 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 62 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 62 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 62 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 62 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 62 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 62 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 62 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 62 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 62 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 62 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 62 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 62 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 62 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 62 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 62 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 62 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 62 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 62 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 62 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 62 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 62 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 62 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 62 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 62 + 9506 ] ;
  mBY[ 62 + 98*idy ] = (mBY[ 62 + 98*idy ] - sum_i ) / mA[ 6138 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 61
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 61 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 61 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 61 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 61 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 61 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 61 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 61 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 61 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 61 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 61 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 61 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 61 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 61 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 61 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 61 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 61 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 61 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 61 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 61 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 61 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 61 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 61 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 61 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 61 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 61 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 61 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 61 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 61 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 61 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 61 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 61 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 61 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 61 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 61 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 61 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 61 + 9506 ] ;
  mBY[ 61 + 98*idy ] = (mBY[ 61 + 98*idy ] - sum_i ) / mA[ 6039 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 60
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 60 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 60 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 60 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 60 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 60 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 60 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 60 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 60 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 60 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 60 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 60 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 60 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 60 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 60 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 60 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 60 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 60 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 60 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 60 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 60 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 60 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 60 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 60 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 60 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 60 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 60 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 60 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 60 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 60 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 60 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 60 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 60 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 60 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 60 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 60 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 60 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 60 + 9506 ] ;
  mBY[ 60 + 98*idy ] = (mBY[ 60 + 98*idy ] - sum_i ) / mA[ 5940 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 59
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 59 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 59 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 59 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 59 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 59 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 59 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 59 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 59 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 59 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 59 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 59 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 59 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 59 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 59 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 59 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 59 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 59 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 59 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 59 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 59 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 59 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 59 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 59 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 59 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 59 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 59 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 59 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 59 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 59 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 59 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 59 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 59 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 59 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 59 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 59 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 59 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 59 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 59 + 9506 ] ;
  mBY[ 59 + 98*idy ] = (mBY[ 59 + 98*idy ] - sum_i ) / mA[ 5841 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 58
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 58 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 58 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 58 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 58 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 58 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 58 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 58 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 58 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 58 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 58 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 58 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 58 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 58 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 58 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 58 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 58 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 58 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 58 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 58 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 58 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 58 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 58 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 58 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 58 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 58 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 58 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 58 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 58 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 58 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 58 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 58 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 58 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 58 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 58 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 58 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 58 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 58 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 58 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 58 + 9506 ] ;
  mBY[ 58 + 98*idy ] = (mBY[ 58 + 98*idy ] - sum_i ) / mA[ 5742 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 57
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 57 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 57 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 57 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 57 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 57 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 57 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 57 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 57 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 57 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 57 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 57 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 57 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 57 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 57 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 57 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 57 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 57 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 57 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 57 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 57 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 57 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 57 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 57 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 57 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 57 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 57 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 57 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 57 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 57 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 57 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 57 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 57 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 57 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 57 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 57 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 57 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 57 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 57 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 57 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 57 + 9506 ] ;
  mBY[ 57 + 98*idy ] = (mBY[ 57 + 98*idy ] - sum_i ) / mA[ 5643 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 56
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 56 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 56 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 56 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 56 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 56 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 56 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 56 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 56 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 56 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 56 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 56 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 56 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 56 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 56 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 56 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 56 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 56 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 56 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 56 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 56 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 56 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 56 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 56 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 56 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 56 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 56 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 56 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 56 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 56 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 56 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 56 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 56 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 56 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 56 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 56 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 56 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 56 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 56 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 56 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 56 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 56 + 9506 ] ;
  mBY[ 56 + 98*idy ] = (mBY[ 56 + 98*idy ] - sum_i ) / mA[ 5544 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 55
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 55 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 55 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 55 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 55 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 55 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 55 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 55 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 55 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 55 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 55 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 55 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 55 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 55 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 55 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 55 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 55 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 55 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 55 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 55 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 55 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 55 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 55 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 55 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 55 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 55 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 55 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 55 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 55 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 55 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 55 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 55 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 55 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 55 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 55 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 55 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 55 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 55 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 55 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 55 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 55 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 55 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 55 + 9506 ] ;
  mBY[ 55 + 98*idy ] = (mBY[ 55 + 98*idy ] - sum_i ) / mA[ 5445 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 54
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 54 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 54 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 54 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 54 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 54 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 54 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 54 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 54 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 54 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 54 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 54 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 54 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 54 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 54 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 54 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 54 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 54 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 54 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 54 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 54 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 54 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 54 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 54 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 54 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 54 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 54 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 54 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 54 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 54 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 54 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 54 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 54 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 54 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 54 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 54 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 54 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 54 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 54 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 54 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 54 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 54 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 54 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 54 + 9506 ] ;
  mBY[ 54 + 98*idy ] = (mBY[ 54 + 98*idy ] - sum_i ) / mA[ 5346 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 53
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 53 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 53 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 53 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 53 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 53 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 53 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 53 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 53 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 53 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 53 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 53 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 53 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 53 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 53 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 53 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 53 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 53 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 53 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 53 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 53 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 53 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 53 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 53 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 53 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 53 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 53 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 53 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 53 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 53 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 53 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 53 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 53 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 53 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 53 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 53 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 53 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 53 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 53 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 53 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 53 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 53 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 53 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 53 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 53 + 9506 ] ;
  mBY[ 53 + 98*idy ] = (mBY[ 53 + 98*idy ] - sum_i ) / mA[ 5247 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 52
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 52 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 52 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 52 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 52 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 52 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 52 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 52 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 52 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 52 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 52 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 52 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 52 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 52 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 52 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 52 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 52 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 52 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 52 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 52 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 52 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 52 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 52 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 52 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 52 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 52 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 52 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 52 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 52 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 52 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 52 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 52 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 52 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 52 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 52 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 52 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 52 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 52 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 52 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 52 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 52 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 52 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 52 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 52 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 52 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 52 + 9506 ] ;
  mBY[ 52 + 98*idy ] = (mBY[ 52 + 98*idy ] - sum_i ) / mA[ 5148 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 51
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 51 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 51 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 51 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 51 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 51 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 51 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 51 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 51 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 51 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 51 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 51 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 51 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 51 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 51 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 51 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 51 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 51 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 51 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 51 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 51 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 51 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 51 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 51 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 51 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 51 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 51 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 51 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 51 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 51 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 51 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 51 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 51 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 51 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 51 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 51 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 51 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 51 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 51 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 51 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 51 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 51 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 51 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 51 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 51 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 51 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 51 + 9506 ] ;
  mBY[ 51 + 98*idy ] = (mBY[ 51 + 98*idy ] - sum_i ) / mA[ 5049 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 50
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 50 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 50 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 50 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 50 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 50 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 50 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 50 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 50 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 50 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 50 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 50 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 50 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 50 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 50 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 50 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 50 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 50 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 50 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 50 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 50 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 50 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 50 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 50 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 50 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 50 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 50 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 50 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 50 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 50 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 50 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 50 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 50 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 50 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 50 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 50 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 50 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 50 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 50 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 50 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 50 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 50 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 50 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 50 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 50 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 50 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 50 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 50 + 9506 ] ;
  mBY[ 50 + 98*idy ] = (mBY[ 50 + 98*idy ] - sum_i ) / mA[ 4950 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 49
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 49 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 49 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 49 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 49 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 49 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 49 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 49 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 49 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 49 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 49 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 49 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 49 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 49 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 49 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 49 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 49 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 49 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 49 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 49 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 49 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 49 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 49 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 49 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 49 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 49 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 49 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 49 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 49 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 49 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 49 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 49 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 49 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 49 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 49 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 49 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 49 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 49 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 49 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 49 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 49 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 49 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 49 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 49 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 49 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 49 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 49 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 49 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 49 + 9506 ] ;
  mBY[ 49 + 98*idy ] = (mBY[ 49 + 98*idy ] - sum_i ) / mA[ 4851 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 48
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 48 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 48 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 48 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 48 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 48 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 48 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 48 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 48 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 48 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 48 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 48 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 48 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 48 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 48 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 48 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 48 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 48 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 48 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 48 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 48 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 48 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 48 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 48 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 48 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 48 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 48 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 48 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 48 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 48 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 48 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 48 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 48 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 48 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 48 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 48 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 48 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 48 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 48 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 48 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 48 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 48 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 48 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 48 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 48 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 48 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 48 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 48 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 48 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 48 + 9506 ] ;
  mBY[ 48 + 98*idy ] = (mBY[ 48 + 98*idy ] - sum_i ) / mA[ 4752 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 47
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 47 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 47 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 47 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 47 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 47 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 47 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 47 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 47 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 47 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 47 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 47 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 47 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 47 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 47 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 47 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 47 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 47 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 47 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 47 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 47 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 47 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 47 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 47 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 47 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 47 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 47 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 47 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 47 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 47 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 47 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 47 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 47 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 47 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 47 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 47 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 47 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 47 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 47 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 47 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 47 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 47 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 47 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 47 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 47 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 47 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 47 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 47 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 47 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 47 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 47 + 9506 ] ;
  mBY[ 47 + 98*idy ] = (mBY[ 47 + 98*idy ] - sum_i ) / mA[ 4653 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 46
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 46 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 46 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 46 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 46 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 46 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 46 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 46 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 46 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 46 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 46 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 46 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 46 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 46 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 46 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 46 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 46 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 46 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 46 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 46 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 46 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 46 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 46 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 46 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 46 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 46 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 46 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 46 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 46 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 46 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 46 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 46 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 46 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 46 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 46 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 46 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 46 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 46 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 46 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 46 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 46 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 46 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 46 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 46 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 46 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 46 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 46 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 46 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 46 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 46 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 46 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 46 + 9506 ] ;
  mBY[ 46 + 98*idy ] = (mBY[ 46 + 98*idy ] - sum_i ) / mA[ 4554 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 45
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 45 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 45 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 45 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 45 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 45 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 45 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 45 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 45 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 45 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 45 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 45 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 45 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 45 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 45 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 45 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 45 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 45 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 45 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 45 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 45 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 45 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 45 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 45 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 45 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 45 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 45 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 45 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 45 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 45 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 45 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 45 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 45 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 45 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 45 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 45 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 45 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 45 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 45 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 45 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 45 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 45 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 45 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 45 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 45 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 45 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 45 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 45 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 45 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 45 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 45 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 45 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 45 + 9506 ] ;
  mBY[ 45 + 98*idy ] = (mBY[ 45 + 98*idy ] - sum_i ) / mA[ 4455 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 44
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 44 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 44 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 44 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 44 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 44 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 44 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 44 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 44 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 44 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 44 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 44 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 44 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 44 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 44 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 44 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 44 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 44 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 44 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 44 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 44 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 44 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 44 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 44 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 44 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 44 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 44 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 44 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 44 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 44 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 44 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 44 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 44 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 44 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 44 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 44 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 44 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 44 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 44 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 44 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 44 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 44 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 44 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 44 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 44 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 44 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 44 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 44 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 44 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 44 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 44 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 44 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 44 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 44 + 9506 ] ;
  mBY[ 44 + 98*idy ] = (mBY[ 44 + 98*idy ] - sum_i ) / mA[ 4356 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 43
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 43 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 43 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 43 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 43 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 43 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 43 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 43 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 43 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 43 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 43 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 43 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 43 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 43 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 43 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 43 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 43 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 43 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 43 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 43 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 43 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 43 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 43 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 43 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 43 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 43 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 43 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 43 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 43 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 43 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 43 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 43 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 43 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 43 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 43 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 43 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 43 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 43 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 43 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 43 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 43 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 43 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 43 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 43 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 43 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 43 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 43 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 43 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 43 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 43 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 43 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 43 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 43 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 43 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 43 + 9506 ] ;
  mBY[ 43 + 98*idy ] = (mBY[ 43 + 98*idy ] - sum_i ) / mA[ 4257 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 42
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 42 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 42 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 42 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 42 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 42 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 42 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 42 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 42 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 42 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 42 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 42 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 42 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 42 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 42 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 42 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 42 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 42 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 42 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 42 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 42 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 42 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 42 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 42 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 42 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 42 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 42 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 42 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 42 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 42 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 42 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 42 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 42 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 42 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 42 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 42 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 42 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 42 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 42 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 42 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 42 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 42 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 42 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 42 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 42 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 42 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 42 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 42 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 42 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 42 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 42 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 42 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 42 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 42 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 42 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 42 + 9506 ] ;
  mBY[ 42 + 98*idy ] = (mBY[ 42 + 98*idy ] - sum_i ) / mA[ 4158 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 41
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 41 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 41 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 41 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 41 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 41 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 41 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 41 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 41 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 41 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 41 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 41 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 41 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 41 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 41 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 41 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 41 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 41 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 41 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 41 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 41 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 41 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 41 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 41 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 41 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 41 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 41 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 41 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 41 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 41 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 41 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 41 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 41 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 41 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 41 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 41 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 41 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 41 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 41 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 41 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 41 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 41 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 41 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 41 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 41 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 41 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 41 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 41 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 41 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 41 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 41 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 41 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 41 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 41 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 41 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 41 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 41 + 9506 ] ;
  mBY[ 41 + 98*idy ] = (mBY[ 41 + 98*idy ] - sum_i ) / mA[ 4059 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 40
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 40 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 40 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 40 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 40 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 40 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 40 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 40 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 40 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 40 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 40 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 40 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 40 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 40 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 40 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 40 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 40 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 40 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 40 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 40 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 40 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 40 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 40 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 40 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 40 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 40 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 40 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 40 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 40 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 40 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 40 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 40 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 40 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 40 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 40 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 40 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 40 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 40 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 40 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 40 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 40 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 40 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 40 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 40 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 40 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 40 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 40 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 40 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 40 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 40 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 40 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 40 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 40 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 40 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 40 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 40 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 40 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 40 + 9506 ] ;
  mBY[ 40 + 98*idy ] = (mBY[ 40 + 98*idy ] - sum_i ) / mA[ 3960 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 39
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 39 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 39 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 39 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 39 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 39 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 39 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 39 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 39 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 39 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 39 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 39 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 39 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 39 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 39 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 39 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 39 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 39 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 39 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 39 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 39 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 39 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 39 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 39 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 39 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 39 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 39 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 39 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 39 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 39 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 39 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 39 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 39 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 39 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 39 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 39 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 39 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 39 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 39 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 39 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 39 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 39 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 39 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 39 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 39 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 39 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 39 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 39 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 39 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 39 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 39 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 39 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 39 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 39 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 39 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 39 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 39 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 39 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 39 + 9506 ] ;
  mBY[ 39 + 98*idy ] = (mBY[ 39 + 98*idy ] - sum_i ) / mA[ 3861 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 38
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 38 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 38 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 38 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 38 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 38 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 38 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 38 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 38 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 38 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 38 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 38 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 38 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 38 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 38 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 38 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 38 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 38 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 38 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 38 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 38 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 38 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 38 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 38 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 38 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 38 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 38 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 38 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 38 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 38 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 38 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 38 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 38 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 38 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 38 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 38 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 38 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 38 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 38 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 38 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 38 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 38 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 38 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 38 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 38 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 38 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 38 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 38 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 38 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 38 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 38 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 38 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 38 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 38 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 38 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 38 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 38 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 38 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 38 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 38 + 9506 ] ;
  mBY[ 38 + 98*idy ] = (mBY[ 38 + 98*idy ] - sum_i ) / mA[ 3762 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 37
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 37 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 37 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 37 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 37 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 37 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 37 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 37 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 37 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 37 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 37 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 37 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 37 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 37 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 37 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 37 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 37 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 37 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 37 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 37 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 37 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 37 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 37 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 37 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 37 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 37 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 37 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 37 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 37 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 37 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 37 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 37 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 37 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 37 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 37 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 37 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 37 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 37 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 37 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 37 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 37 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 37 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 37 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 37 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 37 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 37 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 37 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 37 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 37 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 37 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 37 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 37 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 37 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 37 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 37 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 37 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 37 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 37 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 37 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 37 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 37 + 9506 ] ;
  mBY[ 37 + 98*idy ] = (mBY[ 37 + 98*idy ] - sum_i ) / mA[ 3663 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 36
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 36 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 36 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 36 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 36 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 36 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 36 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 36 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 36 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 36 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 36 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 36 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 36 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 36 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 36 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 36 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 36 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 36 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 36 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 36 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 36 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 36 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 36 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 36 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 36 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 36 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 36 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 36 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 36 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 36 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 36 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 36 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 36 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 36 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 36 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 36 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 36 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 36 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 36 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 36 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 36 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 36 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 36 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 36 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 36 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 36 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 36 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 36 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 36 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 36 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 36 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 36 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 36 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 36 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 36 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 36 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 36 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 36 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 36 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 36 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 36 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 36 + 9506 ] ;
  mBY[ 36 + 98*idy ] = (mBY[ 36 + 98*idy ] - sum_i ) / mA[ 3564 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 35
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 35 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 35 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 35 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 35 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 35 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 35 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 35 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 35 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 35 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 35 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 35 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 35 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 35 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 35 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 35 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 35 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 35 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 35 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 35 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 35 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 35 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 35 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 35 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 35 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 35 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 35 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 35 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 35 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 35 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 35 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 35 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 35 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 35 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 35 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 35 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 35 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 35 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 35 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 35 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 35 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 35 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 35 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 35 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 35 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 35 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 35 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 35 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 35 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 35 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 35 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 35 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 35 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 35 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 35 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 35 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 35 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 35 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 35 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 35 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 35 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 35 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 35 + 9506 ] ;
  mBY[ 35 + 98*idy ] = (mBY[ 35 + 98*idy ] - sum_i ) / mA[ 3465 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 34
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 34 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 34 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 34 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 34 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 34 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 34 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 34 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 34 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 34 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 34 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 34 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 34 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 34 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 34 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 34 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 34 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 34 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 34 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 34 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 34 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 34 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 34 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 34 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 34 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 34 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 34 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 34 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 34 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 34 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 34 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 34 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 34 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 34 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 34 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 34 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 34 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 34 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 34 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 34 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 34 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 34 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 34 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 34 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 34 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 34 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 34 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 34 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 34 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 34 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 34 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 34 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 34 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 34 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 34 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 34 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 34 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 34 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 34 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 34 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 34 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 34 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 34 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 34 + 9506 ] ;
  mBY[ 34 + 98*idy ] = (mBY[ 34 + 98*idy ] - sum_i ) / mA[ 3366 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 33
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 33 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 33 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 33 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 33 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 33 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 33 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 33 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 33 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 33 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 33 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 33 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 33 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 33 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 33 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 33 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 33 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 33 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 33 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 33 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 33 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 33 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 33 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 33 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 33 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 33 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 33 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 33 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 33 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 33 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 33 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 33 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 33 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 33 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 33 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 33 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 33 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 33 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 33 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 33 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 33 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 33 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 33 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 33 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 33 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 33 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 33 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 33 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 33 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 33 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 33 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 33 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 33 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 33 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 33 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 33 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 33 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 33 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 33 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 33 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 33 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 33 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 33 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 33 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 33 + 9506 ] ;
  mBY[ 33 + 98*idy ] = (mBY[ 33 + 98*idy ] - sum_i ) / mA[ 3267 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 32
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 32 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 32 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 32 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 32 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 32 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 32 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 32 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 32 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 32 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 32 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 32 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 32 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 32 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 32 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 32 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 32 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 32 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 32 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 32 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 32 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 32 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 32 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 32 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 32 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 32 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 32 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 32 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 32 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 32 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 32 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 32 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 32 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 32 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 32 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 32 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 32 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 32 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 32 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 32 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 32 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 32 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 32 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 32 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 32 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 32 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 32 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 32 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 32 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 32 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 32 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 32 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 32 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 32 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 32 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 32 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 32 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 32 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 32 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 32 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 32 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 32 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 32 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 32 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 32 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 32 + 9506 ] ;
  mBY[ 32 + 98*idy ] = (mBY[ 32 + 98*idy ] - sum_i ) / mA[ 3168 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 31
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 31 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 31 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 31 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 31 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 31 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 31 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 31 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 31 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 31 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 31 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 31 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 31 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 31 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 31 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 31 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 31 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 31 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 31 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 31 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 31 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 31 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 31 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 31 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 31 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 31 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 31 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 31 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 31 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 31 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 31 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 31 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 31 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 31 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 31 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 31 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 31 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 31 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 31 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 31 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 31 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 31 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 31 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 31 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 31 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 31 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 31 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 31 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 31 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 31 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 31 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 31 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 31 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 31 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 31 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 31 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 31 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 31 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 31 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 31 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 31 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 31 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 31 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 31 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 31 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 31 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 31 + 9506 ] ;
  mBY[ 31 + 98*idy ] = (mBY[ 31 + 98*idy ] - sum_i ) / mA[ 3069 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 30
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 30 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 30 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 30 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 30 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 30 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 30 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 30 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 30 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 30 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 30 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 30 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 30 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 30 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 30 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 30 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 30 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 30 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 30 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 30 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 30 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 30 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 30 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 30 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 30 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 30 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 30 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 30 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 30 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 30 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 30 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 30 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 30 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 30 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 30 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 30 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 30 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 30 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 30 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 30 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 30 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 30 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 30 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 30 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 30 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 30 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 30 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 30 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 30 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 30 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 30 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 30 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 30 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 30 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 30 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 30 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 30 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 30 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 30 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 30 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 30 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 30 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 30 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 30 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 30 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 30 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 30 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 30 + 9506 ] ;
  mBY[ 30 + 98*idy ] = (mBY[ 30 + 98*idy ] - sum_i ) / mA[ 2970 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 29
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 29 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 29 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 29 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 29 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 29 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 29 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 29 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 29 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 29 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 29 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 29 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 29 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 29 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 29 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 29 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 29 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 29 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 29 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 29 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 29 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 29 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 29 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 29 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 29 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 29 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 29 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 29 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 29 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 29 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 29 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 29 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 29 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 29 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 29 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 29 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 29 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 29 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 29 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 29 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 29 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 29 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 29 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 29 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 29 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 29 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 29 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 29 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 29 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 29 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 29 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 29 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 29 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 29 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 29 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 29 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 29 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 29 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 29 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 29 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 29 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 29 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 29 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 29 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 29 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 29 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 29 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 29 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 29 + 9506 ] ;
  mBY[ 29 + 98*idy ] = (mBY[ 29 + 98*idy ] - sum_i ) / mA[ 2871 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 28
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 28 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 28 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 28 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 28 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 28 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 28 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 28 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 28 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 28 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 28 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 28 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 28 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 28 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 28 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 28 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 28 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 28 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 28 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 28 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 28 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 28 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 28 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 28 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 28 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 28 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 28 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 28 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 28 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 28 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 28 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 28 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 28 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 28 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 28 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 28 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 28 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 28 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 28 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 28 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 28 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 28 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 28 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 28 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 28 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 28 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 28 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 28 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 28 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 28 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 28 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 28 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 28 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 28 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 28 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 28 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 28 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 28 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 28 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 28 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 28 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 28 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 28 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 28 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 28 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 28 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 28 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 28 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 28 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 28 + 9506 ] ;
  mBY[ 28 + 98*idy ] = (mBY[ 28 + 98*idy ] - sum_i ) / mA[ 2772 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 27
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 27 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 27 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 27 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 27 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 27 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 27 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 27 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 27 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 27 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 27 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 27 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 27 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 27 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 27 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 27 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 27 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 27 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 27 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 27 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 27 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 27 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 27 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 27 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 27 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 27 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 27 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 27 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 27 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 27 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 27 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 27 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 27 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 27 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 27 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 27 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 27 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 27 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 27 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 27 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 27 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 27 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 27 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 27 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 27 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 27 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 27 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 27 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 27 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 27 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 27 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 27 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 27 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 27 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 27 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 27 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 27 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 27 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 27 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 27 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 27 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 27 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 27 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 27 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 27 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 27 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 27 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 27 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 27 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 27 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 27 + 9506 ] ;
  mBY[ 27 + 98*idy ] = (mBY[ 27 + 98*idy ] - sum_i ) / mA[ 2673 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 26
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 26 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 26 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 26 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 26 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 26 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 26 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 26 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 26 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 26 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 26 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 26 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 26 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 26 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 26 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 26 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 26 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 26 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 26 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 26 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 26 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 26 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 26 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 26 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 26 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 26 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 26 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 26 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 26 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 26 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 26 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 26 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 26 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 26 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 26 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 26 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 26 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 26 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 26 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 26 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 26 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 26 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 26 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 26 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 26 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 26 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 26 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 26 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 26 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 26 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 26 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 26 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 26 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 26 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 26 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 26 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 26 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 26 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 26 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 26 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 26 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 26 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 26 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 26 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 26 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 26 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 26 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 26 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 26 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 26 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 26 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 26 + 9506 ] ;
  mBY[ 26 + 98*idy ] = (mBY[ 26 + 98*idy ] - sum_i ) / mA[ 2574 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 25
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 25 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 25 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 25 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 25 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 25 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 25 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 25 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 25 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 25 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 25 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 25 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 25 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 25 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 25 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 25 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 25 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 25 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 25 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 25 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 25 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 25 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 25 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 25 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 25 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 25 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 25 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 25 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 25 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 25 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 25 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 25 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 25 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 25 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 25 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 25 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 25 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 25 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 25 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 25 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 25 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 25 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 25 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 25 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 25 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 25 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 25 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 25 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 25 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 25 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 25 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 25 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 25 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 25 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 25 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 25 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 25 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 25 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 25 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 25 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 25 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 25 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 25 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 25 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 25 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 25 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 25 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 25 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 25 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 25 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 25 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 25 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 25 + 9506 ] ;
  mBY[ 25 + 98*idy ] = (mBY[ 25 + 98*idy ] - sum_i ) / mA[ 2475 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 24
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 24 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 24 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 24 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 24 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 24 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 24 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 24 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 24 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 24 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 24 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 24 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 24 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 24 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 24 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 24 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 24 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 24 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 24 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 24 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 24 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 24 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 24 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 24 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 24 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 24 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 24 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 24 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 24 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 24 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 24 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 24 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 24 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 24 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 24 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 24 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 24 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 24 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 24 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 24 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 24 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 24 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 24 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 24 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 24 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 24 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 24 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 24 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 24 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 24 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 24 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 24 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 24 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 24 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 24 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 24 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 24 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 24 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 24 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 24 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 24 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 24 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 24 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 24 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 24 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 24 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 24 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 24 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 24 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 24 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 24 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 24 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 24 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 24 + 9506 ] ;
  mBY[ 24 + 98*idy ] = (mBY[ 24 + 98*idy ] - sum_i ) / mA[ 2376 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 23
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 23 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 23 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 23 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 23 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 23 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 23 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 23 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 23 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 23 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 23 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 23 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 23 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 23 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 23 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 23 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 23 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 23 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 23 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 23 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 23 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 23 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 23 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 23 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 23 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 23 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 23 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 23 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 23 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 23 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 23 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 23 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 23 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 23 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 23 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 23 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 23 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 23 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 23 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 23 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 23 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 23 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 23 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 23 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 23 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 23 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 23 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 23 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 23 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 23 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 23 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 23 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 23 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 23 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 23 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 23 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 23 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 23 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 23 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 23 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 23 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 23 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 23 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 23 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 23 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 23 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 23 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 23 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 23 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 23 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 23 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 23 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 23 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 23 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 23 + 9506 ] ;
  mBY[ 23 + 98*idy ] = (mBY[ 23 + 98*idy ] - sum_i ) / mA[ 2277 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 22
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 22 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 22 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 22 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 22 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 22 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 22 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 22 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 22 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 22 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 22 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 22 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 22 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 22 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 22 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 22 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 22 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 22 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 22 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 22 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 22 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 22 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 22 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 22 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 22 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 22 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 22 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 22 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 22 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 22 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 22 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 22 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 22 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 22 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 22 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 22 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 22 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 22 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 22 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 22 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 22 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 22 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 22 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 22 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 22 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 22 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 22 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 22 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 22 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 22 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 22 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 22 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 22 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 22 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 22 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 22 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 22 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 22 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 22 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 22 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 22 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 22 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 22 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 22 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 22 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 22 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 22 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 22 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 22 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 22 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 22 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 22 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 22 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 22 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 22 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 22 + 9506 ] ;
  mBY[ 22 + 98*idy ] = (mBY[ 22 + 98*idy ] - sum_i ) / mA[ 2178 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 21
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 21 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 21 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 21 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 21 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 21 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 21 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 21 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 21 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 21 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 21 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 21 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 21 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 21 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 21 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 21 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 21 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 21 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 21 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 21 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 21 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 21 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 21 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 21 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 21 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 21 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 21 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 21 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 21 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 21 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 21 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 21 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 21 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 21 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 21 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 21 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 21 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 21 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 21 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 21 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 21 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 21 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 21 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 21 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 21 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 21 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 21 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 21 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 21 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 21 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 21 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 21 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 21 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 21 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 21 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 21 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 21 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 21 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 21 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 21 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 21 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 21 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 21 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 21 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 21 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 21 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 21 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 21 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 21 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 21 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 21 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 21 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 21 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 21 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 21 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 21 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 21 + 9506 ] ;
  mBY[ 21 + 98*idy ] = (mBY[ 21 + 98*idy ] - sum_i ) / mA[ 2079 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 20
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 20 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 20 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 20 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 20 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 20 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 20 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 20 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 20 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 20 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 20 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 20 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 20 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 20 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 20 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 20 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 20 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 20 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 20 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 20 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 20 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 20 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 20 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 20 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 20 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 20 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 20 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 20 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 20 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 20 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 20 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 20 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 20 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 20 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 20 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 20 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 20 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 20 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 20 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 20 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 20 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 20 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 20 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 20 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 20 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 20 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 20 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 20 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 20 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 20 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 20 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 20 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 20 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 20 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 20 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 20 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 20 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 20 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 20 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 20 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 20 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 20 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 20 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 20 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 20 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 20 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 20 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 20 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 20 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 20 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 20 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 20 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 20 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 20 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 20 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 20 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 20 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 20 + 9506 ] ;
  mBY[ 20 + 98*idy ] = (mBY[ 20 + 98*idy ] - sum_i ) / mA[ 1980 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 19
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 19 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 19 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 19 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 19 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 19 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 19 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 19 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 19 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 19 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 19 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 19 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 19 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 19 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 19 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 19 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 19 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 19 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 19 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 19 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 19 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 19 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 19 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 19 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 19 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 19 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 19 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 19 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 19 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 19 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 19 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 19 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 19 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 19 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 19 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 19 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 19 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 19 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 19 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 19 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 19 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 19 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 19 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 19 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 19 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 19 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 19 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 19 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 19 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 19 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 19 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 19 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 19 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 19 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 19 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 19 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 19 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 19 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 19 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 19 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 19 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 19 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 19 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 19 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 19 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 19 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 19 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 19 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 19 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 19 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 19 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 19 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 19 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 19 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 19 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 19 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 19 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 19 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 19 + 9506 ] ;
  mBY[ 19 + 98*idy ] = (mBY[ 19 + 98*idy ] - sum_i ) / mA[ 1881 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 18
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 18 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 18 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 18 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 18 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 18 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 18 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 18 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 18 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 18 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 18 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 18 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 18 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 18 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 18 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 18 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 18 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 18 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 18 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 18 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 18 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 18 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 18 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 18 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 18 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 18 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 18 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 18 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 18 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 18 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 18 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 18 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 18 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 18 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 18 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 18 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 18 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 18 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 18 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 18 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 18 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 18 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 18 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 18 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 18 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 18 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 18 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 18 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 18 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 18 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 18 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 18 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 18 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 18 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 18 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 18 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 18 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 18 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 18 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 18 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 18 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 18 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 18 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 18 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 18 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 18 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 18 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 18 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 18 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 18 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 18 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 18 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 18 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 18 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 18 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 18 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 18 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 18 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 18 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 18 + 9506 ] ;
  mBY[ 18 + 98*idy ] = (mBY[ 18 + 98*idy ] - sum_i ) / mA[ 1782 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 17
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 17 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 17 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 17 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 17 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 17 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 17 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 17 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 17 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 17 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 17 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 17 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 17 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 17 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 17 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 17 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 17 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 17 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 17 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 17 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 17 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 17 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 17 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 17 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 17 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 17 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 17 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 17 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 17 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 17 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 17 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 17 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 17 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 17 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 17 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 17 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 17 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 17 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 17 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 17 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 17 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 17 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 17 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 17 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 17 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 17 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 17 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 17 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 17 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 17 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 17 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 17 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 17 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 17 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 17 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 17 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 17 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 17 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 17 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 17 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 17 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 17 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 17 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 17 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 17 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 17 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 17 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 17 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 17 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 17 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 17 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 17 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 17 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 17 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 17 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 17 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 17 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 17 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 17 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 17 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 17 + 9506 ] ;
  mBY[ 17 + 98*idy ] = (mBY[ 17 + 98*idy ] - sum_i ) / mA[ 1683 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 16
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 16 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 16 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 16 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 16 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 16 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 16 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 16 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 16 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 16 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 16 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 16 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 16 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 16 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 16 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 16 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 16 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 16 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 16 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 16 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 16 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 16 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 16 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 16 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 16 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 16 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 16 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 16 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 16 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 16 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 16 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 16 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 16 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 16 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 16 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 16 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 16 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 16 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 16 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 16 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 16 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 16 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 16 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 16 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 16 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 16 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 16 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 16 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 16 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 16 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 16 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 16 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 16 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 16 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 16 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 16 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 16 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 16 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 16 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 16 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 16 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 16 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 16 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 16 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 16 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 16 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 16 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 16 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 16 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 16 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 16 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 16 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 16 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 16 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 16 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 16 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 16 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 16 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 16 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 16 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 16 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 16 + 9506 ] ;
  mBY[ 16 + 98*idy ] = (mBY[ 16 + 98*idy ] - sum_i ) / mA[ 1584 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 15
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 15 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 15 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 15 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 15 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 15 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 15 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 15 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 15 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 15 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 15 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 15 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 15 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 15 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 15 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 15 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 15 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 15 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 15 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 15 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 15 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 15 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 15 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 15 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 15 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 15 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 15 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 15 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 15 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 15 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 15 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 15 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 15 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 15 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 15 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 15 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 15 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 15 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 15 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 15 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 15 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 15 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 15 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 15 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 15 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 15 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 15 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 15 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 15 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 15 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 15 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 15 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 15 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 15 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 15 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 15 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 15 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 15 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 15 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 15 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 15 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 15 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 15 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 15 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 15 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 15 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 15 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 15 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 15 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 15 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 15 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 15 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 15 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 15 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 15 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 15 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 15 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 15 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 15 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 15 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 15 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 15 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 15 + 9506 ] ;
  mBY[ 15 + 98*idy ] = (mBY[ 15 + 98*idy ] - sum_i ) / mA[ 1485 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 14
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 15 + 98*idy ] * mA[ 14 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 14 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 14 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 14 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 14 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 14 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 14 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 14 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 14 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 14 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 14 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 14 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 14 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 14 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 14 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 14 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 14 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 14 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 14 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 14 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 14 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 14 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 14 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 14 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 14 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 14 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 14 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 14 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 14 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 14 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 14 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 14 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 14 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 14 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 14 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 14 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 14 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 14 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 14 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 14 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 14 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 14 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 14 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 14 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 14 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 14 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 14 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 14 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 14 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 14 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 14 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 14 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 14 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 14 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 14 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 14 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 14 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 14 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 14 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 14 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 14 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 14 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 14 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 14 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 14 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 14 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 14 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 14 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 14 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 14 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 14 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 14 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 14 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 14 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 14 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 14 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 14 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 14 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 14 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 14 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 14 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 14 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 14 + 9506 ] ;
  mBY[ 14 + 98*idy ] = (mBY[ 14 + 98*idy ] - sum_i ) / mA[ 1386 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 13
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 14 + 98*idy ] * mA[ 13 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA[ 13 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 13 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 13 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 13 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 13 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 13 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 13 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 13 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 13 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 13 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 13 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 13 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 13 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 13 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 13 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 13 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 13 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 13 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 13 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 13 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 13 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 13 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 13 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 13 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 13 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 13 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 13 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 13 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 13 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 13 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 13 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 13 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 13 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 13 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 13 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 13 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 13 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 13 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 13 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 13 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 13 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 13 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 13 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 13 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 13 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 13 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 13 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 13 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 13 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 13 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 13 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 13 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 13 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 13 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 13 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 13 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 13 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 13 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 13 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 13 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 13 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 13 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 13 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 13 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 13 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 13 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 13 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 13 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 13 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 13 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 13 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 13 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 13 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 13 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 13 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 13 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 13 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 13 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 13 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 13 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 13 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 13 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 13 + 9506 ] ;
  mBY[ 13 + 98*idy ] = (mBY[ 13 + 98*idy ] - sum_i ) / mA[ 1287 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 12
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 13 + 98*idy ] * mA[ 12 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA[ 12 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA[ 12 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 12 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 12 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 12 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 12 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 12 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 12 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 12 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 12 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 12 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 12 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 12 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 12 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 12 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 12 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 12 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 12 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 12 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 12 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 12 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 12 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 12 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 12 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 12 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 12 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 12 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 12 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 12 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 12 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 12 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 12 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 12 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 12 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 12 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 12 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 12 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 12 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 12 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 12 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 12 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 12 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 12 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 12 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 12 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 12 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 12 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 12 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 12 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 12 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 12 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 12 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 12 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 12 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 12 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 12 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 12 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 12 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 12 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 12 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 12 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 12 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 12 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 12 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 12 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 12 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 12 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 12 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 12 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 12 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 12 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 12 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 12 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 12 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 12 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 12 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 12 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 12 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 12 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 12 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 12 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 12 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 12 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 12 + 9506 ] ;
  mBY[ 12 + 98*idy ] = (mBY[ 12 + 98*idy ] - sum_i ) / mA[ 1188 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 11
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 12 + 98*idy ] * mA[ 11 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA[ 11 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA[ 11 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA[ 11 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 11 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 11 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 11 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 11 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 11 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 11 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 11 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 11 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 11 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 11 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 11 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 11 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 11 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 11 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 11 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 11 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 11 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 11 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 11 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 11 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 11 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 11 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 11 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 11 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 11 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 11 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 11 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 11 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 11 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 11 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 11 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 11 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 11 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 11 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 11 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 11 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 11 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 11 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 11 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 11 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 11 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 11 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 11 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 11 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 11 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 11 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 11 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 11 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 11 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 11 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 11 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 11 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 11 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 11 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 11 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 11 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 11 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 11 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 11 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 11 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 11 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 11 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 11 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 11 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 11 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 11 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 11 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 11 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 11 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 11 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 11 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 11 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 11 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 11 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 11 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 11 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 11 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 11 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 11 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 11 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 11 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 11 + 9506 ] ;
  mBY[ 11 + 98*idy ] = (mBY[ 11 + 98*idy ] - sum_i ) / mA[ 1089 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 10
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 11 + 98*idy ] * mA[ 10 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA[ 10 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA[ 10 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA[ 10 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA[ 10 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 10 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 10 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 10 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 10 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 10 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 10 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 10 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 10 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 10 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 10 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 10 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 10 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 10 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 10 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 10 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 10 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 10 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 10 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 10 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 10 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 10 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 10 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 10 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 10 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 10 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 10 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 10 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 10 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 10 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 10 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 10 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 10 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 10 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 10 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 10 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 10 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 10 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 10 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 10 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 10 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 10 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 10 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 10 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 10 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 10 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 10 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 10 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 10 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 10 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 10 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 10 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 10 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 10 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 10 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 10 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 10 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 10 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 10 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 10 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 10 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 10 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 10 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 10 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 10 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 10 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 10 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 10 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 10 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 10 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 10 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 10 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 10 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 10 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 10 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 10 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 10 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 10 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 10 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 10 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 10 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 10 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 10 + 9506 ] ;
  mBY[ 10 + 98*idy ] = (mBY[ 10 + 98*idy ] - sum_i ) / mA[ 990 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 9
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 10 + 98*idy ] * mA[ 9 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA[ 9 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA[ 9 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA[ 9 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA[ 9 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA[ 9 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 9 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 9 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 9 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 9 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 9 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 9 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 9 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 9 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 9 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 9 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 9 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 9 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 9 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 9 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 9 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 9 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 9 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 9 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 9 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 9 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 9 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 9 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 9 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 9 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 9 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 9 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 9 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 9 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 9 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 9 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 9 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 9 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 9 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 9 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 9 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 9 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 9 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 9 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 9 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 9 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 9 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 9 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 9 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 9 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 9 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 9 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 9 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 9 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 9 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 9 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 9 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 9 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 9 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 9 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 9 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 9 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 9 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 9 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 9 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 9 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 9 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 9 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 9 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 9 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 9 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 9 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 9 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 9 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 9 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 9 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 9 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 9 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 9 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 9 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 9 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 9 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 9 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 9 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 9 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 9 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 9 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 9 + 9506 ] ;
  mBY[ 9 + 98*idy ] = (mBY[ 9 + 98*idy ] - sum_i ) / mA[ 891 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 8
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 9 + 98*idy ] * mA[ 8 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA[ 8 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA[ 8 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA[ 8 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA[ 8 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA[ 8 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA[ 8 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 8 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 8 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 8 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 8 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 8 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 8 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 8 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 8 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 8 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 8 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 8 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 8 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 8 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 8 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 8 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 8 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 8 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 8 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 8 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 8 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 8 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 8 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 8 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 8 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 8 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 8 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 8 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 8 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 8 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 8 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 8 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 8 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 8 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 8 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 8 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 8 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 8 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 8 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 8 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 8 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 8 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 8 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 8 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 8 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 8 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 8 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 8 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 8 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 8 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 8 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 8 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 8 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 8 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 8 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 8 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 8 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 8 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 8 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 8 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 8 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 8 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 8 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 8 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 8 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 8 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 8 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 8 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 8 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 8 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 8 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 8 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 8 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 8 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 8 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 8 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 8 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 8 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 8 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 8 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 8 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 8 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 8 + 9506 ] ;
  mBY[ 8 + 98*idy ] = (mBY[ 8 + 98*idy ] - sum_i ) / mA[ 792 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 7
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 8 + 98*idy ] * mA[ 7 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA[ 7 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA[ 7 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA[ 7 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA[ 7 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA[ 7 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA[ 7 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA[ 7 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 7 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 7 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 7 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 7 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 7 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 7 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 7 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 7 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 7 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 7 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 7 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 7 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 7 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 7 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 7 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 7 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 7 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 7 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 7 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 7 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 7 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 7 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 7 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 7 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 7 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 7 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 7 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 7 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 7 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 7 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 7 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 7 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 7 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 7 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 7 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 7 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 7 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 7 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 7 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 7 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 7 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 7 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 7 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 7 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 7 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 7 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 7 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 7 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 7 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 7 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 7 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 7 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 7 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 7 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 7 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 7 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 7 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 7 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 7 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 7 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 7 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 7 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 7 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 7 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 7 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 7 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 7 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 7 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 7 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 7 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 7 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 7 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 7 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 7 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 7 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 7 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 7 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 7 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 7 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 7 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 7 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 7 + 9506 ] ;
  mBY[ 7 + 98*idy ] = (mBY[ 7 + 98*idy ] - sum_i ) / mA[ 693 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 6
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 7 + 98*idy ] * mA[ 6 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA[ 6 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA[ 6 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA[ 6 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA[ 6 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA[ 6 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA[ 6 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA[ 6 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA[ 6 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 6 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 6 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 6 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 6 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 6 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 6 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 6 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 6 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 6 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 6 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 6 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 6 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 6 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 6 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 6 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 6 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 6 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 6 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 6 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 6 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 6 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 6 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 6 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 6 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 6 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 6 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 6 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 6 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 6 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 6 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 6 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 6 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 6 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 6 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 6 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 6 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 6 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 6 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 6 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 6 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 6 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 6 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 6 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 6 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 6 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 6 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 6 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 6 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 6 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 6 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 6 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 6 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 6 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 6 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 6 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 6 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 6 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 6 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 6 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 6 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 6 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 6 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 6 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 6 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 6 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 6 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 6 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 6 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 6 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 6 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 6 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 6 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 6 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 6 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 6 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 6 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 6 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 6 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 6 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 6 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 6 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 6 + 9506 ] ;
  mBY[ 6 + 98*idy ] = (mBY[ 6 + 98*idy ] - sum_i ) / mA[ 594 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 5
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 6 + 98*idy ] * mA[ 5 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA[ 5 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA[ 5 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA[ 5 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA[ 5 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA[ 5 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA[ 5 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA[ 5 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA[ 5 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA[ 5 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 5 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 5 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 5 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 5 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 5 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 5 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 5 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 5 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 5 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 5 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 5 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 5 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 5 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 5 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 5 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 5 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 5 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 5 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 5 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 5 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 5 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 5 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 5 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 5 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 5 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 5 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 5 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 5 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 5 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 5 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 5 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 5 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 5 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 5 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 5 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 5 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 5 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 5 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 5 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 5 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 5 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 5 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 5 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 5 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 5 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 5 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 5 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 5 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 5 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 5 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 5 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 5 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 5 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 5 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 5 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 5 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 5 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 5 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 5 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 5 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 5 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 5 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 5 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 5 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 5 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 5 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 5 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 5 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 5 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 5 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 5 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 5 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 5 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 5 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 5 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 5 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 5 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 5 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 5 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 5 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 5 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 5 + 9506 ] ;
  mBY[ 5 + 98*idy ] = (mBY[ 5 + 98*idy ] - sum_i ) / mA[ 495 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 4
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 5 + 98*idy ] * mA[ 4 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA[ 4 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA[ 4 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA[ 4 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA[ 4 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA[ 4 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA[ 4 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA[ 4 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA[ 4 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA[ 4 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA[ 4 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 4 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 4 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 4 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 4 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 4 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 4 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 4 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 4 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 4 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 4 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 4 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 4 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 4 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 4 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 4 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 4 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 4 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 4 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 4 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 4 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 4 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 4 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 4 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 4 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 4 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 4 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 4 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 4 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 4 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 4 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 4 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 4 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 4 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 4 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 4 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 4 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 4 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 4 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 4 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 4 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 4 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 4 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 4 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 4 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 4 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 4 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 4 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 4 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 4 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 4 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 4 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 4 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 4 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 4 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 4 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 4 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 4 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 4 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 4 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 4 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 4 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 4 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 4 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 4 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 4 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 4 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 4 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 4 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 4 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 4 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 4 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 4 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 4 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 4 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 4 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 4 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 4 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 4 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 4 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 4 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 4 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 4 + 9506 ] ;
  mBY[ 4 + 98*idy ] = (mBY[ 4 + 98*idy ] - sum_i ) / mA[ 396 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 3
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 4 + 98*idy ] * mA[ 3 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA[ 3 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA[ 3 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA[ 3 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA[ 3 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA[ 3 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA[ 3 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA[ 3 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA[ 3 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA[ 3 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA[ 3 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA[ 3 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 3 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 3 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 3 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 3 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 3 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 3 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 3 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 3 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 3 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 3 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 3 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 3 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 3 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 3 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 3 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 3 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 3 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 3 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 3 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 3 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 3 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 3 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 3 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 3 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 3 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 3 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 3 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 3 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 3 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 3 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 3 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 3 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 3 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 3 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 3 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 3 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 3 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 3 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 3 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 3 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 3 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 3 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 3 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 3 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 3 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 3 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 3 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 3 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 3 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 3 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 3 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 3 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 3 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 3 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 3 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 3 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 3 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 3 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 3 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 3 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 3 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 3 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 3 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 3 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 3 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 3 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 3 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 3 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 3 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 3 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 3 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 3 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 3 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 3 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 3 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 3 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 3 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 3 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 3 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 3 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 3 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 3 + 9506 ] ;
  mBY[ 3 + 98*idy ] = (mBY[ 3 + 98*idy ] - sum_i ) / mA[ 297 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 2
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 3 + 98*idy ] * mA[ 2 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA[ 2 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA[ 2 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA[ 2 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA[ 2 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA[ 2 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA[ 2 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA[ 2 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA[ 2 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA[ 2 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA[ 2 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA[ 2 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA[ 2 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 2 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 2 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 2 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 2 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 2 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 2 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 2 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 2 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 2 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 2 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 2 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 2 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 2 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 2 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 2 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 2 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 2 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 2 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 2 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 2 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 2 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 2 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 2 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 2 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 2 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 2 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 2 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 2 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 2 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 2 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 2 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 2 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 2 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 2 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 2 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 2 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 2 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 2 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 2 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 2 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 2 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 2 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 2 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 2 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 2 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 2 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 2 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 2 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 2 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 2 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 2 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 2 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 2 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 2 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 2 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 2 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 2 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 2 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 2 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 2 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 2 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 2 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 2 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 2 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 2 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 2 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 2 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 2 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 2 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 2 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 2 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 2 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 2 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 2 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 2 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 2 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 2 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 2 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 2 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 2 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 2 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 2 + 9506 ] ;
  mBY[ 2 + 98*idy ] = (mBY[ 2 + 98*idy ] - sum_i ) / mA[ 198 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 1
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 2 + 98*idy ] * mA[ 1 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA[ 1 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA[ 1 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA[ 1 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA[ 1 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA[ 1 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA[ 1 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA[ 1 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA[ 1 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA[ 1 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA[ 1 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA[ 1 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA[ 1 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA[ 1 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 1 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 1 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 1 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 1 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 1 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 1 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 1 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 1 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 1 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 1 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 1 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 1 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 1 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 1 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 1 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 1 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 1 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 1 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 1 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 1 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 1 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 1 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 1 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 1 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 1 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 1 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 1 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 1 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 1 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 1 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 1 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 1 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 1 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 1 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 1 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 1 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 1 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 1 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 1 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 1 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 1 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 1 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 1 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 1 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 1 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 1 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 1 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 1 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 1 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 1 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 1 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 1 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 1 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 1 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 1 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 1 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 1 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 1 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 1 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 1 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 1 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 1 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 1 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 1 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 1 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 1 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 1 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 1 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 1 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 1 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 1 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 1 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 1 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 1 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 1 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 1 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 1 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 1 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 1 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 1 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 1 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 1 + 9506 ] ;
  mBY[ 1 + 98*idy ] = (mBY[ 1 + 98*idy ] - sum_i ) / mA[ 99 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 0
if(idx==0 && idy<3 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 1 + 98*idy ] * mA[ 0 + 98 ] ;
  sum_i += mBY[ 2 + 98*idy ] * mA[ 0 + 196 ] ;
  sum_i += mBY[ 3 + 98*idy ] * mA[ 0 + 294 ] ;
  sum_i += mBY[ 4 + 98*idy ] * mA[ 0 + 392 ] ;
  sum_i += mBY[ 5 + 98*idy ] * mA[ 0 + 490 ] ;
  sum_i += mBY[ 6 + 98*idy ] * mA[ 0 + 588 ] ;
  sum_i += mBY[ 7 + 98*idy ] * mA[ 0 + 686 ] ;
  sum_i += mBY[ 8 + 98*idy ] * mA[ 0 + 784 ] ;
  sum_i += mBY[ 9 + 98*idy ] * mA[ 0 + 882 ] ;
  sum_i += mBY[ 10 + 98*idy ] * mA[ 0 + 980 ] ;
  sum_i += mBY[ 11 + 98*idy ] * mA[ 0 + 1078 ] ;
  sum_i += mBY[ 12 + 98*idy ] * mA[ 0 + 1176 ] ;
  sum_i += mBY[ 13 + 98*idy ] * mA[ 0 + 1274 ] ;
  sum_i += mBY[ 14 + 98*idy ] * mA[ 0 + 1372 ] ;
  sum_i += mBY[ 15 + 98*idy ] * mA[ 0 + 1470 ] ;
  sum_i += mBY[ 16 + 98*idy ] * mA[ 0 + 1568 ] ;
  sum_i += mBY[ 17 + 98*idy ] * mA[ 0 + 1666 ] ;
  sum_i += mBY[ 18 + 98*idy ] * mA[ 0 + 1764 ] ;
  sum_i += mBY[ 19 + 98*idy ] * mA[ 0 + 1862 ] ;
  sum_i += mBY[ 20 + 98*idy ] * mA[ 0 + 1960 ] ;
  sum_i += mBY[ 21 + 98*idy ] * mA[ 0 + 2058 ] ;
  sum_i += mBY[ 22 + 98*idy ] * mA[ 0 + 2156 ] ;
  sum_i += mBY[ 23 + 98*idy ] * mA[ 0 + 2254 ] ;
  sum_i += mBY[ 24 + 98*idy ] * mA[ 0 + 2352 ] ;
  sum_i += mBY[ 25 + 98*idy ] * mA[ 0 + 2450 ] ;
  sum_i += mBY[ 26 + 98*idy ] * mA[ 0 + 2548 ] ;
  sum_i += mBY[ 27 + 98*idy ] * mA[ 0 + 2646 ] ;
  sum_i += mBY[ 28 + 98*idy ] * mA[ 0 + 2744 ] ;
  sum_i += mBY[ 29 + 98*idy ] * mA[ 0 + 2842 ] ;
  sum_i += mBY[ 30 + 98*idy ] * mA[ 0 + 2940 ] ;
  sum_i += mBY[ 31 + 98*idy ] * mA[ 0 + 3038 ] ;
  sum_i += mBY[ 32 + 98*idy ] * mA[ 0 + 3136 ] ;
  sum_i += mBY[ 33 + 98*idy ] * mA[ 0 + 3234 ] ;
  sum_i += mBY[ 34 + 98*idy ] * mA[ 0 + 3332 ] ;
  sum_i += mBY[ 35 + 98*idy ] * mA[ 0 + 3430 ] ;
  sum_i += mBY[ 36 + 98*idy ] * mA[ 0 + 3528 ] ;
  sum_i += mBY[ 37 + 98*idy ] * mA[ 0 + 3626 ] ;
  sum_i += mBY[ 38 + 98*idy ] * mA[ 0 + 3724 ] ;
  sum_i += mBY[ 39 + 98*idy ] * mA[ 0 + 3822 ] ;
  sum_i += mBY[ 40 + 98*idy ] * mA[ 0 + 3920 ] ;
  sum_i += mBY[ 41 + 98*idy ] * mA[ 0 + 4018 ] ;
  sum_i += mBY[ 42 + 98*idy ] * mA[ 0 + 4116 ] ;
  sum_i += mBY[ 43 + 98*idy ] * mA[ 0 + 4214 ] ;
  sum_i += mBY[ 44 + 98*idy ] * mA[ 0 + 4312 ] ;
  sum_i += mBY[ 45 + 98*idy ] * mA[ 0 + 4410 ] ;
  sum_i += mBY[ 46 + 98*idy ] * mA[ 0 + 4508 ] ;
  sum_i += mBY[ 47 + 98*idy ] * mA[ 0 + 4606 ] ;
  sum_i += mBY[ 48 + 98*idy ] * mA[ 0 + 4704 ] ;
  sum_i += mBY[ 49 + 98*idy ] * mA[ 0 + 4802 ] ;
  sum_i += mBY[ 50 + 98*idy ] * mA[ 0 + 4900 ] ;
  sum_i += mBY[ 51 + 98*idy ] * mA[ 0 + 4998 ] ;
  sum_i += mBY[ 52 + 98*idy ] * mA[ 0 + 5096 ] ;
  sum_i += mBY[ 53 + 98*idy ] * mA[ 0 + 5194 ] ;
  sum_i += mBY[ 54 + 98*idy ] * mA[ 0 + 5292 ] ;
  sum_i += mBY[ 55 + 98*idy ] * mA[ 0 + 5390 ] ;
  sum_i += mBY[ 56 + 98*idy ] * mA[ 0 + 5488 ] ;
  sum_i += mBY[ 57 + 98*idy ] * mA[ 0 + 5586 ] ;
  sum_i += mBY[ 58 + 98*idy ] * mA[ 0 + 5684 ] ;
  sum_i += mBY[ 59 + 98*idy ] * mA[ 0 + 5782 ] ;
  sum_i += mBY[ 60 + 98*idy ] * mA[ 0 + 5880 ] ;
  sum_i += mBY[ 61 + 98*idy ] * mA[ 0 + 5978 ] ;
  sum_i += mBY[ 62 + 98*idy ] * mA[ 0 + 6076 ] ;
  sum_i += mBY[ 63 + 98*idy ] * mA[ 0 + 6174 ] ;
  sum_i += mBY[ 64 + 98*idy ] * mA[ 0 + 6272 ] ;
  sum_i += mBY[ 65 + 98*idy ] * mA[ 0 + 6370 ] ;
  sum_i += mBY[ 66 + 98*idy ] * mA[ 0 + 6468 ] ;
  sum_i += mBY[ 67 + 98*idy ] * mA[ 0 + 6566 ] ;
  sum_i += mBY[ 68 + 98*idy ] * mA[ 0 + 6664 ] ;
  sum_i += mBY[ 69 + 98*idy ] * mA[ 0 + 6762 ] ;
  sum_i += mBY[ 70 + 98*idy ] * mA[ 0 + 6860 ] ;
  sum_i += mBY[ 71 + 98*idy ] * mA[ 0 + 6958 ] ;
  sum_i += mBY[ 72 + 98*idy ] * mA[ 0 + 7056 ] ;
  sum_i += mBY[ 73 + 98*idy ] * mA[ 0 + 7154 ] ;
  sum_i += mBY[ 74 + 98*idy ] * mA[ 0 + 7252 ] ;
  sum_i += mBY[ 75 + 98*idy ] * mA[ 0 + 7350 ] ;
  sum_i += mBY[ 76 + 98*idy ] * mA[ 0 + 7448 ] ;
  sum_i += mBY[ 77 + 98*idy ] * mA[ 0 + 7546 ] ;
  sum_i += mBY[ 78 + 98*idy ] * mA[ 0 + 7644 ] ;
  sum_i += mBY[ 79 + 98*idy ] * mA[ 0 + 7742 ] ;
  sum_i += mBY[ 80 + 98*idy ] * mA[ 0 + 7840 ] ;
  sum_i += mBY[ 81 + 98*idy ] * mA[ 0 + 7938 ] ;
  sum_i += mBY[ 82 + 98*idy ] * mA[ 0 + 8036 ] ;
  sum_i += mBY[ 83 + 98*idy ] * mA[ 0 + 8134 ] ;
  sum_i += mBY[ 84 + 98*idy ] * mA[ 0 + 8232 ] ;
  sum_i += mBY[ 85 + 98*idy ] * mA[ 0 + 8330 ] ;
  sum_i += mBY[ 86 + 98*idy ] * mA[ 0 + 8428 ] ;
  sum_i += mBY[ 87 + 98*idy ] * mA[ 0 + 8526 ] ;
  sum_i += mBY[ 88 + 98*idy ] * mA[ 0 + 8624 ] ;
  sum_i += mBY[ 89 + 98*idy ] * mA[ 0 + 8722 ] ;
  sum_i += mBY[ 90 + 98*idy ] * mA[ 0 + 8820 ] ;
  sum_i += mBY[ 91 + 98*idy ] * mA[ 0 + 8918 ] ;
  sum_i += mBY[ 92 + 98*idy ] * mA[ 0 + 9016 ] ;
  sum_i += mBY[ 93 + 98*idy ] * mA[ 0 + 9114 ] ;
  sum_i += mBY[ 94 + 98*idy ] * mA[ 0 + 9212 ] ;
  sum_i += mBY[ 95 + 98*idy ] * mA[ 0 + 9310 ] ;
  sum_i += mBY[ 96 + 98*idy ] * mA[ 0 + 9408 ] ;
  sum_i += mBY[ 97 + 98*idy ] * mA[ 0 + 9506 ] ;
  mBY[ 0 + 98*idy ] = (mBY[ 0 + 98*idy ] - sum_i ) / mA[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
//-------------------------------------------------------------------------------------
mr_AKG_1_2_M_0 = mBY[ 0 ];
mr_AKG_2_3_M_0 = mBY[ 1 ];
mr_AKG_3_4_M_0 = mBY[ 2 ];
mr_AKG_4_5_M_0 = mBY[ 3 ];
mr_Ac_1_2_M_0 = mBY[ 4 ];
mr_AcCoA_1_2_M_0 = mBY[ 5 ];
mr_Ala_2_3_M_0 = mBY[ 6 ];
mr_Asp_1_2_M_0 = mBY[ 7 ];
mr_Asp_2_3_M_0 = mBY[ 8 ];
mr_Asp_3_4_M_0 = mBY[ 9 ];
mr_Cit_1_2_M_0 = mBY[ 10 ];
mr_Cit_2_3_M_0 = mBY[ 11 ];
mr_Cit_3_4_M_0 = mBY[ 12 ];
mr_Cit_3_6_M_0 = mBY[ 13 ];
mr_Cit_4_5_M_0 = mBY[ 14 ];
mr_Cys_2_3_M_0 = mBY[ 15 ];
mr_DHAP_1_2_M_0 = mBY[ 16 ];
mr_DHAP_2_3_M_0 = mBY[ 17 ];
mr_E4P_2_3_M_0 = mBY[ 18 ];
mr_E4P_3_4_M_0 = mBY[ 19 ];
mr_F6P_1_2_M_0 = mBY[ 20 ];
mr_F6P_2_3_M_0 = mBY[ 21 ];
mr_F6P_4_5_M_0 = mBY[ 22 ];
mr_F6P_5_6_M_0 = mBY[ 23 ];
mr_FBP_1_2_M_0 = mBY[ 24 ];
mr_FBP_2_3_M_0 = mBY[ 25 ];
mr_FBP_4_5_M_0 = mBY[ 26 ];
mr_FBP_5_6_M_0 = mBY[ 27 ];
mr_Fum_1_2_M_0 = mBY[ 28 ];
mr_Fum_2_3_M_0 = mBY[ 29 ];
mr_Fum_3_4_M_0 = mBY[ 30 ];
mr_G6P_1_2_M_0 = mBY[ 31 ];
mr_G6P_2_3_M_0 = mBY[ 32 ];
mr_G6P_4_5_M_0 = mBY[ 33 ];
mr_G6P_5_6_M_0 = mBY[ 34 ];
mr_GAP_1_2_M_0 = mBY[ 35 ];
mr_GAP_2_3_M_0 = mBY[ 36 ];
mr_Gln_1_2_M_0 = mBY[ 37 ];
mr_Gln_2_3_M_0 = mBY[ 38 ];
mr_Gln_3_4_M_0 = mBY[ 39 ];
mr_Gln_4_5_M_0 = mBY[ 40 ];
mr_Glu_1_2_M_0 = mBY[ 41 ];
mr_Glu_2_3_M_0 = mBY[ 42 ];
mr_Glu_3_4_M_0 = mBY[ 43 ];
mr_Glu_4_5_M_0 = mBY[ 44 ];
mr_Gly_1_2_M_0 = mBY[ 45 ];
mr_Glyox_1_2_M_0 = mBY[ 46 ];
mr_ICit_1_2_M_0 = mBY[ 47 ];
mr_ICit_2_3_M_0 = mBY[ 48 ];
mr_ICit_3_4_M_0 = mBY[ 49 ];
mr_ICit_3_6_M_0 = mBY[ 50 ];
mr_ICit_4_5_M_0 = mBY[ 51 ];
mr_KDPG_2_3_M_0 = mBY[ 52 ];
mr_KDPG_4_5_M_0 = mBY[ 53 ];
mr_KDPG_5_6_M_0 = mBY[ 54 ];
mr_Mal_1_2_M_0 = mBY[ 55 ];
mr_Mal_2_3_M_0 = mBY[ 56 ];
mr_Mal_3_4_M_0 = mBY[ 57 ];
mr_OAC_1_2_M_0 = mBY[ 58 ];
mr_OAC_2_3_M_0 = mBY[ 59 ];
mr_OAC_3_4_M_0 = mBY[ 60 ];
mr_PEP_1_2_M_0 = mBY[ 61 ];
mr_PEP_2_3_M_0 = mBY[ 62 ];
mr_Phe_1_2_M_0 = mBY[ 63 ];
mr_Pyr_2_3_M_0 = mBY[ 64 ];
mr_R5P_1_2_M_0 = mBY[ 65 ];
mr_R5P_3_4_M_0 = mBY[ 66 ];
mr_R5P_4_5_M_0 = mBY[ 67 ];
mr_Ru5P_1_2_M_0 = mBY[ 68 ];
mr_Ru5P_3_4_M_0 = mBY[ 69 ];
mr_Ru5P_4_5_M_0 = mBY[ 70 ];
mr_S7P_1_2_M_0 = mBY[ 71 ];
mr_S7P_2_3_M_0 = mBY[ 72 ];
mr_S7P_3_4_M_0 = mBY[ 73 ];
mr_S7P_5_6_M_0 = mBY[ 74 ];
mr_S7P_6_7_M_0 = mBY[ 75 ];
mr_Ser_1_2_M_0 = mBY[ 76 ];
mr_Ser_2_3_M_0 = mBY[ 77 ];
mr_Suc_1_2_M_0 = mBY[ 78 ];
mr_Suc_2_3_M_0 = mBY[ 79 ];
mr_Suc_3_4_M_0 = mBY[ 80 ];
mr_SucCoA_1_2_M_0 = mBY[ 81 ];
mr_SucCoA_2_3_M_0 = mBY[ 82 ];
mr_SucCoA_3_4_M_0 = mBY[ 83 ];
mr_TAC3_1_2_M_0 = mBY[ 84 ];
mr_TAC3_2_3_M_0 = mBY[ 85 ];
mr_TKC2_1_2_M_0 = mBY[ 86 ];
mr_Thr_1_2_M_0 = mBY[ 87 ];
mr_Thr_3_4_M_0 = mBY[ 88 ];
mr_Tyr_1_2_M_0 = mBY[ 89 ];
mr_X3PG_1_2_M_0 = mBY[ 90 ];
mr_X3PG_2_3_M_0 = mBY[ 91 ];
mr_X5P_1_2_M_0 = mBY[ 92 ];
mr_X5P_3_4_M_0 = mBY[ 93 ];
mr_X5P_4_5_M_0 = mBY[ 94 ];
mr_X6PG_2_3_M_0 = mBY[ 95 ];
mr_X6PG_4_5_M_0 = mBY[ 96 ];
mr_X6PG_5_6_M_0 = mBY[ 97 ];
mr_AKG_1_2_M_1 = mBY[ 98 ];
mr_AKG_2_3_M_1 = mBY[ 99 ];
mr_AKG_3_4_M_1 = mBY[ 100 ];
mr_AKG_4_5_M_1 = mBY[ 101 ];
mr_Ac_1_2_M_1 = mBY[ 102 ];
mr_AcCoA_1_2_M_1 = mBY[ 103 ];
mr_Ala_2_3_M_1 = mBY[ 104 ];
mr_Asp_1_2_M_1 = mBY[ 105 ];
mr_Asp_2_3_M_1 = mBY[ 106 ];
mr_Asp_3_4_M_1 = mBY[ 107 ];
mr_Cit_1_2_M_1 = mBY[ 108 ];
mr_Cit_2_3_M_1 = mBY[ 109 ];
mr_Cit_3_4_M_1 = mBY[ 110 ];
mr_Cit_3_6_M_1 = mBY[ 111 ];
mr_Cit_4_5_M_1 = mBY[ 112 ];
mr_Cys_2_3_M_1 = mBY[ 113 ];
mr_DHAP_1_2_M_1 = mBY[ 114 ];
mr_DHAP_2_3_M_1 = mBY[ 115 ];
mr_E4P_2_3_M_1 = mBY[ 116 ];
mr_E4P_3_4_M_1 = mBY[ 117 ];
mr_F6P_1_2_M_1 = mBY[ 118 ];
mr_F6P_2_3_M_1 = mBY[ 119 ];
mr_F6P_4_5_M_1 = mBY[ 120 ];
mr_F6P_5_6_M_1 = mBY[ 121 ];
mr_FBP_1_2_M_1 = mBY[ 122 ];
mr_FBP_2_3_M_1 = mBY[ 123 ];
mr_FBP_4_5_M_1 = mBY[ 124 ];
mr_FBP_5_6_M_1 = mBY[ 125 ];
mr_Fum_1_2_M_1 = mBY[ 126 ];
mr_Fum_2_3_M_1 = mBY[ 127 ];
mr_Fum_3_4_M_1 = mBY[ 128 ];
mr_G6P_1_2_M_1 = mBY[ 129 ];
mr_G6P_2_3_M_1 = mBY[ 130 ];
mr_G6P_4_5_M_1 = mBY[ 131 ];
mr_G6P_5_6_M_1 = mBY[ 132 ];
mr_GAP_1_2_M_1 = mBY[ 133 ];
mr_GAP_2_3_M_1 = mBY[ 134 ];
mr_Gln_1_2_M_1 = mBY[ 135 ];
mr_Gln_2_3_M_1 = mBY[ 136 ];
mr_Gln_3_4_M_1 = mBY[ 137 ];
mr_Gln_4_5_M_1 = mBY[ 138 ];
mr_Glu_1_2_M_1 = mBY[ 139 ];
mr_Glu_2_3_M_1 = mBY[ 140 ];
mr_Glu_3_4_M_1 = mBY[ 141 ];
mr_Glu_4_5_M_1 = mBY[ 142 ];
mr_Gly_1_2_M_1 = mBY[ 143 ];
mr_Glyox_1_2_M_1 = mBY[ 144 ];
mr_ICit_1_2_M_1 = mBY[ 145 ];
mr_ICit_2_3_M_1 = mBY[ 146 ];
mr_ICit_3_4_M_1 = mBY[ 147 ];
mr_ICit_3_6_M_1 = mBY[ 148 ];
mr_ICit_4_5_M_1 = mBY[ 149 ];
mr_KDPG_2_3_M_1 = mBY[ 150 ];
mr_KDPG_4_5_M_1 = mBY[ 151 ];
mr_KDPG_5_6_M_1 = mBY[ 152 ];
mr_Mal_1_2_M_1 = mBY[ 153 ];
mr_Mal_2_3_M_1 = mBY[ 154 ];
mr_Mal_3_4_M_1 = mBY[ 155 ];
mr_OAC_1_2_M_1 = mBY[ 156 ];
mr_OAC_2_3_M_1 = mBY[ 157 ];
mr_OAC_3_4_M_1 = mBY[ 158 ];
mr_PEP_1_2_M_1 = mBY[ 159 ];
mr_PEP_2_3_M_1 = mBY[ 160 ];
mr_Phe_1_2_M_1 = mBY[ 161 ];
mr_Pyr_2_3_M_1 = mBY[ 162 ];
mr_R5P_1_2_M_1 = mBY[ 163 ];
mr_R5P_3_4_M_1 = mBY[ 164 ];
mr_R5P_4_5_M_1 = mBY[ 165 ];
mr_Ru5P_1_2_M_1 = mBY[ 166 ];
mr_Ru5P_3_4_M_1 = mBY[ 167 ];
mr_Ru5P_4_5_M_1 = mBY[ 168 ];
mr_S7P_1_2_M_1 = mBY[ 169 ];
mr_S7P_2_3_M_1 = mBY[ 170 ];
mr_S7P_3_4_M_1 = mBY[ 171 ];
mr_S7P_5_6_M_1 = mBY[ 172 ];
mr_S7P_6_7_M_1 = mBY[ 173 ];
mr_Ser_1_2_M_1 = mBY[ 174 ];
mr_Ser_2_3_M_1 = mBY[ 175 ];
mr_Suc_1_2_M_1 = mBY[ 176 ];
mr_Suc_2_3_M_1 = mBY[ 177 ];
mr_Suc_3_4_M_1 = mBY[ 178 ];
mr_SucCoA_1_2_M_1 = mBY[ 179 ];
mr_SucCoA_2_3_M_1 = mBY[ 180 ];
mr_SucCoA_3_4_M_1 = mBY[ 181 ];
mr_TAC3_1_2_M_1 = mBY[ 182 ];
mr_TAC3_2_3_M_1 = mBY[ 183 ];
mr_TKC2_1_2_M_1 = mBY[ 184 ];
mr_Thr_1_2_M_1 = mBY[ 185 ];
mr_Thr_3_4_M_1 = mBY[ 186 ];
mr_Tyr_1_2_M_1 = mBY[ 187 ];
mr_X3PG_1_2_M_1 = mBY[ 188 ];
mr_X3PG_2_3_M_1 = mBY[ 189 ];
mr_X5P_1_2_M_1 = mBY[ 190 ];
mr_X5P_3_4_M_1 = mBY[ 191 ];
mr_X5P_4_5_M_1 = mBY[ 192 ];
mr_X6PG_2_3_M_1 = mBY[ 193 ];
mr_X6PG_4_5_M_1 = mBY[ 194 ];
mr_X6PG_5_6_M_1 = mBY[ 195 ];
mr_AKG_1_2_M_2 = mBY[ 196 ];
mr_AKG_2_3_M_2 = mBY[ 197 ];
mr_AKG_3_4_M_2 = mBY[ 198 ];
mr_AKG_4_5_M_2 = mBY[ 199 ];
mr_Ac_1_2_M_2 = mBY[ 200 ];
mr_AcCoA_1_2_M_2 = mBY[ 201 ];
mr_Ala_2_3_M_2 = mBY[ 202 ];
mr_Asp_1_2_M_2 = mBY[ 203 ];
mr_Asp_2_3_M_2 = mBY[ 204 ];
mr_Asp_3_4_M_2 = mBY[ 205 ];
mr_Cit_1_2_M_2 = mBY[ 206 ];
mr_Cit_2_3_M_2 = mBY[ 207 ];
mr_Cit_3_4_M_2 = mBY[ 208 ];
mr_Cit_3_6_M_2 = mBY[ 209 ];
mr_Cit_4_5_M_2 = mBY[ 210 ];
mr_Cys_2_3_M_2 = mBY[ 211 ];
mr_DHAP_1_2_M_2 = mBY[ 212 ];
mr_DHAP_2_3_M_2 = mBY[ 213 ];
mr_E4P_2_3_M_2 = mBY[ 214 ];
mr_E4P_3_4_M_2 = mBY[ 215 ];
mr_F6P_1_2_M_2 = mBY[ 216 ];
mr_F6P_2_3_M_2 = mBY[ 217 ];
mr_F6P_4_5_M_2 = mBY[ 218 ];
mr_F6P_5_6_M_2 = mBY[ 219 ];
mr_FBP_1_2_M_2 = mBY[ 220 ];
mr_FBP_2_3_M_2 = mBY[ 221 ];
mr_FBP_4_5_M_2 = mBY[ 222 ];
mr_FBP_5_6_M_2 = mBY[ 223 ];
mr_Fum_1_2_M_2 = mBY[ 224 ];
mr_Fum_2_3_M_2 = mBY[ 225 ];
mr_Fum_3_4_M_2 = mBY[ 226 ];
mr_G6P_1_2_M_2 = mBY[ 227 ];
mr_G6P_2_3_M_2 = mBY[ 228 ];
mr_G6P_4_5_M_2 = mBY[ 229 ];
mr_G6P_5_6_M_2 = mBY[ 230 ];
mr_GAP_1_2_M_2 = mBY[ 231 ];
mr_GAP_2_3_M_2 = mBY[ 232 ];
mr_Gln_1_2_M_2 = mBY[ 233 ];
mr_Gln_2_3_M_2 = mBY[ 234 ];
mr_Gln_3_4_M_2 = mBY[ 235 ];
mr_Gln_4_5_M_2 = mBY[ 236 ];
mr_Glu_1_2_M_2 = mBY[ 237 ];
mr_Glu_2_3_M_2 = mBY[ 238 ];
mr_Glu_3_4_M_2 = mBY[ 239 ];
mr_Glu_4_5_M_2 = mBY[ 240 ];
mr_Gly_1_2_M_2 = mBY[ 241 ];
mr_Glyox_1_2_M_2 = mBY[ 242 ];
mr_ICit_1_2_M_2 = mBY[ 243 ];
mr_ICit_2_3_M_2 = mBY[ 244 ];
mr_ICit_3_4_M_2 = mBY[ 245 ];
mr_ICit_3_6_M_2 = mBY[ 246 ];
mr_ICit_4_5_M_2 = mBY[ 247 ];
mr_KDPG_2_3_M_2 = mBY[ 248 ];
mr_KDPG_4_5_M_2 = mBY[ 249 ];
mr_KDPG_5_6_M_2 = mBY[ 250 ];
mr_Mal_1_2_M_2 = mBY[ 251 ];
mr_Mal_2_3_M_2 = mBY[ 252 ];
mr_Mal_3_4_M_2 = mBY[ 253 ];
mr_OAC_1_2_M_2 = mBY[ 254 ];
mr_OAC_2_3_M_2 = mBY[ 255 ];
mr_OAC_3_4_M_2 = mBY[ 256 ];
mr_PEP_1_2_M_2 = mBY[ 257 ];
mr_PEP_2_3_M_2 = mBY[ 258 ];
mr_Phe_1_2_M_2 = mBY[ 259 ];
mr_Pyr_2_3_M_2 = mBY[ 260 ];
mr_R5P_1_2_M_2 = mBY[ 261 ];
mr_R5P_3_4_M_2 = mBY[ 262 ];
mr_R5P_4_5_M_2 = mBY[ 263 ];
mr_Ru5P_1_2_M_2 = mBY[ 264 ];
mr_Ru5P_3_4_M_2 = mBY[ 265 ];
mr_Ru5P_4_5_M_2 = mBY[ 266 ];
mr_S7P_1_2_M_2 = mBY[ 267 ];
mr_S7P_2_3_M_2 = mBY[ 268 ];
mr_S7P_3_4_M_2 = mBY[ 269 ];
mr_S7P_5_6_M_2 = mBY[ 270 ];
mr_S7P_6_7_M_2 = mBY[ 271 ];
mr_Ser_1_2_M_2 = mBY[ 272 ];
mr_Ser_2_3_M_2 = mBY[ 273 ];
mr_Suc_1_2_M_2 = mBY[ 274 ];
mr_Suc_2_3_M_2 = mBY[ 275 ];
mr_Suc_3_4_M_2 = mBY[ 276 ];
mr_SucCoA_1_2_M_2 = mBY[ 277 ];
mr_SucCoA_2_3_M_2 = mBY[ 278 ];
mr_SucCoA_3_4_M_2 = mBY[ 279 ];
mr_TAC3_1_2_M_2 = mBY[ 280 ];
mr_TAC3_2_3_M_2 = mBY[ 281 ];
mr_TKC2_1_2_M_2 = mBY[ 282 ];
mr_Thr_1_2_M_2 = mBY[ 283 ];
mr_Thr_3_4_M_2 = mBY[ 284 ];
mr_Tyr_1_2_M_2 = mBY[ 285 ];
mr_X3PG_1_2_M_2 = mBY[ 286 ];
mr_X3PG_2_3_M_2 = mBY[ 287 ];
mr_X5P_1_2_M_2 = mBY[ 288 ];
mr_X5P_3_4_M_2 = mBY[ 289 ];
mr_X5P_4_5_M_2 = mBY[ 290 ];
mr_X6PG_2_3_M_2 = mBY[ 291 ];
mr_X6PG_4_5_M_2 = mBY[ 292 ];
mr_X6PG_5_6_M_2 = mBY[ 293 ];
barrier(CLK_LOCAL_MEM_FENCE); 
//-------------------------------------------------------------------------------------
//----Init A---------------------------------------------------------------------------------
if(idx==0 && idy==0){
mA[0] = ( (  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v54_aa_fw   )  +(  -1.0f  * v_v52_aa_fw   )  +(  -1.0f  * v_v55_aa_fw   )  +(  -1.0f  * v_v53_aa_fw   )  +(  -1.0f  * v_v56_aa_fw   )  +(  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v42_aa_fw   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v23_tca_fw   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v40_aa_fw   )   ) ; 
mA[1] = 0.0f; 
mA[2] = 0.0f; 
mA[3] = 0.0f; 
mA[4] = 0.0f; 
mA[5] = 0.0f; 
mA[6] = 0.0f; 
mA[7] = 0.0f; 
mA[8] = 0.0f; 
mA[9] = 0.0f; 
mA[10] = 0.0f; 
mA[11] = 0.0f; 
mA[12] = 0.0f; 
mA[13] = 0.0f; 
mA[14] = 0.0f; 
mA[15] = 0.0f; 
mA[16] = 0.0f; 
mA[17] = 0.0f; 
mA[18] = 0.0f; 
mA[19] = 0.0f; 
mA[20] = 0.0f; 
mA[21] = 0.0f; 
mA[22] =  v_v36_aa_fw ; 
mA[23] = 0.0f; 
mA[24] =  v_v23_tca_bw ; 
mA[25] = 0.0f; 
mA[26] = 0.0f; 
mA[27] = 0.0f; 
mA[28] = 0.0f; 
mA[29] = 0.0f; 
mA[30] = 0.0f; 
mA[31] = 0.0f; 
mA[32] = 0.0f; 
mA[33] = 0.0f; 
mA[34] = 0.0f; 
mA[35] = 0.0f; 
mA[36] = 0.0f; 
mA[37] = 0.0f; 
mA[38] = 0.0f; 
mA[39] = 0.0f; 
mA[40] = 0.0f; 
mA[41] = 0.0f; 
mA[42] =  v_v24_tca_fw ; 
mA[43] = 0.0f; 
mA[44] = 0.0f; 
mA[45] = 0.0f; 
mA[46] = 0.0f; 
mA[47] = 0.0f; 
mA[48] = 0.0f; 
mA[49] = 0.0f; 
mA[50] = 0.0f; 
mA[51] = ( (  -1.0f  * v_v53_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v42_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v52_aa_fw   )  +(  -1.0f  * v_v23_tca_fw   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v54_aa_fw   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v56_aa_fw   )  +(  -1.0f  * v_v55_aa_fw   )  +(  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v40_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_d   )   ) ; 
mA[52] = 0.0f; 
mA[53] = 0.0f; 
mA[54] = 0.0f; 
mA[55] = 0.0f; 
mA[56] = 0.0f; 
mA[57] = 0.0f; 
mA[58] = 0.0f; 
mA[59] = 0.0f; 
mA[60] = 0.0f; 
mA[61] = 0.0f; 
mA[62] = 0.0f; 
mA[63] = 0.0f; 
mA[64] = 0.0f; 
mA[65] = 0.0f; 
mA[66] = 0.0f; 
mA[67] = 0.0f; 
mA[68] = 0.0f; 
mA[69] = 0.0f; 
mA[70] = 0.0f; 
mA[71] = 0.0f; 
mA[72] = 0.0f; 
mA[73] =  v_v36_aa_fw ; 
mA[74] = 0.0f; 
mA[75] =  v_v23_tca_bw ; 
mA[76] = 0.0f; 
mA[77] = 0.0f; 
mA[78] = 0.0f; 
mA[79] = 0.0f; 
mA[80] = 0.0f; 
mA[81] = 0.0f; 
mA[82] = 0.0f; 
mA[83] = 0.0f; 
mA[84] = 0.0f; 
mA[85] = 0.0f; 
mA[86] = 0.0f; 
mA[87] = 0.0f; 
mA[88] = 0.0f; 
mA[89] = 0.0f; 
mA[90] = 0.0f; 
mA[91] = 0.0f; 
mA[92] = 0.0f; 
mA[93] =  v_v24_tca_fw ; 
mA[94] = 0.0f; 
mA[95] = 0.0f; 
mA[96] = 0.0f; 
mA[97] = 0.0f; 
mA[98] = 0.0f; 
mA[99] = 0.0f; 
mA[100] = 0.0f; 
mA[101] = 0.0f; 
mA[102] = ( (  -1.0f  * v_v42_aa_fw   )   ) ; 
mA[103] = 0.0f; 
mA[104] = 0.0f; 
mA[105] = 0.0f; 
mA[106] = 0.0f; 
mA[107] = 0.0f; 
mA[108] = 0.0f; 
mA[109] = 0.0f; 
mA[110] = 0.0f; 
mA[111] = 0.0f; 
mA[112] = 0.0f; 
mA[113] = 0.0f; 
mA[114] = 0.0f; 
mA[115] = 0.0f; 
mA[116] = 0.0f; 
mA[117] = 0.0f; 
mA[118] = 0.0f; 
mA[119] = 0.0f; 
mA[120] = 0.0f; 
mA[121] = 0.0f; 
mA[122] = 0.0f; 
mA[123] = 0.0f; 
mA[124] = 0.0f; 
mA[125] = 0.0f; 
mA[126] = 0.0f; 
mA[127] = 0.0f; 
mA[128] = 0.0f; 
mA[129] = 0.0f; 
mA[130] = 0.0f; 
mA[131] = 0.0f; 
mA[132] = 0.0f; 
mA[133] = 0.0f; 
mA[134] = 0.0f; 
mA[135] = 0.0f; 
mA[136] = 0.0f; 
mA[137] = 0.0f; 
mA[138] = 0.0f; 
mA[139] = 0.0f; 
mA[140] = 0.0f; 
mA[141] = 0.0f; 
mA[142] = 0.0f; 
mA[143] = 0.0f; 
mA[144] = 0.0f; 
mA[145] = 0.0f; 
mA[146] = 0.0f; 
mA[147] = 0.0f; 
mA[148] = 0.0f; 
mA[149] = 0.0f; 
mA[150] = 0.0f; 
mA[151] = 0.0f; 
mA[152] = 0.0f; 
mA[153] = ( (  -1.0f  * v_v40_aa_fw   )   ) ; 
mA[154] = 0.0f; 
mA[155] = 0.0f; 
mA[156] = 0.0f; 
mA[157] = 0.0f; 
mA[158] = 0.0f; 
mA[159] = 0.0f; 
mA[160] = 0.0f; 
mA[161] = 0.0f; 
mA[162] = 0.0f; 
mA[163] = 0.0f; 
mA[164] = 0.0f; 
mA[165] = (  v_v39_aa_fw  + v_v58_aa_fw   ) ; 
mA[166] = 0.0f; 
mA[167] = 0.0f; 
mA[168] = 0.0f; 
mA[169] = 0.0f; 
mA[170] = 0.0f; 
mA[171] = 0.0f; 
mA[172] = 0.0f; 
mA[173] = 0.0f; 
mA[174] = 0.0f; 
mA[175] = 0.0f; 
mA[176] = 0.0f; 
mA[177] = 0.0f; 
mA[178] = 0.0f; 
mA[179] = 0.0f; 
mA[180] = 0.0f; 
mA[181] = 0.0f; 
mA[182] = 0.0f; 
mA[183] = 0.0f; 
mA[184] = 0.0f; 
mA[185] = 0.0f; 
mA[186] = 0.0f; 
mA[187] = 0.0f; 
mA[188] = 0.0f; 
mA[189] = 0.0f; 
mA[190] = 0.0f; 
mA[191] = 0.0f; 
mA[192] = 0.0f; 
mA[193] = 0.0f; 
mA[194] = 0.0f; 
mA[195] = 0.0f; 
mA[196] = 0.0f; 
mA[197] = 0.0f; 
mA[198] = 0.0f; 
mA[199] = 0.0f; 
mA[200] = 0.0f; 
mA[201] = 0.0f; 
mA[202] = 0.0f; 
mA[203] = 0.0f; 
mA[204] = ( (  -1.0f  * v_v40_aa_fw   )   ) ; 
mA[205] = 0.0f; 
mA[206] = 0.0f; 
mA[207] = 0.0f; 
mA[208] = 0.0f; 
mA[209] = 0.0f; 
mA[210] = 0.0f; 
mA[211] = 0.0f; 
mA[212] = 0.0f; 
mA[213] = 0.0f; 
mA[214] = 0.0f; 
mA[215] = 0.0f; 
mA[216] = (  v_v39_aa_fw  + v_v58_aa_fw   ) ; 
mA[217] = 0.0f; 
mA[218] = 0.0f; 
mA[219] = 0.0f; 
mA[220] = 0.0f; 
mA[221] = 0.0f; 
mA[222] = 0.0f; 
mA[223] = 0.0f; 
mA[224] = 0.0f; 
mA[225] = 0.0f; 
mA[226] = 0.0f; 
mA[227] = 0.0f; 
mA[228] = 0.0f; 
mA[229] = 0.0f; 
mA[230] = 0.0f; 
mA[231] = 0.0f; 
mA[232] = 0.0f; 
mA[233] = 0.0f; 
mA[234] = 0.0f; 
mA[235] = 0.0f; 
mA[236] = 0.0f; 
mA[237] = 0.0f; 
mA[238] = 0.0f; 
mA[239] = 0.0f; 
mA[240] = 0.0f; 
mA[241] = 0.0f; 
mA[242] = 0.0f; 
mA[243] = 0.0f; 
mA[244] = 0.0f; 
mA[245] =  v_v50_aa_fw ; 
mA[246] = 0.0f; 
mA[247] = 0.0f; 
mA[248] = 0.0f; 
mA[249] = 0.0f; 
mA[250] = 0.0f; 
mA[251] = 0.0f; 
mA[252] = 0.0f; 
mA[253] = 0.0f; 
mA[254] = 0.0f; 
mA[255] = ( (  -1.0f  * v_v22_tca_bw   )  +(  -1.0f  * v_v21_tca_fw   )   ) ; 
mA[256] = 0.0f; 
mA[257] = 0.0f; 
mA[258] = 0.0f; 
mA[259] = 0.0f; 
mA[260] = 0.0f; 
mA[261] = 0.0f; 
mA[262] = 0.0f; 
mA[263] = 0.0f; 
mA[264] = 0.0f; 
mA[265] = 0.0f; 
mA[266] = 0.0f; 
mA[267] = 0.0f; 
mA[268] = 0.0f; 
mA[269] = 0.0f; 
mA[270] = 0.0f; 
mA[271] = 0.0f; 
mA[272] = 0.0f; 
mA[273] = 0.0f; 
mA[274] =  v_v22_tca_fw ; 
mA[275] = 0.0f; 
mA[276] = 0.0f; 
mA[277] = 0.0f; 
mA[278] = 0.0f; 
mA[279] = 0.0f; 
mA[280] = 0.0f; 
mA[281] = 0.0f; 
mA[282] = 0.0f; 
mA[283] = 0.0f; 
mA[284] = 0.0f; 
mA[285] = 0.0f; 
mA[286] = 0.0f; 
mA[287] = 0.0f; 
mA[288] = 0.0f; 
mA[289] = 0.0f; 
mA[290] = 0.0f; 
mA[291] = 0.0f; 
mA[292] = 0.0f; 
mA[293] = 0.0f; 
mA[294] = 0.0f; 
mA[295] = 0.0f; 
mA[296] = 0.0f; 
mA[297] = 0.0f; 
mA[298] = 0.0f; 
mA[299] = 0.0f; 
mA[300] = 0.0f; 
mA[301] = 0.0f; 
mA[302] = 0.0f; 
mA[303] = 0.0f; 
mA[304] = 0.0f; 
mA[305] = 0.0f; 
mA[306] = ( (  -1.0f  * v_v21_tca_fw   )  +(  -1.0f  * v_v22_tca_bw   )   ) ; 
mA[307] = 0.0f; 
mA[308] = 0.0f; 
mA[309] = 0.0f; 
mA[310] = 0.0f; 
mA[311] = 0.0f; 
mA[312] = 0.0f; 
mA[313] = 0.0f; 
mA[314] = 0.0f; 
mA[315] = 0.0f; 
mA[316] = 0.0f; 
mA[317] = 0.0f; 
mA[318] = 0.0f; 
mA[319] = 0.0f; 
mA[320] = 0.0f; 
mA[321] = 0.0f; 
mA[322] = 0.0f; 
mA[323] = 0.0f; 
mA[324] = 0.0f; 
mA[325] =  v_v22_tca_fw ; 
mA[326] = 0.0f; 
mA[327] = 0.0f; 
mA[328] = 0.0f; 
mA[329] = 0.0f; 
mA[330] = 0.0f; 
mA[331] = 0.0f; 
mA[332] = 0.0f; 
mA[333] = 0.0f; 
mA[334] = 0.0f; 
mA[335] = 0.0f; 
mA[336] = 0.0f; 
mA[337] = 0.0f; 
mA[338] = 0.0f; 
mA[339] = 0.0f; 
mA[340] = 0.0f; 
mA[341] = 0.0f; 
mA[342] = 0.0f; 
mA[343] = 0.0f; 
mA[344] = 0.0f; 
mA[345] = 0.0f; 
mA[346] = 0.0f; 
mA[347] = 0.0f; 
mA[348] = 0.0f; 
mA[349] = 0.0f; 
mA[350] = 0.0f; 
mA[351] = 0.0f; 
mA[352] = 0.0f; 
mA[353] = 0.0f; 
mA[354] = 0.0f; 
mA[355] = 0.0f; 
mA[356] = 0.0f; 
mA[357] = ( (  -1.0f  * v_v21_tca_fw   )  +(  -1.0f  * v_v22_tca_bw   )   ) ; 
mA[358] = 0.0f; 
mA[359] = 0.0f; 
mA[360] = 0.0f; 
mA[361] = 0.0f; 
mA[362] = 0.0f; 
mA[363] = 0.0f; 
mA[364] = 0.0f; 
mA[365] = 0.0f; 
mA[366] = 0.0f; 
mA[367] = 0.0f; 
mA[368] = 0.0f; 
mA[369] = 0.0f; 
mA[370] = 0.0f; 
mA[371] = 0.0f; 
mA[372] = 0.0f; 
mA[373] = 0.0f; 
mA[374] = 0.0f; 
mA[375] = 0.0f; 
mA[376] =  v_v22_tca_fw ; 
mA[377] = 0.0f; 
mA[378] = 0.0f; 
mA[379] = 0.0f; 
mA[380] = 0.0f; 
mA[381] = 0.0f; 
mA[382] = 0.0f; 
mA[383] = 0.0f; 
mA[384] = 0.0f; 
mA[385] = 0.0f; 
mA[386] = 0.0f; 
mA[387] = 0.0f; 
mA[388] = 0.0f; 
mA[389] = 0.0f; 
mA[390] = 0.0f; 
mA[391] = 0.0f; 
mA[392] = 0.0f; 
mA[393] = 0.0f; 
mA[394] = 0.0f; 
mA[395] = 0.0f; 
mA[396] = 0.0f; 
mA[397] = 0.0f; 
mA[398] = 0.0f; 
mA[399] = 0.0f; 
mA[400] = 0.0f; 
mA[401] = 0.0f; 
mA[402] = 0.0f; 
mA[403] = 0.0f; 
mA[404] = 0.0f; 
mA[405] = 0.0f; 
mA[406] = 0.0f; 
mA[407] = 0.0f; 
mA[408] = ( (  -1.0f  * v_v47_aa_fw   )   ) ; 
mA[409] = 0.0f; 
mA[410] = 0.0f; 
mA[411] = 0.0f; 
mA[412] = 0.0f; 
mA[413] = 0.0f; 
mA[414] = 0.0f; 
mA[415] = 0.0f; 
mA[416] = 0.0f; 
mA[417] = 0.0f; 
mA[418] = 0.0f; 
mA[419] = 0.0f; 
mA[420] = 0.0f; 
mA[421] = 0.0f; 
mA[422] = 0.0f; 
mA[423] = 0.0f; 
mA[424] = 0.0f; 
mA[425] = 0.0f; 
mA[426] = 0.0f; 
mA[427] = 0.0f; 
mA[428] = 0.0f; 
mA[429] = 0.0f; 
mA[430] = 0.0f; 
mA[431] = 0.0f; 
mA[432] = 0.0f; 
mA[433] = 0.0f; 
mA[434] = (  v_v51_aa_fw_b  + v_v51_aa_fw_a   ) ; 
mA[435] = 0.0f; 
mA[436] = 0.0f; 
mA[437] = 0.0f; 
mA[438] = 0.0f; 
mA[439] = 0.0f; 
mA[440] = 0.0f; 
mA[441] = 0.0f; 
mA[442] = 0.0f; 
mA[443] = 0.0f; 
mA[444] = 0.0f; 
mA[445] = 0.0f; 
mA[446] = 0.0f; 
mA[447] = 0.0f; 
mA[448] = 0.0f; 
mA[449] = 0.0f; 
mA[450] = 0.0f; 
mA[451] = 0.0f; 
mA[452] = 0.0f; 
mA[453] = 0.0f; 
mA[454] = 0.0f; 
mA[455] = 0.0f; 
mA[456] = 0.0f; 
mA[457] = 0.0f; 
mA[458] = 0.0f; 
mA[459] = ( (  -1.0f  * v_v04_glyc_fw   )  +(  -1.0f  * v_v05_glyc_bw   )   ) ; 
mA[460] = 0.0f; 
mA[461] = 0.0f; 
mA[462] = 0.0f; 
mA[463] =  v_v04_glyc_bw ; 
mA[464] = 0.0f; 
mA[465] = 0.0f; 
mA[466] = 0.0f; 
mA[467] = 0.0f; 
mA[468] = 0.0f; 
mA[469] =  v_v05_glyc_fw ; 
mA[470] = 0.0f; 
mA[471] = 0.0f; 
mA[472] = 0.0f; 
mA[473] = 0.0f; 
mA[474] = 0.0f; 
mA[475] = 0.0f; 
mA[476] = 0.0f; 
mA[477] = 0.0f; 
mA[478] = 0.0f; 
mA[479] = 0.0f; 
mA[480] = 0.0f; 
mA[481] = 0.0f; 
mA[482] = 0.0f; 
mA[483] = 0.0f; 
mA[484] = 0.0f; 
mA[485] = 0.0f; 
mA[486] = 0.0f; 
mA[487] = 0.0f; 
mA[488] = 0.0f; 
mA[489] = 0.0f; 
mA[490] = 0.0f; 
mA[491] = 0.0f; 
mA[492] = 0.0f; 
mA[493] = 0.0f; 
mA[494] = 0.0f; 
mA[495] = 0.0f; 
mA[496] = 0.0f; 
mA[497] = 0.0f; 
mA[498] = 0.0f; 
mA[499] = 0.0f; 
mA[500] = 0.0f; 
mA[501] = 0.0f; 
mA[502] = 0.0f; 
mA[503] = 0.0f; 
mA[504] = 0.0f; 
mA[505] = 0.0f; 
mA[506] = 0.0f; 
mA[507] = 0.0f; 
mA[508] = 0.0f; 
mA[509] = 0.0f; 
mA[510] = ( (  -1.0f  * v_v17_ppp_fw   )  +(  -1.0f  * v_v14_ppp_fw   )   ) ; 
mA[511] = 0.0f; 
mA[512] =  v_v14_ppp_bw ; 
mA[513] = 0.0f; 
mA[514] = 0.0f; 
mA[515] = 0.0f; 
mA[516] = 0.0f; 
mA[517] = 0.0f; 
mA[518] = 0.0f; 
mA[519] = 0.0f; 
mA[520] = 0.0f; 
mA[521] = 0.0f; 
mA[522] = 0.0f; 
mA[523] = 0.0f; 
mA[524] = 0.0f; 
mA[525] = 0.0f; 
mA[526] = 0.0f; 
mA[527] = 0.0f; 
mA[528] = 0.0f; 
mA[529] = 0.0f; 
mA[530] = 0.0f; 
mA[531] = 0.0f; 
mA[532] = 0.0f; 
mA[533] = 0.0f; 
mA[534] = 0.0f; 
mA[535] = 0.0f; 
mA[536] = 0.0f; 
mA[537] = 0.0f; 
mA[538] =  v_v17_ppp_bw ; 
mA[539] = 0.0f; 
mA[540] = 0.0f; 
mA[541] = 0.0f; 
mA[542] = 0.0f; 
mA[543] = 0.0f; 
mA[544] = 0.0f; 
mA[545] = 0.0f; 
mA[546] = 0.0f; 
mA[547] = 0.0f; 
mA[548] = 0.0f; 
mA[549] = 0.0f; 
mA[550] = 0.0f; 
mA[551] = 0.0f; 
mA[552] = 0.0f; 
mA[553] = 0.0f; 
mA[554] = 0.0f; 
mA[555] = 0.0f; 
mA[556] = 0.0f; 
mA[557] = 0.0f; 
mA[558] = 0.0f; 
mA[559] = 0.0f; 
mA[560] = 0.0f; 
mA[561] = ( (  -1.0f  * v_v02_glyc_fw   )  +(  -1.0f  * v_v16_ppp_bw   )  +(  -1.0f  * v_v14_ppp_bw   )   ) ; 
mA[562] = 0.0f; 
mA[563] =  v_v03_glyc_fw ; 
mA[564] = 0.0f; 
mA[565] = 0.0f; 
mA[566] = 0.0f; 
mA[567] =  v_v02_glyc_bw ; 
mA[568] = 0.0f; 
mA[569] = 0.0f; 
mA[570] = 0.0f; 
mA[571] = 0.0f; 
mA[572] = 0.0f; 
mA[573] = 0.0f; 
mA[574] = 0.0f; 
mA[575] = 0.0f; 
mA[576] = 0.0f; 
mA[577] = 0.0f; 
mA[578] = 0.0f; 
mA[579] = 0.0f; 
mA[580] = 0.0f; 
mA[581] = 0.0f; 
mA[582] = 0.0f; 
mA[583] = 0.0f; 
mA[584] = 0.0f; 
mA[585] = 0.0f; 
mA[586] = 0.0f; 
mA[587] = 0.0f; 
mA[588] = 0.0f; 
mA[589] = 0.0f; 
mA[590] = 0.0f; 
mA[591] = 0.0f; 
mA[592] = 0.0f; 
mA[593] = 0.0f; 
mA[594] =  v_v16_ppp_fw ; 
mA[595] = 0.0f; 
mA[596] = 0.0f; 
mA[597] = 0.0f; 
mA[598] = 0.0f; 
mA[599] = 0.0f; 
mA[600] = 0.0f; 
mA[601] = 0.0f; 
mA[602] = 0.0f; 
mA[603] = 0.0f; 
mA[604] = 0.0f; 
mA[605] = 0.0f; 
mA[606] = 0.0f; 
mA[607] = 0.0f; 
mA[608] = 0.0f; 
mA[609] = 0.0f; 
mA[610] =  v_v14_ppp_fw ; 
mA[611] = 0.0f; 
mA[612] = ( (  -1.0f  * v_v16_ppp_bw   )  +(  -1.0f  * v_v02_glyc_fw   )  +(  -1.0f  * v_v14_ppp_bw   )   ) ; 
mA[613] = 0.0f; 
mA[614] =  v_v03_glyc_fw ; 
mA[615] = 0.0f; 
mA[616] = 0.0f; 
mA[617] = 0.0f; 
mA[618] =  v_v02_glyc_bw ; 
mA[619] =  v_v16_ppp_fw ; 
mA[620] = 0.0f; 
mA[621] = 0.0f; 
mA[622] = 0.0f; 
mA[623] = 0.0f; 
mA[624] = 0.0f; 
mA[625] = 0.0f; 
mA[626] = 0.0f; 
mA[627] = 0.0f; 
mA[628] = 0.0f; 
mA[629] = 0.0f; 
mA[630] = 0.0f; 
mA[631] = 0.0f; 
mA[632] = 0.0f; 
mA[633] = 0.0f; 
mA[634] = 0.0f; 
mA[635] = 0.0f; 
mA[636] = 0.0f; 
mA[637] = 0.0f; 
mA[638] = 0.0f; 
mA[639] = 0.0f; 
mA[640] = 0.0f; 
mA[641] = 0.0f; 
mA[642] = 0.0f; 
mA[643] = 0.0f; 
mA[644] = 0.0f; 
mA[645] = 0.0f; 
mA[646] = 0.0f; 
mA[647] = 0.0f; 
mA[648] = 0.0f; 
mA[649] = 0.0f; 
mA[650] = 0.0f; 
mA[651] = 0.0f; 
mA[652] = 0.0f; 
mA[653] = 0.0f; 
mA[654] = 0.0f; 
mA[655] = 0.0f; 
mA[656] = 0.0f; 
mA[657] = 0.0f; 
mA[658] = 0.0f; 
mA[659] =  v_v04_glyc_fw ; 
mA[660] = 0.0f; 
mA[661] = 0.0f; 
mA[662] = 0.0f; 
mA[663] = ( (  -1.0f  * v_v03_glyc_fw   )  +(  -1.0f  * v_v04_glyc_bw   )   ) ; 
mA[664] = 0.0f; 
mA[665] = 0.0f; 
mA[666] = 0.0f; 
mA[667] = 0.0f; 
mA[668] = 0.0f; 
mA[669] = 0.0f; 
mA[670] = 0.0f; 
mA[671] = 0.0f; 
mA[672] = 0.0f; 
mA[673] = 0.0f; 
mA[674] = 0.0f; 
mA[675] = 0.0f; 
mA[676] = 0.0f; 
mA[677] = 0.0f; 
mA[678] = 0.0f; 
mA[679] = 0.0f; 
mA[680] = 0.0f; 
mA[681] = 0.0f; 
mA[682] = 0.0f; 
mA[683] = 0.0f; 
mA[684] = 0.0f; 
mA[685] = 0.0f; 
mA[686] = 0.0f; 
mA[687] = 0.0f; 
mA[688] = 0.0f; 
mA[689] = 0.0f; 
mA[690] = 0.0f; 
mA[691] = 0.0f; 
mA[692] = 0.0f; 
mA[693] = 0.0f; 
mA[694] = 0.0f; 
mA[695] = 0.0f; 
mA[696] = 0.0f; 
mA[697] = 0.0f; 
mA[698] = 0.0f; 
mA[699] = 0.0f; 
mA[700] = 0.0f; 
mA[701] = 0.0f; 
mA[702] = 0.0f; 
mA[703] = 0.0f; 
mA[704] = 0.0f; 
mA[705] = 0.0f; 
mA[706] = 0.0f; 
mA[707] = 0.0f; 
mA[708] = 0.0f; 
mA[709] = 0.0f; 
mA[710] = 0.0f; 
mA[711] = 0.0f; 
mA[712] = 0.0f; 
mA[713] = 0.0f; 
mA[714] = ( (  -1.0f  * v_v03_glyc_fw   )  +(  -1.0f  * v_v04_glyc_bw   )   ) ; 
mA[715] = 0.0f; 
mA[716] = 0.0f; 
mA[717] = 0.0f; 
mA[718] = 0.0f; 
mA[719] =  v_v04_glyc_fw ; 
mA[720] = 0.0f; 
mA[721] = 0.0f; 
mA[722] = 0.0f; 
mA[723] = 0.0f; 
mA[724] = 0.0f; 
mA[725] = 0.0f; 
mA[726] = 0.0f; 
mA[727] = 0.0f; 
mA[728] = 0.0f; 
mA[729] = 0.0f; 
mA[730] = 0.0f; 
mA[731] = 0.0f; 
mA[732] = 0.0f; 
mA[733] = 0.0f; 
mA[734] = 0.0f; 
mA[735] = 0.0f; 
mA[736] = 0.0f; 
mA[737] = 0.0f; 
mA[738] = 0.0f; 
mA[739] = 0.0f; 
mA[740] = 0.0f; 
mA[741] = 0.0f; 
mA[742] = 0.0f; 
mA[743] = 0.0f; 
mA[744] = 0.0f; 
mA[745] = 0.0f; 
mA[746] = 0.0f; 
mA[747] = 0.0f; 
mA[748] = 0.0f; 
mA[749] = 0.0f; 
mA[750] = 0.0f; 
mA[751] = 0.0f; 
mA[752] = 0.0f; 
mA[753] = 0.0f; 
mA[754] = 0.0f; 
mA[755] = 0.0f; 
mA[756] = 0.0f; 
mA[757] = 0.0f; 
mA[758] = 0.0f; 
mA[759] = 0.0f; 
mA[760] = 0.0f; 
mA[761] = 0.0f; 
mA[762] = 0.0f; 
mA[763] = 0.0f; 
mA[764] = 0.0f; 
mA[765] = ( (  -1.0f  * v_v27_tca_bw_b   )  +(  -1.0f  * v_v26_tca_fw_a   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v27_tca_bw_a   )  +(  -1.0f  * v_v26_tca_fw_b   )   ) ; 
mA[766] = 0.0f; 
mA[767] = 0.0f; 
mA[768] = 0.0f; 
mA[769] = 0.0f; 
mA[770] = 0.0f; 
mA[771] = 0.0f; 
mA[772] = 0.0f; 
mA[773] = 0.0f; 
mA[774] = 0.0f; 
mA[775] = 0.0f; 
mA[776] = 0.0f; 
mA[777] = 0.0f; 
mA[778] = 0.0f; 
mA[779] =  v_v27_tca_fw_a ; 
mA[780] =  v_v27_tca_fw_b ; 
mA[781] = 0.0f; 
mA[782] = 0.0f; 
mA[783] = 0.0f; 
mA[784] = 0.0f; 
mA[785] = 0.0f; 
mA[786] = 0.0f; 
mA[787] = 0.0f; 
mA[788] = 0.0f; 
mA[789] = 0.0f; 
mA[790] =  v_v26_tca_bw_a ; 
mA[791] =  v_v26_tca_bw_b ; 
mA[792] = 0.0f; 
mA[793] = 0.0f; 
mA[794] = 0.0f; 
mA[795] = 0.0f; 
mA[796] = 0.0f; 
mA[797] = 0.0f; 
mA[798] = 0.0f; 
mA[799] = 0.0f; 
mA[800] = 0.0f; 
mA[801] = 0.0f; 
mA[802] = 0.0f; 
mA[803] = 0.0f; 
mA[804] = 0.0f; 
mA[805] = 0.0f; 
mA[806] = 0.0f; 
mA[807] = 0.0f; 
mA[808] = 0.0f; 
mA[809] = 0.0f; 
mA[810] = 0.0f; 
mA[811] = 0.0f; 
mA[812] = 0.0f; 
mA[813] = 0.0f; 
mA[814] = 0.0f; 
mA[815] = 0.0f; 
mA[816] = ( (  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v26_tca_fw_b   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v27_tca_bw_a   )  +(  -1.0f  * v_v27_tca_bw_b   )  +(  -1.0f  * v_v26_tca_fw_a   )   ) ; 
mA[817] = 0.0f; 
mA[818] = 0.0f; 
mA[819] = 0.0f; 
mA[820] = 0.0f; 
mA[821] = 0.0f; 
mA[822] = 0.0f; 
mA[823] = 0.0f; 
mA[824] = 0.0f; 
mA[825] = 0.0f; 
mA[826] = 0.0f; 
mA[827] = 0.0f; 
mA[828] = 0.0f; 
mA[829] =  v_v27_tca_fw_b ; 
mA[830] =  v_v27_tca_fw_a ; 
mA[831] = 0.0f; 
mA[832] = 0.0f; 
mA[833] = 0.0f; 
mA[834] = 0.0f; 
mA[835] = 0.0f; 
mA[836] = 0.0f; 
mA[837] = 0.0f; 
mA[838] = 0.0f; 
mA[839] = 0.0f; 
mA[840] =  v_v26_tca_bw_b ; 
mA[841] =  v_v26_tca_bw_a ; 
mA[842] = 0.0f; 
mA[843] = 0.0f; 
mA[844] = 0.0f; 
mA[845] = 0.0f; 
mA[846] = 0.0f; 
mA[847] = 0.0f; 
mA[848] = 0.0f; 
mA[849] = 0.0f; 
mA[850] = 0.0f; 
mA[851] = 0.0f; 
mA[852] = 0.0f; 
mA[853] = 0.0f; 
mA[854] = 0.0f; 
mA[855] = 0.0f; 
mA[856] = 0.0f; 
mA[857] = 0.0f; 
mA[858] = 0.0f; 
mA[859] = 0.0f; 
mA[860] = 0.0f; 
mA[861] =  v_v02_glyc_fw ; 
mA[862] = 0.0f; 
mA[863] = 0.0f; 
mA[864] = 0.0f; 
mA[865] = 0.0f; 
mA[866] = 0.0f; 
mA[867] = ( (  -1.0f  * v_v02_glyc_bw   )  +(  -1.0f  * v_v01_SX_Gluc_In_b   )   ) ; 
mA[868] = 0.0f; 
mA[869] = 0.0f; 
mA[870] = 0.0f; 
mA[871] = 0.0f; 
mA[872] = 0.0f; 
mA[873] = 0.0f; 
mA[874] = 0.0f; 
mA[875] = 0.0f; 
mA[876] = 0.0f; 
mA[877] = 0.0f; 
mA[878] = 0.0f; 
mA[879] = 0.0f; 
mA[880] = 0.0f; 
mA[881] = 0.0f; 
mA[882] = 0.0f; 
mA[883] = 0.0f; 
mA[884] = 0.0f; 
mA[885] = 0.0f; 
mA[886] = 0.0f; 
mA[887] = 0.0f; 
mA[888] = 0.0f; 
mA[889] = 0.0f; 
mA[890] = 0.0f; 
mA[891] = 0.0f; 
mA[892] = 0.0f; 
mA[893] = 0.0f; 
mA[894] = 0.0f; 
mA[895] = 0.0f; 
mA[896] = 0.0f; 
mA[897] = 0.0f; 
mA[898] =  v_v09_ppp_fw ; 
mA[899] = 0.0f; 
mA[900] = 0.0f; 
mA[901] = 0.0f; 
mA[902] = 0.0f; 
mA[903] = 0.0f; 
mA[904] = 0.0f; 
mA[905] = 0.0f; 
mA[906] = 0.0f; 
mA[907] = 0.0f; 
mA[908] = 0.0f; 
mA[909] = 0.0f; 
mA[910] = 0.0f; 
mA[911] = 0.0f; 
mA[912] =  v_v02_glyc_fw ; 
mA[913] = 0.0f; 
mA[914] = 0.0f; 
mA[915] = 0.0f; 
mA[916] = 0.0f; 
mA[917] = 0.0f; 
mA[918] = ( (  -1.0f  * v_v01_SX_Gluc_In_b   )  +(  -1.0f  * v_v02_glyc_bw   )   ) ; 
mA[919] = 0.0f; 
mA[920] = 0.0f; 
mA[921] = 0.0f; 
mA[922] = 0.0f; 
mA[923] = 0.0f; 
mA[924] = 0.0f; 
mA[925] = 0.0f; 
mA[926] = 0.0f; 
mA[927] = 0.0f; 
mA[928] = 0.0f; 
mA[929] = 0.0f; 
mA[930] = 0.0f; 
mA[931] = 0.0f; 
mA[932] = 0.0f; 
mA[933] = 0.0f; 
mA[934] = 0.0f; 
mA[935] = 0.0f; 
mA[936] = 0.0f; 
mA[937] = 0.0f; 
mA[938] = 0.0f; 
mA[939] = 0.0f; 
mA[940] = 0.0f; 
mA[941] = 0.0f; 
mA[942] = 0.0f; 
mA[943] = 0.0f; 
mA[944] = 0.0f; 
mA[945] = 0.0f; 
mA[946] = 0.0f; 
mA[947] = 0.0f; 
mA[948] = 0.0f; 
mA[949] =  v_v09_ppp_fw ; 
mA[950] = 0.0f; 
mA[951] = 0.0f; 
mA[952] = 0.0f; 
mA[953] = 0.0f; 
mA[954] = 0.0f; 
mA[955] = 0.0f; 
mA[956] = 0.0f; 
mA[957] = 0.0f; 
mA[958] = 0.0f; 
mA[959] =  v_v05_glyc_bw ; 
mA[960] = 0.0f; 
mA[961] = 0.0f; 
mA[962] =  v_v16_ppp_bw ; 
mA[963] = 0.0f; 
mA[964] =  v_v04_glyc_bw ; 
mA[965] = 0.0f; 
mA[966] = 0.0f; 
mA[967] = 0.0f; 
mA[968] = 0.0f; 
mA[969] = ( (  -1.0f  * v_v13_ppp_fw   )  +(  -1.0f  * v_v16_ppp_fw   )  +(  -1.0f  * v_v04_glyc_fw   )  +(  -1.0f  * v_v57_aa_fw   )  +(  -1.0f  * v_v06_glyc_bw   )  +(  -1.0f  * v_v19_ed_fw   )  +(  -1.0f  * v_v05_glyc_fw   )   ) ; 
mA[970] = 0.0f; 
mA[971] = 0.0f; 
mA[972] = 0.0f; 
mA[973] = 0.0f; 
mA[974] = 0.0f; 
mA[975] = 0.0f; 
mA[976] = 0.0f; 
mA[977] = 0.0f; 
mA[978] = 0.0f; 
mA[979] = 0.0f; 
mA[980] = 0.0f; 
mA[981] = 0.0f; 
mA[982] = 0.0f; 
mA[983] = 0.0f; 
mA[984] = 0.0f; 
mA[985] = 0.0f; 
mA[986] = 0.0f; 
mA[987] = 0.0f; 
mA[988] = 0.0f; 
mA[989] = 0.0f; 
mA[990] = 0.0f; 
mA[991] = 0.0f; 
mA[992] = 0.0f; 
mA[993] = 0.0f; 
mA[994] = 0.0f; 
mA[995] = 0.0f; 
mA[996] =  v_v06_glyc_fw ; 
mA[997] =  v_v13_ppp_bw ; 
mA[998] = 0.0f; 
mA[999] = 0.0f; 
mA[1000] = (  v_v39_aa_fw  + v_v58_aa_fw   ) ; 
mA[1001] = 0.0f; 
mA[1002] = 0.0f; 
mA[1003] = 0.0f; 
mA[1004] = 0.0f; 
mA[1005] = 0.0f; 
mA[1006] = 0.0f; 
mA[1007] = 0.0f; 
mA[1008] = 0.0f; 
mA[1009] = 0.0f; 
mA[1010] = 0.0f; 
mA[1011] = 0.0f; 
mA[1012] = 0.0f; 
mA[1013] = 0.0f; 
mA[1014] = 0.0f; 
mA[1015] = 0.0f; 
mA[1016] = 0.0f; 
mA[1017] = 0.0f; 
mA[1018] = 0.0f; 
mA[1019] = 0.0f; 
mA[1020] = ( (  -1.0f  * v_v37_aa_fw   )   ) ; 
mA[1021] = 0.0f; 
mA[1022] =  v_v57_aa_fw ; 
mA[1023] = 0.0f; 
mA[1024] = 0.0f; 
mA[1025] = 0.0f; 
mA[1026] = 0.0f; 
mA[1027] = 0.0f; 
mA[1028] = 0.0f; 
mA[1029] = 0.0f; 
mA[1030] = 0.0f; 
mA[1031] = 0.0f; 
mA[1032] = 0.0f; 
mA[1033] = 0.0f; 
mA[1034] = 0.0f; 
mA[1035] = 0.0f; 
mA[1036] = 0.0f; 
mA[1037] = 0.0f; 
mA[1038] = 0.0f; 
mA[1039] = 0.0f; 
mA[1040] = 0.0f; 
mA[1041] = 0.0f; 
mA[1042] = 0.0f; 
mA[1043] = 0.0f; 
mA[1044] = 0.0f; 
mA[1045] = 0.0f; 
mA[1046] = 0.0f; 
mA[1047] = 0.0f; 
mA[1048] = 0.0f; 
mA[1049] = 0.0f; 
mA[1050] = 0.0f; 
mA[1051] = (  v_v39_aa_fw  + v_v58_aa_fw   ) ; 
mA[1052] = 0.0f; 
mA[1053] = 0.0f; 
mA[1054] = 0.0f; 
mA[1055] = 0.0f; 
mA[1056] = 0.0f; 
mA[1057] = 0.0f; 
mA[1058] = 0.0f; 
mA[1059] = 0.0f; 
mA[1060] = 0.0f; 
mA[1061] = 0.0f; 
mA[1062] = 0.0f; 
mA[1063] = 0.0f; 
mA[1064] = 0.0f; 
mA[1065] = 0.0f; 
mA[1066] = 0.0f; 
mA[1067] = 0.0f; 
mA[1068] = 0.0f; 
mA[1069] = 0.0f; 
mA[1070] = 0.0f; 
mA[1071] = ( (  -1.0f  * v_v37_aa_fw   )   ) ; 
mA[1072] = 0.0f; 
mA[1073] =  v_v57_aa_fw ; 
mA[1074] = 0.0f; 
mA[1075] = 0.0f; 
mA[1076] = 0.0f; 
mA[1077] = 0.0f; 
mA[1078] = 0.0f; 
mA[1079] = 0.0f; 
mA[1080] = 0.0f; 
mA[1081] = 0.0f; 
mA[1082] = 0.0f; 
mA[1083] = 0.0f; 
mA[1084] = 0.0f; 
mA[1085] = 0.0f; 
mA[1086] = 0.0f; 
mA[1087] = 0.0f; 
mA[1088] = 0.0f; 
mA[1089] = 0.0f; 
mA[1090] = 0.0f; 
mA[1091] = 0.0f; 
mA[1092] = 0.0f; 
mA[1093] = 0.0f; 
mA[1094] = 0.0f; 
mA[1095] = 0.0f; 
mA[1096] = 0.0f; 
mA[1097] = 0.0f; 
mA[1098] = 0.0f; 
mA[1099] = 0.0f; 
mA[1100] = (  v_v54_aa_fw  + v_v52_aa_fw  + v_v55_aa_fw  + v_v53_aa_fw  + v_v56_aa_fw  + v_v43_aa_fw  + v_v48_aa_fw_c  + v_v48_aa_fw_a  + v_v42_aa_fw  + v_v48_aa_fw_b  + v_v48_aa_fw_d  + v_v40_aa_fw   ) ; 
mA[1101] = 0.0f; 
mA[1102] = 0.0f; 
mA[1103] = 0.0f; 
mA[1104] = 0.0f; 
mA[1105] = 0.0f; 
mA[1106] = 0.0f; 
mA[1107] = 0.0f; 
mA[1108] = 0.0f; 
mA[1109] = 0.0f; 
mA[1110] = 0.0f; 
mA[1111] = 0.0f; 
mA[1112] = 0.0f; 
mA[1113] = 0.0f; 
mA[1114] = 0.0f; 
mA[1115] = 0.0f; 
mA[1116] = 0.0f; 
mA[1117] = 0.0f; 
mA[1118] = 0.0f; 
mA[1119] = 0.0f; 
mA[1120] =  v_v37_aa_fw ; 
mA[1121] = 0.0f; 
mA[1122] = ( (  -1.0f  * v_v57_aa_fw   )  +(  -1.0f  * v_v36_aa_fw   )   ) ; 
mA[1123] = 0.0f; 
mA[1124] = 0.0f; 
mA[1125] = 0.0f; 
mA[1126] = 0.0f; 
mA[1127] = 0.0f; 
mA[1128] = 0.0f; 
mA[1129] = 0.0f; 
mA[1130] = 0.0f; 
mA[1131] = 0.0f; 
mA[1132] = 0.0f; 
mA[1133] = 0.0f; 
mA[1134] = 0.0f; 
mA[1135] = 0.0f; 
mA[1136] = 0.0f; 
mA[1137] = 0.0f; 
mA[1138] = 0.0f; 
mA[1139] = 0.0f; 
mA[1140] = 0.0f; 
mA[1141] = 0.0f; 
mA[1142] = 0.0f; 
mA[1143] = 0.0f; 
mA[1144] = 0.0f; 
mA[1145] = 0.0f; 
mA[1146] = 0.0f; 
mA[1147] = 0.0f; 
mA[1148] = 0.0f; 
mA[1149] = 0.0f; 
mA[1150] = 0.0f; 
mA[1151] = (  v_v53_aa_fw  + v_v48_aa_fw_c  + v_v42_aa_fw  + v_v48_aa_fw_a  + v_v52_aa_fw  + v_v48_aa_fw_b  + v_v54_aa_fw  + v_v56_aa_fw  + v_v55_aa_fw  + v_v43_aa_fw  + v_v40_aa_fw  + v_v48_aa_fw_d   ) ; 
mA[1152] = 0.0f; 
mA[1153] = 0.0f; 
mA[1154] = 0.0f; 
mA[1155] = 0.0f; 
mA[1156] = 0.0f; 
mA[1157] = 0.0f; 
mA[1158] = 0.0f; 
mA[1159] = 0.0f; 
mA[1160] = 0.0f; 
mA[1161] = 0.0f; 
mA[1162] = 0.0f; 
mA[1163] = 0.0f; 
mA[1164] = 0.0f; 
mA[1165] = 0.0f; 
mA[1166] = 0.0f; 
mA[1167] = 0.0f; 
mA[1168] = 0.0f; 
mA[1169] = 0.0f; 
mA[1170] = 0.0f; 
mA[1171] =  v_v37_aa_fw ; 
mA[1172] = 0.0f; 
mA[1173] = ( (  -1.0f  * v_v36_aa_fw   )  +(  -1.0f  * v_v57_aa_fw   )   ) ; 
mA[1174] = 0.0f; 
mA[1175] = 0.0f; 
mA[1176] = 0.0f; 
mA[1177] = 0.0f; 
mA[1178] = 0.0f; 
mA[1179] = 0.0f; 
mA[1180] = 0.0f; 
mA[1181] = 0.0f; 
mA[1182] = 0.0f; 
mA[1183] = 0.0f; 
mA[1184] = 0.0f; 
mA[1185] = 0.0f; 
mA[1186] = 0.0f; 
mA[1187] = 0.0f; 
mA[1188] = 0.0f; 
mA[1189] = 0.0f; 
mA[1190] = 0.0f; 
mA[1191] = 0.0f; 
mA[1192] = 0.0f; 
mA[1193] = 0.0f; 
mA[1194] = 0.0f; 
mA[1195] = 0.0f; 
mA[1196] = 0.0f; 
mA[1197] = 0.0f; 
mA[1198] = 0.0f; 
mA[1199] = 0.0f; 
mA[1200] =  v_v23_tca_fw ; 
mA[1201] = 0.0f; 
mA[1202] = 0.0f; 
mA[1203] = 0.0f; 
mA[1204] = 0.0f; 
mA[1205] =  v_v22_tca_bw ; 
mA[1206] = 0.0f; 
mA[1207] = 0.0f; 
mA[1208] = 0.0f; 
mA[1209] = 0.0f; 
mA[1210] = 0.0f; 
mA[1211] = 0.0f; 
mA[1212] = 0.0f; 
mA[1213] = 0.0f; 
mA[1214] = 0.0f; 
mA[1215] = 0.0f; 
mA[1216] = 0.0f; 
mA[1217] = 0.0f; 
mA[1218] = 0.0f; 
mA[1219] = 0.0f; 
mA[1220] = 0.0f; 
mA[1221] = 0.0f; 
mA[1222] = 0.0f; 
mA[1223] = 0.0f; 
mA[1224] = ( (  -1.0f  * v_v23_tca_bw   )  +(  -1.0f  * v_v22_tca_fw   )   ) ; 
mA[1225] = 0.0f; 
mA[1226] = 0.0f; 
mA[1227] = 0.0f; 
mA[1228] = 0.0f; 
mA[1229] = 0.0f; 
mA[1230] = 0.0f; 
mA[1231] = 0.0f; 
mA[1232] = 0.0f; 
mA[1233] = 0.0f; 
mA[1234] = 0.0f; 
mA[1235] = 0.0f; 
mA[1236] = 0.0f; 
mA[1237] = 0.0f; 
mA[1238] = 0.0f; 
mA[1239] = 0.0f; 
mA[1240] = 0.0f; 
mA[1241] = 0.0f; 
mA[1242] = 0.0f; 
mA[1243] = 0.0f; 
mA[1244] = 0.0f; 
mA[1245] = 0.0f; 
mA[1246] = 0.0f; 
mA[1247] = 0.0f; 
mA[1248] = 0.0f; 
mA[1249] = 0.0f; 
mA[1250] = 0.0f; 
mA[1251] =  v_v23_tca_fw ; 
mA[1252] = 0.0f; 
mA[1253] = 0.0f; 
mA[1254] = 0.0f; 
mA[1255] = 0.0f; 
mA[1256] =  v_v22_tca_bw ; 
mA[1257] = 0.0f; 
mA[1258] = 0.0f; 
mA[1259] = 0.0f; 
mA[1260] = 0.0f; 
mA[1261] = 0.0f; 
mA[1262] = 0.0f; 
mA[1263] = 0.0f; 
mA[1264] = 0.0f; 
mA[1265] = 0.0f; 
mA[1266] = 0.0f; 
mA[1267] = 0.0f; 
mA[1268] = 0.0f; 
mA[1269] = 0.0f; 
mA[1270] = 0.0f; 
mA[1271] = 0.0f; 
mA[1272] = 0.0f; 
mA[1273] = 0.0f; 
mA[1274] = 0.0f; 
mA[1275] = ( (  -1.0f  * v_v23_tca_bw   )  +(  -1.0f  * v_v22_tca_fw   )   ) ; 
mA[1276] = 0.0f; 
mA[1277] = 0.0f; 
mA[1278] = 0.0f; 
mA[1279] = 0.0f; 
mA[1280] = 0.0f; 
mA[1281] = 0.0f; 
mA[1282] = 0.0f; 
mA[1283] = 0.0f; 
mA[1284] = 0.0f; 
mA[1285] = 0.0f; 
mA[1286] = 0.0f; 
mA[1287] = 0.0f; 
mA[1288] = 0.0f; 
mA[1289] = 0.0f; 
mA[1290] =  v_v29_glyox_fw_a ; 
mA[1291] =  v_v29_glyox_fw_b ; 
mA[1292] = 0.0f; 
mA[1293] = 0.0f; 
mA[1294] = 0.0f; 
mA[1295] = 0.0f; 
mA[1296] = 0.0f; 
mA[1297] = 0.0f; 
mA[1298] = 0.0f; 
mA[1299] = 0.0f; 
mA[1300] = 0.0f; 
mA[1301] = 0.0f; 
mA[1302] = 0.0f; 
mA[1303] = 0.0f; 
mA[1304] = 0.0f; 
mA[1305] = 0.0f; 
mA[1306] = 0.0f; 
mA[1307] =  v_v22_tca_bw ; 
mA[1308] = 0.0f; 
mA[1309] = 0.0f; 
mA[1310] = 0.0f; 
mA[1311] = 0.0f; 
mA[1312] = 0.0f; 
mA[1313] = 0.0f; 
mA[1314] = 0.0f; 
mA[1315] = 0.0f; 
mA[1316] = 0.0f; 
mA[1317] = 0.0f; 
mA[1318] = 0.0f; 
mA[1319] = 0.0f; 
mA[1320] = 0.0f; 
mA[1321] = 0.0f; 
mA[1322] = 0.0f; 
mA[1323] = 0.0f; 
mA[1324] = 0.0f; 
mA[1325] = 0.0f; 
mA[1326] = ( (  -1.0f  * v_v22_tca_fw   )  +(  -1.0f  * v_v23_tca_bw   )   ) ; 
mA[1327] = 0.0f; 
mA[1328] = 0.0f; 
mA[1329] = 0.0f; 
mA[1330] = 0.0f; 
mA[1331] = 0.0f; 
mA[1332] = 0.0f; 
mA[1333] = 0.0f; 
mA[1334] = 0.0f; 
mA[1335] = 0.0f; 
mA[1336] = 0.0f; 
mA[1337] = 0.0f; 
mA[1338] = 0.0f; 
mA[1339] = 0.0f; 
mA[1340] =  v_v29_glyox_fw_b ; 
mA[1341] =  v_v29_glyox_fw_a ; 
mA[1342] = 0.0f; 
mA[1343] = 0.0f; 
mA[1344] = 0.0f; 
mA[1345] = 0.0f; 
mA[1346] = 0.0f; 
mA[1347] = 0.0f; 
mA[1348] = 0.0f; 
mA[1349] = 0.0f; 
mA[1350] = 0.0f; 
mA[1351] = 0.0f; 
mA[1352] = 0.0f; 
mA[1353] = 0.0f; 
mA[1354] = 0.0f; 
mA[1355] = 0.0f; 
mA[1356] = 0.0f; 
mA[1357] = 0.0f; 
mA[1358] = 0.0f; 
mA[1359] = 0.0f; 
mA[1360] = 0.0f; 
mA[1361] = 0.0f; 
mA[1362] = 0.0f; 
mA[1363] = 0.0f; 
mA[1364] = 0.0f; 
mA[1365] = 0.0f; 
mA[1366] = 0.0f; 
mA[1367] = 0.0f; 
mA[1368] = 0.0f; 
mA[1369] = 0.0f; 
mA[1370] = 0.0f; 
mA[1371] = 0.0f; 
mA[1372] = 0.0f; 
mA[1373] = 0.0f; 
mA[1374] = 0.0f; 
mA[1375] = 0.0f; 
mA[1376] = 0.0f; 
mA[1377] = ( (  -1.0f  * v_v18_ed_fw   )   ) ; 
mA[1378] = 0.0f; 
mA[1379] = 0.0f; 
mA[1380] = 0.0f; 
mA[1381] = 0.0f; 
mA[1382] = 0.0f; 
mA[1383] = 0.0f; 
mA[1384] =  v_v19_ed_fw ; 
mA[1385] = 0.0f; 
mA[1386] = 0.0f; 
mA[1387] = 0.0f; 
mA[1388] = 0.0f; 
mA[1389] = 0.0f; 
mA[1390] = 0.0f; 
mA[1391] = 0.0f; 
mA[1392] = 0.0f; 
mA[1393] = 0.0f; 
mA[1394] = 0.0f; 
mA[1395] = 0.0f; 
mA[1396] = 0.0f; 
mA[1397] = 0.0f; 
mA[1398] = 0.0f; 
mA[1399] = 0.0f; 
mA[1400] = 0.0f; 
mA[1401] = 0.0f; 
mA[1402] = 0.0f; 
mA[1403] = 0.0f; 
mA[1404] = 0.0f; 
mA[1405] = 0.0f; 
mA[1406] = 0.0f; 
mA[1407] = 0.0f; 
mA[1408] = 0.0f; 
mA[1409] = 0.0f; 
mA[1410] = 0.0f; 
mA[1411] = 0.0f; 
mA[1412] = 0.0f; 
mA[1413] = 0.0f; 
mA[1414] = 0.0f; 
mA[1415] = 0.0f; 
mA[1416] = 0.0f; 
mA[1417] = 0.0f; 
mA[1418] = 0.0f; 
mA[1419] =  v_v19_ed_fw ; 
mA[1420] = 0.0f; 
mA[1421] = 0.0f; 
mA[1422] = 0.0f; 
mA[1423] = 0.0f; 
mA[1424] = 0.0f; 
mA[1425] = 0.0f; 
mA[1426] = 0.0f; 
mA[1427] = 0.0f; 
mA[1428] = ( (  -1.0f  * v_v18_ed_fw   )   ) ; 
mA[1429] = 0.0f; 
mA[1430] = 0.0f; 
mA[1431] = 0.0f; 
mA[1432] = 0.0f; 
mA[1433] = 0.0f; 
mA[1434] = 0.0f; 
mA[1435] = 0.0f; 
mA[1436] = 0.0f; 
mA[1437] = 0.0f; 
mA[1438] = 0.0f; 
mA[1439] = 0.0f; 
mA[1440] = 0.0f; 
mA[1441] = 0.0f; 
mA[1442] = 0.0f; 
mA[1443] = 0.0f; 
mA[1444] = 0.0f; 
mA[1445] = 0.0f; 
mA[1446] = 0.0f; 
mA[1447] = 0.0f; 
mA[1448] = 0.0f; 
mA[1449] = 0.0f; 
mA[1450] = 0.0f; 
mA[1451] = 0.0f; 
mA[1452] = 0.0f; 
mA[1453] = 0.0f; 
mA[1454] = 0.0f; 
mA[1455] = 0.0f; 
mA[1456] = 0.0f; 
mA[1457] = 0.0f; 
mA[1458] = 0.0f; 
mA[1459] = 0.0f; 
mA[1460] = 0.0f; 
mA[1461] = 0.0f; 
mA[1462] = 0.0f; 
mA[1463] = 0.0f; 
mA[1464] = 0.0f; 
mA[1465] =  v_v27_tca_bw_a ; 
mA[1466] =  v_v27_tca_bw_b ; 
mA[1467] = 0.0f; 
mA[1468] = 0.0f; 
mA[1469] = 0.0f; 
mA[1470] = 0.0f; 
mA[1471] = 0.0f; 
mA[1472] = 0.0f; 
mA[1473] = 0.0f; 
mA[1474] = 0.0f; 
mA[1475] = 0.0f; 
mA[1476] = 0.0f; 
mA[1477] = 0.0f; 
mA[1478] = 0.0f; 
mA[1479] = ( (  -1.0f  * v_v30_glyox_fw   )  +(  -1.0f  * v_v28_tca_bw   )  +(  -1.0f  * v_v27_tca_fw_b   )  +(  -1.0f  * v_v27_tca_fw_a   )   ) ; 
mA[1480] = 0.0f; 
mA[1481] =  v_v28_tca_fw ; 
mA[1482] = 0.0f; 
mA[1483] = 0.0f; 
mA[1484] = (  v_v32_amphi_fw  + v_v31_amphi_fw   ) ; 
mA[1485] = 0.0f; 
mA[1486] = 0.0f; 
mA[1487] = 0.0f; 
mA[1488] = 0.0f; 
mA[1489] = 0.0f; 
mA[1490] = 0.0f; 
mA[1491] = 0.0f; 
mA[1492] = 0.0f; 
mA[1493] = 0.0f; 
mA[1494] = 0.0f; 
mA[1495] = 0.0f; 
mA[1496] = 0.0f; 
mA[1497] = 0.0f; 
mA[1498] = 0.0f; 
mA[1499] = 0.0f; 
mA[1500] = 0.0f; 
mA[1501] = 0.0f; 
mA[1502] = 0.0f; 
mA[1503] = 0.0f; 
mA[1504] = 0.0f; 
mA[1505] = 0.0f; 
mA[1506] = 0.0f; 
mA[1507] = 0.0f; 
mA[1508] = 0.0f; 
mA[1509] = 0.0f; 
mA[1510] = 0.0f; 
mA[1511] = 0.0f; 
mA[1512] = 0.0f; 
mA[1513] = 0.0f; 
mA[1514] = 0.0f; 
mA[1515] =  v_v27_tca_bw_b ; 
mA[1516] =  v_v27_tca_bw_a ; 
mA[1517] = 0.0f; 
mA[1518] = 0.0f; 
mA[1519] = 0.0f; 
mA[1520] = 0.0f; 
mA[1521] = 0.0f; 
mA[1522] = 0.0f; 
mA[1523] = 0.0f; 
mA[1524] = 0.0f; 
mA[1525] = 0.0f; 
mA[1526] = 0.0f; 
mA[1527] = 0.0f; 
mA[1528] = 0.0f; 
mA[1529] = 0.0f; 
mA[1530] = ( (  -1.0f  * v_v28_tca_bw   )  +(  -1.0f  * v_v27_tca_fw_a   )  +(  -1.0f  * v_v27_tca_fw_b   )  +(  -1.0f  * v_v30_glyox_fw   )   ) ; 
mA[1531] = 0.0f; 
mA[1532] =  v_v28_tca_fw ; 
mA[1533] = 0.0f; 
mA[1534] = 0.0f; 
mA[1535] = 0.0f; 
mA[1536] = 0.0f; 
mA[1537] = 0.0f; 
mA[1538] = 0.0f; 
mA[1539] = 0.0f; 
mA[1540] = 0.0f; 
mA[1541] = 0.0f; 
mA[1542] = 0.0f; 
mA[1543] = 0.0f; 
mA[1544] = 0.0f; 
mA[1545] = 0.0f; 
mA[1546] = 0.0f; 
mA[1547] = 0.0f; 
mA[1548] = 0.0f; 
mA[1549] = 0.0f; 
mA[1550] = 0.0f; 
mA[1551] = 0.0f; 
mA[1552] = 0.0f; 
mA[1553] =  v_v40_aa_fw ; 
mA[1554] = 0.0f; 
mA[1555] = 0.0f; 
mA[1556] = 0.0f; 
mA[1557] = 0.0f; 
mA[1558] = 0.0f; 
mA[1559] = 0.0f; 
mA[1560] = 0.0f; 
mA[1561] = 0.0f; 
mA[1562] = 0.0f; 
mA[1563] = 0.0f; 
mA[1564] = 0.0f; 
mA[1565] = 0.0f; 
mA[1566] = 0.0f; 
mA[1567] = 0.0f; 
mA[1568] = 0.0f; 
mA[1569] = 0.0f; 
mA[1570] = 0.0f; 
mA[1571] = 0.0f; 
mA[1572] = 0.0f; 
mA[1573] = 0.0f; 
mA[1574] = 0.0f; 
mA[1575] = 0.0f; 
mA[1576] = 0.0f; 
mA[1577] = 0.0f; 
mA[1578] = 0.0f; 
mA[1579] =  v_v28_tca_bw ; 
mA[1580] = 0.0f; 
mA[1581] = ( (  -1.0f  * v_v33_amphi_fw   )  +(  -1.0f  * v_v28_tca_fw   )   ) ; 
mA[1582] = 0.0f; 
mA[1583] =  v_v34_amphi_fw ; 
mA[1584] = 0.0f; 
mA[1585] = 0.0f; 
mA[1586] = 0.0f; 
mA[1587] = 0.0f; 
mA[1588] = 0.0f; 
mA[1589] = 0.0f; 
mA[1590] = 0.0f; 
mA[1591] = 0.0f; 
mA[1592] = 0.0f; 
mA[1593] = 0.0f; 
mA[1594] = 0.0f; 
mA[1595] = 0.0f; 
mA[1596] = 0.0f; 
mA[1597] = 0.0f; 
mA[1598] = 0.0f; 
mA[1599] = 0.0f; 
mA[1600] = 0.0f; 
mA[1601] = 0.0f; 
mA[1602] = 0.0f; 
mA[1603] = 0.0f; 
mA[1604] =  v_v40_aa_fw ; 
mA[1605] = 0.0f; 
mA[1606] = 0.0f; 
mA[1607] = 0.0f; 
mA[1608] = 0.0f; 
mA[1609] = 0.0f; 
mA[1610] = 0.0f; 
mA[1611] = 0.0f; 
mA[1612] = 0.0f; 
mA[1613] = 0.0f; 
mA[1614] = 0.0f; 
mA[1615] = 0.0f; 
mA[1616] = 0.0f; 
mA[1617] = 0.0f; 
mA[1618] = 0.0f; 
mA[1619] = 0.0f; 
mA[1620] = 0.0f; 
mA[1621] = 0.0f; 
mA[1622] = 0.0f; 
mA[1623] = 0.0f; 
mA[1624] = 0.0f; 
mA[1625] = 0.0f; 
mA[1626] = 0.0f; 
mA[1627] = 0.0f; 
mA[1628] = 0.0f; 
mA[1629] = 0.0f; 
mA[1630] =  v_v28_tca_bw ; 
mA[1631] = 0.0f; 
mA[1632] = ( (  -1.0f  * v_v28_tca_fw   )  +(  -1.0f  * v_v33_amphi_fw   )   ) ; 
mA[1633] = 0.0f; 
mA[1634] = 0.0f; 
mA[1635] = 0.0f; 
mA[1636] = 0.0f; 
mA[1637] = 0.0f; 
mA[1638] = 0.0f; 
mA[1639] = 0.0f; 
mA[1640] = 0.0f; 
mA[1641] = 0.0f; 
mA[1642] = 0.0f; 
mA[1643] = 0.0f; 
mA[1644] = 0.0f; 
mA[1645] = 0.0f; 
mA[1646] = 0.0f; 
mA[1647] = 0.0f; 
mA[1648] = 0.0f; 
mA[1649] = 0.0f; 
mA[1650] = 0.0f; 
mA[1651] = 0.0f; 
mA[1652] = 0.0f; 
mA[1653] = 0.0f; 
mA[1654] = 0.0f; 
mA[1655] = 0.0f; 
mA[1656] = 0.0f; 
mA[1657] = 0.0f; 
mA[1658] = 0.0f; 
mA[1659] = 0.0f; 
mA[1660] = 0.0f; 
mA[1661] = 0.0f; 
mA[1662] = 0.0f; 
mA[1663] = 0.0f; 
mA[1664] = 0.0f; 
mA[1665] = 0.0f; 
mA[1666] = 0.0f; 
mA[1667] = 0.0f; 
mA[1668] = 0.0f; 
mA[1669] = 0.0f; 
mA[1670] = 0.0f; 
mA[1671] = 0.0f; 
mA[1672] = 0.0f; 
mA[1673] = 0.0f; 
mA[1674] = 0.0f; 
mA[1675] = 0.0f; 
mA[1676] = 0.0f; 
mA[1677] = 0.0f; 
mA[1678] = 0.0f; 
mA[1679] = 0.0f; 
mA[1680] = 0.0f; 
mA[1681] =  v_v33_amphi_fw ; 
mA[1682] = 0.0f; 
mA[1683] = ( (  -1.0f  * v_v07_glyc_fw   )  +(  -1.0f  * v_v34_amphi_fw   )   ) ; 
mA[1684] = (  v_v57_aa_fw  + v_v01_SX_Gluc_In_b  + v_v08_glyc_fw   ) ; 
mA[1685] = 0.0f; 
mA[1686] = 0.0f; 
mA[1687] = 0.0f; 
mA[1688] = 0.0f; 
mA[1689] = 0.0f; 
mA[1690] = 0.0f; 
mA[1691] = 0.0f; 
mA[1692] = 0.0f; 
mA[1693] = 0.0f; 
mA[1694] = 0.0f; 
mA[1695] = 0.0f; 
mA[1696] =  v_v07_glyc_bw ; 
mA[1697] = 0.0f; 
mA[1698] = 0.0f; 
mA[1699] = 0.0f; 
mA[1700] = 0.0f; 
mA[1701] = 0.0f; 
mA[1702] =  v_v42_aa_fw ; 
mA[1703] = 0.0f; 
mA[1704] = 0.0f; 
mA[1705] = 0.0f; 
mA[1706] = 0.0f; 
mA[1707] = 0.0f; 
mA[1708] = 0.0f; 
mA[1709] = 0.0f; 
mA[1710] = 0.0f; 
mA[1711] = 0.0f; 
mA[1712] = 0.0f; 
mA[1713] = 0.0f; 
mA[1714] = 0.0f; 
mA[1715] = 0.0f; 
mA[1716] = 0.0f; 
mA[1717] = 0.0f; 
mA[1718] = 0.0f; 
mA[1719] = 0.0f; 
mA[1720] = 0.0f; 
mA[1721] = 0.0f; 
mA[1722] = 0.0f; 
mA[1723] = 0.0f; 
mA[1724] = 0.0f; 
mA[1725] = 0.0f; 
mA[1726] = 0.0f; 
mA[1727] = 0.0f; 
mA[1728] = 0.0f; 
mA[1729] = 0.0f; 
mA[1730] = 0.0f; 
mA[1731] = 0.0f; 
mA[1732] = 0.0f; 
mA[1733] = 0.0f; 
mA[1734] = ( (  -1.0f  * v_v32_amphi_fw   )  +(  -1.0f  * v_v51_aa_fw_b   )  +(  -1.0f  * v_v57_aa_fw   )  +(  -1.0f  * v_v51_aa_fw_a   )  +(  -1.0f  * v_v01_SX_Gluc_In_b   )  +(  -1.0f  * v_v19_ed_fw   )  +(  -1.0f  * v_v31_amphi_fw   )  +(  -1.0f  * v_v08_glyc_fw   )   ) ; 
mA[1735] = 0.0f; 
mA[1736] = 0.0f; 
mA[1737] = 0.0f; 
mA[1738] = 0.0f; 
mA[1739] = 0.0f; 
mA[1740] = 0.0f; 
mA[1741] = 0.0f; 
mA[1742] = 0.0f; 
mA[1743] = 0.0f; 
mA[1744] = 0.0f; 
mA[1745] = 0.0f; 
mA[1746] = 0.0f; 
mA[1747] = 0.0f; 
mA[1748] = 0.0f; 
mA[1749] = 0.0f; 
mA[1750] = 0.0f; 
mA[1751] = 0.0f; 
mA[1752] = 0.0f; 
mA[1753] = 0.0f; 
mA[1754] = 0.0f; 
mA[1755] = 0.0f; 
mA[1756] = 0.0f; 
mA[1757] = 0.0f; 
mA[1758] = 0.0f; 
mA[1759] = 0.0f; 
mA[1760] = 0.0f; 
mA[1761] = 0.0f; 
mA[1762] = 0.0f; 
mA[1763] = 0.0f; 
mA[1764] = 0.0f; 
mA[1765] = 0.0f; 
mA[1766] = 0.0f; 
mA[1767] = 0.0f; 
mA[1768] = 0.0f; 
mA[1769] =  v_v57_aa_fw ; 
mA[1770] = 0.0f; 
mA[1771] = 0.0f; 
mA[1772] = 0.0f; 
mA[1773] = 0.0f; 
mA[1774] = 0.0f; 
mA[1775] = 0.0f; 
mA[1776] = 0.0f; 
mA[1777] = 0.0f; 
mA[1778] = 0.0f; 
mA[1779] = 0.0f; 
mA[1780] = 0.0f; 
mA[1781] = 0.0f; 
mA[1782] = 0.0f; 
mA[1783] = 0.0f; 
mA[1784] = 0.0f; 
mA[1785] = ( (  -1.0f  * v_v12_ppp_fw   )  +(  -1.0f  * v_v15_ppp_fw   )   ) ; 
mA[1786] =  v_v12_ppp_bw ; 
mA[1787] = 0.0f; 
mA[1788] =  v_v15_ppp_bw ; 
mA[1789] = 0.0f; 
mA[1790] = 0.0f; 
mA[1791] = 0.0f; 
mA[1792] = 0.0f; 
mA[1793] = 0.0f; 
mA[1794] = 0.0f; 
mA[1795] = 0.0f; 
mA[1796] = 0.0f; 
mA[1797] = 0.0f; 
mA[1798] = 0.0f; 
mA[1799] = 0.0f; 
mA[1800] = 0.0f; 
mA[1801] = 0.0f; 
mA[1802] = 0.0f; 
mA[1803] = 0.0f; 
mA[1804] = 0.0f; 
mA[1805] = 0.0f; 
mA[1806] = 0.0f; 
mA[1807] = 0.0f; 
mA[1808] = 0.0f; 
mA[1809] = 0.0f; 
mA[1810] = 0.0f; 
mA[1811] = 0.0f; 
mA[1812] = 0.0f; 
mA[1813] = 0.0f; 
mA[1814] = 0.0f; 
mA[1815] = 0.0f; 
mA[1816] = 0.0f; 
mA[1817] = 0.0f; 
mA[1818] = 0.0f; 
mA[1819] = 0.0f; 
mA[1820] = 0.0f; 
mA[1821] = 0.0f; 
mA[1822] = 0.0f; 
mA[1823] = 0.0f; 
mA[1824] = 0.0f; 
mA[1825] = 0.0f; 
mA[1826] = 0.0f; 
mA[1827] = 0.0f; 
mA[1828] = 0.0f; 
mA[1829] = 0.0f; 
mA[1830] = 0.0f; 
mA[1831] = 0.0f; 
mA[1832] = 0.0f; 
mA[1833] = 0.0f; 
mA[1834] = 0.0f; 
mA[1835] =  v_v12_ppp_fw ; 
mA[1836] = ( (  -1.0f  * v_v11_ppp_bw   )  +(  -1.0f  * v_v12_ppp_bw   )  +(  -1.0f  * v_v10_ppp_fw   )   ) ; 
mA[1837] = 0.0f; 
mA[1838] = 0.0f; 
mA[1839] = 0.0f; 
mA[1840] = 0.0f; 
mA[1841] = 0.0f; 
mA[1842] = 0.0f; 
mA[1843] = 0.0f; 
mA[1844] = 0.0f; 
mA[1845] = 0.0f; 
mA[1846] = 0.0f; 
mA[1847] =  v_v11_ppp_fw ; 
mA[1848] = 0.0f; 
mA[1849] = 0.0f; 
mA[1850] = 0.0f; 
mA[1851] = 0.0f; 
mA[1852] = 0.0f; 
mA[1853] = 0.0f; 
mA[1854] = 0.0f; 
mA[1855] = 0.0f; 
mA[1856] = 0.0f; 
mA[1857] = 0.0f; 
mA[1858] = 0.0f; 
mA[1859] = 0.0f; 
mA[1860] = 0.0f; 
mA[1861] = 0.0f; 
mA[1862] = 0.0f; 
mA[1863] = 0.0f; 
mA[1864] = 0.0f; 
mA[1865] = 0.0f; 
mA[1866] = 0.0f; 
mA[1867] = 0.0f; 
mA[1868] = 0.0f; 
mA[1869] = 0.0f; 
mA[1870] = 0.0f; 
mA[1871] = 0.0f; 
mA[1872] = 0.0f; 
mA[1873] = 0.0f; 
mA[1874] = 0.0f; 
mA[1875] = 0.0f; 
mA[1876] = 0.0f; 
mA[1877] = 0.0f; 
mA[1878] = 0.0f; 
mA[1879] = 0.0f; 
mA[1880] = 0.0f; 
mA[1881] = 0.0f; 
mA[1882] = 0.0f; 
mA[1883] = 0.0f; 
mA[1884] = 0.0f; 
mA[1885] = 0.0f; 
mA[1886] = 0.0f; 
mA[1887] = ( (  -1.0f  * v_v17_ppp_bw   )  +(  -1.0f  * v_v15_ppp_bw   )   ) ; 
mA[1888] = 0.0f; 
mA[1889] = 0.0f; 
mA[1890] = 0.0f; 
mA[1891] = 0.0f; 
mA[1892] = 0.0f; 
mA[1893] = 0.0f; 
mA[1894] =  v_v17_ppp_fw ; 
mA[1895] = 0.0f; 
mA[1896] = 0.0f; 
mA[1897] = 0.0f; 
mA[1898] = 0.0f; 
mA[1899] = 0.0f; 
mA[1900] = 0.0f; 
mA[1901] = 0.0f; 
mA[1902] = 0.0f; 
mA[1903] = 0.0f; 
mA[1904] = 0.0f; 
mA[1905] = 0.0f; 
mA[1906] = 0.0f; 
mA[1907] = 0.0f; 
mA[1908] = 0.0f; 
mA[1909] = 0.0f; 
mA[1910] =  v_v17_ppp_fw ; 
mA[1911] = 0.0f; 
mA[1912] = 0.0f; 
mA[1913] = 0.0f; 
mA[1914] = 0.0f; 
mA[1915] = 0.0f; 
mA[1916] = 0.0f; 
mA[1917] = 0.0f; 
mA[1918] = 0.0f; 
mA[1919] = 0.0f; 
mA[1920] = 0.0f; 
mA[1921] = 0.0f; 
mA[1922] = 0.0f; 
mA[1923] = 0.0f; 
mA[1924] = 0.0f; 
mA[1925] = 0.0f; 
mA[1926] = 0.0f; 
mA[1927] = 0.0f; 
mA[1928] = 0.0f; 
mA[1929] = 0.0f; 
mA[1930] = 0.0f; 
mA[1931] = 0.0f; 
mA[1932] = 0.0f; 
mA[1933] = 0.0f; 
mA[1934] = 0.0f; 
mA[1935] =  v_v15_ppp_fw ; 
mA[1936] = 0.0f; 
mA[1937] = 0.0f; 
mA[1938] = ( (  -1.0f  * v_v17_ppp_bw   )  +(  -1.0f  * v_v15_ppp_bw   )   ) ; 
mA[1939] = 0.0f; 
mA[1940] = 0.0f; 
mA[1941] = 0.0f; 
mA[1942] = 0.0f; 
mA[1943] = 0.0f; 
mA[1944] = 0.0f; 
mA[1945] = 0.0f; 
mA[1946] = 0.0f; 
mA[1947] = 0.0f; 
mA[1948] = 0.0f; 
mA[1949] = 0.0f; 
mA[1950] = 0.0f; 
mA[1951] = 0.0f; 
mA[1952] = 0.0f; 
mA[1953] = 0.0f; 
mA[1954] = 0.0f; 
mA[1955] = 0.0f; 
mA[1956] = 0.0f; 
mA[1957] = 0.0f; 
mA[1958] =  v_v47_aa_fw ; 
mA[1959] = 0.0f; 
mA[1960] = 0.0f; 
mA[1961] = 0.0f; 
mA[1962] = 0.0f; 
mA[1963] = 0.0f; 
mA[1964] = 0.0f; 
mA[1965] = 0.0f; 
mA[1966] = 0.0f; 
mA[1967] = 0.0f; 
mA[1968] = 0.0f; 
mA[1969] = 0.0f; 
mA[1970] = 0.0f; 
mA[1971] = 0.0f; 
mA[1972] = 0.0f; 
mA[1973] = 0.0f; 
mA[1974] = 0.0f; 
mA[1975] = 0.0f; 
mA[1976] = 0.0f; 
mA[1977] = 0.0f; 
mA[1978] = 0.0f; 
mA[1979] = 0.0f; 
mA[1980] = 0.0f; 
mA[1981] = 0.0f; 
mA[1982] = 0.0f; 
mA[1983] = 0.0f; 
mA[1984] = 0.0f; 
mA[1985] = 0.0f; 
mA[1986] = 0.0f; 
mA[1987] = 0.0f; 
mA[1988] = 0.0f; 
mA[1989] = ( (  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v44_aa_bw   )   ) ; 
mA[1990] = 0.0f; 
mA[1991] = 0.0f; 
mA[1992] = 0.0f; 
mA[1993] = 0.0f; 
mA[1994] = 0.0f; 
mA[1995] = 0.0f; 
mA[1996] = 0.0f; 
mA[1997] = 0.0f; 
mA[1998] = 0.0f; 
mA[1999] = 0.0f; 
mA[2000] = 0.0f; 
mA[2001] = 0.0f; 
mA[2002] = 0.0f; 
mA[2003] = 0.0f; 
mA[2004] = 0.0f; 
mA[2005] = 0.0f; 
mA[2006] = 0.0f; 
mA[2007] = 0.0f; 
mA[2008] = 0.0f; 
mA[2009] = 0.0f; 
mA[2010] = 0.0f; 
mA[2011] = 0.0f; 
mA[2012] = 0.0f; 
mA[2013] = 0.0f; 
mA[2014] = 0.0f; 
mA[2015] =  v_v26_tca_fw_a ; 
mA[2016] =  v_v26_tca_fw_b ; 
mA[2017] = 0.0f; 
mA[2018] = 0.0f; 
mA[2019] = 0.0f; 
mA[2020] = 0.0f; 
mA[2021] = 0.0f; 
mA[2022] = 0.0f; 
mA[2023] = 0.0f; 
mA[2024] = 0.0f; 
mA[2025] = 0.0f; 
mA[2026] = 0.0f; 
mA[2027] = 0.0f; 
mA[2028] = 0.0f; 
mA[2029] = 0.0f; 
mA[2030] = 0.0f; 
mA[2031] = 0.0f; 
mA[2032] = 0.0f; 
mA[2033] = 0.0f; 
mA[2034] = 0.0f; 
mA[2035] = 0.0f; 
mA[2036] = 0.0f; 
mA[2037] = 0.0f; 
mA[2038] = 0.0f; 
mA[2039] = 0.0f; 
mA[2040] = ( (  -1.0f  * v_v26_tca_bw_a   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v26_tca_bw_b   )  +(  -1.0f  * v_v51_aa_fw_a   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v51_aa_fw_b   )  +(  -1.0f  * v_v29_glyox_fw_a   )  +(  -1.0f  * v_v29_glyox_fw_b   )  +(  -1.0f  * v_v25_tca_fw_b   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v25_tca_fw_a   )   ) ; 
mA[2041] = 0.0f; 
mA[2042] =  v_v25_tca_bw_a ; 
mA[2043] =  v_v25_tca_bw_b ; 
mA[2044] = 0.0f; 
mA[2045] = 0.0f; 
mA[2046] = 0.0f; 
mA[2047] = 0.0f; 
mA[2048] = 0.0f; 
mA[2049] = 0.0f; 
mA[2050] = 0.0f; 
mA[2051] = 0.0f; 
mA[2052] = 0.0f; 
mA[2053] = 0.0f; 
mA[2054] = 0.0f; 
mA[2055] = 0.0f; 
mA[2056] = 0.0f; 
mA[2057] = 0.0f; 
mA[2058] = 0.0f; 
mA[2059] = 0.0f; 
mA[2060] = 0.0f; 
mA[2061] = 0.0f; 
mA[2062] = 0.0f; 
mA[2063] = 0.0f; 
mA[2064] = 0.0f; 
mA[2065] =  v_v26_tca_fw_b ; 
mA[2066] =  v_v26_tca_fw_a ; 
mA[2067] = 0.0f; 
mA[2068] = 0.0f; 
mA[2069] = 0.0f; 
mA[2070] = 0.0f; 
mA[2071] = 0.0f; 
mA[2072] = 0.0f; 
mA[2073] = 0.0f; 
mA[2074] = 0.0f; 
mA[2075] = 0.0f; 
mA[2076] = 0.0f; 
mA[2077] = 0.0f; 
mA[2078] = 0.0f; 
mA[2079] = 0.0f; 
mA[2080] = 0.0f; 
mA[2081] = 0.0f; 
mA[2082] = 0.0f; 
mA[2083] = 0.0f; 
mA[2084] = 0.0f; 
mA[2085] = 0.0f; 
mA[2086] = 0.0f; 
mA[2087] = 0.0f; 
mA[2088] = 0.0f; 
mA[2089] = 0.0f; 
mA[2090] = 0.0f; 
mA[2091] = ( (  -1.0f  * v_v25_tca_fw_a   )  +(  -1.0f  * v_v29_glyox_fw_b   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v26_tca_bw_b   )  +(  -1.0f  * v_v51_aa_fw_a   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v25_tca_fw_b   )  +(  -1.0f  * v_v29_glyox_fw_a   )  +(  -1.0f  * v_v26_tca_bw_a   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v51_aa_fw_b   )   ) ; 
mA[2092] =  v_v25_tca_bw_b ; 
mA[2093] =  v_v25_tca_bw_a ; 
mA[2094] = 0.0f; 
mA[2095] = 0.0f; 
mA[2096] = 0.0f; 
mA[2097] = 0.0f; 
mA[2098] = 0.0f; 
mA[2099] = 0.0f; 
mA[2100] = 0.0f; 
mA[2101] = 0.0f; 
mA[2102] = 0.0f; 
mA[2103] = 0.0f; 
mA[2104] = 0.0f; 
mA[2105] = 0.0f; 
mA[2106] = 0.0f; 
mA[2107] = 0.0f; 
mA[2108] = 0.0f; 
mA[2109] = 0.0f; 
mA[2110] = 0.0f; 
mA[2111] = 0.0f; 
mA[2112] = 0.0f; 
mA[2113] = 0.0f; 
mA[2114] = 0.0f; 
mA[2115] = 0.0f; 
mA[2116] = 0.0f; 
mA[2117] = 0.0f; 
mA[2118] = 0.0f; 
mA[2119] = 0.0f; 
mA[2120] = 0.0f; 
mA[2121] = 0.0f; 
mA[2122] = 0.0f; 
mA[2123] = 0.0f; 
mA[2124] = 0.0f; 
mA[2125] = 0.0f; 
mA[2126] = 0.0f; 
mA[2127] = 0.0f; 
mA[2128] = 0.0f; 
mA[2129] = 0.0f; 
mA[2130] = 0.0f; 
mA[2131] = 0.0f; 
mA[2132] = 0.0f; 
mA[2133] = 0.0f; 
mA[2134] = 0.0f; 
mA[2135] = 0.0f; 
mA[2136] = 0.0f; 
mA[2137] = 0.0f; 
mA[2138] = 0.0f; 
mA[2139] = 0.0f; 
mA[2140] = (  v_v48_aa_fw_a  + v_v51_aa_fw_a  + v_v48_aa_fw_c  + v_v25_tca_fw_a   ) ; 
mA[2141] = (  v_v48_aa_fw_d  + v_v25_tca_fw_b  + v_v48_aa_fw_b  + v_v51_aa_fw_b   ) ; 
mA[2142] = ( (  -1.0f  * v_v25_tca_bw_a   )  +(  -1.0f  * v_v25_tca_bw_b   )  +(  -1.0f  * v_v24_tca_fw   )   ) ; 
mA[2143] = 0.0f; 
mA[2144] = 0.0f; 
mA[2145] = 0.0f; 
mA[2146] = 0.0f; 
mA[2147] = 0.0f; 
mA[2148] = 0.0f; 
mA[2149] = 0.0f; 
mA[2150] = 0.0f; 
mA[2151] = 0.0f; 
mA[2152] = 0.0f; 
mA[2153] = 0.0f; 
mA[2154] = 0.0f; 
mA[2155] = 0.0f; 
mA[2156] = 0.0f; 
mA[2157] = 0.0f; 
mA[2158] = 0.0f; 
mA[2159] = 0.0f; 
mA[2160] = 0.0f; 
mA[2161] = 0.0f; 
mA[2162] = 0.0f; 
mA[2163] = 0.0f; 
mA[2164] = 0.0f; 
mA[2165] = 0.0f; 
mA[2166] = 0.0f; 
mA[2167] = 0.0f; 
mA[2168] = 0.0f; 
mA[2169] = 0.0f; 
mA[2170] = 0.0f; 
mA[2171] = 0.0f; 
mA[2172] = 0.0f; 
mA[2173] = 0.0f; 
mA[2174] = 0.0f; 
mA[2175] = 0.0f; 
mA[2176] = 0.0f; 
mA[2177] = 0.0f; 
mA[2178] = 0.0f; 
mA[2179] = 0.0f; 
mA[2180] = 0.0f; 
mA[2181] = 0.0f; 
mA[2182] = 0.0f; 
mA[2183] = 0.0f; 
mA[2184] = 0.0f; 
mA[2185] = 0.0f; 
mA[2186] = 0.0f; 
mA[2187] = 0.0f; 
mA[2188] = 0.0f; 
mA[2189] = 0.0f; 
mA[2190] = (  v_v48_aa_fw_d  + v_v48_aa_fw_b  + v_v51_aa_fw_b  + v_v25_tca_fw_b   ) ; 
mA[2191] = (  v_v25_tca_fw_a  + v_v48_aa_fw_c  + v_v51_aa_fw_a  + v_v48_aa_fw_a   ) ; 
mA[2192] = 0.0f; 
mA[2193] = ( (  -1.0f  * v_v25_tca_bw_b   )  +(  -1.0f  * v_v25_tca_bw_a   )  +(  -1.0f  * v_v24_tca_fw   )   ) ; 
mA[2194] = 0.0f; 
mA[2195] = 0.0f; 
mA[2196] = 0.0f; 
mA[2197] = 0.0f; 
mA[2198] = 0.0f; 
mA[2199] = 0.0f; 
mA[2200] = 0.0f; 
mA[2201] = 0.0f; 
mA[2202] = 0.0f; 
mA[2203] = 0.0f; 
mA[2204] = 0.0f; 
mA[2205] = 0.0f; 
mA[2206] = 0.0f; 
mA[2207] = 0.0f; 
mA[2208] = 0.0f; 
mA[2209] = 0.0f; 
mA[2210] = 0.0f; 
mA[2211] =  v_v16_ppp_bw ; 
mA[2212] = 0.0f; 
mA[2213] = 0.0f; 
mA[2214] = 0.0f; 
mA[2215] = 0.0f; 
mA[2216] = 0.0f; 
mA[2217] = 0.0f; 
mA[2218] = 0.0f; 
mA[2219] = 0.0f; 
mA[2220] = 0.0f; 
mA[2221] = 0.0f; 
mA[2222] = 0.0f; 
mA[2223] = 0.0f; 
mA[2224] = 0.0f; 
mA[2225] = 0.0f; 
mA[2226] = 0.0f; 
mA[2227] = 0.0f; 
mA[2228] = 0.0f; 
mA[2229] = 0.0f; 
mA[2230] = 0.0f; 
mA[2231] = 0.0f; 
mA[2232] = 0.0f; 
mA[2233] = 0.0f; 
mA[2234] = 0.0f; 
mA[2235] = 0.0f; 
mA[2236] = 0.0f; 
mA[2237] =  v_v17_ppp_bw ; 
mA[2238] = 0.0f; 
mA[2239] = 0.0f; 
mA[2240] = 0.0f; 
mA[2241] = 0.0f; 
mA[2242] = 0.0f; 
mA[2243] = 0.0f; 
mA[2244] = ( (  -1.0f  * v_v17_ppp_fw   )  +(  -1.0f  * v_v16_ppp_fw   )   ) ; 
mA[2245] = 0.0f; 
mA[2246] = 0.0f; 
mA[2247] = 0.0f; 
mA[2248] = 0.0f; 
mA[2249] = 0.0f; 
mA[2250] = 0.0f; 
mA[2251] = 0.0f; 
mA[2252] = 0.0f; 
mA[2253] = 0.0f; 
mA[2254] = 0.0f; 
mA[2255] = 0.0f; 
mA[2256] = 0.0f; 
mA[2257] = 0.0f; 
mA[2258] = 0.0f; 
mA[2259] = 0.0f; 
mA[2260] = 0.0f; 
mA[2261] = 0.0f; 
mA[2262] = 0.0f; 
mA[2263] = 0.0f; 
mA[2264] = 0.0f; 
mA[2265] = 0.0f; 
mA[2266] = 0.0f; 
mA[2267] = 0.0f; 
mA[2268] = 0.0f; 
mA[2269] = 0.0f; 
mA[2270] = 0.0f; 
mA[2271] = 0.0f; 
mA[2272] = 0.0f; 
mA[2273] = 0.0f; 
mA[2274] = 0.0f; 
mA[2275] = 0.0f; 
mA[2276] = 0.0f; 
mA[2277] = 0.0f; 
mA[2278] = 0.0f; 
mA[2279] = 0.0f; 
mA[2280] = 0.0f; 
mA[2281] = 0.0f; 
mA[2282] = 0.0f; 
mA[2283] = 0.0f; 
mA[2284] = 0.0f; 
mA[2285] = 0.0f; 
mA[2286] = 0.0f; 
mA[2287] = 0.0f; 
mA[2288] = 0.0f; 
mA[2289] = 0.0f; 
mA[2290] = 0.0f; 
mA[2291] = 0.0f; 
mA[2292] = 0.0f; 
mA[2293] = 0.0f; 
mA[2294] = 0.0f; 
mA[2295] = ( (  -1.0f  * v_v50_aa_fw   )   ) ; 
mA[2296] = 0.0f; 
mA[2297] = 0.0f; 
mA[2298] = 0.0f; 
mA[2299] = 0.0f; 
mA[2300] = 0.0f; 
mA[2301] = 0.0f; 
mA[2302] = 0.0f; 
mA[2303] = 0.0f; 
mA[2304] = 0.0f; 
mA[2305] = 0.0f; 
mA[2306] = 0.0f; 
mA[2307] = 0.0f; 
mA[2308] = 0.0f; 
mA[2309] = 0.0f; 
mA[2310] = 0.0f; 
mA[2311] = 0.0f; 
mA[2312] = 0.0f; 
mA[2313] = 0.0f; 
mA[2314] = 0.0f; 
mA[2315] = 0.0f; 
mA[2316] = 0.0f; 
mA[2317] = 0.0f; 
mA[2318] = 0.0f; 
mA[2319] =  v_v06_glyc_bw ; 
mA[2320] = 0.0f; 
mA[2321] = 0.0f; 
mA[2322] = 0.0f; 
mA[2323] = 0.0f; 
mA[2324] = 0.0f; 
mA[2325] = 0.0f; 
mA[2326] = 0.0f; 
mA[2327] = 0.0f; 
mA[2328] = 0.0f; 
mA[2329] = 0.0f; 
mA[2330] = 0.0f; 
mA[2331] = 0.0f; 
mA[2332] = 0.0f; 
mA[2333] =  v_v07_glyc_fw ; 
mA[2334] = 0.0f; 
mA[2335] = 0.0f; 
mA[2336] = 0.0f; 
mA[2337] = 0.0f; 
mA[2338] = 0.0f; 
mA[2339] =  v_v43_aa_fw ; 
mA[2340] = 0.0f; 
mA[2341] = 0.0f; 
mA[2342] = 0.0f; 
mA[2343] = 0.0f; 
mA[2344] = 0.0f; 
mA[2345] = 0.0f; 
mA[2346] = ( (  -1.0f  * v_v06_glyc_fw   )  +(  -1.0f  * v_v07_glyc_bw   )   ) ; 
mA[2347] = 0.0f; 
mA[2348] = 0.0f; 
mA[2349] = 0.0f; 
mA[2350] = 0.0f; 
mA[2351] = 0.0f; 
mA[2352] = 0.0f; 
mA[2353] = 0.0f; 
mA[2354] = 0.0f; 
mA[2355] = 0.0f; 
mA[2356] = 0.0f; 
mA[2357] = 0.0f; 
mA[2358] = 0.0f; 
mA[2359] = 0.0f; 
mA[2360] = 0.0f; 
mA[2361] = 0.0f; 
mA[2362] = 0.0f; 
mA[2363] = 0.0f; 
mA[2364] = 0.0f; 
mA[2365] = 0.0f; 
mA[2366] = 0.0f; 
mA[2367] = 0.0f; 
mA[2368] = 0.0f; 
mA[2369] =  v_v13_ppp_fw ; 
mA[2370] = 0.0f; 
mA[2371] = 0.0f; 
mA[2372] = 0.0f; 
mA[2373] = 0.0f; 
mA[2374] = 0.0f; 
mA[2375] = 0.0f; 
mA[2376] = 0.0f; 
mA[2377] = 0.0f; 
mA[2378] = 0.0f; 
mA[2379] = 0.0f; 
mA[2380] = 0.0f; 
mA[2381] = 0.0f; 
mA[2382] = 0.0f; 
mA[2383] = 0.0f; 
mA[2384] = 0.0f; 
mA[2385] = 0.0f; 
mA[2386] =  v_v11_ppp_bw ; 
mA[2387] = 0.0f; 
mA[2388] = 0.0f; 
mA[2389] = 0.0f; 
mA[2390] = 0.0f; 
mA[2391] = 0.0f; 
mA[2392] = 0.0f; 
mA[2393] = 0.0f; 
mA[2394] = 0.0f; 
mA[2395] = 0.0f; 
mA[2396] = 0.0f; 
mA[2397] = ( (  -1.0f  * v_v13_ppp_bw   )  +(  -1.0f  * v_v11_ppp_fw   )   ) ; 
mA[2398] = 0.0f; 
mA[2399] = 0.0f; 
mA[2400] = 0.0f; 
mA[2401] = 0.0f; 
mA[2402] = 0.0f; 
mA[2403] = 0.0f; 
mA[2404] = 0.0f; 
mA[2405] = 0.0f; 
mA[2406] = 0.0f; 
mA[2407] = 0.0f; 
mA[2408] = 0.0f; 
mA[2409] = 0.0f; 
mA[2410] = 0.0f; 
mA[2411] = 0.0f; 
mA[2412] = 0.0f; 
mA[2413] = 0.0f; 
mA[2414] = 0.0f; 
mA[2415] = 0.0f; 
mA[2416] = 0.0f; 
mA[2417] = 0.0f; 
mA[2418] = 0.0f; 
mA[2419] = 0.0f; 
mA[2420] = 0.0f; 
mA[2421] = 0.0f; 
mA[2422] = 0.0f; 
mA[2423] = 0.0f; 
mA[2424] = 0.0f; 
mA[2425] = 0.0f; 
mA[2426] = 0.0f; 
mA[2427] =  v_v18_ed_fw ; 
mA[2428] = 0.0f; 
mA[2429] = 0.0f; 
mA[2430] = 0.0f; 
mA[2431] = 0.0f; 
mA[2432] = 0.0f; 
mA[2433] = 0.0f; 
mA[2434] = 0.0f; 
mA[2435] = 0.0f; 
mA[2436] = 0.0f; 
mA[2437] = 0.0f; 
mA[2438] = 0.0f; 
mA[2439] = 0.0f; 
mA[2440] = 0.0f; 
mA[2441] = 0.0f; 
mA[2442] = 0.0f; 
mA[2443] = 0.0f; 
mA[2444] = 0.0f; 
mA[2445] = 0.0f; 
mA[2446] = 0.0f; 
mA[2447] = 0.0f; 
mA[2448] = ( (  -1.0f  * v_v09_ppp_fw   )   ) ; 
mA[2449] = 0.0f; 
mA[2450] = 0.0f; 
mA[2451] = 0.0f; 
mA[2452] = 0.0f; 
mA[2453] = 0.0f; 
mA[2454] = 0.0f; 
mA[2455] = 0.0f; 
mA[2456] = 0.0f; 
mA[2457] = 0.0f; 
mA[2458] = 0.0f; 
mA[2459] = 0.0f; 
mA[2460] = 0.0f; 
mA[2461] = 0.0f; 
mA[2462] = 0.0f; 
mA[2463] = 0.0f; 
mA[2464] = 0.0f; 
mA[2465] = 0.0f; 
mA[2466] = 0.0f; 
mA[2467] = 0.0f; 
mA[2468] = 0.0f; 
mA[2469] = 0.0f; 
mA[2470] = 0.0f; 
mA[2471] = 0.0f; 
mA[2472] = 0.0f; 
mA[2473] = 0.0f; 
mA[2474] = 0.0f; 
mA[2475] = 0.0f; 
mA[2476] = 0.0f; 
mA[2477] = 0.0f; 
mA[2478] =  v_v18_ed_fw ; 
mA[2479] = 0.0f; 
mA[2480] = 0.0f; 
mA[2481] = 0.0f; 
mA[2482] = 0.0f; 
mA[2483] = 0.0f; 
mA[2484] = 0.0f; 
mA[2485] = 0.0f; 
mA[2486] =  v_v10_ppp_fw ; 
mA[2487] = 0.0f; 
mA[2488] = 0.0f; 
mA[2489] = 0.0f; 
mA[2490] = 0.0f; 
mA[2491] = 0.0f; 
mA[2492] = 0.0f; 
mA[2493] = 0.0f; 
mA[2494] = 0.0f; 
mA[2495] = 0.0f; 
mA[2496] = 0.0f; 
mA[2497] = 0.0f; 
mA[2498] = 0.0f; 
mA[2499] = ( (  -1.0f  * v_v09_ppp_fw   )   ) ; 
}
//----Init B---------------------------------------------------------------------------
if(idx==1 && idy==0){
mB[0] = 0.0f; 
mB[1] = 0.0f; 
mB[2] = 0.0f; 
mB[3] = 0.0f; 
mB[4] = 0.0f; 
mB[5] = 0.0f; 
mB[6] = 0.0f; 
mB[7] = 0.0f; 
mB[8] = 0.0f; 
mB[9] = 0.0f; 
mB[10] = 0.0f; 
mB[11] = 0.0f; 
mB[12] = 0.0f; 
mB[13] = 0.0f; 
mB[14] = 0.0f; 
mB[15] = 0.0f; 
mB[16] = 0.0f; 
mB[17] = 0.0f; 
mB[18] = (  -1.0f  * v_v01_SX_Gluc_In_b   ) ; 
mB[19] = 0.0f; 
mB[20] = 0.0f; 
mB[21] = 0.0f; 
mB[22] = 0.0f; 
mB[23] = 0.0f; 
mB[24] = 0.0f; 
mB[25] = 0.0f; 
mB[26] = 0.0f; 
mB[27] = 0.0f; 
mB[28] = 0.0f; 
mB[29] = 0.0f; 
mB[30] = 0.0f; 
mB[31] = 0.0f; 
mB[32] = 0.0f; 
mB[33] = 0.0f; 
mB[34] = 0.0f; 
mB[35] = 0.0f; 
mB[36] = 0.0f; 
mB[37] = 0.0f; 
mB[38] = 0.0f; 
mB[39] = 0.0f; 
mB[40] = 0.0f; 
mB[41] = 0.0f; 
mB[42] = 0.0f; 
mB[43] = 0.0f; 
mB[44] = 0.0f; 
mB[45] = 0.0f; 
mB[46] = 0.0f; 
mB[47] = 0.0f; 
mB[48] = 0.0f; 
mB[49] = 0.0f; 
mB[50] = 0.0f; 
mB[51] = 0.0f; 
mB[52] = 0.0f; 
mB[53] = 0.0f; 
mB[54] = 0.0f; 
mB[55] = 0.0f; 
mB[56] = 0.0f; 
mB[57] = 0.0f; 
mB[58] = 0.0f; 
mB[59] = 0.0f; 
mB[60] = 0.0f; 
mB[61] = 0.0f; 
mB[62] = 0.0f; 
mB[63] = 0.0f; 
mB[64] = 0.0f; 
mB[65] = 0.0f; 
mB[66] = 0.0f; 
mB[67] = 0.0f; 
mB[68] = 0.0f; 
mB[69] = 0.0f; 
mB[70] = 0.0f; 
mB[71] = 0.0f; 
mB[72] = 0.0f; 
mB[73] = 0.0f; 
mB[74] = 0.0f; 
mB[75] = 0.0f; 
mB[76] = 0.0f; 
mB[77] = 0.0f; 
mB[78] = 0.0f; 
mB[79] = (  -1.0f  * v_v30_glyox_fw   ) ; 
mB[80] = 0.0f; 
mB[81] = 0.0f; 
mB[82] = 0.0f; 
mB[83] = 0.0f; 
mB[84] = 0.0f; 
mB[85] = 0.0f; 
mB[86] = 0.0f; 
mB[87] = 0.0f; 
mB[88] = 0.0f; 
mB[89] = 0.0f; 
mB[90] = 0.0f; 
mB[91] = 0.0f; 
mB[92] = 0.0f; 
mB[93] = 0.0f; 
mB[94] = 0.0f; 
mB[95] = 0.0f; 
mB[96] = 0.0f; 
mB[97] = 0.0f; 
mB[98] = 0.0f; 
mB[99] = 0.0f; 
mB[100] = 0.0f; 
mB[101] = 0.0f; 
mB[102] = 0.0f; 
mB[103] = 0.0f; 
mB[104] = 0.0f; 
mB[105] = 0.0f; 
mB[106] = 0.0f; 
mB[107] = (  -1.0f  * v_v21_tca_fw   ) ; 
mB[108] = 0.0f; 
mB[109] = 0.0f; 
mB[110] = 0.0f; 
mB[111] = 0.0f; 
mB[112] = 0.0f; 
mB[113] = 0.0f; 
mB[114] = 0.0f; 
mB[115] = 0.0f; 
mB[116] = 0.0f; 
mB[117] = 0.0f; 
mB[118] = 0.0f; 
mB[119] = 0.0f; 
mB[120] = 0.0f; 
mB[121] = 0.0f; 
mB[122] = 0.0f; 
mB[123] = 0.0f; 
mB[124] = 0.0f; 
mB[125] = 0.0f; 
mB[126] = 0.0f; 
mB[127] = 0.0f; 
mB[128] = 0.0f; 
mB[129] = 0.0f; 
mB[130] = 0.0f; 
mB[131] = 0.0f; 
mB[132] = 0.0f; 
mB[133] = 0.0f; 
mB[134] = 0.0f; 
mB[135] = 0.0f; 
mB[136] = 0.0f; 
mB[137] = 0.0f; 
mB[138] = 0.0f; 
mB[139] = 0.0f; 
mB[140] = 0.0f; 
mB[141] = 0.0f; 
mB[142] = 0.0f; 
mB[143] = 0.0f; 
mB[144] = 0.0f; 
mB[145] = 0.0f; 
mB[146] = 0.0f; 
mB[147] = 0.0f; 
mB[148] = 0.0f; 
mB[149] = 0.0f; 
mB[150] = 0.0f; 
mB[151] = 0.0f; 
mB[152] = 0.0f; 
mB[153] = 0.0f; 
mB[154] = 0.0f; 
mB[155] = 0.0f; 
mB[156] = (  -1.0f  * v_v21_tca_fw   ) ; 
mB[157] = 0.0f; 
mB[158] = 0.0f; 
mB[159] = 0.0f; 
mB[160] = 0.0f; 
mB[161] = 0.0f; 
mB[162] = 0.0f; 
mB[163] = 0.0f; 
mB[164] = 0.0f; 
mB[165] = 0.0f; 
mB[166] = 0.0f; 
mB[167] = 0.0f; 
mB[168] = 0.0f; 
mB[169] = 0.0f; 
mB[170] = 0.0f; 
mB[171] = 0.0f; 
mB[172] = 0.0f; 
mB[173] = 0.0f; 
mB[174] = 0.0f; 
mB[175] = 0.0f; 
mB[176] = 0.0f; 
mB[177] = 0.0f; 
mB[178] = 0.0f; 
mB[179] = 0.0f; 
mB[180] = 0.0f; 
mB[181] = 0.0f; 
mB[182] = 0.0f; 
mB[183] = 0.0f; 
mB[184] = 0.0f; 
mB[185] = 0.0f; 
mB[186] = 0.0f; 
mB[187] = 0.0f; 
mB[188] = 0.0f; 
mB[189] = 0.0f; 
mB[190] = 0.0f; 
mB[191] = 0.0f; 
mB[192] = 0.0f; 
mB[193] = 0.0f; 
mB[194] = 0.0f; 
mB[195] = 0.0f; 
mB[196] = 0.0f; 
mB[197] = 0.0f; 
mB[198] = 0.0f; 
mB[199] = 0.0f; 
mB[200] = 0.0f; 
mB[201] = 0.0f; 
mB[202] = 0.0f; 
mB[203] = 0.0f; 
mB[204] = 0.0f; 
mB[205] = 0.0f; 
mB[206] = 0.0f; 
mB[207] = 0.0f; 
mB[208] = 0.0f; 
mB[209] = 0.0f; 
mB[210] = 0.0f; 
mB[211] = 0.0f; 
mB[212] = 0.0f; 
mB[213] = 0.0f; 
mB[214] = 0.0f; 
mB[215] = 0.0f; 
mB[216] = 0.0f; 
mB[217] = 0.0f; 
mB[218] = 0.0f; 
mB[219] = 0.0f; 
mB[220] = 0.0f; 
mB[221] = 0.0f; 
mB[222] = 0.0f; 
mB[223] = 0.0f; 
mB[224] = 0.0f; 
mB[225] = 0.0f; 
mB[226] = 0.0f; 
mB[227] = 0.0f; 
mB[228] = 0.0f; 
mB[229] = 0.0f; 
mB[230] = 0.0f; 
mB[231] = 0.0f; 
mB[232] = 0.0f; 
mB[233] = 0.0f; 
mB[234] = 0.0f; 
mB[235] = 0.0f; 
mB[236] = 0.0f; 
mB[237] = 0.0f; 
mB[238] = 0.0f; 
mB[239] = (  -1.0f  * v_v44_aa_bw   ) ; 
mB[240] = 0.0f; 
mB[241] = 0.0f; 
mB[242] = 0.0f; 
mB[243] = 0.0f; 
mB[244] = 0.0f; 
mB[245] = 0.0f; 
mB[246] = 0.0f; 
mB[247] = 0.0f; 
mB[248] = 0.0f; 
mB[249] = 0.0f; 
mB[250] = 0.0f; 
mB[251] = 0.0f; 
mB[252] = 0.0f; 
mB[253] = 0.0f; 
mB[254] = 0.0f; 
mB[255] = 0.0f; 
mB[256] = 0.0f; 
mB[257] = 0.0f; 
mB[258] = 0.0f; 
mB[259] = 0.0f; 
mB[260] = 0.0f; 
mB[261] = 0.0f; 
mB[262] = 0.0f; 
mB[263] = 0.0f; 
mB[264] = 0.0f; 
mB[265] = 0.0f; 
mB[266] = 0.0f; 
mB[267] = 0.0f; 
mB[268] = 0.0f; 
mB[269] = 0.0f; 
mB[270] = 0.0f; 
mB[271] = 0.0f; 
mB[272] = 0.0f; 
mB[273] = 0.0f; 
mB[274] = 0.0f; 
mB[275] = 0.0f; 
mB[276] = 0.0f; 
mB[277] = 0.0f; 
mB[278] = 0.0f; 
mB[279] = 0.0f; 
mB[280] = 0.0f; 
mB[281] = 0.0f; 
mB[282] = 0.0f; 
mB[283] = 0.0f; 
mB[284] = 0.0f; 
mB[285] = 0.0f; 
mB[286] = 0.0f; 
mB[287] = (  -1.0f  * v_v15_ppp_bw   ) ; 
mB[288] = 0.0f; 
mB[289] = 0.0f; 
mB[290] = 0.0f; 
mB[291] = 0.0f; 
mB[292] = 0.0f; 
mB[293] = 0.0f; 
mB[294] = 0.0f; 
mB[295] = 0.0f; 
mB[296] = 0.0f; 
mB[297] = 0.0f; 
mB[298] = 0.0f; 
mB[299] = 0.0f; 
mB[300] = 0.0f; 
mB[301] = 0.0f; 
mB[302] = 0.0f; 
mB[303] = 0.0f; 
mB[304] = 0.0f; 
mB[305] = 0.0f; 
mB[306] = 0.0f; 
mB[307] = 0.0f; 
mB[308] = 0.0f; 
mB[309] = 0.0f; 
mB[310] = 0.0f; 
mB[311] = 0.0f; 
mB[312] = 0.0f; 
mB[313] = 0.0f; 
mB[314] = 0.0f; 
mB[315] = 0.0f; 
mB[316] = 0.0f; 
mB[317] = 0.0f; 
mB[318] = 0.0f; 
mB[319] = 0.0f; 
mB[320] = 0.0f; 
mB[321] = 0.0f; 
mB[322] = 0.0f; 
mB[323] = 0.0f; 
mB[324] = 0.0f; 
mB[325] = 0.0f; 
mB[326] = (  -1.0f  * v_v23_tca_bw   ) ; 
mB[327] = 0.0f; 
mB[328] = 0.0f; 
mB[329] = 0.0f; 
mB[330] = 0.0f; 
mB[331] = 0.0f; 
mB[332] = 0.0f; 
mB[333] = 0.0f; 
mB[334] = 0.0f; 
mB[335] = 0.0f; 
mB[336] = 0.0f; 
mB[337] = 0.0f; 
mB[338] = 0.0f; 
mB[339] = 0.0f; 
mB[340] = 0.0f; 
mB[341] = 0.0f; 
mB[342] = 0.0f; 
mB[343] = 0.0f; 
mB[344] = 0.0f; 
mB[345] = 0.0f; 
mB[346] = 0.0f; 
mB[347] = 0.0f; 
mB[348] = 0.0f; 
mB[349] = 0.0f; 
mB[350] = 0.0f; 
mB[351] = 0.0f; 
mB[352] = 0.0f; 
mB[353] = 0.0f; 
mB[354] = 0.0f; 
mB[355] = 0.0f; 
mB[356] = 0.0f; 
mB[357] = 0.0f; 
mB[358] = 0.0f; 
mB[359] = 0.0f; 
mB[360] = 0.0f; 
mB[361] = 0.0f; 
mB[362] = 0.0f; 
mB[363] = 0.0f; 
mB[364] = 0.0f; 
mB[365] = 0.0f; 
mB[366] = 0.0f; 
mB[367] = 0.0f; 
mB[368] = 0.0f; 
mB[369] = 0.0f; 
mB[370] = 0.0f; 
mB[371] = 0.0f; 
mB[372] = 0.0f; 
mB[373] = 0.0f; 
mB[374] = 0.0f; 
mB[375] = 0.0f; 
mB[376] = 0.0f; 
mB[377] = 0.0f; 
mB[378] = 0.0f; 
mB[379] = 0.0f; 
mB[380] = 0.0f; 
mB[381] = 0.0f; 
mB[382] = (  -1.0f  * v_v33_amphi_fw   ) ; 
mB[383] = 0.0f; 
mB[384] = 0.0f; 
mB[385] = 0.0f; 
mB[386] = 0.0f; 
mB[387] = 0.0f; 
mB[388] = 0.0f; 
mB[389] = 0.0f; 
mB[390] = 0.0f; 
mB[391] = 0.0f; 
mB[392] = 0.0f; 
mB[393] = 0.0f; 
mB[394] = 0.0f; 
mB[395] = 0.0f; 
mB[396] = 0.0f; 
mB[397] = 0.0f; 
mB[398] = 0.0f; 
mB[399] = 0.0f; 
mB[400] = 0.0f; 
mB[401] = 0.0f; 
mB[402] = 0.0f; 
mB[403] = 0.0f; 
mB[404] = 0.0f; 
mB[405] = (  -1.0f  * v_v21_tca_fw   ) ; 
mB[406] = 0.0f; 
mB[407] = 0.0f; 
mB[408] = 0.0f; 
mB[409] = 0.0f; 
mB[410] = 0.0f; 
mB[411] = 0.0f; 
mB[412] = 0.0f; 
mB[413] = 0.0f; 
mB[414] = 0.0f; 
mB[415] = 0.0f; 
mB[416] = 0.0f; 
mB[417] = 0.0f; 
mB[418] = 0.0f; 
mB[419] = 0.0f; 
mB[420] = 0.0f; 
mB[421] = 0.0f; 
mB[422] = 0.0f; 
mB[423] = 0.0f; 
mB[424] = 0.0f; 
mB[425] = 0.0f; 
mB[426] = 0.0f; 
mB[427] = 0.0f; 
mB[428] = 0.0f; 
mB[429] = 0.0f; 
mB[430] = 0.0f; 
mB[431] = 0.0f; 
mB[432] = 0.0f; 
mB[433] = 0.0f; 
mB[434] = 0.0f; 
mB[435] = 0.0f; 
mB[436] = 0.0f; 
mB[437] = 0.0f; 
mB[438] = 0.0f; 
mB[439] = 0.0f; 
mB[440] = 0.0f; 
mB[441] = 0.0f; 
mB[442] = 0.0f; 
mB[443] = 0.0f; 
mB[444] = 0.0f; 
mB[445] = 0.0f; 
mB[446] = 0.0f; 
mB[447] = 0.0f; 
mB[448] = 0.0f; 
mB[449] = 0.0f; 
mB[450] = 0.0f; 
mB[451] = 0.0f; 
mB[452] = 0.0f; 
mB[453] = 0.0f; 
mB[454] = 0.0f; 
mB[455] = 0.0f; 
mB[456] = 0.0f; 
mB[457] = 0.0f; 
mB[458] = 0.0f; 
mB[459] = 0.0f; 
mB[460] = 0.0f; 
mB[461] = 0.0f; 
mB[462] = 0.0f; 
mB[463] = 0.0f; 
mB[464] = 0.0f; 
mB[465] = 0.0f; 
mB[466] = 0.0f; 
mB[467] = 0.0f; 
mB[468] = 0.0f; 
mB[469] = 0.0f; 
mB[470] = 0.0f; 
mB[471] = 0.0f; 
mB[472] = 0.0f; 
mB[473] = 0.0f; 
mB[474] = 0.0f; 
mB[475] = 0.0f; 
mB[476] = 0.0f; 
mB[477] = 0.0f; 
mB[478] = 0.0f; 
mB[479] = 0.0f; 
mB[480] = (  -1.0f  * v_v30_glyox_fw   ) ; 
mB[481] = 0.0f; 
mB[482] = 0.0f; 
mB[483] = 0.0f; 
mB[484] = 0.0f; 
mB[485] = 0.0f; 
mB[486] = 0.0f; 
mB[487] = 0.0f; 
mB[488] = 0.0f; 
mB[489] = 0.0f; 
mB[490] = 0.0f; 
mB[491] = 0.0f; 
mB[492] = 0.0f; 
mB[493] = 0.0f; 
mB[494] = 0.0f; 
mB[495] = 0.0f; 
mB[496] = 0.0f; 
mB[497] = 0.0f; 
mB[498] = 0.0f; 
mB[499] = 0.0f; 
mB[500] = 0.0f; 
mB[501] = 0.0f; 
mB[502] = 0.0f; 
mB[503] = 0.0f; 
mB[504] = 0.0f; 
mB[505] = 0.0f; 
mB[506] = 0.0f; 
mB[507] = 0.0f; 
mB[508] = 0.0f; 
mB[509] = 0.0f; 
mB[510] = 0.0f; 
mB[511] = (  -1.0f  * v_v14_ppp_bw   ) ; 
mB[512] = 0.0f; 
mB[513] = 0.0f; 
mB[514] = 0.0f; 
mB[515] = 0.0f; 
mB[516] = 0.0f; 
mB[517] = 0.0f; 
mB[518] = 0.0f; 
mB[519] = 0.0f; 
mB[520] = 0.0f; 
mB[521] = 0.0f; 
mB[522] = 0.0f; 
mB[523] = 0.0f; 
mB[524] = 0.0f; 
mB[525] = 0.0f; 
mB[526] = 0.0f; 
mB[527] = 0.0f; 
mB[528] = 0.0f; 
mB[529] = 0.0f; 
mB[530] = 0.0f; 
mB[531] = 0.0f; 
mB[532] = 0.0f; 
mB[533] = 0.0f; 
mB[534] = 0.0f; 
mB[535] = 0.0f; 
mB[536] = 0.0f; 
mB[537] = 0.0f; 
mB[538] = 0.0f; 
mB[539] = 0.0f; 
mB[540] = 0.0f; 
mB[541] = 0.0f; 
mB[542] = 0.0f; 
mB[543] = 0.0f; 
mB[544] = 0.0f; 
mB[545] = 0.0f; 
mB[546] = 0.0f; 
mB[547] = 0.0f; 
mB[548] = 0.0f; 
mB[549] = 0.0f; 
mB[550] = 0.0f; 
mB[551] = 0.0f; 
mB[552] = 0.0f; 
mB[553] = 0.0f; 
mB[554] = 0.0f; 
mB[555] = 0.0f; 
mB[556] = 0.0f; 
mB[557] = 0.0f; 
mB[558] = 0.0f; 
mB[559] = 0.0f; 
mB[560] = 0.0f; 
mB[561] = 0.0f; 
mB[562] = 0.0f; 
mB[563] = 0.0f; 
mB[564] = 0.0f; 
mB[565] = 0.0f; 
mB[566] = 0.0f; 
mB[567] = (  -1.0f  * v_v01_SX_Gluc_In_b   ) ; 
mB[568] = 0.0f; 
mB[569] = 0.0f; 
mB[570] = 0.0f; 
mB[571] = 0.0f; 
mB[572] = 0.0f; 
mB[573] = 0.0f; 
mB[574] = 0.0f; 
mB[575] = 0.0f; 
mB[576] = 0.0f; 
mB[577] = 0.0f; 
mB[578] = 0.0f; 
mB[579] = 0.0f; 
mB[580] = 0.0f; 
mB[581] = 0.0f; 
mB[582] = 0.0f; 
mB[583] = 0.0f; 
mB[584] = 0.0f; 
mB[585] = 0.0f; 
mB[586] = 0.0f; 
mB[587] = 0.0f; 
mB[588] = 0.0f; 
mB[589] = 0.0f; 
mB[590] = 0.0f; 
mB[591] = 0.0f; 
mB[592] = 0.0f; 
mB[593] = 0.0f; 
mB[594] = 0.0f; 
mB[595] = 0.0f; 
mB[596] = 0.0f; 
mB[597] = 0.0f; 
mB[598] = 0.0f; 
mB[599] = 0.0f; 
}
//----Init Y---------------------------------------------------------------------------
if(idx==2 && idy==0){
mY[0] = ( (  mr_Gluc_ext_4_5_6_M_0   )   ) ; 
mY[1] = ( (  mr_Glyox_1_2_M_0  * mr_AcCoA_2_M_0   )   ) ; 
mY[2] = ( (  mr_AcCoA_2_M_0  * mr_OAC_1_2_M_0   )   ) ; 
mY[3] = ( (  mr_AcCoA_1_2_M_0  * mr_OAC_2_M_0   )   ) ; 
mY[4] = ( (  mr_Gly_1_2_M_0  * mr_MEETHF_1_M_0   )   ) ; 
mY[5] = ( (  mr_TKC2_1_2_M_0  * mr_R5P_1_M_0   )   ) ; 
mY[6] = ( (  mr_AKG_3_4_M_0  * mr_CO2_1_M_0   )   ) ; 
mY[7] = ( (  mr_CO2_1_M_0  * mr_PEP_2_3_M_0   )   ) ; 
mY[8] = ( (  mr_AcCoA_2_M_0  * mr_OAC_2_3_M_0   )   ) ; 
mY[9] = ( (  mr_AcCoA_1_2_M_0  * mr_Glyox_2_M_0   )   ) ; 
mY[10] = ( (  mr_TKC2_1_2_M_0  * mr_E4P_1_M_0   )   ) ; 
mY[11] = ( (  mr_Gluc_ext_1_2_3_M_0   )   ) ; 
mY[12] = ( (  mr_Gluc_ext_4_5_6_M_1   )   ) ; 
mY[13] = ( (  mr_Glyox_1_2_M_0  * mr_AcCoA_2_M_1   )  +(  mr_Glyox_1_2_M_1  * mr_AcCoA_2_M_0   )   ) ; 
mY[14] = ( (  mr_AcCoA_2_M_0  * mr_OAC_1_2_M_1   )  +(  mr_AcCoA_2_M_1  * mr_OAC_1_2_M_0   )   ) ; 
mY[15] = ( (  mr_AcCoA_1_2_M_0  * mr_OAC_2_M_1   )  +(  mr_AcCoA_1_2_M_1  * mr_OAC_2_M_0   )   ) ; 
mY[16] = ( (  mr_Gly_1_2_M_0  * mr_MEETHF_1_M_1   )  +(  mr_Gly_1_2_M_1  * mr_MEETHF_1_M_0   )   ) ; 
mY[17] = ( (  mr_TKC2_1_2_M_0  * mr_R5P_1_M_1   )  +(  mr_TKC2_1_2_M_1  * mr_R5P_1_M_0   )   ) ; 
mY[18] = ( (  mr_AKG_3_4_M_0  * mr_CO2_1_M_1   )  +(  mr_AKG_3_4_M_1  * mr_CO2_1_M_0   )   ) ; 
mY[19] = ( (  mr_CO2_1_M_0  * mr_PEP_2_3_M_1   )  +(  mr_CO2_1_M_1  * mr_PEP_2_3_M_0   )   ) ; 
mY[20] = ( (  mr_AcCoA_2_M_0  * mr_OAC_2_3_M_1   )  +(  mr_AcCoA_2_M_1  * mr_OAC_2_3_M_0   )   ) ; 
mY[21] = ( (  mr_AcCoA_1_2_M_0  * mr_Glyox_2_M_1   )  +(  mr_AcCoA_1_2_M_1  * mr_Glyox_2_M_0   )   ) ; 
mY[22] = ( (  mr_TKC2_1_2_M_0  * mr_E4P_1_M_1   )  +(  mr_TKC2_1_2_M_1  * mr_E4P_1_M_0   )   ) ; 
mY[23] = ( (  mr_Gluc_ext_1_2_3_M_1   )   ) ; 
mY[24] = ( (  mr_Gluc_ext_4_5_6_M_2   )   ) ; 
mY[25] = ( (  mr_Glyox_1_2_M_1  * mr_AcCoA_2_M_1   )  +(  mr_Glyox_1_2_M_2  * mr_AcCoA_2_M_0   )   ) ; 
mY[26] = ( (  mr_AcCoA_2_M_0  * mr_OAC_1_2_M_2   )  +(  mr_AcCoA_2_M_1  * mr_OAC_1_2_M_1   )   ) ; 
mY[27] = ( (  mr_AcCoA_1_2_M_1  * mr_OAC_2_M_1   )  +(  mr_AcCoA_1_2_M_2  * mr_OAC_2_M_0   )   ) ; 
mY[28] = ( (  mr_Gly_1_2_M_1  * mr_MEETHF_1_M_1   )  +(  mr_Gly_1_2_M_2  * mr_MEETHF_1_M_0   )   ) ; 
mY[29] = ( (  mr_TKC2_1_2_M_1  * mr_R5P_1_M_1   )  +(  mr_TKC2_1_2_M_2  * mr_R5P_1_M_0   )   ) ; 
mY[30] = ( (  mr_AKG_3_4_M_1  * mr_CO2_1_M_1   )  +(  mr_AKG_3_4_M_2  * mr_CO2_1_M_0   )   ) ; 
mY[31] = ( (  mr_CO2_1_M_0  * mr_PEP_2_3_M_2   )  +(  mr_CO2_1_M_1  * mr_PEP_2_3_M_1   )   ) ; 
mY[32] = ( (  mr_AcCoA_2_M_0  * mr_OAC_2_3_M_2   )  +(  mr_AcCoA_2_M_1  * mr_OAC_2_3_M_1   )   ) ; 
mY[33] = ( (  mr_AcCoA_1_2_M_1  * mr_Glyox_2_M_1   )  +(  mr_AcCoA_1_2_M_2  * mr_Glyox_2_M_0   )   ) ; 
mY[34] = ( (  mr_TKC2_1_2_M_1  * mr_E4P_1_M_1   )  +(  mr_TKC2_1_2_M_2  * mr_E4P_1_M_0   )   ) ; 
mY[35] = ( (  mr_Gluc_ext_1_2_3_M_2   )   ) ; 
mY[36] = ( (  mr_Gluc_ext_4_5_6_M_3   )   ) ; 
mY[37] = ( (  mr_Glyox_1_2_M_2  * mr_AcCoA_2_M_1   )   ) ; 
mY[38] = ( (  mr_AcCoA_2_M_1  * mr_OAC_1_2_M_2   )   ) ; 
mY[39] = ( (  mr_AcCoA_1_2_M_2  * mr_OAC_2_M_1   )   ) ; 
mY[40] = ( (  mr_Gly_1_2_M_2  * mr_MEETHF_1_M_1   )   ) ; 
mY[41] = ( (  mr_TKC2_1_2_M_2  * mr_R5P_1_M_1   )   ) ; 
mY[42] = ( (  mr_AKG_3_4_M_2  * mr_CO2_1_M_1   )   ) ; 
mY[43] = ( (  mr_CO2_1_M_1  * mr_PEP_2_3_M_2   )   ) ; 
mY[44] = ( (  mr_AcCoA_2_M_1  * mr_OAC_2_3_M_2   )   ) ; 
mY[45] = ( (  mr_AcCoA_1_2_M_2  * mr_Glyox_2_M_1   )   ) ; 
mY[46] = ( (  mr_TKC2_1_2_M_2  * mr_E4P_1_M_1   )   ) ; 
mY[47] = ( (  mr_Gluc_ext_1_2_3_M_3   )   ) ; 
}
mAm = 50; 
mAn = 50; 
mBm = 50; 
mBn = 12; 
mYm = 12; 
mYn = 4; 
barrier(CLK_LOCAL_MEM_FENCE);

//------COMPUTE!-----------------------------------------------------------------------
//LU-DECOMPOSITION (in place): mA_L * mA = mA
if( idx<50 && idy<50 ){ mA_L[ idx+50*idy ] = (idx==idy)?1.0f:0.0f; }
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 0 / 49
if( idx==0 && idy > 0 && idy < 50 ){ 
  mA_L[ idy + 0 ] = mA[ idy + 0 ] / mA[ 0 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>0 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 0 ] * mA[0+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 1 / 49
if( idx==0 && idy > 1 && idy < 50 ){ 
  mA_L[ idy + 50 ] = mA[ idy + 50 ] / mA[ 51 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>1 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 50 ] * mA[1+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 2 / 49
if( idx==0 && idy > 2 && idy < 50 ){ 
  mA_L[ idy + 100 ] = mA[ idy + 100 ] / mA[ 102 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>2 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 100 ] * mA[2+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 3 / 49
if( idx==0 && idy > 3 && idy < 50 ){ 
  mA_L[ idy + 150 ] = mA[ idy + 150 ] / mA[ 153 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>3 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 150 ] * mA[3+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 4 / 49
if( idx==0 && idy > 4 && idy < 50 ){ 
  mA_L[ idy + 200 ] = mA[ idy + 200 ] / mA[ 204 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>4 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 200 ] * mA[4+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 5 / 49
if( idx==0 && idy > 5 && idy < 50 ){ 
  mA_L[ idy + 250 ] = mA[ idy + 250 ] / mA[ 255 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>5 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 250 ] * mA[5+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 6 / 49
if( idx==0 && idy > 6 && idy < 50 ){ 
  mA_L[ idy + 300 ] = mA[ idy + 300 ] / mA[ 306 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>6 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 300 ] * mA[6+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 7 / 49
if( idx==0 && idy > 7 && idy < 50 ){ 
  mA_L[ idy + 350 ] = mA[ idy + 350 ] / mA[ 357 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>7 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 350 ] * mA[7+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 8 / 49
if( idx==0 && idy > 8 && idy < 50 ){ 
  mA_L[ idy + 400 ] = mA[ idy + 400 ] / mA[ 408 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>8 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 400 ] * mA[8+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 9 / 49
if( idx==0 && idy > 9 && idy < 50 ){ 
  mA_L[ idy + 450 ] = mA[ idy + 450 ] / mA[ 459 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>9 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 450 ] * mA[9+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 10 / 49
if( idx==0 && idy > 10 && idy < 50 ){ 
  mA_L[ idy + 500 ] = mA[ idy + 500 ] / mA[ 510 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>10 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 500 ] * mA[10+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 11 / 49
if( idx==0 && idy > 11 && idy < 50 ){ 
  mA_L[ idy + 550 ] = mA[ idy + 550 ] / mA[ 561 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>11 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 550 ] * mA[11+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 12 / 49
if( idx==0 && idy > 12 && idy < 50 ){ 
  mA_L[ idy + 600 ] = mA[ idy + 600 ] / mA[ 612 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>12 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 600 ] * mA[12+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 13 / 49
if( idx==0 && idy > 13 && idy < 50 ){ 
  mA_L[ idy + 650 ] = mA[ idy + 650 ] / mA[ 663 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>13 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 650 ] * mA[13+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 14 / 49
if( idx==0 && idy > 14 && idy < 50 ){ 
  mA_L[ idy + 700 ] = mA[ idy + 700 ] / mA[ 714 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>14 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 700 ] * mA[14+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 15 / 49
if( idx==0 && idy > 15 && idy < 50 ){ 
  mA_L[ idy + 750 ] = mA[ idy + 750 ] / mA[ 765 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>15 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 750 ] * mA[15+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 16 / 49
if( idx==0 && idy > 16 && idy < 50 ){ 
  mA_L[ idy + 800 ] = mA[ idy + 800 ] / mA[ 816 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>16 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 800 ] * mA[16+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 17 / 49
if( idx==0 && idy > 17 && idy < 50 ){ 
  mA_L[ idy + 850 ] = mA[ idy + 850 ] / mA[ 867 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>17 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 850 ] * mA[17+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 18 / 49
if( idx==0 && idy > 18 && idy < 50 ){ 
  mA_L[ idy + 900 ] = mA[ idy + 900 ] / mA[ 918 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>18 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 900 ] * mA[18+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 19 / 49
if( idx==0 && idy > 19 && idy < 50 ){ 
  mA_L[ idy + 950 ] = mA[ idy + 950 ] / mA[ 969 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>19 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 950 ] * mA[19+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 20 / 49
if( idx==0 && idy > 20 && idy < 50 ){ 
  mA_L[ idy + 1000 ] = mA[ idy + 1000 ] / mA[ 1020 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>20 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1000 ] * mA[20+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 21 / 49
if( idx==0 && idy > 21 && idy < 50 ){ 
  mA_L[ idy + 1050 ] = mA[ idy + 1050 ] / mA[ 1071 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>21 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1050 ] * mA[21+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 22 / 49
if( idx==0 && idy > 22 && idy < 50 ){ 
  mA_L[ idy + 1100 ] = mA[ idy + 1100 ] / mA[ 1122 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>22 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1100 ] * mA[22+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 23 / 49
if( idx==0 && idy > 23 && idy < 50 ){ 
  mA_L[ idy + 1150 ] = mA[ idy + 1150 ] / mA[ 1173 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>23 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1150 ] * mA[23+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 24 / 49
if( idx==0 && idy > 24 && idy < 50 ){ 
  mA_L[ idy + 1200 ] = mA[ idy + 1200 ] / mA[ 1224 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>24 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1200 ] * mA[24+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 25 / 49
if( idx==0 && idy > 25 && idy < 50 ){ 
  mA_L[ idy + 1250 ] = mA[ idy + 1250 ] / mA[ 1275 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>25 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1250 ] * mA[25+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 26 / 49
if( idx==0 && idy > 26 && idy < 50 ){ 
  mA_L[ idy + 1300 ] = mA[ idy + 1300 ] / mA[ 1326 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>26 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1300 ] * mA[26+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 27 / 49
if( idx==0 && idy > 27 && idy < 50 ){ 
  mA_L[ idy + 1350 ] = mA[ idy + 1350 ] / mA[ 1377 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>27 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1350 ] * mA[27+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 28 / 49
if( idx==0 && idy > 28 && idy < 50 ){ 
  mA_L[ idy + 1400 ] = mA[ idy + 1400 ] / mA[ 1428 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>28 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1400 ] * mA[28+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 29 / 49
if( idx==0 && idy > 29 && idy < 50 ){ 
  mA_L[ idy + 1450 ] = mA[ idy + 1450 ] / mA[ 1479 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>29 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1450 ] * mA[29+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 30 / 49
if( idx==0 && idy > 30 && idy < 50 ){ 
  mA_L[ idy + 1500 ] = mA[ idy + 1500 ] / mA[ 1530 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>30 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1500 ] * mA[30+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 31 / 49
if( idx==0 && idy > 31 && idy < 50 ){ 
  mA_L[ idy + 1550 ] = mA[ idy + 1550 ] / mA[ 1581 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>31 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1550 ] * mA[31+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 32 / 49
if( idx==0 && idy > 32 && idy < 50 ){ 
  mA_L[ idy + 1600 ] = mA[ idy + 1600 ] / mA[ 1632 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>32 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1600 ] * mA[32+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 33 / 49
if( idx==0 && idy > 33 && idy < 50 ){ 
  mA_L[ idy + 1650 ] = mA[ idy + 1650 ] / mA[ 1683 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>33 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1650 ] * mA[33+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 34 / 49
if( idx==0 && idy > 34 && idy < 50 ){ 
  mA_L[ idy + 1700 ] = mA[ idy + 1700 ] / mA[ 1734 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>34 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1700 ] * mA[34+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 35 / 49
if( idx==0 && idy > 35 && idy < 50 ){ 
  mA_L[ idy + 1750 ] = mA[ idy + 1750 ] / mA[ 1785 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>35 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1750 ] * mA[35+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 36 / 49
if( idx==0 && idy > 36 && idy < 50 ){ 
  mA_L[ idy + 1800 ] = mA[ idy + 1800 ] / mA[ 1836 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>36 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1800 ] * mA[36+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 37 / 49
if( idx==0 && idy > 37 && idy < 50 ){ 
  mA_L[ idy + 1850 ] = mA[ idy + 1850 ] / mA[ 1887 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>37 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1850 ] * mA[37+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 38 / 49
if( idx==0 && idy > 38 && idy < 50 ){ 
  mA_L[ idy + 1900 ] = mA[ idy + 1900 ] / mA[ 1938 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>38 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1900 ] * mA[38+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 39 / 49
if( idx==0 && idy > 39 && idy < 50 ){ 
  mA_L[ idy + 1950 ] = mA[ idy + 1950 ] / mA[ 1989 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>39 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 1950 ] * mA[39+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 40 / 49
if( idx==0 && idy > 40 && idy < 50 ){ 
  mA_L[ idy + 2000 ] = mA[ idy + 2000 ] / mA[ 2040 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>40 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 2000 ] * mA[40+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 41 / 49
if( idx==0 && idy > 41 && idy < 50 ){ 
  mA_L[ idy + 2050 ] = mA[ idy + 2050 ] / mA[ 2091 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>41 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 2050 ] * mA[41+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 42 / 49
if( idx==0 && idy > 42 && idy < 50 ){ 
  mA_L[ idy + 2100 ] = mA[ idy + 2100 ] / mA[ 2142 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>42 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 2100 ] * mA[42+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 43 / 49
if( idx==0 && idy > 43 && idy < 50 ){ 
  mA_L[ idy + 2150 ] = mA[ idy + 2150 ] / mA[ 2193 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>43 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 2150 ] * mA[43+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 44 / 49
if( idx==0 && idy > 44 && idy < 50 ){ 
  mA_L[ idy + 2200 ] = mA[ idy + 2200 ] / mA[ 2244 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>44 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 2200 ] * mA[44+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 45 / 49
if( idx==0 && idy > 45 && idy < 50 ){ 
  mA_L[ idy + 2250 ] = mA[ idy + 2250 ] / mA[ 2295 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>45 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 2250 ] * mA[45+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 46 / 49
if( idx==0 && idy > 46 && idy < 50 ){ 
  mA_L[ idy + 2300 ] = mA[ idy + 2300 ] / mA[ 2346 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>46 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 2300 ] * mA[46+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 47 / 49
if( idx==0 && idy > 47 && idy < 50 ){ 
  mA_L[ idy + 2350 ] = mA[ idy + 2350 ] / mA[ 2397 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>47 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 2350 ] * mA[47+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 48 / 49
if( idx==0 && idy > 48 && idy < 50 ){ 
  mA_L[ idy + 2400 ] = mA[ idy + 2400 ] / mA[ 2448 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>48 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 2400 ] * mA[48+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 49 / 49
if( idx==0 && idy > 49 && idy < 50 ){ 
  mA_L[ idy + 2450 ] = mA[ idy + 2450 ] / mA[ 2499 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>49 && idx < 50 && idy < 50 ){ 
  mA[ idx + 50*idy ] -= mA_L[ idx + 2450 ] * mA[49+ idy*50 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION DONE!
//----------------------------------
//MATRIX MUL: mBY = mB * mY   
//Work item (idx,idy) compute mBY[idx,idy]   
if( idx < 50 && idy < 4 ) {  
float mulsum = 0.0f;
mulsum += mB[ 50*0 + idx ] * mY[ idy * 12 + 0 ];
mulsum += mB[ 50*1 + idx ] * mY[ idy * 12 + 1 ];
mulsum += mB[ 50*2 + idx ] * mY[ idy * 12 + 2 ];
mulsum += mB[ 50*3 + idx ] * mY[ idy * 12 + 3 ];
mulsum += mB[ 50*4 + idx ] * mY[ idy * 12 + 4 ];
mulsum += mB[ 50*5 + idx ] * mY[ idy * 12 + 5 ];
mulsum += mB[ 50*6 + idx ] * mY[ idy * 12 + 6 ];
mulsum += mB[ 50*7 + idx ] * mY[ idy * 12 + 7 ];
mulsum += mB[ 50*8 + idx ] * mY[ idy * 12 + 8 ];
mulsum += mB[ 50*9 + idx ] * mY[ idy * 12 + 9 ];
mulsum += mB[ 50*10 + idx ] * mY[ idy * 12 + 10 ];
mulsum += mB[ 50*11 + idx ] * mY[ idy * 12 + 11 ];
mBY[idx+50*idy] = mulsum;
}
//MATRIX MUL COMPLETE! 
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System
// Solve L System - Row 0
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  mBY[ 0 + 50*idy ] = (mBY[ 0 + 50*idy ] - sum_i ) / mA_L[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 1
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 1 + 0 ] ;
  mBY[ 1 + 50*idy ] = (mBY[ 1 + 50*idy ] - sum_i ) / mA_L[ 51 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 2
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 2 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 2 + 50 ] ;
  mBY[ 2 + 50*idy ] = (mBY[ 2 + 50*idy ] - sum_i ) / mA_L[ 102 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 3
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 3 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 3 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 3 + 100 ] ;
  mBY[ 3 + 50*idy ] = (mBY[ 3 + 50*idy ] - sum_i ) / mA_L[ 153 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 4
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 4 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 4 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 4 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 4 + 150 ] ;
  mBY[ 4 + 50*idy ] = (mBY[ 4 + 50*idy ] - sum_i ) / mA_L[ 204 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 5
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 5 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 5 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 5 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 5 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 5 + 200 ] ;
  mBY[ 5 + 50*idy ] = (mBY[ 5 + 50*idy ] - sum_i ) / mA_L[ 255 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 6
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 6 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 6 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 6 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 6 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 6 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 6 + 250 ] ;
  mBY[ 6 + 50*idy ] = (mBY[ 6 + 50*idy ] - sum_i ) / mA_L[ 306 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 7
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 7 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 7 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 7 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 7 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 7 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 7 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 7 + 300 ] ;
  mBY[ 7 + 50*idy ] = (mBY[ 7 + 50*idy ] - sum_i ) / mA_L[ 357 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 8
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 8 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 8 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 8 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 8 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 8 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 8 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 8 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 8 + 350 ] ;
  mBY[ 8 + 50*idy ] = (mBY[ 8 + 50*idy ] - sum_i ) / mA_L[ 408 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 9
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 9 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 9 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 9 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 9 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 9 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 9 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 9 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 9 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 9 + 400 ] ;
  mBY[ 9 + 50*idy ] = (mBY[ 9 + 50*idy ] - sum_i ) / mA_L[ 459 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 10
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 10 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 10 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 10 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 10 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 10 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 10 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 10 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 10 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 10 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 10 + 450 ] ;
  mBY[ 10 + 50*idy ] = (mBY[ 10 + 50*idy ] - sum_i ) / mA_L[ 510 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 11
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 11 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 11 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 11 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 11 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 11 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 11 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 11 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 11 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 11 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 11 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 11 + 500 ] ;
  mBY[ 11 + 50*idy ] = (mBY[ 11 + 50*idy ] - sum_i ) / mA_L[ 561 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 12
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 12 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 12 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 12 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 12 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 12 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 12 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 12 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 12 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 12 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 12 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 12 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 12 + 550 ] ;
  mBY[ 12 + 50*idy ] = (mBY[ 12 + 50*idy ] - sum_i ) / mA_L[ 612 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 13
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 13 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 13 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 13 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 13 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 13 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 13 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 13 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 13 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 13 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 13 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 13 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 13 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 13 + 600 ] ;
  mBY[ 13 + 50*idy ] = (mBY[ 13 + 50*idy ] - sum_i ) / mA_L[ 663 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 14
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 14 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 14 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 14 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 14 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 14 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 14 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 14 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 14 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 14 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 14 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 14 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 14 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 14 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 14 + 650 ] ;
  mBY[ 14 + 50*idy ] = (mBY[ 14 + 50*idy ] - sum_i ) / mA_L[ 714 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 15
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 15 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 15 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 15 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 15 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 15 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 15 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 15 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 15 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 15 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 15 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 15 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 15 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 15 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 15 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 15 + 700 ] ;
  mBY[ 15 + 50*idy ] = (mBY[ 15 + 50*idy ] - sum_i ) / mA_L[ 765 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 16
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 16 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 16 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 16 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 16 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 16 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 16 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 16 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 16 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 16 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 16 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 16 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 16 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 16 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 16 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 16 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 16 + 750 ] ;
  mBY[ 16 + 50*idy ] = (mBY[ 16 + 50*idy ] - sum_i ) / mA_L[ 816 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 17
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 17 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 17 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 17 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 17 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 17 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 17 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 17 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 17 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 17 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 17 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 17 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 17 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 17 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 17 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 17 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 17 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 17 + 800 ] ;
  mBY[ 17 + 50*idy ] = (mBY[ 17 + 50*idy ] - sum_i ) / mA_L[ 867 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 18
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 18 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 18 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 18 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 18 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 18 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 18 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 18 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 18 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 18 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 18 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 18 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 18 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 18 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 18 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 18 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 18 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 18 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 18 + 850 ] ;
  mBY[ 18 + 50*idy ] = (mBY[ 18 + 50*idy ] - sum_i ) / mA_L[ 918 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 19
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 19 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 19 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 19 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 19 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 19 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 19 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 19 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 19 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 19 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 19 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 19 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 19 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 19 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 19 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 19 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 19 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 19 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 19 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 19 + 900 ] ;
  mBY[ 19 + 50*idy ] = (mBY[ 19 + 50*idy ] - sum_i ) / mA_L[ 969 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 20
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 20 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 20 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 20 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 20 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 20 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 20 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 20 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 20 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 20 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 20 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 20 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 20 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 20 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 20 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 20 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 20 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 20 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 20 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 20 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 20 + 950 ] ;
  mBY[ 20 + 50*idy ] = (mBY[ 20 + 50*idy ] - sum_i ) / mA_L[ 1020 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 21
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 21 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 21 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 21 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 21 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 21 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 21 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 21 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 21 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 21 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 21 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 21 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 21 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 21 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 21 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 21 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 21 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 21 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 21 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 21 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 21 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 21 + 1000 ] ;
  mBY[ 21 + 50*idy ] = (mBY[ 21 + 50*idy ] - sum_i ) / mA_L[ 1071 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 22
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 22 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 22 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 22 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 22 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 22 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 22 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 22 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 22 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 22 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 22 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 22 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 22 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 22 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 22 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 22 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 22 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 22 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 22 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 22 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 22 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 22 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 22 + 1050 ] ;
  mBY[ 22 + 50*idy ] = (mBY[ 22 + 50*idy ] - sum_i ) / mA_L[ 1122 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 23
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 23 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 23 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 23 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 23 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 23 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 23 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 23 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 23 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 23 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 23 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 23 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 23 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 23 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 23 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 23 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 23 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 23 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 23 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 23 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 23 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 23 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 23 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 23 + 1100 ] ;
  mBY[ 23 + 50*idy ] = (mBY[ 23 + 50*idy ] - sum_i ) / mA_L[ 1173 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 24
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 24 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 24 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 24 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 24 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 24 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 24 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 24 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 24 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 24 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 24 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 24 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 24 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 24 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 24 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 24 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 24 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 24 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 24 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 24 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 24 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 24 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 24 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 24 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 24 + 1150 ] ;
  mBY[ 24 + 50*idy ] = (mBY[ 24 + 50*idy ] - sum_i ) / mA_L[ 1224 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 25
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 25 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 25 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 25 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 25 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 25 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 25 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 25 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 25 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 25 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 25 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 25 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 25 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 25 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 25 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 25 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 25 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 25 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 25 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 25 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 25 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 25 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 25 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 25 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 25 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 25 + 1200 ] ;
  mBY[ 25 + 50*idy ] = (mBY[ 25 + 50*idy ] - sum_i ) / mA_L[ 1275 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 26
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 26 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 26 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 26 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 26 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 26 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 26 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 26 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 26 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 26 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 26 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 26 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 26 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 26 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 26 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 26 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 26 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 26 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 26 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 26 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 26 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 26 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 26 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 26 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 26 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 26 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 26 + 1250 ] ;
  mBY[ 26 + 50*idy ] = (mBY[ 26 + 50*idy ] - sum_i ) / mA_L[ 1326 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 27
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 27 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 27 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 27 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 27 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 27 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 27 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 27 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 27 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 27 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 27 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 27 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 27 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 27 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 27 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 27 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 27 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 27 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 27 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 27 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 27 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 27 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 27 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 27 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 27 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 27 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 27 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 27 + 1300 ] ;
  mBY[ 27 + 50*idy ] = (mBY[ 27 + 50*idy ] - sum_i ) / mA_L[ 1377 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 28
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 28 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 28 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 28 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 28 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 28 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 28 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 28 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 28 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 28 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 28 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 28 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 28 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 28 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 28 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 28 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 28 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 28 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 28 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 28 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 28 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 28 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 28 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 28 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 28 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 28 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 28 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 28 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 28 + 1350 ] ;
  mBY[ 28 + 50*idy ] = (mBY[ 28 + 50*idy ] - sum_i ) / mA_L[ 1428 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 29
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 29 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 29 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 29 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 29 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 29 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 29 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 29 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 29 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 29 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 29 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 29 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 29 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 29 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 29 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 29 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 29 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 29 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 29 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 29 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 29 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 29 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 29 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 29 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 29 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 29 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 29 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 29 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 29 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 29 + 1400 ] ;
  mBY[ 29 + 50*idy ] = (mBY[ 29 + 50*idy ] - sum_i ) / mA_L[ 1479 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 30
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 30 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 30 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 30 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 30 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 30 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 30 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 30 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 30 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 30 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 30 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 30 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 30 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 30 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 30 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 30 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 30 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 30 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 30 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 30 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 30 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 30 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 30 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 30 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 30 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 30 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 30 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 30 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 30 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 30 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 30 + 1450 ] ;
  mBY[ 30 + 50*idy ] = (mBY[ 30 + 50*idy ] - sum_i ) / mA_L[ 1530 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 31
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 31 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 31 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 31 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 31 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 31 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 31 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 31 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 31 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 31 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 31 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 31 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 31 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 31 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 31 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 31 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 31 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 31 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 31 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 31 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 31 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 31 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 31 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 31 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 31 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 31 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 31 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 31 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 31 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 31 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 31 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 31 + 1500 ] ;
  mBY[ 31 + 50*idy ] = (mBY[ 31 + 50*idy ] - sum_i ) / mA_L[ 1581 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 32
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 32 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 32 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 32 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 32 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 32 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 32 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 32 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 32 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 32 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 32 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 32 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 32 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 32 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 32 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 32 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 32 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 32 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 32 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 32 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 32 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 32 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 32 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 32 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 32 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 32 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 32 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 32 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 32 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 32 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 32 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 32 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 32 + 1550 ] ;
  mBY[ 32 + 50*idy ] = (mBY[ 32 + 50*idy ] - sum_i ) / mA_L[ 1632 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 33
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 33 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 33 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 33 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 33 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 33 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 33 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 33 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 33 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 33 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 33 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 33 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 33 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 33 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 33 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 33 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 33 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 33 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 33 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 33 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 33 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 33 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 33 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 33 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 33 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 33 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 33 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 33 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 33 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 33 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 33 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 33 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 33 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 33 + 1600 ] ;
  mBY[ 33 + 50*idy ] = (mBY[ 33 + 50*idy ] - sum_i ) / mA_L[ 1683 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 34
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 34 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 34 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 34 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 34 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 34 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 34 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 34 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 34 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 34 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 34 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 34 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 34 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 34 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 34 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 34 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 34 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 34 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 34 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 34 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 34 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 34 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 34 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 34 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 34 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 34 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 34 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 34 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 34 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 34 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 34 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 34 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 34 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 34 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 34 + 1650 ] ;
  mBY[ 34 + 50*idy ] = (mBY[ 34 + 50*idy ] - sum_i ) / mA_L[ 1734 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 35
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 35 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 35 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 35 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 35 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 35 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 35 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 35 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 35 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 35 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 35 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 35 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 35 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 35 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 35 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 35 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 35 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 35 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 35 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 35 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 35 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 35 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 35 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 35 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 35 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 35 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 35 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 35 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 35 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 35 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 35 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 35 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 35 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 35 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 35 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA_L[ 35 + 1700 ] ;
  mBY[ 35 + 50*idy ] = (mBY[ 35 + 50*idy ] - sum_i ) / mA_L[ 1785 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 36
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 36 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 36 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 36 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 36 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 36 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 36 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 36 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 36 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 36 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 36 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 36 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 36 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 36 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 36 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 36 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 36 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 36 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 36 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 36 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 36 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 36 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 36 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 36 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 36 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 36 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 36 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 36 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 36 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 36 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 36 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 36 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 36 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 36 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 36 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA_L[ 36 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA_L[ 36 + 1750 ] ;
  mBY[ 36 + 50*idy ] = (mBY[ 36 + 50*idy ] - sum_i ) / mA_L[ 1836 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 37
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 37 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 37 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 37 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 37 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 37 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 37 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 37 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 37 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 37 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 37 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 37 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 37 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 37 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 37 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 37 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 37 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 37 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 37 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 37 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 37 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 37 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 37 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 37 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 37 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 37 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 37 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 37 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 37 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 37 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 37 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 37 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 37 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 37 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 37 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA_L[ 37 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA_L[ 37 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA_L[ 37 + 1800 ] ;
  mBY[ 37 + 50*idy ] = (mBY[ 37 + 50*idy ] - sum_i ) / mA_L[ 1887 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 38
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 38 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 38 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 38 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 38 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 38 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 38 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 38 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 38 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 38 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 38 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 38 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 38 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 38 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 38 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 38 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 38 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 38 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 38 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 38 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 38 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 38 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 38 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 38 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 38 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 38 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 38 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 38 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 38 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 38 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 38 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 38 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 38 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 38 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 38 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA_L[ 38 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA_L[ 38 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA_L[ 38 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA_L[ 38 + 1850 ] ;
  mBY[ 38 + 50*idy ] = (mBY[ 38 + 50*idy ] - sum_i ) / mA_L[ 1938 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 39
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 39 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 39 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 39 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 39 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 39 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 39 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 39 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 39 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 39 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 39 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 39 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 39 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 39 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 39 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 39 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 39 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 39 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 39 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 39 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 39 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 39 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 39 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 39 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 39 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 39 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 39 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 39 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 39 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 39 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 39 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 39 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 39 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 39 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 39 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA_L[ 39 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA_L[ 39 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA_L[ 39 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA_L[ 39 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA_L[ 39 + 1900 ] ;
  mBY[ 39 + 50*idy ] = (mBY[ 39 + 50*idy ] - sum_i ) / mA_L[ 1989 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 40
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 40 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 40 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 40 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 40 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 40 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 40 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 40 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 40 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 40 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 40 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 40 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 40 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 40 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 40 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 40 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 40 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 40 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 40 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 40 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 40 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 40 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 40 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 40 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 40 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 40 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 40 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 40 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 40 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 40 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 40 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 40 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 40 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 40 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 40 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA_L[ 40 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA_L[ 40 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA_L[ 40 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA_L[ 40 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA_L[ 40 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA_L[ 40 + 1950 ] ;
  mBY[ 40 + 50*idy ] = (mBY[ 40 + 50*idy ] - sum_i ) / mA_L[ 2040 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 41
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 41 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 41 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 41 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 41 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 41 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 41 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 41 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 41 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 41 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 41 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 41 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 41 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 41 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 41 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 41 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 41 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 41 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 41 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 41 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 41 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 41 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 41 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 41 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 41 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 41 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 41 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 41 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 41 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 41 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 41 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 41 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 41 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 41 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 41 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA_L[ 41 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA_L[ 41 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA_L[ 41 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA_L[ 41 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA_L[ 41 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA_L[ 41 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA_L[ 41 + 2000 ] ;
  mBY[ 41 + 50*idy ] = (mBY[ 41 + 50*idy ] - sum_i ) / mA_L[ 2091 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 42
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 42 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 42 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 42 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 42 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 42 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 42 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 42 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 42 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 42 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 42 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 42 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 42 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 42 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 42 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 42 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 42 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 42 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 42 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 42 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 42 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 42 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 42 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 42 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 42 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 42 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 42 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 42 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 42 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 42 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 42 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 42 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 42 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 42 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 42 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA_L[ 42 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA_L[ 42 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA_L[ 42 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA_L[ 42 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA_L[ 42 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA_L[ 42 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA_L[ 42 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA_L[ 42 + 2050 ] ;
  mBY[ 42 + 50*idy ] = (mBY[ 42 + 50*idy ] - sum_i ) / mA_L[ 2142 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 43
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 43 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 43 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 43 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 43 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 43 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 43 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 43 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 43 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 43 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 43 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 43 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 43 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 43 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 43 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 43 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 43 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 43 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 43 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 43 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 43 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 43 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 43 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 43 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 43 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 43 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 43 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 43 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 43 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 43 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 43 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 43 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 43 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 43 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 43 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA_L[ 43 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA_L[ 43 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA_L[ 43 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA_L[ 43 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA_L[ 43 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA_L[ 43 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA_L[ 43 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA_L[ 43 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA_L[ 43 + 2100 ] ;
  mBY[ 43 + 50*idy ] = (mBY[ 43 + 50*idy ] - sum_i ) / mA_L[ 2193 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 44
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 44 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 44 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 44 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 44 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 44 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 44 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 44 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 44 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 44 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 44 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 44 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 44 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 44 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 44 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 44 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 44 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 44 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 44 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 44 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 44 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 44 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 44 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 44 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 44 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 44 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 44 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 44 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 44 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 44 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 44 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 44 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 44 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 44 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 44 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA_L[ 44 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA_L[ 44 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA_L[ 44 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA_L[ 44 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA_L[ 44 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA_L[ 44 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA_L[ 44 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA_L[ 44 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA_L[ 44 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA_L[ 44 + 2150 ] ;
  mBY[ 44 + 50*idy ] = (mBY[ 44 + 50*idy ] - sum_i ) / mA_L[ 2244 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 45
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 45 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 45 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 45 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 45 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 45 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 45 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 45 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 45 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 45 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 45 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 45 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 45 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 45 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 45 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 45 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 45 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 45 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 45 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 45 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 45 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 45 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 45 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 45 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 45 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 45 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 45 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 45 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 45 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 45 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 45 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 45 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 45 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 45 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 45 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA_L[ 45 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA_L[ 45 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA_L[ 45 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA_L[ 45 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA_L[ 45 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA_L[ 45 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA_L[ 45 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA_L[ 45 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA_L[ 45 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA_L[ 45 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA_L[ 45 + 2200 ] ;
  mBY[ 45 + 50*idy ] = (mBY[ 45 + 50*idy ] - sum_i ) / mA_L[ 2295 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 46
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 46 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 46 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 46 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 46 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 46 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 46 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 46 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 46 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 46 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 46 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 46 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 46 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 46 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 46 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 46 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 46 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 46 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 46 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 46 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 46 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 46 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 46 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 46 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 46 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 46 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 46 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 46 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 46 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 46 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 46 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 46 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 46 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 46 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 46 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA_L[ 46 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA_L[ 46 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA_L[ 46 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA_L[ 46 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA_L[ 46 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA_L[ 46 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA_L[ 46 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA_L[ 46 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA_L[ 46 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA_L[ 46 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA_L[ 46 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA_L[ 46 + 2250 ] ;
  mBY[ 46 + 50*idy ] = (mBY[ 46 + 50*idy ] - sum_i ) / mA_L[ 2346 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 47
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 47 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 47 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 47 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 47 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 47 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 47 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 47 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 47 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 47 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 47 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 47 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 47 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 47 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 47 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 47 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 47 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 47 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 47 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 47 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 47 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 47 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 47 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 47 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 47 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 47 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 47 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 47 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 47 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 47 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 47 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 47 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 47 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 47 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 47 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA_L[ 47 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA_L[ 47 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA_L[ 47 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA_L[ 47 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA_L[ 47 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA_L[ 47 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA_L[ 47 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA_L[ 47 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA_L[ 47 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA_L[ 47 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA_L[ 47 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA_L[ 47 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA_L[ 47 + 2300 ] ;
  mBY[ 47 + 50*idy ] = (mBY[ 47 + 50*idy ] - sum_i ) / mA_L[ 2397 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 48
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 48 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 48 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 48 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 48 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 48 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 48 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 48 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 48 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 48 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 48 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 48 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 48 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 48 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 48 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 48 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 48 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 48 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 48 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 48 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 48 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 48 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 48 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 48 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 48 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 48 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 48 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 48 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 48 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 48 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 48 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 48 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 48 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 48 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 48 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA_L[ 48 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA_L[ 48 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA_L[ 48 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA_L[ 48 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA_L[ 48 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA_L[ 48 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA_L[ 48 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA_L[ 48 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA_L[ 48 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA_L[ 48 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA_L[ 48 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA_L[ 48 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA_L[ 48 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA_L[ 48 + 2350 ] ;
  mBY[ 48 + 50*idy ] = (mBY[ 48 + 50*idy ] - sum_i ) / mA_L[ 2448 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 49
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 50*idy ] * mA_L[ 49 + 0 ] ;
  sum_i += mBY[ 1 + 50*idy ] * mA_L[ 49 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA_L[ 49 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA_L[ 49 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA_L[ 49 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA_L[ 49 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA_L[ 49 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA_L[ 49 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA_L[ 49 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA_L[ 49 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA_L[ 49 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA_L[ 49 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA_L[ 49 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA_L[ 49 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA_L[ 49 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA_L[ 49 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA_L[ 49 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA_L[ 49 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA_L[ 49 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA_L[ 49 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA_L[ 49 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA_L[ 49 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA_L[ 49 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA_L[ 49 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA_L[ 49 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA_L[ 49 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA_L[ 49 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA_L[ 49 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA_L[ 49 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA_L[ 49 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA_L[ 49 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA_L[ 49 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA_L[ 49 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA_L[ 49 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA_L[ 49 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA_L[ 49 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA_L[ 49 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA_L[ 49 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA_L[ 49 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA_L[ 49 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA_L[ 49 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA_L[ 49 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA_L[ 49 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA_L[ 49 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA_L[ 49 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA_L[ 49 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA_L[ 49 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA_L[ 49 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA_L[ 49 + 2400 ] ;
  mBY[ 49 + 50*idy ] = (mBY[ 49 + 50*idy ] - sum_i ) / mA_L[ 2499 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System
// Solve U System - Row 49
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  mBY[ 49 + 50*idy ] = (mBY[ 49 + 50*idy ] - sum_i ) / mA[ 2499 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 48
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 48 + 2450 ] ;
  mBY[ 48 + 50*idy ] = (mBY[ 48 + 50*idy ] - sum_i ) / mA[ 2448 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 47
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 47 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 47 + 2450 ] ;
  mBY[ 47 + 50*idy ] = (mBY[ 47 + 50*idy ] - sum_i ) / mA[ 2397 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 46
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 46 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 46 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 46 + 2450 ] ;
  mBY[ 46 + 50*idy ] = (mBY[ 46 + 50*idy ] - sum_i ) / mA[ 2346 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 45
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 45 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 45 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 45 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 45 + 2450 ] ;
  mBY[ 45 + 50*idy ] = (mBY[ 45 + 50*idy ] - sum_i ) / mA[ 2295 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 44
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 44 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 44 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 44 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 44 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 44 + 2450 ] ;
  mBY[ 44 + 50*idy ] = (mBY[ 44 + 50*idy ] - sum_i ) / mA[ 2244 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 43
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 43 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 43 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 43 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 43 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 43 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 43 + 2450 ] ;
  mBY[ 43 + 50*idy ] = (mBY[ 43 + 50*idy ] - sum_i ) / mA[ 2193 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 42
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 42 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 42 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 42 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 42 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 42 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 42 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 42 + 2450 ] ;
  mBY[ 42 + 50*idy ] = (mBY[ 42 + 50*idy ] - sum_i ) / mA[ 2142 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 41
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 41 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 41 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 41 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 41 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 41 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 41 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 41 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 41 + 2450 ] ;
  mBY[ 41 + 50*idy ] = (mBY[ 41 + 50*idy ] - sum_i ) / mA[ 2091 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 40
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 40 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 40 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 40 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 40 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 40 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 40 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 40 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 40 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 40 + 2450 ] ;
  mBY[ 40 + 50*idy ] = (mBY[ 40 + 50*idy ] - sum_i ) / mA[ 2040 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 39
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 39 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 39 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 39 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 39 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 39 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 39 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 39 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 39 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 39 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 39 + 2450 ] ;
  mBY[ 39 + 50*idy ] = (mBY[ 39 + 50*idy ] - sum_i ) / mA[ 1989 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 38
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 38 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 38 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 38 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 38 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 38 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 38 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 38 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 38 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 38 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 38 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 38 + 2450 ] ;
  mBY[ 38 + 50*idy ] = (mBY[ 38 + 50*idy ] - sum_i ) / mA[ 1938 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 37
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 37 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 37 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 37 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 37 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 37 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 37 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 37 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 37 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 37 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 37 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 37 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 37 + 2450 ] ;
  mBY[ 37 + 50*idy ] = (mBY[ 37 + 50*idy ] - sum_i ) / mA[ 1887 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 36
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 36 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 36 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 36 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 36 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 36 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 36 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 36 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 36 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 36 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 36 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 36 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 36 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 36 + 2450 ] ;
  mBY[ 36 + 50*idy ] = (mBY[ 36 + 50*idy ] - sum_i ) / mA[ 1836 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 35
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 35 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 35 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 35 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 35 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 35 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 35 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 35 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 35 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 35 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 35 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 35 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 35 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 35 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 35 + 2450 ] ;
  mBY[ 35 + 50*idy ] = (mBY[ 35 + 50*idy ] - sum_i ) / mA[ 1785 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 34
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 34 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 34 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 34 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 34 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 34 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 34 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 34 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 34 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 34 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 34 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 34 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 34 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 34 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 34 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 34 + 2450 ] ;
  mBY[ 34 + 50*idy ] = (mBY[ 34 + 50*idy ] - sum_i ) / mA[ 1734 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 33
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 33 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 33 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 33 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 33 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 33 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 33 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 33 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 33 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 33 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 33 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 33 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 33 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 33 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 33 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 33 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 33 + 2450 ] ;
  mBY[ 33 + 50*idy ] = (mBY[ 33 + 50*idy ] - sum_i ) / mA[ 1683 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 32
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 32 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 32 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 32 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 32 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 32 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 32 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 32 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 32 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 32 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 32 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 32 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 32 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 32 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 32 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 32 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 32 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 32 + 2450 ] ;
  mBY[ 32 + 50*idy ] = (mBY[ 32 + 50*idy ] - sum_i ) / mA[ 1632 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 31
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 31 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 31 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 31 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 31 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 31 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 31 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 31 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 31 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 31 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 31 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 31 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 31 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 31 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 31 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 31 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 31 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 31 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 31 + 2450 ] ;
  mBY[ 31 + 50*idy ] = (mBY[ 31 + 50*idy ] - sum_i ) / mA[ 1581 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 30
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 30 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 30 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 30 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 30 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 30 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 30 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 30 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 30 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 30 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 30 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 30 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 30 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 30 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 30 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 30 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 30 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 30 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 30 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 30 + 2450 ] ;
  mBY[ 30 + 50*idy ] = (mBY[ 30 + 50*idy ] - sum_i ) / mA[ 1530 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 29
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 29 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 29 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 29 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 29 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 29 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 29 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 29 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 29 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 29 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 29 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 29 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 29 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 29 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 29 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 29 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 29 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 29 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 29 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 29 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 29 + 2450 ] ;
  mBY[ 29 + 50*idy ] = (mBY[ 29 + 50*idy ] - sum_i ) / mA[ 1479 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 28
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 28 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 28 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 28 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 28 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 28 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 28 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 28 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 28 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 28 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 28 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 28 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 28 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 28 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 28 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 28 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 28 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 28 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 28 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 28 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 28 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 28 + 2450 ] ;
  mBY[ 28 + 50*idy ] = (mBY[ 28 + 50*idy ] - sum_i ) / mA[ 1428 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 27
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 27 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 27 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 27 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 27 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 27 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 27 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 27 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 27 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 27 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 27 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 27 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 27 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 27 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 27 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 27 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 27 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 27 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 27 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 27 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 27 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 27 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 27 + 2450 ] ;
  mBY[ 27 + 50*idy ] = (mBY[ 27 + 50*idy ] - sum_i ) / mA[ 1377 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 26
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 26 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 26 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 26 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 26 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 26 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 26 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 26 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 26 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 26 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 26 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 26 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 26 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 26 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 26 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 26 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 26 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 26 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 26 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 26 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 26 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 26 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 26 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 26 + 2450 ] ;
  mBY[ 26 + 50*idy ] = (mBY[ 26 + 50*idy ] - sum_i ) / mA[ 1326 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 25
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 25 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 25 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 25 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 25 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 25 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 25 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 25 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 25 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 25 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 25 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 25 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 25 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 25 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 25 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 25 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 25 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 25 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 25 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 25 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 25 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 25 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 25 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 25 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 25 + 2450 ] ;
  mBY[ 25 + 50*idy ] = (mBY[ 25 + 50*idy ] - sum_i ) / mA[ 1275 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 24
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 24 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 24 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 24 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 24 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 24 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 24 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 24 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 24 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 24 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 24 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 24 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 24 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 24 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 24 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 24 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 24 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 24 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 24 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 24 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 24 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 24 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 24 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 24 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 24 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 24 + 2450 ] ;
  mBY[ 24 + 50*idy ] = (mBY[ 24 + 50*idy ] - sum_i ) / mA[ 1224 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 23
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 23 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 23 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 23 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 23 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 23 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 23 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 23 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 23 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 23 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 23 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 23 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 23 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 23 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 23 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 23 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 23 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 23 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 23 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 23 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 23 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 23 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 23 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 23 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 23 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 23 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 23 + 2450 ] ;
  mBY[ 23 + 50*idy ] = (mBY[ 23 + 50*idy ] - sum_i ) / mA[ 1173 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 22
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 22 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 22 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 22 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 22 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 22 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 22 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 22 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 22 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 22 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 22 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 22 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 22 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 22 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 22 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 22 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 22 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 22 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 22 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 22 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 22 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 22 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 22 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 22 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 22 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 22 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 22 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 22 + 2450 ] ;
  mBY[ 22 + 50*idy ] = (mBY[ 22 + 50*idy ] - sum_i ) / mA[ 1122 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 21
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 21 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 21 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 21 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 21 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 21 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 21 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 21 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 21 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 21 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 21 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 21 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 21 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 21 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 21 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 21 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 21 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 21 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 21 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 21 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 21 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 21 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 21 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 21 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 21 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 21 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 21 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 21 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 21 + 2450 ] ;
  mBY[ 21 + 50*idy ] = (mBY[ 21 + 50*idy ] - sum_i ) / mA[ 1071 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 20
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 20 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 20 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 20 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 20 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 20 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 20 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 20 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 20 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 20 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 20 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 20 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 20 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 20 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 20 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 20 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 20 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 20 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 20 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 20 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 20 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 20 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 20 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 20 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 20 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 20 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 20 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 20 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 20 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 20 + 2450 ] ;
  mBY[ 20 + 50*idy ] = (mBY[ 20 + 50*idy ] - sum_i ) / mA[ 1020 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 19
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 19 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 19 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 19 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 19 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 19 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 19 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 19 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 19 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 19 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 19 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 19 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 19 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 19 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 19 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 19 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 19 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 19 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 19 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 19 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 19 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 19 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 19 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 19 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 19 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 19 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 19 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 19 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 19 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 19 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 19 + 2450 ] ;
  mBY[ 19 + 50*idy ] = (mBY[ 19 + 50*idy ] - sum_i ) / mA[ 969 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 18
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 18 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 18 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 18 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 18 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 18 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 18 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 18 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 18 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 18 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 18 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 18 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 18 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 18 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 18 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 18 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 18 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 18 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 18 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 18 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 18 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 18 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 18 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 18 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 18 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 18 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 18 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 18 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 18 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 18 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 18 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 18 + 2450 ] ;
  mBY[ 18 + 50*idy ] = (mBY[ 18 + 50*idy ] - sum_i ) / mA[ 918 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 17
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 17 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 17 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 17 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 17 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 17 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 17 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 17 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 17 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 17 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 17 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 17 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 17 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 17 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 17 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 17 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 17 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 17 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 17 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 17 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 17 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 17 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 17 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 17 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 17 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 17 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 17 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 17 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 17 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 17 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 17 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 17 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 17 + 2450 ] ;
  mBY[ 17 + 50*idy ] = (mBY[ 17 + 50*idy ] - sum_i ) / mA[ 867 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 16
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 16 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 16 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 16 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 16 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 16 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 16 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 16 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 16 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 16 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 16 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 16 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 16 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 16 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 16 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 16 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 16 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 16 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 16 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 16 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 16 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 16 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 16 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 16 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 16 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 16 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 16 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 16 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 16 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 16 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 16 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 16 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 16 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 16 + 2450 ] ;
  mBY[ 16 + 50*idy ] = (mBY[ 16 + 50*idy ] - sum_i ) / mA[ 816 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 15
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 15 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 15 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 15 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 15 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 15 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 15 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 15 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 15 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 15 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 15 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 15 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 15 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 15 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 15 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 15 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 15 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 15 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 15 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 15 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 15 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 15 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 15 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 15 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 15 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 15 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 15 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 15 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 15 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 15 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 15 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 15 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 15 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 15 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 15 + 2450 ] ;
  mBY[ 15 + 50*idy ] = (mBY[ 15 + 50*idy ] - sum_i ) / mA[ 765 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 14
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 15 + 50*idy ] * mA[ 14 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 14 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 14 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 14 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 14 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 14 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 14 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 14 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 14 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 14 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 14 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 14 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 14 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 14 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 14 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 14 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 14 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 14 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 14 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 14 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 14 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 14 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 14 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 14 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 14 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 14 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 14 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 14 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 14 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 14 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 14 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 14 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 14 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 14 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 14 + 2450 ] ;
  mBY[ 14 + 50*idy ] = (mBY[ 14 + 50*idy ] - sum_i ) / mA[ 714 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 13
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 14 + 50*idy ] * mA[ 13 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA[ 13 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 13 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 13 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 13 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 13 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 13 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 13 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 13 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 13 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 13 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 13 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 13 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 13 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 13 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 13 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 13 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 13 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 13 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 13 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 13 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 13 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 13 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 13 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 13 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 13 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 13 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 13 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 13 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 13 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 13 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 13 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 13 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 13 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 13 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 13 + 2450 ] ;
  mBY[ 13 + 50*idy ] = (mBY[ 13 + 50*idy ] - sum_i ) / mA[ 663 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 12
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 13 + 50*idy ] * mA[ 12 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA[ 12 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA[ 12 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 12 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 12 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 12 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 12 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 12 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 12 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 12 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 12 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 12 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 12 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 12 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 12 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 12 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 12 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 12 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 12 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 12 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 12 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 12 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 12 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 12 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 12 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 12 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 12 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 12 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 12 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 12 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 12 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 12 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 12 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 12 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 12 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 12 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 12 + 2450 ] ;
  mBY[ 12 + 50*idy ] = (mBY[ 12 + 50*idy ] - sum_i ) / mA[ 612 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 11
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 12 + 50*idy ] * mA[ 11 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA[ 11 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA[ 11 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA[ 11 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 11 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 11 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 11 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 11 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 11 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 11 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 11 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 11 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 11 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 11 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 11 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 11 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 11 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 11 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 11 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 11 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 11 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 11 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 11 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 11 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 11 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 11 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 11 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 11 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 11 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 11 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 11 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 11 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 11 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 11 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 11 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 11 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 11 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 11 + 2450 ] ;
  mBY[ 11 + 50*idy ] = (mBY[ 11 + 50*idy ] - sum_i ) / mA[ 561 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 10
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 11 + 50*idy ] * mA[ 10 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA[ 10 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA[ 10 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA[ 10 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA[ 10 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 10 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 10 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 10 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 10 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 10 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 10 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 10 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 10 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 10 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 10 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 10 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 10 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 10 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 10 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 10 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 10 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 10 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 10 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 10 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 10 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 10 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 10 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 10 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 10 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 10 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 10 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 10 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 10 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 10 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 10 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 10 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 10 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 10 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 10 + 2450 ] ;
  mBY[ 10 + 50*idy ] = (mBY[ 10 + 50*idy ] - sum_i ) / mA[ 510 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 9
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 10 + 50*idy ] * mA[ 9 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA[ 9 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA[ 9 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA[ 9 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA[ 9 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA[ 9 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 9 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 9 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 9 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 9 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 9 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 9 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 9 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 9 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 9 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 9 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 9 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 9 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 9 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 9 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 9 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 9 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 9 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 9 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 9 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 9 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 9 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 9 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 9 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 9 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 9 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 9 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 9 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 9 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 9 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 9 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 9 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 9 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 9 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 9 + 2450 ] ;
  mBY[ 9 + 50*idy ] = (mBY[ 9 + 50*idy ] - sum_i ) / mA[ 459 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 8
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 9 + 50*idy ] * mA[ 8 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA[ 8 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA[ 8 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA[ 8 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA[ 8 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA[ 8 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA[ 8 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 8 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 8 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 8 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 8 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 8 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 8 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 8 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 8 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 8 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 8 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 8 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 8 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 8 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 8 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 8 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 8 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 8 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 8 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 8 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 8 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 8 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 8 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 8 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 8 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 8 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 8 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 8 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 8 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 8 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 8 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 8 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 8 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 8 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 8 + 2450 ] ;
  mBY[ 8 + 50*idy ] = (mBY[ 8 + 50*idy ] - sum_i ) / mA[ 408 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 7
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 8 + 50*idy ] * mA[ 7 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA[ 7 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA[ 7 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA[ 7 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA[ 7 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA[ 7 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA[ 7 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA[ 7 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 7 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 7 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 7 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 7 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 7 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 7 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 7 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 7 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 7 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 7 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 7 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 7 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 7 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 7 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 7 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 7 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 7 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 7 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 7 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 7 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 7 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 7 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 7 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 7 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 7 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 7 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 7 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 7 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 7 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 7 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 7 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 7 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 7 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 7 + 2450 ] ;
  mBY[ 7 + 50*idy ] = (mBY[ 7 + 50*idy ] - sum_i ) / mA[ 357 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 6
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 7 + 50*idy ] * mA[ 6 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA[ 6 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA[ 6 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA[ 6 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA[ 6 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA[ 6 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA[ 6 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA[ 6 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA[ 6 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 6 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 6 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 6 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 6 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 6 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 6 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 6 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 6 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 6 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 6 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 6 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 6 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 6 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 6 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 6 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 6 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 6 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 6 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 6 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 6 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 6 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 6 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 6 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 6 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 6 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 6 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 6 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 6 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 6 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 6 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 6 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 6 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 6 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 6 + 2450 ] ;
  mBY[ 6 + 50*idy ] = (mBY[ 6 + 50*idy ] - sum_i ) / mA[ 306 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 5
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 6 + 50*idy ] * mA[ 5 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA[ 5 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA[ 5 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA[ 5 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA[ 5 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA[ 5 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA[ 5 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA[ 5 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA[ 5 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA[ 5 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 5 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 5 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 5 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 5 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 5 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 5 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 5 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 5 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 5 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 5 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 5 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 5 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 5 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 5 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 5 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 5 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 5 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 5 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 5 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 5 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 5 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 5 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 5 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 5 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 5 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 5 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 5 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 5 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 5 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 5 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 5 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 5 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 5 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 5 + 2450 ] ;
  mBY[ 5 + 50*idy ] = (mBY[ 5 + 50*idy ] - sum_i ) / mA[ 255 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 4
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 5 + 50*idy ] * mA[ 4 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA[ 4 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA[ 4 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA[ 4 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA[ 4 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA[ 4 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA[ 4 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA[ 4 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA[ 4 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA[ 4 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA[ 4 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 4 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 4 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 4 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 4 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 4 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 4 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 4 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 4 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 4 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 4 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 4 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 4 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 4 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 4 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 4 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 4 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 4 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 4 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 4 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 4 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 4 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 4 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 4 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 4 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 4 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 4 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 4 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 4 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 4 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 4 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 4 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 4 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 4 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 4 + 2450 ] ;
  mBY[ 4 + 50*idy ] = (mBY[ 4 + 50*idy ] - sum_i ) / mA[ 204 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 3
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 4 + 50*idy ] * mA[ 3 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA[ 3 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA[ 3 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA[ 3 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA[ 3 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA[ 3 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA[ 3 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA[ 3 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA[ 3 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA[ 3 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA[ 3 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA[ 3 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 3 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 3 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 3 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 3 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 3 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 3 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 3 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 3 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 3 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 3 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 3 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 3 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 3 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 3 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 3 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 3 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 3 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 3 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 3 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 3 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 3 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 3 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 3 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 3 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 3 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 3 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 3 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 3 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 3 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 3 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 3 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 3 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 3 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 3 + 2450 ] ;
  mBY[ 3 + 50*idy ] = (mBY[ 3 + 50*idy ] - sum_i ) / mA[ 153 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 2
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 3 + 50*idy ] * mA[ 2 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA[ 2 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA[ 2 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA[ 2 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA[ 2 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA[ 2 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA[ 2 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA[ 2 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA[ 2 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA[ 2 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA[ 2 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA[ 2 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA[ 2 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 2 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 2 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 2 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 2 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 2 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 2 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 2 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 2 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 2 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 2 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 2 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 2 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 2 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 2 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 2 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 2 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 2 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 2 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 2 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 2 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 2 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 2 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 2 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 2 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 2 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 2 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 2 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 2 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 2 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 2 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 2 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 2 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 2 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 2 + 2450 ] ;
  mBY[ 2 + 50*idy ] = (mBY[ 2 + 50*idy ] - sum_i ) / mA[ 102 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 1
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 2 + 50*idy ] * mA[ 1 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA[ 1 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA[ 1 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA[ 1 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA[ 1 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA[ 1 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA[ 1 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA[ 1 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA[ 1 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA[ 1 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA[ 1 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA[ 1 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA[ 1 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA[ 1 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 1 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 1 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 1 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 1 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 1 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 1 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 1 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 1 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 1 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 1 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 1 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 1 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 1 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 1 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 1 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 1 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 1 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 1 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 1 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 1 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 1 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 1 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 1 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 1 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 1 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 1 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 1 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 1 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 1 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 1 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 1 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 1 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 1 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 1 + 2450 ] ;
  mBY[ 1 + 50*idy ] = (mBY[ 1 + 50*idy ] - sum_i ) / mA[ 51 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 0
if(idx==0 && idy<4 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 1 + 50*idy ] * mA[ 0 + 50 ] ;
  sum_i += mBY[ 2 + 50*idy ] * mA[ 0 + 100 ] ;
  sum_i += mBY[ 3 + 50*idy ] * mA[ 0 + 150 ] ;
  sum_i += mBY[ 4 + 50*idy ] * mA[ 0 + 200 ] ;
  sum_i += mBY[ 5 + 50*idy ] * mA[ 0 + 250 ] ;
  sum_i += mBY[ 6 + 50*idy ] * mA[ 0 + 300 ] ;
  sum_i += mBY[ 7 + 50*idy ] * mA[ 0 + 350 ] ;
  sum_i += mBY[ 8 + 50*idy ] * mA[ 0 + 400 ] ;
  sum_i += mBY[ 9 + 50*idy ] * mA[ 0 + 450 ] ;
  sum_i += mBY[ 10 + 50*idy ] * mA[ 0 + 500 ] ;
  sum_i += mBY[ 11 + 50*idy ] * mA[ 0 + 550 ] ;
  sum_i += mBY[ 12 + 50*idy ] * mA[ 0 + 600 ] ;
  sum_i += mBY[ 13 + 50*idy ] * mA[ 0 + 650 ] ;
  sum_i += mBY[ 14 + 50*idy ] * mA[ 0 + 700 ] ;
  sum_i += mBY[ 15 + 50*idy ] * mA[ 0 + 750 ] ;
  sum_i += mBY[ 16 + 50*idy ] * mA[ 0 + 800 ] ;
  sum_i += mBY[ 17 + 50*idy ] * mA[ 0 + 850 ] ;
  sum_i += mBY[ 18 + 50*idy ] * mA[ 0 + 900 ] ;
  sum_i += mBY[ 19 + 50*idy ] * mA[ 0 + 950 ] ;
  sum_i += mBY[ 20 + 50*idy ] * mA[ 0 + 1000 ] ;
  sum_i += mBY[ 21 + 50*idy ] * mA[ 0 + 1050 ] ;
  sum_i += mBY[ 22 + 50*idy ] * mA[ 0 + 1100 ] ;
  sum_i += mBY[ 23 + 50*idy ] * mA[ 0 + 1150 ] ;
  sum_i += mBY[ 24 + 50*idy ] * mA[ 0 + 1200 ] ;
  sum_i += mBY[ 25 + 50*idy ] * mA[ 0 + 1250 ] ;
  sum_i += mBY[ 26 + 50*idy ] * mA[ 0 + 1300 ] ;
  sum_i += mBY[ 27 + 50*idy ] * mA[ 0 + 1350 ] ;
  sum_i += mBY[ 28 + 50*idy ] * mA[ 0 + 1400 ] ;
  sum_i += mBY[ 29 + 50*idy ] * mA[ 0 + 1450 ] ;
  sum_i += mBY[ 30 + 50*idy ] * mA[ 0 + 1500 ] ;
  sum_i += mBY[ 31 + 50*idy ] * mA[ 0 + 1550 ] ;
  sum_i += mBY[ 32 + 50*idy ] * mA[ 0 + 1600 ] ;
  sum_i += mBY[ 33 + 50*idy ] * mA[ 0 + 1650 ] ;
  sum_i += mBY[ 34 + 50*idy ] * mA[ 0 + 1700 ] ;
  sum_i += mBY[ 35 + 50*idy ] * mA[ 0 + 1750 ] ;
  sum_i += mBY[ 36 + 50*idy ] * mA[ 0 + 1800 ] ;
  sum_i += mBY[ 37 + 50*idy ] * mA[ 0 + 1850 ] ;
  sum_i += mBY[ 38 + 50*idy ] * mA[ 0 + 1900 ] ;
  sum_i += mBY[ 39 + 50*idy ] * mA[ 0 + 1950 ] ;
  sum_i += mBY[ 40 + 50*idy ] * mA[ 0 + 2000 ] ;
  sum_i += mBY[ 41 + 50*idy ] * mA[ 0 + 2050 ] ;
  sum_i += mBY[ 42 + 50*idy ] * mA[ 0 + 2100 ] ;
  sum_i += mBY[ 43 + 50*idy ] * mA[ 0 + 2150 ] ;
  sum_i += mBY[ 44 + 50*idy ] * mA[ 0 + 2200 ] ;
  sum_i += mBY[ 45 + 50*idy ] * mA[ 0 + 2250 ] ;
  sum_i += mBY[ 46 + 50*idy ] * mA[ 0 + 2300 ] ;
  sum_i += mBY[ 47 + 50*idy ] * mA[ 0 + 2350 ] ;
  sum_i += mBY[ 48 + 50*idy ] * mA[ 0 + 2400 ] ;
  sum_i += mBY[ 49 + 50*idy ] * mA[ 0 + 2450 ] ;
  mBY[ 0 + 50*idy ] = (mBY[ 0 + 50*idy ] - sum_i ) / mA[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
//-------------------------------------------------------------------------------------
mr_AKG_2_3_4_M_0 = mBY[ 0 ];
mr_AKG_3_4_5_M_0 = mBY[ 1 ];
mr_Ala_1_2_3_M_0 = mBY[ 2 ];
mr_Asp_1_2_3_M_0 = mBY[ 3 ];
mr_Asp_2_3_4_M_0 = mBY[ 4 ];
mr_Cit_2_3_4_M_0 = mBY[ 5 ];
mr_Cit_3_4_5_M_0 = mBY[ 6 ];
mr_Cit_3_4_6_M_0 = mBY[ 7 ];
mr_Cys_1_2_3_M_0 = mBY[ 8 ];
mr_DHAP_1_2_3_M_0 = mBY[ 9 ];
mr_E4P_2_3_4_M_0 = mBY[ 10 ];
mr_F6P_1_2_3_M_0 = mBY[ 11 ];
mr_F6P_4_5_6_M_0 = mBY[ 12 ];
mr_FBP_1_2_3_M_0 = mBY[ 13 ];
mr_FBP_4_5_6_M_0 = mBY[ 14 ];
mr_Fum_1_2_3_M_0 = mBY[ 15 ];
mr_Fum_2_3_4_M_0 = mBY[ 16 ];
mr_G6P_1_2_3_M_0 = mBY[ 17 ];
mr_G6P_4_5_6_M_0 = mBY[ 18 ];
mr_GAP_1_2_3_M_0 = mBY[ 19 ];
mr_Gln_2_3_4_M_0 = mBY[ 20 ];
mr_Gln_3_4_5_M_0 = mBY[ 21 ];
mr_Glu_2_3_4_M_0 = mBY[ 22 ];
mr_Glu_3_4_5_M_0 = mBY[ 23 ];
mr_ICit_2_3_4_M_0 = mBY[ 24 ];
mr_ICit_3_4_5_M_0 = mBY[ 25 ];
mr_ICit_3_4_6_M_0 = mBY[ 26 ];
mr_KDPG_1_2_3_M_0 = mBY[ 27 ];
mr_KDPG_4_5_6_M_0 = mBY[ 28 ];
mr_Mal_1_2_3_M_0 = mBY[ 29 ];
mr_Mal_2_3_4_M_0 = mBY[ 30 ];
mr_OAC_1_2_3_M_0 = mBY[ 31 ];
mr_OAC_2_3_4_M_0 = mBY[ 32 ];
mr_PEP_1_2_3_M_0 = mBY[ 33 ];
mr_Pyr_1_2_3_M_0 = mBY[ 34 ];
mr_R5P_3_4_5_M_0 = mBY[ 35 ];
mr_Ru5P_3_4_5_M_0 = mBY[ 36 ];
mr_S7P_1_2_3_M_0 = mBY[ 37 ];
mr_S7P_5_6_7_M_0 = mBY[ 38 ];
mr_Ser_1_2_3_M_0 = mBY[ 39 ];
mr_Suc_1_2_3_M_0 = mBY[ 40 ];
mr_Suc_2_3_4_M_0 = mBY[ 41 ];
mr_SucCoA_1_2_3_M_0 = mBY[ 42 ];
mr_SucCoA_2_3_4_M_0 = mBY[ 43 ];
mr_TAC3_1_2_3_M_0 = mBY[ 44 ];
mr_Thr_2_3_4_M_0 = mBY[ 45 ];
mr_X3PG_1_2_3_M_0 = mBY[ 46 ];
mr_X5P_3_4_5_M_0 = mBY[ 47 ];
mr_X6PG_1_2_3_M_0 = mBY[ 48 ];
mr_X6PG_4_5_6_M_0 = mBY[ 49 ];
mr_AKG_2_3_4_M_1 = mBY[ 50 ];
mr_AKG_3_4_5_M_1 = mBY[ 51 ];
mr_Ala_1_2_3_M_1 = mBY[ 52 ];
mr_Asp_1_2_3_M_1 = mBY[ 53 ];
mr_Asp_2_3_4_M_1 = mBY[ 54 ];
mr_Cit_2_3_4_M_1 = mBY[ 55 ];
mr_Cit_3_4_5_M_1 = mBY[ 56 ];
mr_Cit_3_4_6_M_1 = mBY[ 57 ];
mr_Cys_1_2_3_M_1 = mBY[ 58 ];
mr_DHAP_1_2_3_M_1 = mBY[ 59 ];
mr_E4P_2_3_4_M_1 = mBY[ 60 ];
mr_F6P_1_2_3_M_1 = mBY[ 61 ];
mr_F6P_4_5_6_M_1 = mBY[ 62 ];
mr_FBP_1_2_3_M_1 = mBY[ 63 ];
mr_FBP_4_5_6_M_1 = mBY[ 64 ];
mr_Fum_1_2_3_M_1 = mBY[ 65 ];
mr_Fum_2_3_4_M_1 = mBY[ 66 ];
mr_G6P_1_2_3_M_1 = mBY[ 67 ];
mr_G6P_4_5_6_M_1 = mBY[ 68 ];
mr_GAP_1_2_3_M_1 = mBY[ 69 ];
mr_Gln_2_3_4_M_1 = mBY[ 70 ];
mr_Gln_3_4_5_M_1 = mBY[ 71 ];
mr_Glu_2_3_4_M_1 = mBY[ 72 ];
mr_Glu_3_4_5_M_1 = mBY[ 73 ];
mr_ICit_2_3_4_M_1 = mBY[ 74 ];
mr_ICit_3_4_5_M_1 = mBY[ 75 ];
mr_ICit_3_4_6_M_1 = mBY[ 76 ];
mr_KDPG_1_2_3_M_1 = mBY[ 77 ];
mr_KDPG_4_5_6_M_1 = mBY[ 78 ];
mr_Mal_1_2_3_M_1 = mBY[ 79 ];
mr_Mal_2_3_4_M_1 = mBY[ 80 ];
mr_OAC_1_2_3_M_1 = mBY[ 81 ];
mr_OAC_2_3_4_M_1 = mBY[ 82 ];
mr_PEP_1_2_3_M_1 = mBY[ 83 ];
mr_Pyr_1_2_3_M_1 = mBY[ 84 ];
mr_R5P_3_4_5_M_1 = mBY[ 85 ];
mr_Ru5P_3_4_5_M_1 = mBY[ 86 ];
mr_S7P_1_2_3_M_1 = mBY[ 87 ];
mr_S7P_5_6_7_M_1 = mBY[ 88 ];
mr_Ser_1_2_3_M_1 = mBY[ 89 ];
mr_Suc_1_2_3_M_1 = mBY[ 90 ];
mr_Suc_2_3_4_M_1 = mBY[ 91 ];
mr_SucCoA_1_2_3_M_1 = mBY[ 92 ];
mr_SucCoA_2_3_4_M_1 = mBY[ 93 ];
mr_TAC3_1_2_3_M_1 = mBY[ 94 ];
mr_Thr_2_3_4_M_1 = mBY[ 95 ];
mr_X3PG_1_2_3_M_1 = mBY[ 96 ];
mr_X5P_3_4_5_M_1 = mBY[ 97 ];
mr_X6PG_1_2_3_M_1 = mBY[ 98 ];
mr_X6PG_4_5_6_M_1 = mBY[ 99 ];
mr_AKG_2_3_4_M_2 = mBY[ 100 ];
mr_AKG_3_4_5_M_2 = mBY[ 101 ];
mr_Ala_1_2_3_M_2 = mBY[ 102 ];
mr_Asp_1_2_3_M_2 = mBY[ 103 ];
mr_Asp_2_3_4_M_2 = mBY[ 104 ];
mr_Cit_2_3_4_M_2 = mBY[ 105 ];
mr_Cit_3_4_5_M_2 = mBY[ 106 ];
mr_Cit_3_4_6_M_2 = mBY[ 107 ];
mr_Cys_1_2_3_M_2 = mBY[ 108 ];
mr_DHAP_1_2_3_M_2 = mBY[ 109 ];
mr_E4P_2_3_4_M_2 = mBY[ 110 ];
mr_F6P_1_2_3_M_2 = mBY[ 111 ];
mr_F6P_4_5_6_M_2 = mBY[ 112 ];
mr_FBP_1_2_3_M_2 = mBY[ 113 ];
mr_FBP_4_5_6_M_2 = mBY[ 114 ];
mr_Fum_1_2_3_M_2 = mBY[ 115 ];
mr_Fum_2_3_4_M_2 = mBY[ 116 ];
mr_G6P_1_2_3_M_2 = mBY[ 117 ];
mr_G6P_4_5_6_M_2 = mBY[ 118 ];
mr_GAP_1_2_3_M_2 = mBY[ 119 ];
mr_Gln_2_3_4_M_2 = mBY[ 120 ];
mr_Gln_3_4_5_M_2 = mBY[ 121 ];
mr_Glu_2_3_4_M_2 = mBY[ 122 ];
mr_Glu_3_4_5_M_2 = mBY[ 123 ];
mr_ICit_2_3_4_M_2 = mBY[ 124 ];
mr_ICit_3_4_5_M_2 = mBY[ 125 ];
mr_ICit_3_4_6_M_2 = mBY[ 126 ];
mr_KDPG_1_2_3_M_2 = mBY[ 127 ];
mr_KDPG_4_5_6_M_2 = mBY[ 128 ];
mr_Mal_1_2_3_M_2 = mBY[ 129 ];
mr_Mal_2_3_4_M_2 = mBY[ 130 ];
mr_OAC_1_2_3_M_2 = mBY[ 131 ];
mr_OAC_2_3_4_M_2 = mBY[ 132 ];
mr_PEP_1_2_3_M_2 = mBY[ 133 ];
mr_Pyr_1_2_3_M_2 = mBY[ 134 ];
mr_R5P_3_4_5_M_2 = mBY[ 135 ];
mr_Ru5P_3_4_5_M_2 = mBY[ 136 ];
mr_S7P_1_2_3_M_2 = mBY[ 137 ];
mr_S7P_5_6_7_M_2 = mBY[ 138 ];
mr_Ser_1_2_3_M_2 = mBY[ 139 ];
mr_Suc_1_2_3_M_2 = mBY[ 140 ];
mr_Suc_2_3_4_M_2 = mBY[ 141 ];
mr_SucCoA_1_2_3_M_2 = mBY[ 142 ];
mr_SucCoA_2_3_4_M_2 = mBY[ 143 ];
mr_TAC3_1_2_3_M_2 = mBY[ 144 ];
mr_Thr_2_3_4_M_2 = mBY[ 145 ];
mr_X3PG_1_2_3_M_2 = mBY[ 146 ];
mr_X5P_3_4_5_M_2 = mBY[ 147 ];
mr_X6PG_1_2_3_M_2 = mBY[ 148 ];
mr_X6PG_4_5_6_M_2 = mBY[ 149 ];
mr_AKG_2_3_4_M_3 = mBY[ 150 ];
mr_AKG_3_4_5_M_3 = mBY[ 151 ];
mr_Ala_1_2_3_M_3 = mBY[ 152 ];
mr_Asp_1_2_3_M_3 = mBY[ 153 ];
mr_Asp_2_3_4_M_3 = mBY[ 154 ];
mr_Cit_2_3_4_M_3 = mBY[ 155 ];
mr_Cit_3_4_5_M_3 = mBY[ 156 ];
mr_Cit_3_4_6_M_3 = mBY[ 157 ];
mr_Cys_1_2_3_M_3 = mBY[ 158 ];
mr_DHAP_1_2_3_M_3 = mBY[ 159 ];
mr_E4P_2_3_4_M_3 = mBY[ 160 ];
mr_F6P_1_2_3_M_3 = mBY[ 161 ];
mr_F6P_4_5_6_M_3 = mBY[ 162 ];
mr_FBP_1_2_3_M_3 = mBY[ 163 ];
mr_FBP_4_5_6_M_3 = mBY[ 164 ];
mr_Fum_1_2_3_M_3 = mBY[ 165 ];
mr_Fum_2_3_4_M_3 = mBY[ 166 ];
mr_G6P_1_2_3_M_3 = mBY[ 167 ];
mr_G6P_4_5_6_M_3 = mBY[ 168 ];
mr_GAP_1_2_3_M_3 = mBY[ 169 ];
mr_Gln_2_3_4_M_3 = mBY[ 170 ];
mr_Gln_3_4_5_M_3 = mBY[ 171 ];
mr_Glu_2_3_4_M_3 = mBY[ 172 ];
mr_Glu_3_4_5_M_3 = mBY[ 173 ];
mr_ICit_2_3_4_M_3 = mBY[ 174 ];
mr_ICit_3_4_5_M_3 = mBY[ 175 ];
mr_ICit_3_4_6_M_3 = mBY[ 176 ];
mr_KDPG_1_2_3_M_3 = mBY[ 177 ];
mr_KDPG_4_5_6_M_3 = mBY[ 178 ];
mr_Mal_1_2_3_M_3 = mBY[ 179 ];
mr_Mal_2_3_4_M_3 = mBY[ 180 ];
mr_OAC_1_2_3_M_3 = mBY[ 181 ];
mr_OAC_2_3_4_M_3 = mBY[ 182 ];
mr_PEP_1_2_3_M_3 = mBY[ 183 ];
mr_Pyr_1_2_3_M_3 = mBY[ 184 ];
mr_R5P_3_4_5_M_3 = mBY[ 185 ];
mr_Ru5P_3_4_5_M_3 = mBY[ 186 ];
mr_S7P_1_2_3_M_3 = mBY[ 187 ];
mr_S7P_5_6_7_M_3 = mBY[ 188 ];
mr_Ser_1_2_3_M_3 = mBY[ 189 ];
mr_Suc_1_2_3_M_3 = mBY[ 190 ];
mr_Suc_2_3_4_M_3 = mBY[ 191 ];
mr_SucCoA_1_2_3_M_3 = mBY[ 192 ];
mr_SucCoA_2_3_4_M_3 = mBY[ 193 ];
mr_TAC3_1_2_3_M_3 = mBY[ 194 ];
mr_Thr_2_3_4_M_3 = mBY[ 195 ];
mr_X3PG_1_2_3_M_3 = mBY[ 196 ];
mr_X5P_3_4_5_M_3 = mBY[ 197 ];
mr_X6PG_1_2_3_M_3 = mBY[ 198 ];
mr_X6PG_4_5_6_M_3 = mBY[ 199 ];
barrier(CLK_LOCAL_MEM_FENCE); 
//-------------------------------------------------------------------------------------
//----Init A---------------------------------------------------------------------------------
if(idx==0 && idy==0){
mA[0] = ( (  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v42_aa_fw   )  +(  -1.0f  * v_v55_aa_fw   )  +(  -1.0f  * v_v53_aa_fw   )  +(  -1.0f  * v_v54_aa_fw   )  +(  -1.0f  * v_v52_aa_fw   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v56_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v40_aa_fw   )  +(  -1.0f  * v_v23_tca_fw   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_b   )   ) ; 
mA[1] = 0.0f; 
mA[2] = 0.0f; 
mA[3] = 0.0f; 
mA[4] = 0.0f; 
mA[5] = 0.0f; 
mA[6] =  v_v36_aa_fw ; 
mA[7] =  v_v23_tca_bw ; 
mA[8] = 0.0f; 
mA[9] = 0.0f; 
mA[10] = 0.0f; 
mA[11] = 0.0f; 
mA[12] =  v_v24_tca_fw ; 
mA[13] = 0.0f; 
mA[14] = ( (  -1.0f  * v_v40_aa_fw   )   ) ; 
mA[15] = 0.0f; 
mA[16] = 0.0f; 
mA[17] = (  v_v58_aa_fw  + v_v39_aa_fw   ) ; 
mA[18] = 0.0f; 
mA[19] = 0.0f; 
mA[20] = 0.0f; 
mA[21] = 0.0f; 
mA[22] = 0.0f; 
mA[23] = 0.0f; 
mA[24] = 0.0f; 
mA[25] = 0.0f; 
mA[26] = 0.0f; 
mA[27] = 0.0f; 
mA[28] = ( (  -1.0f  * v_v22_tca_bw   )  +(  -1.0f  * v_v21_tca_fw   )   ) ; 
mA[29] = 0.0f; 
mA[30] = 0.0f; 
mA[31] = 0.0f; 
mA[32] = 0.0f; 
mA[33] =  v_v22_tca_fw ; 
mA[34] = 0.0f; 
mA[35] = 0.0f; 
mA[36] = 0.0f; 
mA[37] = 0.0f; 
mA[38] = 0.0f; 
mA[39] = 0.0f; 
mA[40] = 0.0f; 
mA[41] = 0.0f; 
mA[42] = ( (  -1.0f  * v_v22_tca_bw   )  +(  -1.0f  * v_v21_tca_fw   )   ) ; 
mA[43] = 0.0f; 
mA[44] = 0.0f; 
mA[45] = 0.0f; 
mA[46] = 0.0f; 
mA[47] =  v_v22_tca_fw ; 
mA[48] = 0.0f; 
mA[49] = 0.0f; 
mA[50] = 0.0f; 
mA[51] = 0.0f; 
mA[52] = 0.0f; 
mA[53] = 0.0f; 
mA[54] = 0.0f; 
mA[55] = 0.0f; 
mA[56] = ( (  -1.0f  * v_v27_tca_bw_b   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v27_tca_bw_a   )  +(  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v26_tca_fw_b   )  +(  -1.0f  * v_v26_tca_fw_a   )   ) ; 
mA[57] = 0.0f; 
mA[58] = 0.0f; 
mA[59] = 0.0f; 
mA[60] = 0.0f; 
mA[61] = (  v_v27_tca_fw_a  + v_v27_tca_fw_b   ) ; 
mA[62] = 0.0f; 
mA[63] = (  v_v26_tca_bw_a  + v_v26_tca_bw_b   ) ; 
mA[64] = 0.0f; 
mA[65] = (  v_v58_aa_fw  + v_v39_aa_fw   ) ; 
mA[66] = 0.0f; 
mA[67] = 0.0f; 
mA[68] = 0.0f; 
mA[69] = 0.0f; 
mA[70] = ( (  -1.0f  * v_v37_aa_fw   )   ) ; 
mA[71] =  v_v57_aa_fw ; 
mA[72] = 0.0f; 
mA[73] = 0.0f; 
mA[74] = 0.0f; 
mA[75] = 0.0f; 
mA[76] = 0.0f; 
mA[77] = 0.0f; 
mA[78] = (  v_v48_aa_fw_a  + v_v42_aa_fw  + v_v55_aa_fw  + v_v53_aa_fw  + v_v54_aa_fw  + v_v52_aa_fw  + v_v56_aa_fw  + v_v48_aa_fw_d  + v_v40_aa_fw  + v_v48_aa_fw_c  + v_v43_aa_fw  + v_v48_aa_fw_b   ) ; 
mA[79] = 0.0f; 
mA[80] = 0.0f; 
mA[81] = 0.0f; 
mA[82] = 0.0f; 
mA[83] =  v_v37_aa_fw ; 
mA[84] = ( (  -1.0f  * v_v36_aa_fw   )  +(  -1.0f  * v_v57_aa_fw   )   ) ; 
mA[85] = 0.0f; 
mA[86] = 0.0f; 
mA[87] = 0.0f; 
mA[88] = 0.0f; 
mA[89] = 0.0f; 
mA[90] = 0.0f; 
mA[91] =  v_v23_tca_fw ; 
mA[92] = 0.0f; 
mA[93] =  v_v22_tca_bw ; 
mA[94] = 0.0f; 
mA[95] = 0.0f; 
mA[96] = 0.0f; 
mA[97] = 0.0f; 
mA[98] = ( (  -1.0f  * v_v22_tca_fw   )  +(  -1.0f  * v_v23_tca_bw   )   ) ; 
mA[99] = 0.0f; 
mA[100] = 0.0f; 
mA[101] = 0.0f; 
mA[102] = 0.0f; 
mA[103] = 0.0f; 
mA[104] = 0.0f; 
mA[105] = 0.0f; 
mA[106] = 0.0f; 
mA[107] =  v_v22_tca_bw ; 
mA[108] = 0.0f; 
mA[109] = 0.0f; 
mA[110] = 0.0f; 
mA[111] = 0.0f; 
mA[112] = ( (  -1.0f  * v_v23_tca_bw   )  +(  -1.0f  * v_v22_tca_fw   )   ) ; 
mA[113] = 0.0f; 
mA[114] = 0.0f; 
mA[115] = (  v_v29_glyox_fw_b  + v_v29_glyox_fw_a   ) ; 
mA[116] = 0.0f; 
mA[117] = 0.0f; 
mA[118] = 0.0f; 
mA[119] = 0.0f; 
mA[120] = 0.0f; 
mA[121] = (  v_v27_tca_bw_b  + v_v27_tca_bw_a   ) ; 
mA[122] = 0.0f; 
mA[123] = 0.0f; 
mA[124] = 0.0f; 
mA[125] = 0.0f; 
mA[126] = ( (  -1.0f  * v_v28_tca_bw   )  +(  -1.0f  * v_v30_glyox_fw   )  +(  -1.0f  * v_v27_tca_fw_a   )  +(  -1.0f  * v_v27_tca_fw_b   )   ) ; 
mA[127] =  v_v28_tca_fw ; 
mA[128] = 0.0f; 
mA[129] = 0.0f; 
mA[130] = 0.0f; 
mA[131] =  v_v40_aa_fw ; 
mA[132] = 0.0f; 
mA[133] = 0.0f; 
mA[134] = 0.0f; 
mA[135] = 0.0f; 
mA[136] = 0.0f; 
mA[137] = 0.0f; 
mA[138] = 0.0f; 
mA[139] =  v_v28_tca_bw ; 
mA[140] = ( (  -1.0f  * v_v28_tca_fw   )  +(  -1.0f  * v_v33_amphi_fw   )   ) ; 
mA[141] = 0.0f; 
mA[142] = 0.0f; 
mA[143] = 0.0f; 
mA[144] = 0.0f; 
mA[145] = 0.0f; 
mA[146] = 0.0f; 
mA[147] = (  v_v26_tca_fw_b  + v_v26_tca_fw_a   ) ; 
mA[148] = 0.0f; 
mA[149] = 0.0f; 
mA[150] = 0.0f; 
mA[151] = 0.0f; 
mA[152] = 0.0f; 
mA[153] = 0.0f; 
mA[154] = ( (  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v29_glyox_fw_b   )  +(  -1.0f  * v_v25_tca_fw_b   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v51_aa_fw_b   )  +(  -1.0f  * v_v29_glyox_fw_a   )  +(  -1.0f  * v_v25_tca_fw_a   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v51_aa_fw_a   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v26_tca_bw_a   )  +(  -1.0f  * v_v26_tca_bw_b   )   ) ; 
mA[155] = (  v_v25_tca_bw_a  + v_v25_tca_bw_b   ) ; 
mA[156] = 0.0f; 
mA[157] = 0.0f; 
mA[158] = 0.0f; 
mA[159] = 0.0f; 
mA[160] = 0.0f; 
mA[161] = 0.0f; 
mA[162] = 0.0f; 
mA[163] = 0.0f; 
mA[164] = 0.0f; 
mA[165] = 0.0f; 
mA[166] = 0.0f; 
mA[167] = (  v_v48_aa_fw_d  + v_v25_tca_fw_b  + v_v48_aa_fw_a  + v_v51_aa_fw_b  + v_v25_tca_fw_a  + v_v48_aa_fw_c  + v_v51_aa_fw_a  + v_v48_aa_fw_b   ) ; 
mA[168] = ( (  -1.0f  * v_v24_tca_fw   )  +(  -1.0f  * v_v25_tca_bw_a   )  +(  -1.0f  * v_v25_tca_bw_b   )   ) ; 
}
//----Init B---------------------------------------------------------------------------
if(idx==1 && idy==0){
mB[0] = 0.0f; 
mB[1] = 0.0f; 
mB[2] = 0.0f; 
mB[3] = 0.0f; 
mB[4] = 0.0f; 
mB[5] = 0.0f; 
mB[6] = 0.0f; 
mB[7] = 0.0f; 
mB[8] = (  -1.0f  * v_v23_tca_bw   ) ; 
mB[9] = 0.0f; 
mB[10] = 0.0f; 
mB[11] = 0.0f; 
mB[12] = 0.0f; 
mB[13] = 0.0f; 
mB[14] = 0.0f; 
mB[15] = 0.0f; 
mB[16] = 0.0f; 
mB[17] = 0.0f; 
mB[18] = 0.0f; 
mB[19] = 0.0f; 
mB[20] = 0.0f; 
mB[21] = 0.0f; 
mB[22] = (  -1.0f  * v_v30_glyox_fw   ) ; 
mB[23] = 0.0f; 
mB[24] = 0.0f; 
mB[25] = 0.0f; 
mB[26] = 0.0f; 
mB[27] = 0.0f; 
mB[28] = 0.0f; 
mB[29] = (  -1.0f  * v_v21_tca_fw   ) ; 
mB[30] = 0.0f; 
mB[31] = 0.0f; 
mB[32] = 0.0f; 
mB[33] = 0.0f; 
mB[34] = 0.0f; 
mB[35] = 0.0f; 
mB[36] = 0.0f; 
mB[37] = 0.0f; 
mB[38] = 0.0f; 
mB[39] = 0.0f; 
mB[40] = 0.0f; 
mB[41] = (  -1.0f  * v_v21_tca_fw   ) ; 
mB[42] = 0.0f; 
mB[43] = 0.0f; 
mB[44] = 0.0f; 
mB[45] = 0.0f; 
mB[46] = 0.0f; 
mB[47] = 0.0f; 
mB[48] = 0.0f; 
mB[49] = 0.0f; 
mB[50] = 0.0f; 
mB[51] = 0.0f; 
mB[52] = 0.0f; 
mB[53] = 0.0f; 
mB[54] = 0.0f; 
mB[55] = 0.0f; 
mB[56] = 0.0f; 
mB[57] = 0.0f; 
mB[58] = 0.0f; 
mB[59] = 0.0f; 
mB[60] = 0.0f; 
mB[61] = 0.0f; 
mB[62] = (  -1.0f  * v_v33_amphi_fw   ) ; 
mB[63] = 0.0f; 
mB[64] = 0.0f; 
}
//----Init Y---------------------------------------------------------------------------
if(idx==2 && idy==0){
mY[0] = ( (  mr_AKG_3_4_5_M_0  * mr_CO2_1_M_0   )   ) ; 
mY[1] = ( (  mr_AcCoA_1_2_M_0  * mr_Glyox_1_2_M_0   )   ) ; 
mY[2] = ( (  mr_AcCoA_1_2_M_0  * mr_OAC_1_2_M_0   )   ) ; 
mY[3] = ( (  mr_AcCoA_1_2_M_0  * mr_OAC_2_3_M_0   )   ) ; 
mY[4] = ( (  mr_CO2_1_M_0  * mr_PEP_1_2_3_M_0   )   ) ; 
mY[5] = ( (  mr_AKG_3_4_5_M_0  * mr_CO2_1_M_1   )  +(  mr_AKG_3_4_5_M_1  * mr_CO2_1_M_0   )   ) ; 
mY[6] = ( (  mr_AcCoA_1_2_M_0  * mr_Glyox_1_2_M_1   )  +(  mr_AcCoA_1_2_M_1  * mr_Glyox_1_2_M_0   )   ) ; 
mY[7] = ( (  mr_AcCoA_1_2_M_0  * mr_OAC_1_2_M_1   )  +(  mr_AcCoA_1_2_M_1  * mr_OAC_1_2_M_0   )   ) ; 
mY[8] = ( (  mr_AcCoA_1_2_M_0  * mr_OAC_2_3_M_1   )  +(  mr_AcCoA_1_2_M_1  * mr_OAC_2_3_M_0   )   ) ; 
mY[9] = ( (  mr_CO2_1_M_0  * mr_PEP_1_2_3_M_1   )  +(  mr_CO2_1_M_1  * mr_PEP_1_2_3_M_0   )   ) ; 
mY[10] = ( (  mr_AKG_3_4_5_M_1  * mr_CO2_1_M_1   )  +(  mr_AKG_3_4_5_M_2  * mr_CO2_1_M_0   )   ) ; 
mY[11] = ( (  mr_AcCoA_1_2_M_0  * mr_Glyox_1_2_M_2   )  +(  mr_AcCoA_1_2_M_1  * mr_Glyox_1_2_M_1   )  +(  mr_AcCoA_1_2_M_2  * mr_Glyox_1_2_M_0   )   ) ; 
mY[12] = ( (  mr_AcCoA_1_2_M_0  * mr_OAC_1_2_M_2   )  +(  mr_AcCoA_1_2_M_1  * mr_OAC_1_2_M_1   )  +(  mr_AcCoA_1_2_M_2  * mr_OAC_1_2_M_0   )   ) ; 
mY[13] = ( (  mr_AcCoA_1_2_M_0  * mr_OAC_2_3_M_2   )  +(  mr_AcCoA_1_2_M_1  * mr_OAC_2_3_M_1   )  +(  mr_AcCoA_1_2_M_2  * mr_OAC_2_3_M_0   )   ) ; 
mY[14] = ( (  mr_CO2_1_M_0  * mr_PEP_1_2_3_M_2   )  +(  mr_CO2_1_M_1  * mr_PEP_1_2_3_M_1   )   ) ; 
mY[15] = ( (  mr_AKG_3_4_5_M_2  * mr_CO2_1_M_1   )  +(  mr_AKG_3_4_5_M_3  * mr_CO2_1_M_0   )   ) ; 
mY[16] = ( (  mr_AcCoA_1_2_M_1  * mr_Glyox_1_2_M_2   )  +(  mr_AcCoA_1_2_M_2  * mr_Glyox_1_2_M_1   )   ) ; 
mY[17] = ( (  mr_AcCoA_1_2_M_1  * mr_OAC_1_2_M_2   )  +(  mr_AcCoA_1_2_M_2  * mr_OAC_1_2_M_1   )   ) ; 
mY[18] = ( (  mr_AcCoA_1_2_M_1  * mr_OAC_2_3_M_2   )  +(  mr_AcCoA_1_2_M_2  * mr_OAC_2_3_M_1   )   ) ; 
mY[19] = ( (  mr_CO2_1_M_0  * mr_PEP_1_2_3_M_3   )  +(  mr_CO2_1_M_1  * mr_PEP_1_2_3_M_2   )   ) ; 
mY[20] = ( (  mr_AKG_3_4_5_M_3  * mr_CO2_1_M_1   )   ) ; 
mY[21] = ( (  mr_AcCoA_1_2_M_2  * mr_Glyox_1_2_M_2   )   ) ; 
mY[22] = ( (  mr_AcCoA_1_2_M_2  * mr_OAC_1_2_M_2   )   ) ; 
mY[23] = ( (  mr_AcCoA_1_2_M_2  * mr_OAC_2_3_M_2   )   ) ; 
mY[24] = ( (  mr_CO2_1_M_1  * mr_PEP_1_2_3_M_3   )   ) ; 
}
mAm = 13; 
mAn = 13; 
mBm = 13; 
mBn = 5; 
mYm = 5; 
mYn = 5; 
barrier(CLK_LOCAL_MEM_FENCE);

//------COMPUTE!-----------------------------------------------------------------------
//LU-DECOMPOSITION (in place): mA_L * mA = mA
if( idx<13 && idy<13 ){ mA_L[ idx+13*idy ] = (idx==idy)?1.0f:0.0f; }
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 0 / 12
if( idx==0 && idy > 0 && idy < 13 ){ 
  mA_L[ idy + 0 ] = mA[ idy + 0 ] / mA[ 0 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>0 && idx < 13 && idy < 13 ){ 
  mA[ idx + 13*idy ] -= mA_L[ idx + 0 ] * mA[0+ idy*13 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 1 / 12
if( idx==0 && idy > 1 && idy < 13 ){ 
  mA_L[ idy + 13 ] = mA[ idy + 13 ] / mA[ 14 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>1 && idx < 13 && idy < 13 ){ 
  mA[ idx + 13*idy ] -= mA_L[ idx + 13 ] * mA[1+ idy*13 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 2 / 12
if( idx==0 && idy > 2 && idy < 13 ){ 
  mA_L[ idy + 26 ] = mA[ idy + 26 ] / mA[ 28 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>2 && idx < 13 && idy < 13 ){ 
  mA[ idx + 13*idy ] -= mA_L[ idx + 26 ] * mA[2+ idy*13 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 3 / 12
if( idx==0 && idy > 3 && idy < 13 ){ 
  mA_L[ idy + 39 ] = mA[ idy + 39 ] / mA[ 42 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>3 && idx < 13 && idy < 13 ){ 
  mA[ idx + 13*idy ] -= mA_L[ idx + 39 ] * mA[3+ idy*13 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 4 / 12
if( idx==0 && idy > 4 && idy < 13 ){ 
  mA_L[ idy + 52 ] = mA[ idy + 52 ] / mA[ 56 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>4 && idx < 13 && idy < 13 ){ 
  mA[ idx + 13*idy ] -= mA_L[ idx + 52 ] * mA[4+ idy*13 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 5 / 12
if( idx==0 && idy > 5 && idy < 13 ){ 
  mA_L[ idy + 65 ] = mA[ idy + 65 ] / mA[ 70 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>5 && idx < 13 && idy < 13 ){ 
  mA[ idx + 13*idy ] -= mA_L[ idx + 65 ] * mA[5+ idy*13 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 6 / 12
if( idx==0 && idy > 6 && idy < 13 ){ 
  mA_L[ idy + 78 ] = mA[ idy + 78 ] / mA[ 84 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>6 && idx < 13 && idy < 13 ){ 
  mA[ idx + 13*idy ] -= mA_L[ idx + 78 ] * mA[6+ idy*13 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 7 / 12
if( idx==0 && idy > 7 && idy < 13 ){ 
  mA_L[ idy + 91 ] = mA[ idy + 91 ] / mA[ 98 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>7 && idx < 13 && idy < 13 ){ 
  mA[ idx + 13*idy ] -= mA_L[ idx + 91 ] * mA[7+ idy*13 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 8 / 12
if( idx==0 && idy > 8 && idy < 13 ){ 
  mA_L[ idy + 104 ] = mA[ idy + 104 ] / mA[ 112 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>8 && idx < 13 && idy < 13 ){ 
  mA[ idx + 13*idy ] -= mA_L[ idx + 104 ] * mA[8+ idy*13 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 9 / 12
if( idx==0 && idy > 9 && idy < 13 ){ 
  mA_L[ idy + 117 ] = mA[ idy + 117 ] / mA[ 126 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>9 && idx < 13 && idy < 13 ){ 
  mA[ idx + 13*idy ] -= mA_L[ idx + 117 ] * mA[9+ idy*13 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 10 / 12
if( idx==0 && idy > 10 && idy < 13 ){ 
  mA_L[ idy + 130 ] = mA[ idy + 130 ] / mA[ 140 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>10 && idx < 13 && idy < 13 ){ 
  mA[ idx + 13*idy ] -= mA_L[ idx + 130 ] * mA[10+ idy*13 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 11 / 12
if( idx==0 && idy > 11 && idy < 13 ){ 
  mA_L[ idy + 143 ] = mA[ idy + 143 ] / mA[ 154 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>11 && idx < 13 && idy < 13 ){ 
  mA[ idx + 13*idy ] -= mA_L[ idx + 143 ] * mA[11+ idy*13 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 12 / 12
if( idx==0 && idy > 12 && idy < 13 ){ 
  mA_L[ idy + 156 ] = mA[ idy + 156 ] / mA[ 168 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>12 && idx < 13 && idy < 13 ){ 
  mA[ idx + 13*idy ] -= mA_L[ idx + 156 ] * mA[12+ idy*13 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION DONE!
//----------------------------------
//MATRIX MUL: mBY = mB * mY   
//Work item (idx,idy) compute mBY[idx,idy]   
if( idx < 13 && idy < 5 ) {  
float mulsum = 0.0f;
mulsum += mB[ 13*0 + idx ] * mY[ idy * 5 + 0 ];
mulsum += mB[ 13*1 + idx ] * mY[ idy * 5 + 1 ];
mulsum += mB[ 13*2 + idx ] * mY[ idy * 5 + 2 ];
mulsum += mB[ 13*3 + idx ] * mY[ idy * 5 + 3 ];
mulsum += mB[ 13*4 + idx ] * mY[ idy * 5 + 4 ];
mBY[idx+13*idy] = mulsum;
}
//MATRIX MUL COMPLETE! 
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System
// Solve L System - Row 0
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  mBY[ 0 + 13*idy ] = (mBY[ 0 + 13*idy ] - sum_i ) / mA_L[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 1
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 13*idy ] * mA_L[ 1 + 0 ] ;
  mBY[ 1 + 13*idy ] = (mBY[ 1 + 13*idy ] - sum_i ) / mA_L[ 14 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 2
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 13*idy ] * mA_L[ 2 + 0 ] ;
  sum_i += mBY[ 1 + 13*idy ] * mA_L[ 2 + 13 ] ;
  mBY[ 2 + 13*idy ] = (mBY[ 2 + 13*idy ] - sum_i ) / mA_L[ 28 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 3
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 13*idy ] * mA_L[ 3 + 0 ] ;
  sum_i += mBY[ 1 + 13*idy ] * mA_L[ 3 + 13 ] ;
  sum_i += mBY[ 2 + 13*idy ] * mA_L[ 3 + 26 ] ;
  mBY[ 3 + 13*idy ] = (mBY[ 3 + 13*idy ] - sum_i ) / mA_L[ 42 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 4
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 13*idy ] * mA_L[ 4 + 0 ] ;
  sum_i += mBY[ 1 + 13*idy ] * mA_L[ 4 + 13 ] ;
  sum_i += mBY[ 2 + 13*idy ] * mA_L[ 4 + 26 ] ;
  sum_i += mBY[ 3 + 13*idy ] * mA_L[ 4 + 39 ] ;
  mBY[ 4 + 13*idy ] = (mBY[ 4 + 13*idy ] - sum_i ) / mA_L[ 56 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 5
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 13*idy ] * mA_L[ 5 + 0 ] ;
  sum_i += mBY[ 1 + 13*idy ] * mA_L[ 5 + 13 ] ;
  sum_i += mBY[ 2 + 13*idy ] * mA_L[ 5 + 26 ] ;
  sum_i += mBY[ 3 + 13*idy ] * mA_L[ 5 + 39 ] ;
  sum_i += mBY[ 4 + 13*idy ] * mA_L[ 5 + 52 ] ;
  mBY[ 5 + 13*idy ] = (mBY[ 5 + 13*idy ] - sum_i ) / mA_L[ 70 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 6
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 13*idy ] * mA_L[ 6 + 0 ] ;
  sum_i += mBY[ 1 + 13*idy ] * mA_L[ 6 + 13 ] ;
  sum_i += mBY[ 2 + 13*idy ] * mA_L[ 6 + 26 ] ;
  sum_i += mBY[ 3 + 13*idy ] * mA_L[ 6 + 39 ] ;
  sum_i += mBY[ 4 + 13*idy ] * mA_L[ 6 + 52 ] ;
  sum_i += mBY[ 5 + 13*idy ] * mA_L[ 6 + 65 ] ;
  mBY[ 6 + 13*idy ] = (mBY[ 6 + 13*idy ] - sum_i ) / mA_L[ 84 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 7
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 13*idy ] * mA_L[ 7 + 0 ] ;
  sum_i += mBY[ 1 + 13*idy ] * mA_L[ 7 + 13 ] ;
  sum_i += mBY[ 2 + 13*idy ] * mA_L[ 7 + 26 ] ;
  sum_i += mBY[ 3 + 13*idy ] * mA_L[ 7 + 39 ] ;
  sum_i += mBY[ 4 + 13*idy ] * mA_L[ 7 + 52 ] ;
  sum_i += mBY[ 5 + 13*idy ] * mA_L[ 7 + 65 ] ;
  sum_i += mBY[ 6 + 13*idy ] * mA_L[ 7 + 78 ] ;
  mBY[ 7 + 13*idy ] = (mBY[ 7 + 13*idy ] - sum_i ) / mA_L[ 98 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 8
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 13*idy ] * mA_L[ 8 + 0 ] ;
  sum_i += mBY[ 1 + 13*idy ] * mA_L[ 8 + 13 ] ;
  sum_i += mBY[ 2 + 13*idy ] * mA_L[ 8 + 26 ] ;
  sum_i += mBY[ 3 + 13*idy ] * mA_L[ 8 + 39 ] ;
  sum_i += mBY[ 4 + 13*idy ] * mA_L[ 8 + 52 ] ;
  sum_i += mBY[ 5 + 13*idy ] * mA_L[ 8 + 65 ] ;
  sum_i += mBY[ 6 + 13*idy ] * mA_L[ 8 + 78 ] ;
  sum_i += mBY[ 7 + 13*idy ] * mA_L[ 8 + 91 ] ;
  mBY[ 8 + 13*idy ] = (mBY[ 8 + 13*idy ] - sum_i ) / mA_L[ 112 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 9
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 13*idy ] * mA_L[ 9 + 0 ] ;
  sum_i += mBY[ 1 + 13*idy ] * mA_L[ 9 + 13 ] ;
  sum_i += mBY[ 2 + 13*idy ] * mA_L[ 9 + 26 ] ;
  sum_i += mBY[ 3 + 13*idy ] * mA_L[ 9 + 39 ] ;
  sum_i += mBY[ 4 + 13*idy ] * mA_L[ 9 + 52 ] ;
  sum_i += mBY[ 5 + 13*idy ] * mA_L[ 9 + 65 ] ;
  sum_i += mBY[ 6 + 13*idy ] * mA_L[ 9 + 78 ] ;
  sum_i += mBY[ 7 + 13*idy ] * mA_L[ 9 + 91 ] ;
  sum_i += mBY[ 8 + 13*idy ] * mA_L[ 9 + 104 ] ;
  mBY[ 9 + 13*idy ] = (mBY[ 9 + 13*idy ] - sum_i ) / mA_L[ 126 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 10
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 13*idy ] * mA_L[ 10 + 0 ] ;
  sum_i += mBY[ 1 + 13*idy ] * mA_L[ 10 + 13 ] ;
  sum_i += mBY[ 2 + 13*idy ] * mA_L[ 10 + 26 ] ;
  sum_i += mBY[ 3 + 13*idy ] * mA_L[ 10 + 39 ] ;
  sum_i += mBY[ 4 + 13*idy ] * mA_L[ 10 + 52 ] ;
  sum_i += mBY[ 5 + 13*idy ] * mA_L[ 10 + 65 ] ;
  sum_i += mBY[ 6 + 13*idy ] * mA_L[ 10 + 78 ] ;
  sum_i += mBY[ 7 + 13*idy ] * mA_L[ 10 + 91 ] ;
  sum_i += mBY[ 8 + 13*idy ] * mA_L[ 10 + 104 ] ;
  sum_i += mBY[ 9 + 13*idy ] * mA_L[ 10 + 117 ] ;
  mBY[ 10 + 13*idy ] = (mBY[ 10 + 13*idy ] - sum_i ) / mA_L[ 140 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 11
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 13*idy ] * mA_L[ 11 + 0 ] ;
  sum_i += mBY[ 1 + 13*idy ] * mA_L[ 11 + 13 ] ;
  sum_i += mBY[ 2 + 13*idy ] * mA_L[ 11 + 26 ] ;
  sum_i += mBY[ 3 + 13*idy ] * mA_L[ 11 + 39 ] ;
  sum_i += mBY[ 4 + 13*idy ] * mA_L[ 11 + 52 ] ;
  sum_i += mBY[ 5 + 13*idy ] * mA_L[ 11 + 65 ] ;
  sum_i += mBY[ 6 + 13*idy ] * mA_L[ 11 + 78 ] ;
  sum_i += mBY[ 7 + 13*idy ] * mA_L[ 11 + 91 ] ;
  sum_i += mBY[ 8 + 13*idy ] * mA_L[ 11 + 104 ] ;
  sum_i += mBY[ 9 + 13*idy ] * mA_L[ 11 + 117 ] ;
  sum_i += mBY[ 10 + 13*idy ] * mA_L[ 11 + 130 ] ;
  mBY[ 11 + 13*idy ] = (mBY[ 11 + 13*idy ] - sum_i ) / mA_L[ 154 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 12
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 13*idy ] * mA_L[ 12 + 0 ] ;
  sum_i += mBY[ 1 + 13*idy ] * mA_L[ 12 + 13 ] ;
  sum_i += mBY[ 2 + 13*idy ] * mA_L[ 12 + 26 ] ;
  sum_i += mBY[ 3 + 13*idy ] * mA_L[ 12 + 39 ] ;
  sum_i += mBY[ 4 + 13*idy ] * mA_L[ 12 + 52 ] ;
  sum_i += mBY[ 5 + 13*idy ] * mA_L[ 12 + 65 ] ;
  sum_i += mBY[ 6 + 13*idy ] * mA_L[ 12 + 78 ] ;
  sum_i += mBY[ 7 + 13*idy ] * mA_L[ 12 + 91 ] ;
  sum_i += mBY[ 8 + 13*idy ] * mA_L[ 12 + 104 ] ;
  sum_i += mBY[ 9 + 13*idy ] * mA_L[ 12 + 117 ] ;
  sum_i += mBY[ 10 + 13*idy ] * mA_L[ 12 + 130 ] ;
  sum_i += mBY[ 11 + 13*idy ] * mA_L[ 12 + 143 ] ;
  mBY[ 12 + 13*idy ] = (mBY[ 12 + 13*idy ] - sum_i ) / mA_L[ 168 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System
// Solve U System - Row 12
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  mBY[ 12 + 13*idy ] = (mBY[ 12 + 13*idy ] - sum_i ) / mA[ 168 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 11
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 12 + 13*idy ] * mA[ 11 + 156 ] ;
  mBY[ 11 + 13*idy ] = (mBY[ 11 + 13*idy ] - sum_i ) / mA[ 154 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 10
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 11 + 13*idy ] * mA[ 10 + 143 ] ;
  sum_i += mBY[ 12 + 13*idy ] * mA[ 10 + 156 ] ;
  mBY[ 10 + 13*idy ] = (mBY[ 10 + 13*idy ] - sum_i ) / mA[ 140 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 9
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 10 + 13*idy ] * mA[ 9 + 130 ] ;
  sum_i += mBY[ 11 + 13*idy ] * mA[ 9 + 143 ] ;
  sum_i += mBY[ 12 + 13*idy ] * mA[ 9 + 156 ] ;
  mBY[ 9 + 13*idy ] = (mBY[ 9 + 13*idy ] - sum_i ) / mA[ 126 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 8
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 9 + 13*idy ] * mA[ 8 + 117 ] ;
  sum_i += mBY[ 10 + 13*idy ] * mA[ 8 + 130 ] ;
  sum_i += mBY[ 11 + 13*idy ] * mA[ 8 + 143 ] ;
  sum_i += mBY[ 12 + 13*idy ] * mA[ 8 + 156 ] ;
  mBY[ 8 + 13*idy ] = (mBY[ 8 + 13*idy ] - sum_i ) / mA[ 112 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 7
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 8 + 13*idy ] * mA[ 7 + 104 ] ;
  sum_i += mBY[ 9 + 13*idy ] * mA[ 7 + 117 ] ;
  sum_i += mBY[ 10 + 13*idy ] * mA[ 7 + 130 ] ;
  sum_i += mBY[ 11 + 13*idy ] * mA[ 7 + 143 ] ;
  sum_i += mBY[ 12 + 13*idy ] * mA[ 7 + 156 ] ;
  mBY[ 7 + 13*idy ] = (mBY[ 7 + 13*idy ] - sum_i ) / mA[ 98 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 6
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 7 + 13*idy ] * mA[ 6 + 91 ] ;
  sum_i += mBY[ 8 + 13*idy ] * mA[ 6 + 104 ] ;
  sum_i += mBY[ 9 + 13*idy ] * mA[ 6 + 117 ] ;
  sum_i += mBY[ 10 + 13*idy ] * mA[ 6 + 130 ] ;
  sum_i += mBY[ 11 + 13*idy ] * mA[ 6 + 143 ] ;
  sum_i += mBY[ 12 + 13*idy ] * mA[ 6 + 156 ] ;
  mBY[ 6 + 13*idy ] = (mBY[ 6 + 13*idy ] - sum_i ) / mA[ 84 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 5
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 6 + 13*idy ] * mA[ 5 + 78 ] ;
  sum_i += mBY[ 7 + 13*idy ] * mA[ 5 + 91 ] ;
  sum_i += mBY[ 8 + 13*idy ] * mA[ 5 + 104 ] ;
  sum_i += mBY[ 9 + 13*idy ] * mA[ 5 + 117 ] ;
  sum_i += mBY[ 10 + 13*idy ] * mA[ 5 + 130 ] ;
  sum_i += mBY[ 11 + 13*idy ] * mA[ 5 + 143 ] ;
  sum_i += mBY[ 12 + 13*idy ] * mA[ 5 + 156 ] ;
  mBY[ 5 + 13*idy ] = (mBY[ 5 + 13*idy ] - sum_i ) / mA[ 70 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 4
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 5 + 13*idy ] * mA[ 4 + 65 ] ;
  sum_i += mBY[ 6 + 13*idy ] * mA[ 4 + 78 ] ;
  sum_i += mBY[ 7 + 13*idy ] * mA[ 4 + 91 ] ;
  sum_i += mBY[ 8 + 13*idy ] * mA[ 4 + 104 ] ;
  sum_i += mBY[ 9 + 13*idy ] * mA[ 4 + 117 ] ;
  sum_i += mBY[ 10 + 13*idy ] * mA[ 4 + 130 ] ;
  sum_i += mBY[ 11 + 13*idy ] * mA[ 4 + 143 ] ;
  sum_i += mBY[ 12 + 13*idy ] * mA[ 4 + 156 ] ;
  mBY[ 4 + 13*idy ] = (mBY[ 4 + 13*idy ] - sum_i ) / mA[ 56 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 3
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 4 + 13*idy ] * mA[ 3 + 52 ] ;
  sum_i += mBY[ 5 + 13*idy ] * mA[ 3 + 65 ] ;
  sum_i += mBY[ 6 + 13*idy ] * mA[ 3 + 78 ] ;
  sum_i += mBY[ 7 + 13*idy ] * mA[ 3 + 91 ] ;
  sum_i += mBY[ 8 + 13*idy ] * mA[ 3 + 104 ] ;
  sum_i += mBY[ 9 + 13*idy ] * mA[ 3 + 117 ] ;
  sum_i += mBY[ 10 + 13*idy ] * mA[ 3 + 130 ] ;
  sum_i += mBY[ 11 + 13*idy ] * mA[ 3 + 143 ] ;
  sum_i += mBY[ 12 + 13*idy ] * mA[ 3 + 156 ] ;
  mBY[ 3 + 13*idy ] = (mBY[ 3 + 13*idy ] - sum_i ) / mA[ 42 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 2
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 3 + 13*idy ] * mA[ 2 + 39 ] ;
  sum_i += mBY[ 4 + 13*idy ] * mA[ 2 + 52 ] ;
  sum_i += mBY[ 5 + 13*idy ] * mA[ 2 + 65 ] ;
  sum_i += mBY[ 6 + 13*idy ] * mA[ 2 + 78 ] ;
  sum_i += mBY[ 7 + 13*idy ] * mA[ 2 + 91 ] ;
  sum_i += mBY[ 8 + 13*idy ] * mA[ 2 + 104 ] ;
  sum_i += mBY[ 9 + 13*idy ] * mA[ 2 + 117 ] ;
  sum_i += mBY[ 10 + 13*idy ] * mA[ 2 + 130 ] ;
  sum_i += mBY[ 11 + 13*idy ] * mA[ 2 + 143 ] ;
  sum_i += mBY[ 12 + 13*idy ] * mA[ 2 + 156 ] ;
  mBY[ 2 + 13*idy ] = (mBY[ 2 + 13*idy ] - sum_i ) / mA[ 28 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 1
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 2 + 13*idy ] * mA[ 1 + 26 ] ;
  sum_i += mBY[ 3 + 13*idy ] * mA[ 1 + 39 ] ;
  sum_i += mBY[ 4 + 13*idy ] * mA[ 1 + 52 ] ;
  sum_i += mBY[ 5 + 13*idy ] * mA[ 1 + 65 ] ;
  sum_i += mBY[ 6 + 13*idy ] * mA[ 1 + 78 ] ;
  sum_i += mBY[ 7 + 13*idy ] * mA[ 1 + 91 ] ;
  sum_i += mBY[ 8 + 13*idy ] * mA[ 1 + 104 ] ;
  sum_i += mBY[ 9 + 13*idy ] * mA[ 1 + 117 ] ;
  sum_i += mBY[ 10 + 13*idy ] * mA[ 1 + 130 ] ;
  sum_i += mBY[ 11 + 13*idy ] * mA[ 1 + 143 ] ;
  sum_i += mBY[ 12 + 13*idy ] * mA[ 1 + 156 ] ;
  mBY[ 1 + 13*idy ] = (mBY[ 1 + 13*idy ] - sum_i ) / mA[ 14 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 0
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 1 + 13*idy ] * mA[ 0 + 13 ] ;
  sum_i += mBY[ 2 + 13*idy ] * mA[ 0 + 26 ] ;
  sum_i += mBY[ 3 + 13*idy ] * mA[ 0 + 39 ] ;
  sum_i += mBY[ 4 + 13*idy ] * mA[ 0 + 52 ] ;
  sum_i += mBY[ 5 + 13*idy ] * mA[ 0 + 65 ] ;
  sum_i += mBY[ 6 + 13*idy ] * mA[ 0 + 78 ] ;
  sum_i += mBY[ 7 + 13*idy ] * mA[ 0 + 91 ] ;
  sum_i += mBY[ 8 + 13*idy ] * mA[ 0 + 104 ] ;
  sum_i += mBY[ 9 + 13*idy ] * mA[ 0 + 117 ] ;
  sum_i += mBY[ 10 + 13*idy ] * mA[ 0 + 130 ] ;
  sum_i += mBY[ 11 + 13*idy ] * mA[ 0 + 143 ] ;
  sum_i += mBY[ 12 + 13*idy ] * mA[ 0 + 156 ] ;
  mBY[ 0 + 13*idy ] = (mBY[ 0 + 13*idy ] - sum_i ) / mA[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
//-------------------------------------------------------------------------------------
mr_AKG_2_3_4_5_M_0 = mBY[ 0 ];
mr_Asp_1_2_3_4_M_0 = mBY[ 1 ];
mr_Cit_2_3_4_5_M_0 = mBY[ 2 ];
mr_Cit_3_4_5_6_M_0 = mBY[ 3 ];
mr_Fum_1_2_3_4_M_0 = mBY[ 4 ];
mr_Gln_2_3_4_5_M_0 = mBY[ 5 ];
mr_Glu_2_3_4_5_M_0 = mBY[ 6 ];
mr_ICit_2_3_4_5_M_0 = mBY[ 7 ];
mr_ICit_3_4_5_6_M_0 = mBY[ 8 ];
mr_Mal_1_2_3_4_M_0 = mBY[ 9 ];
mr_OAC_1_2_3_4_M_0 = mBY[ 10 ];
mr_Suc_1_2_3_4_M_0 = mBY[ 11 ];
mr_SucCoA_1_2_3_4_M_0 = mBY[ 12 ];
mr_AKG_2_3_4_5_M_1 = mBY[ 13 ];
mr_Asp_1_2_3_4_M_1 = mBY[ 14 ];
mr_Cit_2_3_4_5_M_1 = mBY[ 15 ];
mr_Cit_3_4_5_6_M_1 = mBY[ 16 ];
mr_Fum_1_2_3_4_M_1 = mBY[ 17 ];
mr_Gln_2_3_4_5_M_1 = mBY[ 18 ];
mr_Glu_2_3_4_5_M_1 = mBY[ 19 ];
mr_ICit_2_3_4_5_M_1 = mBY[ 20 ];
mr_ICit_3_4_5_6_M_1 = mBY[ 21 ];
mr_Mal_1_2_3_4_M_1 = mBY[ 22 ];
mr_OAC_1_2_3_4_M_1 = mBY[ 23 ];
mr_Suc_1_2_3_4_M_1 = mBY[ 24 ];
mr_SucCoA_1_2_3_4_M_1 = mBY[ 25 ];
mr_AKG_2_3_4_5_M_2 = mBY[ 26 ];
mr_Asp_1_2_3_4_M_2 = mBY[ 27 ];
mr_Cit_2_3_4_5_M_2 = mBY[ 28 ];
mr_Cit_3_4_5_6_M_2 = mBY[ 29 ];
mr_Fum_1_2_3_4_M_2 = mBY[ 30 ];
mr_Gln_2_3_4_5_M_2 = mBY[ 31 ];
mr_Glu_2_3_4_5_M_2 = mBY[ 32 ];
mr_ICit_2_3_4_5_M_2 = mBY[ 33 ];
mr_ICit_3_4_5_6_M_2 = mBY[ 34 ];
mr_Mal_1_2_3_4_M_2 = mBY[ 35 ];
mr_OAC_1_2_3_4_M_2 = mBY[ 36 ];
mr_Suc_1_2_3_4_M_2 = mBY[ 37 ];
mr_SucCoA_1_2_3_4_M_2 = mBY[ 38 ];
mr_AKG_2_3_4_5_M_3 = mBY[ 39 ];
mr_Asp_1_2_3_4_M_3 = mBY[ 40 ];
mr_Cit_2_3_4_5_M_3 = mBY[ 41 ];
mr_Cit_3_4_5_6_M_3 = mBY[ 42 ];
mr_Fum_1_2_3_4_M_3 = mBY[ 43 ];
mr_Gln_2_3_4_5_M_3 = mBY[ 44 ];
mr_Glu_2_3_4_5_M_3 = mBY[ 45 ];
mr_ICit_2_3_4_5_M_3 = mBY[ 46 ];
mr_ICit_3_4_5_6_M_3 = mBY[ 47 ];
mr_Mal_1_2_3_4_M_3 = mBY[ 48 ];
mr_OAC_1_2_3_4_M_3 = mBY[ 49 ];
mr_Suc_1_2_3_4_M_3 = mBY[ 50 ];
mr_SucCoA_1_2_3_4_M_3 = mBY[ 51 ];
mr_AKG_2_3_4_5_M_4 = mBY[ 52 ];
mr_Asp_1_2_3_4_M_4 = mBY[ 53 ];
mr_Cit_2_3_4_5_M_4 = mBY[ 54 ];
mr_Cit_3_4_5_6_M_4 = mBY[ 55 ];
mr_Fum_1_2_3_4_M_4 = mBY[ 56 ];
mr_Gln_2_3_4_5_M_4 = mBY[ 57 ];
mr_Glu_2_3_4_5_M_4 = mBY[ 58 ];
mr_ICit_2_3_4_5_M_4 = mBY[ 59 ];
mr_ICit_3_4_5_6_M_4 = mBY[ 60 ];
mr_Mal_1_2_3_4_M_4 = mBY[ 61 ];
mr_OAC_1_2_3_4_M_4 = mBY[ 62 ];
mr_Suc_1_2_3_4_M_4 = mBY[ 63 ];
mr_SucCoA_1_2_3_4_M_4 = mBY[ 64 ];
barrier(CLK_LOCAL_MEM_FENCE); 
//-------------------------------------------------------------------------------------
//----Init A---------------------------------------------------------------------------------
if(idx==0 && idy==0){
mA[0] = ( (  -1.0f  * v_v14_ppp_fw   )  +(  -1.0f  * v_v17_ppp_fw   )   ) ; 
mA[1] =  v_v14_ppp_bw ; 
mA[2] = 0.0f; 
mA[3] = 0.0f; 
mA[4] = 0.0f; 
mA[5] =  v_v17_ppp_bw ; 
mA[6] = 0.0f; 
mA[7] = 0.0f; 
mA[8] =  v_v14_ppp_fw ; 
mA[9] = ( (  -1.0f  * v_v14_ppp_bw   )  +(  -1.0f  * v_v02_glyc_fw   )  +(  -1.0f  * v_v16_ppp_bw   )   ) ; 
mA[10] =  v_v02_glyc_bw ; 
mA[11] = 0.0f; 
mA[12] = 0.0f; 
mA[13] = 0.0f; 
mA[14] = 0.0f; 
mA[15] = 0.0f; 
mA[16] = 0.0f; 
mA[17] =  v_v02_glyc_fw ; 
mA[18] = ( (  -1.0f  * v_v02_glyc_bw   )  +(  -1.0f  * v_v01_SX_Gluc_In_b   )   ) ; 
mA[19] = 0.0f; 
mA[20] = 0.0f; 
mA[21] = 0.0f; 
mA[22] = 0.0f; 
mA[23] =  v_v09_ppp_fw ; 
mA[24] = 0.0f; 
mA[25] = 0.0f; 
mA[26] = 0.0f; 
mA[27] = ( (  -1.0f  * v_v15_ppp_fw   )  +(  -1.0f  * v_v12_ppp_fw   )   ) ; 
mA[28] =  v_v12_ppp_bw ; 
mA[29] =  v_v15_ppp_bw ; 
mA[30] = 0.0f; 
mA[31] = 0.0f; 
mA[32] = 0.0f; 
mA[33] = 0.0f; 
mA[34] = 0.0f; 
mA[35] =  v_v12_ppp_fw ; 
mA[36] = ( (  -1.0f  * v_v12_ppp_bw   )  +(  -1.0f  * v_v11_ppp_bw   )  +(  -1.0f  * v_v10_ppp_fw   )   ) ; 
mA[37] = 0.0f; 
mA[38] =  v_v11_ppp_fw ; 
mA[39] = 0.0f; 
mA[40] =  v_v17_ppp_fw ; 
mA[41] = 0.0f; 
mA[42] = 0.0f; 
mA[43] =  v_v15_ppp_fw ; 
mA[44] = 0.0f; 
mA[45] = ( (  -1.0f  * v_v17_ppp_bw   )  +(  -1.0f  * v_v15_ppp_bw   )   ) ; 
mA[46] = 0.0f; 
mA[47] = 0.0f; 
mA[48] = 0.0f; 
mA[49] = 0.0f; 
mA[50] = 0.0f; 
mA[51] = 0.0f; 
mA[52] =  v_v11_ppp_bw ; 
mA[53] = 0.0f; 
mA[54] = ( (  -1.0f  * v_v11_ppp_fw   )  +(  -1.0f  * v_v13_ppp_bw   )   ) ; 
mA[55] = 0.0f; 
mA[56] = 0.0f; 
mA[57] = 0.0f; 
mA[58] = 0.0f; 
mA[59] = 0.0f; 
mA[60] =  v_v10_ppp_fw ; 
mA[61] = 0.0f; 
mA[62] = 0.0f; 
mA[63] = ( (  -1.0f  * v_v09_ppp_fw   )   ) ; 
}
//----Init B---------------------------------------------------------------------------
if(idx==1 && idy==0){
mB[0] = 0.0f; 
mB[1] = 0.0f; 
mB[2] = (  -1.0f  * v_v01_SX_Gluc_In_b   ) ; 
mB[3] = 0.0f; 
mB[4] = 0.0f; 
mB[5] = 0.0f; 
mB[6] = 0.0f; 
mB[7] = 0.0f; 
mB[8] = 0.0f; 
mB[9] = 0.0f; 
mB[10] = 0.0f; 
mB[11] = 0.0f; 
mB[12] = 0.0f; 
mB[13] = 0.0f; 
mB[14] = (  -1.0f  * v_v13_ppp_bw   ) ; 
mB[15] = 0.0f; 
mB[16] = 0.0f; 
mB[17] = (  -1.0f  * v_v16_ppp_bw   ) ; 
mB[18] = 0.0f; 
mB[19] = 0.0f; 
mB[20] = 0.0f; 
mB[21] = 0.0f; 
mB[22] = 0.0f; 
mB[23] = 0.0f; 
}
//----Init Y---------------------------------------------------------------------------
if(idx==2 && idy==0){
mY[0] = ( (  mr_Gluc_ext_3_4_5_6_M_0   )   ) ; 
mY[1] = ( (  mr_GAP_1_2_3_M_0  * mr_TKC2_2_M_0   )   ) ; 
mY[2] = ( (  mr_GAP_1_2_3_M_0  * mr_TAC3_3_M_0   )   ) ; 
mY[3] = ( (  mr_Gluc_ext_3_4_5_6_M_1   )   ) ; 
mY[4] = ( (  mr_GAP_1_2_3_M_0  * mr_TKC2_2_M_1   )  +(  mr_GAP_1_2_3_M_1  * mr_TKC2_2_M_0   )   ) ; 
mY[5] = ( (  mr_GAP_1_2_3_M_0  * mr_TAC3_3_M_1   )  +(  mr_GAP_1_2_3_M_1  * mr_TAC3_3_M_0   )   ) ; 
mY[6] = ( (  mr_Gluc_ext_3_4_5_6_M_2   )   ) ; 
mY[7] = ( (  mr_GAP_1_2_3_M_1  * mr_TKC2_2_M_1   )  +(  mr_GAP_1_2_3_M_2  * mr_TKC2_2_M_0   )   ) ; 
mY[8] = ( (  mr_GAP_1_2_3_M_1  * mr_TAC3_3_M_1   )  +(  mr_GAP_1_2_3_M_2  * mr_TAC3_3_M_0   )   ) ; 
mY[9] = ( (  mr_Gluc_ext_3_4_5_6_M_3   )   ) ; 
mY[10] = ( (  mr_GAP_1_2_3_M_2  * mr_TKC2_2_M_1   )  +(  mr_GAP_1_2_3_M_3  * mr_TKC2_2_M_0   )   ) ; 
mY[11] = ( (  mr_GAP_1_2_3_M_2  * mr_TAC3_3_M_1   )  +(  mr_GAP_1_2_3_M_3  * mr_TAC3_3_M_0   )   ) ; 
mY[12] = ( (  mr_Gluc_ext_3_4_5_6_M_4   )   ) ; 
mY[13] = ( (  mr_GAP_1_2_3_M_3  * mr_TKC2_2_M_1   )   ) ; 
mY[14] = ( (  mr_GAP_1_2_3_M_3  * mr_TAC3_3_M_1   )   ) ; 
}
mAm = 8; 
mAn = 8; 
mBm = 8; 
mBn = 3; 
mYm = 3; 
mYn = 5; 
barrier(CLK_LOCAL_MEM_FENCE);

//------COMPUTE!-----------------------------------------------------------------------
//LU-DECOMPOSITION (in place): mA_L * mA = mA
if( idx<8 && idy<8 ){ mA_L[ idx+8*idy ] = (idx==idy)?1.0f:0.0f; }
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 0 / 7
if( idx==0 && idy > 0 && idy < 8 ){ 
  mA_L[ idy + 0 ] = mA[ idy + 0 ] / mA[ 0 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>0 && idx < 8 && idy < 8 ){ 
  mA[ idx + 8*idy ] -= mA_L[ idx + 0 ] * mA[0+ idy*8 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 1 / 7
if( idx==0 && idy > 1 && idy < 8 ){ 
  mA_L[ idy + 8 ] = mA[ idy + 8 ] / mA[ 9 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>1 && idx < 8 && idy < 8 ){ 
  mA[ idx + 8*idy ] -= mA_L[ idx + 8 ] * mA[1+ idy*8 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 2 / 7
if( idx==0 && idy > 2 && idy < 8 ){ 
  mA_L[ idy + 16 ] = mA[ idy + 16 ] / mA[ 18 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>2 && idx < 8 && idy < 8 ){ 
  mA[ idx + 8*idy ] -= mA_L[ idx + 16 ] * mA[2+ idy*8 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 3 / 7
if( idx==0 && idy > 3 && idy < 8 ){ 
  mA_L[ idy + 24 ] = mA[ idy + 24 ] / mA[ 27 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>3 && idx < 8 && idy < 8 ){ 
  mA[ idx + 8*idy ] -= mA_L[ idx + 24 ] * mA[3+ idy*8 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 4 / 7
if( idx==0 && idy > 4 && idy < 8 ){ 
  mA_L[ idy + 32 ] = mA[ idy + 32 ] / mA[ 36 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>4 && idx < 8 && idy < 8 ){ 
  mA[ idx + 8*idy ] -= mA_L[ idx + 32 ] * mA[4+ idy*8 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 5 / 7
if( idx==0 && idy > 5 && idy < 8 ){ 
  mA_L[ idy + 40 ] = mA[ idy + 40 ] / mA[ 45 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>5 && idx < 8 && idy < 8 ){ 
  mA[ idx + 8*idy ] -= mA_L[ idx + 40 ] * mA[5+ idy*8 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 6 / 7
if( idx==0 && idy > 6 && idy < 8 ){ 
  mA_L[ idy + 48 ] = mA[ idy + 48 ] / mA[ 54 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>6 && idx < 8 && idy < 8 ){ 
  mA[ idx + 8*idy ] -= mA_L[ idx + 48 ] * mA[6+ idy*8 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 7 / 7
if( idx==0 && idy > 7 && idy < 8 ){ 
  mA_L[ idy + 56 ] = mA[ idy + 56 ] / mA[ 63 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>7 && idx < 8 && idy < 8 ){ 
  mA[ idx + 8*idy ] -= mA_L[ idx + 56 ] * mA[7+ idy*8 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION DONE!
//----------------------------------
//MATRIX MUL: mBY = mB * mY   
//Work item (idx,idy) compute mBY[idx,idy]   
if( idx < 8 && idy < 5 ) {  
float mulsum = 0.0f;
mulsum += mB[ 8*0 + idx ] * mY[ idy * 3 + 0 ];
mulsum += mB[ 8*1 + idx ] * mY[ idy * 3 + 1 ];
mulsum += mB[ 8*2 + idx ] * mY[ idy * 3 + 2 ];
mBY[idx+8*idy] = mulsum;
}
//MATRIX MUL COMPLETE! 
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System
// Solve L System - Row 0
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  mBY[ 0 + 8*idy ] = (mBY[ 0 + 8*idy ] - sum_i ) / mA_L[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 1
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 8*idy ] * mA_L[ 1 + 0 ] ;
  mBY[ 1 + 8*idy ] = (mBY[ 1 + 8*idy ] - sum_i ) / mA_L[ 9 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 2
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 8*idy ] * mA_L[ 2 + 0 ] ;
  sum_i += mBY[ 1 + 8*idy ] * mA_L[ 2 + 8 ] ;
  mBY[ 2 + 8*idy ] = (mBY[ 2 + 8*idy ] - sum_i ) / mA_L[ 18 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 3
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 8*idy ] * mA_L[ 3 + 0 ] ;
  sum_i += mBY[ 1 + 8*idy ] * mA_L[ 3 + 8 ] ;
  sum_i += mBY[ 2 + 8*idy ] * mA_L[ 3 + 16 ] ;
  mBY[ 3 + 8*idy ] = (mBY[ 3 + 8*idy ] - sum_i ) / mA_L[ 27 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 4
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 8*idy ] * mA_L[ 4 + 0 ] ;
  sum_i += mBY[ 1 + 8*idy ] * mA_L[ 4 + 8 ] ;
  sum_i += mBY[ 2 + 8*idy ] * mA_L[ 4 + 16 ] ;
  sum_i += mBY[ 3 + 8*idy ] * mA_L[ 4 + 24 ] ;
  mBY[ 4 + 8*idy ] = (mBY[ 4 + 8*idy ] - sum_i ) / mA_L[ 36 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 5
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 8*idy ] * mA_L[ 5 + 0 ] ;
  sum_i += mBY[ 1 + 8*idy ] * mA_L[ 5 + 8 ] ;
  sum_i += mBY[ 2 + 8*idy ] * mA_L[ 5 + 16 ] ;
  sum_i += mBY[ 3 + 8*idy ] * mA_L[ 5 + 24 ] ;
  sum_i += mBY[ 4 + 8*idy ] * mA_L[ 5 + 32 ] ;
  mBY[ 5 + 8*idy ] = (mBY[ 5 + 8*idy ] - sum_i ) / mA_L[ 45 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 6
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 8*idy ] * mA_L[ 6 + 0 ] ;
  sum_i += mBY[ 1 + 8*idy ] * mA_L[ 6 + 8 ] ;
  sum_i += mBY[ 2 + 8*idy ] * mA_L[ 6 + 16 ] ;
  sum_i += mBY[ 3 + 8*idy ] * mA_L[ 6 + 24 ] ;
  sum_i += mBY[ 4 + 8*idy ] * mA_L[ 6 + 32 ] ;
  sum_i += mBY[ 5 + 8*idy ] * mA_L[ 6 + 40 ] ;
  mBY[ 6 + 8*idy ] = (mBY[ 6 + 8*idy ] - sum_i ) / mA_L[ 54 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 7
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 8*idy ] * mA_L[ 7 + 0 ] ;
  sum_i += mBY[ 1 + 8*idy ] * mA_L[ 7 + 8 ] ;
  sum_i += mBY[ 2 + 8*idy ] * mA_L[ 7 + 16 ] ;
  sum_i += mBY[ 3 + 8*idy ] * mA_L[ 7 + 24 ] ;
  sum_i += mBY[ 4 + 8*idy ] * mA_L[ 7 + 32 ] ;
  sum_i += mBY[ 5 + 8*idy ] * mA_L[ 7 + 40 ] ;
  sum_i += mBY[ 6 + 8*idy ] * mA_L[ 7 + 48 ] ;
  mBY[ 7 + 8*idy ] = (mBY[ 7 + 8*idy ] - sum_i ) / mA_L[ 63 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System
// Solve U System - Row 7
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  mBY[ 7 + 8*idy ] = (mBY[ 7 + 8*idy ] - sum_i ) / mA[ 63 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 6
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 7 + 8*idy ] * mA[ 6 + 56 ] ;
  mBY[ 6 + 8*idy ] = (mBY[ 6 + 8*idy ] - sum_i ) / mA[ 54 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 5
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 6 + 8*idy ] * mA[ 5 + 48 ] ;
  sum_i += mBY[ 7 + 8*idy ] * mA[ 5 + 56 ] ;
  mBY[ 5 + 8*idy ] = (mBY[ 5 + 8*idy ] - sum_i ) / mA[ 45 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 4
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 5 + 8*idy ] * mA[ 4 + 40 ] ;
  sum_i += mBY[ 6 + 8*idy ] * mA[ 4 + 48 ] ;
  sum_i += mBY[ 7 + 8*idy ] * mA[ 4 + 56 ] ;
  mBY[ 4 + 8*idy ] = (mBY[ 4 + 8*idy ] - sum_i ) / mA[ 36 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 3
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 4 + 8*idy ] * mA[ 3 + 32 ] ;
  sum_i += mBY[ 5 + 8*idy ] * mA[ 3 + 40 ] ;
  sum_i += mBY[ 6 + 8*idy ] * mA[ 3 + 48 ] ;
  sum_i += mBY[ 7 + 8*idy ] * mA[ 3 + 56 ] ;
  mBY[ 3 + 8*idy ] = (mBY[ 3 + 8*idy ] - sum_i ) / mA[ 27 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 2
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 3 + 8*idy ] * mA[ 2 + 24 ] ;
  sum_i += mBY[ 4 + 8*idy ] * mA[ 2 + 32 ] ;
  sum_i += mBY[ 5 + 8*idy ] * mA[ 2 + 40 ] ;
  sum_i += mBY[ 6 + 8*idy ] * mA[ 2 + 48 ] ;
  sum_i += mBY[ 7 + 8*idy ] * mA[ 2 + 56 ] ;
  mBY[ 2 + 8*idy ] = (mBY[ 2 + 8*idy ] - sum_i ) / mA[ 18 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 1
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 2 + 8*idy ] * mA[ 1 + 16 ] ;
  sum_i += mBY[ 3 + 8*idy ] * mA[ 1 + 24 ] ;
  sum_i += mBY[ 4 + 8*idy ] * mA[ 1 + 32 ] ;
  sum_i += mBY[ 5 + 8*idy ] * mA[ 1 + 40 ] ;
  sum_i += mBY[ 6 + 8*idy ] * mA[ 1 + 48 ] ;
  sum_i += mBY[ 7 + 8*idy ] * mA[ 1 + 56 ] ;
  mBY[ 1 + 8*idy ] = (mBY[ 1 + 8*idy ] - sum_i ) / mA[ 9 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 0
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 1 + 8*idy ] * mA[ 0 + 8 ] ;
  sum_i += mBY[ 2 + 8*idy ] * mA[ 0 + 16 ] ;
  sum_i += mBY[ 3 + 8*idy ] * mA[ 0 + 24 ] ;
  sum_i += mBY[ 4 + 8*idy ] * mA[ 0 + 32 ] ;
  sum_i += mBY[ 5 + 8*idy ] * mA[ 0 + 40 ] ;
  sum_i += mBY[ 6 + 8*idy ] * mA[ 0 + 48 ] ;
  sum_i += mBY[ 7 + 8*idy ] * mA[ 0 + 56 ] ;
  mBY[ 0 + 8*idy ] = (mBY[ 0 + 8*idy ] - sum_i ) / mA[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
//-------------------------------------------------------------------------------------
mr_E4P_1_2_3_4_M_0 = mBY[ 0 ];
mr_F6P_3_4_5_6_M_0 = mBY[ 1 ];
mr_G6P_3_4_5_6_M_0 = mBY[ 2 ];
mr_R5P_2_3_4_5_M_0 = mBY[ 3 ];
mr_Ru5P_2_3_4_5_M_0 = mBY[ 4 ];
mr_S7P_4_5_6_7_M_0 = mBY[ 5 ];
mr_X5P_2_3_4_5_M_0 = mBY[ 6 ];
mr_X6PG_3_4_5_6_M_0 = mBY[ 7 ];
mr_E4P_1_2_3_4_M_1 = mBY[ 8 ];
mr_F6P_3_4_5_6_M_1 = mBY[ 9 ];
mr_G6P_3_4_5_6_M_1 = mBY[ 10 ];
mr_R5P_2_3_4_5_M_1 = mBY[ 11 ];
mr_Ru5P_2_3_4_5_M_1 = mBY[ 12 ];
mr_S7P_4_5_6_7_M_1 = mBY[ 13 ];
mr_X5P_2_3_4_5_M_1 = mBY[ 14 ];
mr_X6PG_3_4_5_6_M_1 = mBY[ 15 ];
mr_E4P_1_2_3_4_M_2 = mBY[ 16 ];
mr_F6P_3_4_5_6_M_2 = mBY[ 17 ];
mr_G6P_3_4_5_6_M_2 = mBY[ 18 ];
mr_R5P_2_3_4_5_M_2 = mBY[ 19 ];
mr_Ru5P_2_3_4_5_M_2 = mBY[ 20 ];
mr_S7P_4_5_6_7_M_2 = mBY[ 21 ];
mr_X5P_2_3_4_5_M_2 = mBY[ 22 ];
mr_X6PG_3_4_5_6_M_2 = mBY[ 23 ];
mr_E4P_1_2_3_4_M_3 = mBY[ 24 ];
mr_F6P_3_4_5_6_M_3 = mBY[ 25 ];
mr_G6P_3_4_5_6_M_3 = mBY[ 26 ];
mr_R5P_2_3_4_5_M_3 = mBY[ 27 ];
mr_Ru5P_2_3_4_5_M_3 = mBY[ 28 ];
mr_S7P_4_5_6_7_M_3 = mBY[ 29 ];
mr_X5P_2_3_4_5_M_3 = mBY[ 30 ];
mr_X6PG_3_4_5_6_M_3 = mBY[ 31 ];
mr_E4P_1_2_3_4_M_4 = mBY[ 32 ];
mr_F6P_3_4_5_6_M_4 = mBY[ 33 ];
mr_G6P_3_4_5_6_M_4 = mBY[ 34 ];
mr_R5P_2_3_4_5_M_4 = mBY[ 35 ];
mr_Ru5P_2_3_4_5_M_4 = mBY[ 36 ];
mr_S7P_4_5_6_7_M_4 = mBY[ 37 ];
mr_X5P_2_3_4_5_M_4 = mBY[ 38 ];
mr_X6PG_3_4_5_6_M_4 = mBY[ 39 ];
barrier(CLK_LOCAL_MEM_FENCE); 
//-------------------------------------------------------------------------------------
//----Init A---------------------------------------------------------------------------------
if(idx==0 && idy==0){
mA[0] = ( (  -1.0f  * v_v52_aa_fw   )   ) ; 
}
//----Init B---------------------------------------------------------------------------
if(idx==1 && idy==0){
mB[0] = (  -1.0f  * v_v52_aa_fw   ) ; 
}
//----Init Y---------------------------------------------------------------------------
if(idx==2 && idy==0){
mY[0] = ( (  mr_Pyr_2_3_M_0  * mr_Pyr_2_3_M_0   )   ) ; 
mY[1] = ( (  mr_Pyr_2_3_M_0  * mr_Pyr_2_3_M_1   )  +(  mr_Pyr_2_3_M_1  * mr_Pyr_2_3_M_0   )   ) ; 
mY[2] = ( (  mr_Pyr_2_3_M_0  * mr_Pyr_2_3_M_2   )  +(  mr_Pyr_2_3_M_1  * mr_Pyr_2_3_M_1   )  +(  mr_Pyr_2_3_M_2  * mr_Pyr_2_3_M_0   )   ) ; 
mY[3] = ( (  mr_Pyr_2_3_M_1  * mr_Pyr_2_3_M_2   )  +(  mr_Pyr_2_3_M_2  * mr_Pyr_2_3_M_1   )   ) ; 
mY[4] = ( (  mr_Pyr_2_3_M_2  * mr_Pyr_2_3_M_2   )   ) ; 
}
mAm = 1; 
mAn = 1; 
mBm = 1; 
mBn = 1; 
mYm = 1; 
mYn = 5; 
barrier(CLK_LOCAL_MEM_FENCE);

//------COMPUTE!-----------------------------------------------------------------------
//LU-DECOMPOSITION (in place): mA_L * mA = mA
if( idx<1 && idy<1 ){ mA_L[ idx+1*idy ] = (idx==idy)?1.0f:0.0f; }
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 0 / 0
if( idx==0 && idy > 0 && idy < 1 ){ 
  mA_L[ idy + 0 ] = mA[ idy + 0 ] / mA[ 0 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>0 && idx < 1 && idy < 1 ){ 
  mA[ idx + 1*idy ] -= mA_L[ idx + 0 ] * mA[0+ idy*1 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION DONE!
//----------------------------------
//MATRIX MUL: mBY = mB * mY   
//Work item (idx,idy) compute mBY[idx,idy]   
if( idx < 1 && idy < 5 ) {  
float mulsum = 0.0f;
mulsum += mB[ 1*0 + idx ] * mY[ idy * 1 + 0 ];
mBY[idx+1*idy] = mulsum;
}
//MATRIX MUL COMPLETE! 
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System
// Solve L System - Row 0
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  mBY[ 0 + 1*idy ] = (mBY[ 0 + 1*idy ] - sum_i ) / mA_L[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System
// Solve U System - Row 0
if(idx==0 && idy<5 ){
  float sum_i = 0.0f;
  mBY[ 0 + 1*idy ] = (mBY[ 0 + 1*idy ] - sum_i ) / mA[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
//-------------------------------------------------------------------------------------
mr_Val_2_3_4_5_M_0 = mBY[ 0 ];
mr_Val_2_3_4_5_M_1 = mBY[ 1 ];
mr_Val_2_3_4_5_M_2 = mBY[ 2 ];
mr_Val_2_3_4_5_M_3 = mBY[ 3 ];
mr_Val_2_3_4_5_M_4 = mBY[ 4 ];
barrier(CLK_LOCAL_MEM_FENCE); 
//-------------------------------------------------------------------------------------
//----Init A---------------------------------------------------------------------------------
if(idx==0 && idy==0){
mA[0] = ( (  -1.0f  * v_v54_aa_fw   )   ) ; 
mA[1] = 0.0f; 
mA[2] = 0.0f; 
mA[3] = 0.0f; 
mA[4] = ( (  -1.0f  * v_v53_aa_fw   )   ) ; 
mA[5] = 0.0f; 
mA[6] = 0.0f; 
mA[7] = 0.0f; 
mA[8] = ( (  -1.0f  * v_v52_aa_fw   )   ) ; 
}
//----Init B---------------------------------------------------------------------------
if(idx==1 && idy==0){
mB[0] = 0.0f; 
mB[1] = (  -1.0f  * v_v53_aa_fw   ) ; 
mB[2] = 0.0f; 
mB[3] = 0.0f; 
mB[4] = 0.0f; 
mB[5] = (  -1.0f  * v_v52_aa_fw   ) ; 
mB[6] = (  -1.0f  * v_v54_aa_fw   ) ; 
mB[7] = 0.0f; 
mB[8] = 0.0f; 
}
//----Init Y---------------------------------------------------------------------------
if(idx==2 && idy==0){
mY[0] = ( (  mr_Pyr_2_3_M_0  * mr_Pyr_2_3_M_0  * mr_AcCoA_2_M_0   )   ) ; 
mY[1] = ( (  mr_Pyr_2_3_M_0  * mr_Pyr_1_2_3_M_0   )   ) ; 
mY[2] = ( (  mr_Pyr_2_3_M_0  * mr_Thr_2_3_4_M_0   )   ) ; 
mY[3] = ( (  mr_Pyr_2_3_M_0  * mr_Pyr_2_3_M_0  * mr_AcCoA_2_M_1   )  +(  mr_Pyr_2_3_M_0  * mr_Pyr_2_3_M_1  * mr_AcCoA_2_M_0   )  +(  mr_Pyr_2_3_M_1  * mr_Pyr_2_3_M_0  * mr_AcCoA_2_M_0   )   ) ; 
mY[4] = ( (  mr_Pyr_2_3_M_0  * mr_Pyr_1_2_3_M_1   )  +(  mr_Pyr_2_3_M_1  * mr_Pyr_1_2_3_M_0   )   ) ; 
mY[5] = ( (  mr_Pyr_2_3_M_0  * mr_Thr_2_3_4_M_1   )  +(  mr_Pyr_2_3_M_1  * mr_Thr_2_3_4_M_0   )   ) ; 
mY[6] = ( (  mr_Pyr_2_3_M_0  * mr_Pyr_2_3_M_1  * mr_AcCoA_2_M_1   )  +(  mr_Pyr_2_3_M_0  * mr_Pyr_2_3_M_2  * mr_AcCoA_2_M_0   )  +(  mr_Pyr_2_3_M_1  * mr_Pyr_2_3_M_0  * mr_AcCoA_2_M_1   )  +(  mr_Pyr_2_3_M_1  * mr_Pyr_2_3_M_1  * mr_AcCoA_2_M_0   )  +(  mr_Pyr_2_3_M_2  * mr_Pyr_2_3_M_0  * mr_AcCoA_2_M_0   )   ) ; 
mY[7] = ( (  mr_Pyr_2_3_M_0  * mr_Pyr_1_2_3_M_2   )  +(  mr_Pyr_2_3_M_1  * mr_Pyr_1_2_3_M_1   )  +(  mr_Pyr_2_3_M_2  * mr_Pyr_1_2_3_M_0   )   ) ; 
mY[8] = ( (  mr_Pyr_2_3_M_0  * mr_Thr_2_3_4_M_2   )  +(  mr_Pyr_2_3_M_1  * mr_Thr_2_3_4_M_1   )  +(  mr_Pyr_2_3_M_2  * mr_Thr_2_3_4_M_0   )   ) ; 
mY[9] = ( (  mr_Pyr_2_3_M_0  * mr_Pyr_2_3_M_2  * mr_AcCoA_2_M_1   )  +(  mr_Pyr_2_3_M_1  * mr_Pyr_2_3_M_1  * mr_AcCoA_2_M_1   )  +(  mr_Pyr_2_3_M_1  * mr_Pyr_2_3_M_2  * mr_AcCoA_2_M_0   )  +(  mr_Pyr_2_3_M_2  * mr_Pyr_2_3_M_0  * mr_AcCoA_2_M_1   )  +(  mr_Pyr_2_3_M_2  * mr_Pyr_2_3_M_1  * mr_AcCoA_2_M_0   )   ) ; 
mY[10] = ( (  mr_Pyr_2_3_M_0  * mr_Pyr_1_2_3_M_3   )  +(  mr_Pyr_2_3_M_1  * mr_Pyr_1_2_3_M_2   )  +(  mr_Pyr_2_3_M_2  * mr_Pyr_1_2_3_M_1   )   ) ; 
mY[11] = ( (  mr_Pyr_2_3_M_0  * mr_Thr_2_3_4_M_3   )  +(  mr_Pyr_2_3_M_1  * mr_Thr_2_3_4_M_2   )  +(  mr_Pyr_2_3_M_2  * mr_Thr_2_3_4_M_1   )   ) ; 
mY[12] = ( (  mr_Pyr_2_3_M_1  * mr_Pyr_2_3_M_2  * mr_AcCoA_2_M_1   )  +(  mr_Pyr_2_3_M_2  * mr_Pyr_2_3_M_1  * mr_AcCoA_2_M_1   )  +(  mr_Pyr_2_3_M_2  * mr_Pyr_2_3_M_2  * mr_AcCoA_2_M_0   )   ) ; 
mY[13] = ( (  mr_Pyr_2_3_M_1  * mr_Pyr_1_2_3_M_3   )  +(  mr_Pyr_2_3_M_2  * mr_Pyr_1_2_3_M_2   )   ) ; 
mY[14] = ( (  mr_Pyr_2_3_M_1  * mr_Thr_2_3_4_M_3   )  +(  mr_Pyr_2_3_M_2  * mr_Thr_2_3_4_M_2   )   ) ; 
mY[15] = ( (  mr_Pyr_2_3_M_2  * mr_Pyr_2_3_M_2  * mr_AcCoA_2_M_1   )   ) ; 
mY[16] = ( (  mr_Pyr_2_3_M_2  * mr_Pyr_1_2_3_M_3   )   ) ; 
mY[17] = ( (  mr_Pyr_2_3_M_2  * mr_Thr_2_3_4_M_3   )   ) ; 
}
mAm = 3; 
mAn = 3; 
mBm = 3; 
mBn = 3; 
mYm = 3; 
mYn = 6; 
barrier(CLK_LOCAL_MEM_FENCE);

//------COMPUTE!-----------------------------------------------------------------------
//LU-DECOMPOSITION (in place): mA_L * mA = mA
if( idx<3 && idy<3 ){ mA_L[ idx+3*idy ] = (idx==idy)?1.0f:0.0f; }
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 0 / 2
if( idx==0 && idy > 0 && idy < 3 ){ 
  mA_L[ idy + 0 ] = mA[ idy + 0 ] / mA[ 0 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>0 && idx < 3 && idy < 3 ){ 
  mA[ idx + 3*idy ] -= mA_L[ idx + 0 ] * mA[0+ idy*3 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 1 / 2
if( idx==0 && idy > 1 && idy < 3 ){ 
  mA_L[ idy + 3 ] = mA[ idy + 3 ] / mA[ 4 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>1 && idx < 3 && idy < 3 ){ 
  mA[ idx + 3*idy ] -= mA_L[ idx + 3 ] * mA[1+ idy*3 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 2 / 2
if( idx==0 && idy > 2 && idy < 3 ){ 
  mA_L[ idy + 6 ] = mA[ idy + 6 ] / mA[ 8 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>2 && idx < 3 && idy < 3 ){ 
  mA[ idx + 3*idy ] -= mA_L[ idx + 6 ] * mA[2+ idy*3 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION DONE!
//----------------------------------
//MATRIX MUL: mBY = mB * mY   
//Work item (idx,idy) compute mBY[idx,idy]   
if( idx < 3 && idy < 6 ) {  
float mulsum = 0.0f;
mulsum += mB[ 3*0 + idx ] * mY[ idy * 3 + 0 ];
mulsum += mB[ 3*1 + idx ] * mY[ idy * 3 + 1 ];
mulsum += mB[ 3*2 + idx ] * mY[ idy * 3 + 2 ];
mBY[idx+3*idy] = mulsum;
}
//MATRIX MUL COMPLETE! 
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System
// Solve L System - Row 0
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  mBY[ 0 + 3*idy ] = (mBY[ 0 + 3*idy ] - sum_i ) / mA_L[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 1
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 3*idy ] * mA_L[ 1 + 0 ] ;
  mBY[ 1 + 3*idy ] = (mBY[ 1 + 3*idy ] - sum_i ) / mA_L[ 4 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 2
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 3*idy ] * mA_L[ 2 + 0 ] ;
  sum_i += mBY[ 1 + 3*idy ] * mA_L[ 2 + 3 ] ;
  mBY[ 2 + 3*idy ] = (mBY[ 2 + 3*idy ] - sum_i ) / mA_L[ 8 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System
// Solve U System - Row 2
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  mBY[ 2 + 3*idy ] = (mBY[ 2 + 3*idy ] - sum_i ) / mA[ 8 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 1
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 2 + 3*idy ] * mA[ 1 + 6 ] ;
  mBY[ 1 + 3*idy ] = (mBY[ 1 + 3*idy ] - sum_i ) / mA[ 4 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 0
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 1 + 3*idy ] * mA[ 0 + 3 ] ;
  sum_i += mBY[ 2 + 3*idy ] * mA[ 0 + 6 ] ;
  mBY[ 0 + 3*idy ] = (mBY[ 0 + 3*idy ] - sum_i ) / mA[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
//-------------------------------------------------------------------------------------
mr_Ile_2_3_4_5_6_M_0 = mBY[ 0 ];
mr_Leu_2_3_4_5_6_M_0 = mBY[ 1 ];
mr_Val_1_2_3_4_5_M_0 = mBY[ 2 ];
mr_Ile_2_3_4_5_6_M_1 = mBY[ 3 ];
mr_Leu_2_3_4_5_6_M_1 = mBY[ 4 ];
mr_Val_1_2_3_4_5_M_1 = mBY[ 5 ];
mr_Ile_2_3_4_5_6_M_2 = mBY[ 6 ];
mr_Leu_2_3_4_5_6_M_2 = mBY[ 7 ];
mr_Val_1_2_3_4_5_M_2 = mBY[ 8 ];
mr_Ile_2_3_4_5_6_M_3 = mBY[ 9 ];
mr_Leu_2_3_4_5_6_M_3 = mBY[ 10 ];
mr_Val_1_2_3_4_5_M_3 = mBY[ 11 ];
mr_Ile_2_3_4_5_6_M_4 = mBY[ 12 ];
mr_Leu_2_3_4_5_6_M_4 = mBY[ 13 ];
mr_Val_1_2_3_4_5_M_4 = mBY[ 14 ];
mr_Ile_2_3_4_5_6_M_5 = mBY[ 15 ];
mr_Leu_2_3_4_5_6_M_5 = mBY[ 16 ];
mr_Val_1_2_3_4_5_M_5 = mBY[ 17 ];
barrier(CLK_LOCAL_MEM_FENCE); 
//-------------------------------------------------------------------------------------
//----Init A---------------------------------------------------------------------------------
if(idx==0 && idy==0){
mA[0] = ( (  -1.0f  * v_v39_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_a   )  +(  -1.0f  * v_v53_aa_fw   )  +(  -1.0f  * v_v56_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_d   )  +(  -1.0f  * v_v42_aa_fw   )  +(  -1.0f  * v_v40_aa_fw   )  +(  -1.0f  * v_v23_tca_fw   )  +(  -1.0f  * v_v54_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_b   )  +(  -1.0f  * v_v52_aa_fw   )  +(  -1.0f  * v_v48_aa_fw_c   )  +(  -1.0f  * v_v58_aa_fw   )  +(  -1.0f  * v_v43_aa_fw   )  +(  -1.0f  * v_v55_aa_fw   )   ) ; 
mA[1] = 0.0f; 
mA[2] = 0.0f; 
mA[3] =  v_v36_aa_fw ; 
mA[4] =  v_v23_tca_bw ; 
mA[5] = 0.0f; 
mA[6] = ( (  -1.0f  * v_v21_tca_fw   )  +(  -1.0f  * v_v22_tca_bw   )   ) ; 
mA[7] = 0.0f; 
mA[8] = 0.0f; 
mA[9] =  v_v22_tca_fw ; 
mA[10] = (  v_v39_aa_fw  + v_v58_aa_fw   ) ; 
mA[11] = 0.0f; 
mA[12] = ( (  -1.0f  * v_v37_aa_fw   )   ) ; 
mA[13] =  v_v57_aa_fw ; 
mA[14] = 0.0f; 
mA[15] = (  v_v48_aa_fw_a  + v_v53_aa_fw  + v_v56_aa_fw  + v_v48_aa_fw_d  + v_v42_aa_fw  + v_v40_aa_fw  + v_v54_aa_fw  + v_v48_aa_fw_b  + v_v52_aa_fw  + v_v48_aa_fw_c  + v_v43_aa_fw  + v_v55_aa_fw   ) ; 
mA[16] = 0.0f; 
mA[17] =  v_v37_aa_fw ; 
mA[18] = ( (  -1.0f  * v_v36_aa_fw   )  +(  -1.0f  * v_v57_aa_fw   )   ) ; 
mA[19] = 0.0f; 
mA[20] =  v_v23_tca_fw ; 
mA[21] =  v_v22_tca_bw ; 
mA[22] = 0.0f; 
mA[23] = 0.0f; 
mA[24] = ( (  -1.0f  * v_v23_tca_bw   )  +(  -1.0f  * v_v22_tca_fw   )   ) ; 
}
//----Init B---------------------------------------------------------------------------
if(idx==1 && idy==0){
mB[0] = 0.0f; 
mB[1] = (  -1.0f  * v_v21_tca_fw   ) ; 
mB[2] = 0.0f; 
mB[3] = 0.0f; 
mB[4] = 0.0f; 
}
//----Init Y---------------------------------------------------------------------------
if(idx==2 && idy==0){
mY[0] = ( (  mr_AcCoA_1_2_M_0  * mr_OAC_2_3_4_M_0   )   ) ; 
mY[1] = ( (  mr_AcCoA_1_2_M_0  * mr_OAC_2_3_4_M_1   )  +(  mr_AcCoA_1_2_M_1  * mr_OAC_2_3_4_M_0   )   ) ; 
mY[2] = ( (  mr_AcCoA_1_2_M_0  * mr_OAC_2_3_4_M_2   )  +(  mr_AcCoA_1_2_M_1  * mr_OAC_2_3_4_M_1   )  +(  mr_AcCoA_1_2_M_2  * mr_OAC_2_3_4_M_0   )   ) ; 
mY[3] = ( (  mr_AcCoA_1_2_M_0  * mr_OAC_2_3_4_M_3   )  +(  mr_AcCoA_1_2_M_1  * mr_OAC_2_3_4_M_2   )  +(  mr_AcCoA_1_2_M_2  * mr_OAC_2_3_4_M_1   )   ) ; 
mY[4] = ( (  mr_AcCoA_1_2_M_1  * mr_OAC_2_3_4_M_3   )  +(  mr_AcCoA_1_2_M_2  * mr_OAC_2_3_4_M_2   )   ) ; 
mY[5] = ( (  mr_AcCoA_1_2_M_2  * mr_OAC_2_3_4_M_3   )   ) ; 
}
mAm = 5; 
mAn = 5; 
mBm = 5; 
mBn = 1; 
mYm = 1; 
mYn = 6; 
barrier(CLK_LOCAL_MEM_FENCE);

//------COMPUTE!-----------------------------------------------------------------------
//LU-DECOMPOSITION (in place): mA_L * mA = mA
if( idx<5 && idy<5 ){ mA_L[ idx+5*idy ] = (idx==idy)?1.0f:0.0f; }
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 0 / 4
if( idx==0 && idy > 0 && idy < 5 ){ 
  mA_L[ idy + 0 ] = mA[ idy + 0 ] / mA[ 0 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>0 && idx < 5 && idy < 5 ){ 
  mA[ idx + 5*idy ] -= mA_L[ idx + 0 ] * mA[0+ idy*5 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 1 / 4
if( idx==0 && idy > 1 && idy < 5 ){ 
  mA_L[ idy + 5 ] = mA[ idy + 5 ] / mA[ 6 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>1 && idx < 5 && idy < 5 ){ 
  mA[ idx + 5*idy ] -= mA_L[ idx + 5 ] * mA[1+ idy*5 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 2 / 4
if( idx==0 && idy > 2 && idy < 5 ){ 
  mA_L[ idy + 10 ] = mA[ idy + 10 ] / mA[ 12 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>2 && idx < 5 && idy < 5 ){ 
  mA[ idx + 5*idy ] -= mA_L[ idx + 10 ] * mA[2+ idy*5 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 3 / 4
if( idx==0 && idy > 3 && idy < 5 ){ 
  mA_L[ idy + 15 ] = mA[ idy + 15 ] / mA[ 18 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>3 && idx < 5 && idy < 5 ){ 
  mA[ idx + 5*idy ] -= mA_L[ idx + 15 ] * mA[3+ idy*5 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 4 / 4
if( idx==0 && idy > 4 && idy < 5 ){ 
  mA_L[ idy + 20 ] = mA[ idy + 20 ] / mA[ 24 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>4 && idx < 5 && idy < 5 ){ 
  mA[ idx + 5*idy ] -= mA_L[ idx + 20 ] * mA[4+ idy*5 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION DONE!
//----------------------------------
//MATRIX MUL: mBY = mB * mY   
//Work item (idx,idy) compute mBY[idx,idy]   
if( idx < 5 && idy < 6 ) {  
float mulsum = 0.0f;
mulsum += mB[ 5*0 + idx ] * mY[ idy * 1 + 0 ];
mBY[idx+5*idy] = mulsum;
}
//MATRIX MUL COMPLETE! 
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System
// Solve L System - Row 0
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  mBY[ 0 + 5*idy ] = (mBY[ 0 + 5*idy ] - sum_i ) / mA_L[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 1
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 5*idy ] * mA_L[ 1 + 0 ] ;
  mBY[ 1 + 5*idy ] = (mBY[ 1 + 5*idy ] - sum_i ) / mA_L[ 6 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 2
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 5*idy ] * mA_L[ 2 + 0 ] ;
  sum_i += mBY[ 1 + 5*idy ] * mA_L[ 2 + 5 ] ;
  mBY[ 2 + 5*idy ] = (mBY[ 2 + 5*idy ] - sum_i ) / mA_L[ 12 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 3
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 5*idy ] * mA_L[ 3 + 0 ] ;
  sum_i += mBY[ 1 + 5*idy ] * mA_L[ 3 + 5 ] ;
  sum_i += mBY[ 2 + 5*idy ] * mA_L[ 3 + 10 ] ;
  mBY[ 3 + 5*idy ] = (mBY[ 3 + 5*idy ] - sum_i ) / mA_L[ 18 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System - Row 4
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 0 + 5*idy ] * mA_L[ 4 + 0 ] ;
  sum_i += mBY[ 1 + 5*idy ] * mA_L[ 4 + 5 ] ;
  sum_i += mBY[ 2 + 5*idy ] * mA_L[ 4 + 10 ] ;
  sum_i += mBY[ 3 + 5*idy ] * mA_L[ 4 + 15 ] ;
  mBY[ 4 + 5*idy ] = (mBY[ 4 + 5*idy ] - sum_i ) / mA_L[ 24 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System
// Solve U System - Row 4
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  mBY[ 4 + 5*idy ] = (mBY[ 4 + 5*idy ] - sum_i ) / mA[ 24 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 3
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 4 + 5*idy ] * mA[ 3 + 20 ] ;
  mBY[ 3 + 5*idy ] = (mBY[ 3 + 5*idy ] - sum_i ) / mA[ 18 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 2
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 3 + 5*idy ] * mA[ 2 + 15 ] ;
  sum_i += mBY[ 4 + 5*idy ] * mA[ 2 + 20 ] ;
  mBY[ 2 + 5*idy ] = (mBY[ 2 + 5*idy ] - sum_i ) / mA[ 12 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 1
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 2 + 5*idy ] * mA[ 1 + 10 ] ;
  sum_i += mBY[ 3 + 5*idy ] * mA[ 1 + 15 ] ;
  sum_i += mBY[ 4 + 5*idy ] * mA[ 1 + 20 ] ;
  mBY[ 1 + 5*idy ] = (mBY[ 1 + 5*idy ] - sum_i ) / mA[ 6 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System - Row 0
if(idx==0 && idy<6 ){
  float sum_i = 0.0f;
  sum_i += mBY[ 1 + 5*idy ] * mA[ 0 + 5 ] ;
  sum_i += mBY[ 2 + 5*idy ] * mA[ 0 + 10 ] ;
  sum_i += mBY[ 3 + 5*idy ] * mA[ 0 + 15 ] ;
  sum_i += mBY[ 4 + 5*idy ] * mA[ 0 + 20 ] ;
  mBY[ 0 + 5*idy ] = (mBY[ 0 + 5*idy ] - sum_i ) / mA[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
//-------------------------------------------------------------------------------------
mr_AKG_1_2_3_4_5_M_0 = mBY[ 0 ];
mr_Cit_1_2_3_4_5_M_0 = mBY[ 1 ];
mr_Gln_1_2_3_4_5_M_0 = mBY[ 2 ];
mr_Glu_1_2_3_4_5_M_0 = mBY[ 3 ];
mr_ICit_1_2_3_4_5_M_0 = mBY[ 4 ];
mr_AKG_1_2_3_4_5_M_1 = mBY[ 5 ];
mr_Cit_1_2_3_4_5_M_1 = mBY[ 6 ];
mr_Gln_1_2_3_4_5_M_1 = mBY[ 7 ];
mr_Glu_1_2_3_4_5_M_1 = mBY[ 8 ];
mr_ICit_1_2_3_4_5_M_1 = mBY[ 9 ];
mr_AKG_1_2_3_4_5_M_2 = mBY[ 10 ];
mr_Cit_1_2_3_4_5_M_2 = mBY[ 11 ];
mr_Gln_1_2_3_4_5_M_2 = mBY[ 12 ];
mr_Glu_1_2_3_4_5_M_2 = mBY[ 13 ];
mr_ICit_1_2_3_4_5_M_2 = mBY[ 14 ];
mr_AKG_1_2_3_4_5_M_3 = mBY[ 15 ];
mr_Cit_1_2_3_4_5_M_3 = mBY[ 16 ];
mr_Gln_1_2_3_4_5_M_3 = mBY[ 17 ];
mr_Glu_1_2_3_4_5_M_3 = mBY[ 18 ];
mr_ICit_1_2_3_4_5_M_3 = mBY[ 19 ];
mr_AKG_1_2_3_4_5_M_4 = mBY[ 20 ];
mr_Cit_1_2_3_4_5_M_4 = mBY[ 21 ];
mr_Gln_1_2_3_4_5_M_4 = mBY[ 22 ];
mr_Glu_1_2_3_4_5_M_4 = mBY[ 23 ];
mr_ICit_1_2_3_4_5_M_4 = mBY[ 24 ];
mr_AKG_1_2_3_4_5_M_5 = mBY[ 25 ];
mr_Cit_1_2_3_4_5_M_5 = mBY[ 26 ];
mr_Gln_1_2_3_4_5_M_5 = mBY[ 27 ];
mr_Glu_1_2_3_4_5_M_5 = mBY[ 28 ];
mr_ICit_1_2_3_4_5_M_5 = mBY[ 29 ];
barrier(CLK_LOCAL_MEM_FENCE); 
//-------------------------------------------------------------------------------------
//----Init A---------------------------------------------------------------------------------
if(idx==0 && idy==0){
mA[0] = ( (  -1.0f  * v_v55_aa_fw   )   ) ; 
}
//----Init B---------------------------------------------------------------------------
if(idx==1 && idy==0){
mB[0] = (  -1.0f  * v_v55_aa_fw   ) ; 
}
//----Init Y---------------------------------------------------------------------------
if(idx==2 && idy==0){
mY[0] = ( (  mr_E4P_1_2_3_4_M_0  * mr_PEP_2_3_M_0  * mr_PEP_2_3_M_0   )   ) ; 
mY[1] = ( (  mr_E4P_1_2_3_4_M_0  * mr_PEP_2_3_M_0  * mr_PEP_2_3_M_1   )  +(  mr_E4P_1_2_3_4_M_0  * mr_PEP_2_3_M_1  * mr_PEP_2_3_M_0   )  +(  mr_E4P_1_2_3_4_M_1  * mr_PEP_2_3_M_0  * mr_PEP_2_3_M_0   )   ) ; 
mY[2] = ( (  mr_E4P_1_2_3_4_M_0  * mr_PEP_2_3_M_0  * mr_PEP_2_3_M_2   )  +(  mr_E4P_1_2_3_4_M_0  * mr_PEP_2_3_M_1  * mr_PEP_2_3_M_1   )  +(  mr_E4P_1_2_3_4_M_0  * mr_PEP_2_3_M_2  * mr_PEP_2_3_M_0   )  +(  mr_E4P_1_2_3_4_M_1  * mr_PEP_2_3_M_0  * mr_PEP_2_3_M_1   )  +(  mr_E4P_1_2_3_4_M_1  * mr_PEP_2_3_M_1  * mr_PEP_2_3_M_0   )  +(  mr_E4P_1_2_3_4_M_2  * mr_PEP_2_3_M_0  * mr_PEP_2_3_M_0   )   ) ; 
mY[3] = ( (  mr_E4P_1_2_3_4_M_0  * mr_PEP_2_3_M_1  * mr_PEP_2_3_M_2   )  +(  mr_E4P_1_2_3_4_M_0  * mr_PEP_2_3_M_2  * mr_PEP_2_3_M_1   )  +(  mr_E4P_1_2_3_4_M_1  * mr_PEP_2_3_M_0  * mr_PEP_2_3_M_2   )  +(  mr_E4P_1_2_3_4_M_1  * mr_PEP_2_3_M_1  * mr_PEP_2_3_M_1   )  +(  mr_E4P_1_2_3_4_M_1  * mr_PEP_2_3_M_2  * mr_PEP_2_3_M_0   )  +(  mr_E4P_1_2_3_4_M_2  * mr_PEP_2_3_M_0  * mr_PEP_2_3_M_1   )  +(  mr_E4P_1_2_3_4_M_2  * mr_PEP_2_3_M_1  * mr_PEP_2_3_M_0   )  +(  mr_E4P_1_2_3_4_M_3  * mr_PEP_2_3_M_0  * mr_PEP_2_3_M_0   )   ) ; 
mY[4] = ( (  mr_E4P_1_2_3_4_M_0  * mr_PEP_2_3_M_2  * mr_PEP_2_3_M_2   )  +(  mr_E4P_1_2_3_4_M_1  * mr_PEP_2_3_M_1  * mr_PEP_2_3_M_2   )  +(  mr_E4P_1_2_3_4_M_1  * mr_PEP_2_3_M_2  * mr_PEP_2_3_M_1   )  +(  mr_E4P_1_2_3_4_M_2  * mr_PEP_2_3_M_0  * mr_PEP_2_3_M_2   )  +(  mr_E4P_1_2_3_4_M_2  * mr_PEP_2_3_M_1  * mr_PEP_2_3_M_1   )  +(  mr_E4P_1_2_3_4_M_2  * mr_PEP_2_3_M_2  * mr_PEP_2_3_M_0   )  +(  mr_E4P_1_2_3_4_M_3  * mr_PEP_2_3_M_0  * mr_PEP_2_3_M_1   )  +(  mr_E4P_1_2_3_4_M_3  * mr_PEP_2_3_M_1  * mr_PEP_2_3_M_0   )  +(  mr_E4P_1_2_3_4_M_4  * mr_PEP_2_3_M_0  * mr_PEP_2_3_M_0   )   ) ; 
mY[5] = ( (  mr_E4P_1_2_3_4_M_1  * mr_PEP_2_3_M_2  * mr_PEP_2_3_M_2   )  +(  mr_E4P_1_2_3_4_M_2  * mr_PEP_2_3_M_1  * mr_PEP_2_3_M_2   )  +(  mr_E4P_1_2_3_4_M_2  * mr_PEP_2_3_M_2  * mr_PEP_2_3_M_1   )  +(  mr_E4P_1_2_3_4_M_3  * mr_PEP_2_3_M_0  * mr_PEP_2_3_M_2   )  +(  mr_E4P_1_2_3_4_M_3  * mr_PEP_2_3_M_1  * mr_PEP_2_3_M_1   )  +(  mr_E4P_1_2_3_4_M_3  * mr_PEP_2_3_M_2  * mr_PEP_2_3_M_0   )  +(  mr_E4P_1_2_3_4_M_4  * mr_PEP_2_3_M_0  * mr_PEP_2_3_M_1   )  +(  mr_E4P_1_2_3_4_M_4  * mr_PEP_2_3_M_1  * mr_PEP_2_3_M_0   )   ) ; 
mY[6] = ( (  mr_E4P_1_2_3_4_M_2  * mr_PEP_2_3_M_2  * mr_PEP_2_3_M_2   )  +(  mr_E4P_1_2_3_4_M_3  * mr_PEP_2_3_M_1  * mr_PEP_2_3_M_2   )  +(  mr_E4P_1_2_3_4_M_3  * mr_PEP_2_3_M_2  * mr_PEP_2_3_M_1   )  +(  mr_E4P_1_2_3_4_M_4  * mr_PEP_2_3_M_0  * mr_PEP_2_3_M_2   )  +(  mr_E4P_1_2_3_4_M_4  * mr_PEP_2_3_M_1  * mr_PEP_2_3_M_1   )  +(  mr_E4P_1_2_3_4_M_4  * mr_PEP_2_3_M_2  * mr_PEP_2_3_M_0   )   ) ; 
mY[7] = ( (  mr_E4P_1_2_3_4_M_3  * mr_PEP_2_3_M_2  * mr_PEP_2_3_M_2   )  +(  mr_E4P_1_2_3_4_M_4  * mr_PEP_2_3_M_1  * mr_PEP_2_3_M_2   )  +(  mr_E4P_1_2_3_4_M_4  * mr_PEP_2_3_M_2  * mr_PEP_2_3_M_1   )   ) ; 
mY[8] = ( (  mr_E4P_1_2_3_4_M_4  * mr_PEP_2_3_M_2  * mr_PEP_2_3_M_2   )   ) ; 
}
mAm = 1; 
mAn = 1; 
mBm = 1; 
mBn = 1; 
mYm = 1; 
mYn = 9; 
barrier(CLK_LOCAL_MEM_FENCE);

//------COMPUTE!-----------------------------------------------------------------------
//LU-DECOMPOSITION (in place): mA_L * mA = mA
if( idx<1 && idy<1 ){ mA_L[ idx+1*idy ] = (idx==idy)?1.0f:0.0f; }
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION STEP 0 / 0
if( idx==0 && idy > 0 && idy < 1 ){ 
  mA_L[ idy + 0 ] = mA[ idy + 0 ] / mA[ 0 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
if( idx>0 && idx < 1 && idy < 1 ){ 
  mA[ idx + 1*idy ] -= mA_L[ idx + 0 ] * mA[0+ idy*1 ]; 
} 
barrier(CLK_LOCAL_MEM_FENCE);
//LU-DECOMPOSITION DONE!
//----------------------------------
//MATRIX MUL: mBY = mB * mY   
//Work item (idx,idy) compute mBY[idx,idy]   
if( idx < 1 && idy < 9 ) {  
float mulsum = 0.0f;
mulsum += mB[ 1*0 + idx ] * mY[ idy * 1 + 0 ];
mBY[idx+1*idy] = mulsum;
}
//MATRIX MUL COMPLETE! 
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System
// Solve L System - Row 0
if(idx==0 && idy<9 ){
  float sum_i = 0.0f;
  mBY[ 0 + 1*idy ] = (mBY[ 0 + 1*idy ] - sum_i ) / mA_L[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve L System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System
// Solve U System - Row 0
if(idx==0 && idy<9 ){
  float sum_i = 0.0f;
  mBY[ 0 + 1*idy ] = (mBY[ 0 + 1*idy ] - sum_i ) / mA[ 0 ] ;
}
barrier(CLK_LOCAL_MEM_FENCE);
// Solve U System DONE!
barrier(CLK_LOCAL_MEM_FENCE);
//-------------------------------------------------------------------------------------
mr_Phe_2_3_4_5_6_7_8_9_M_0 = mBY[ 0 ];
mr_Phe_2_3_4_5_6_7_8_9_M_1 = mBY[ 1 ];
mr_Phe_2_3_4_5_6_7_8_9_M_2 = mBY[ 2 ];
mr_Phe_2_3_4_5_6_7_8_9_M_3 = mBY[ 3 ];
mr_Phe_2_3_4_5_6_7_8_9_M_4 = mBY[ 4 ];
mr_Phe_2_3_4_5_6_7_8_9_M_5 = mBY[ 5 ];
mr_Phe_2_3_4_5_6_7_8_9_M_6 = mBY[ 6 ];
mr_Phe_2_3_4_5_6_7_8_9_M_7 = mBY[ 7 ];
mr_Phe_2_3_4_5_6_7_8_9_M_8 = mBY[ 8 ];
barrier(CLK_LOCAL_MEM_FENCE); 
//-------------------------------------------------------------------------------------
//---RESULTS-----------------------------------------------------------------------------------------
if(idx==0&&idy==0){ 
mds_out[ offset_target + 0 ] = mr_Gly_2_M_0;
mds_out[ offset_target + 1 ] = mr_Gly_2_M_1;
mds_out[ offset_target + 2 ] = mr_Ala_2_3_M_0;
mds_out[ offset_target + 3 ] = mr_Ala_2_3_M_1;
mds_out[ offset_target + 4 ] = mr_Ala_2_3_M_2;
mds_out[ offset_target + 5 ] = mr_Asp_1_2_M_0;
mds_out[ offset_target + 6 ] = mr_Asp_1_2_M_1;
mds_out[ offset_target + 7 ] = mr_Asp_1_2_M_2;
mds_out[ offset_target + 8 ] = mr_Gly_1_2_M_0;
mds_out[ offset_target + 9 ] = mr_Gly_1_2_M_1;
mds_out[ offset_target + 10 ] = mr_Gly_1_2_M_2;
mds_out[ offset_target + 11 ] = mr_Phe_1_2_M_0;
mds_out[ offset_target + 12 ] = mr_Phe_1_2_M_1;
mds_out[ offset_target + 13 ] = mr_Phe_1_2_M_2;
mds_out[ offset_target + 14 ] = mr_Ser_2_3_M_0;
mds_out[ offset_target + 15 ] = mr_Ser_2_3_M_1;
mds_out[ offset_target + 16 ] = mr_Ser_2_3_M_2;
mds_out[ offset_target + 17 ] = mr_Tyr_1_2_M_0;
mds_out[ offset_target + 18 ] = mr_Tyr_1_2_M_1;
mds_out[ offset_target + 19 ] = mr_Tyr_1_2_M_2;
mds_out[ offset_target + 20 ] = mr_Ala_1_2_3_M_0;
mds_out[ offset_target + 21 ] = mr_Ala_1_2_3_M_1;
mds_out[ offset_target + 22 ] = mr_Ala_1_2_3_M_2;
mds_out[ offset_target + 23 ] = mr_Ala_1_2_3_M_3;
mds_out[ offset_target + 24 ] = mr_Asp_2_3_4_M_0;
mds_out[ offset_target + 25 ] = mr_Asp_2_3_4_M_1;
mds_out[ offset_target + 26 ] = mr_Asp_2_3_4_M_2;
mds_out[ offset_target + 27 ] = mr_Asp_2_3_4_M_3;
mds_out[ offset_target + 28 ] = mr_Ser_1_2_3_M_0;
mds_out[ offset_target + 29 ] = mr_Ser_1_2_3_M_1;
mds_out[ offset_target + 30 ] = mr_Ser_1_2_3_M_2;
mds_out[ offset_target + 31 ] = mr_Ser_1_2_3_M_3;
mds_out[ offset_target + 32 ] = mr_Asp_1_2_3_4_M_0;
mds_out[ offset_target + 33 ] = mr_Asp_1_2_3_4_M_1;
mds_out[ offset_target + 34 ] = mr_Asp_1_2_3_4_M_2;
mds_out[ offset_target + 35 ] = mr_Asp_1_2_3_4_M_3;
mds_out[ offset_target + 36 ] = mr_Asp_1_2_3_4_M_4;
mds_out[ offset_target + 37 ] = mr_Glu_2_3_4_5_M_0;
mds_out[ offset_target + 38 ] = mr_Glu_2_3_4_5_M_1;
mds_out[ offset_target + 39 ] = mr_Glu_2_3_4_5_M_2;
mds_out[ offset_target + 40 ] = mr_Glu_2_3_4_5_M_3;
mds_out[ offset_target + 41 ] = mr_Glu_2_3_4_5_M_4;
mds_out[ offset_target + 42 ] = mr_Val_2_3_4_5_M_0;
mds_out[ offset_target + 43 ] = mr_Val_2_3_4_5_M_1;
mds_out[ offset_target + 44 ] = mr_Val_2_3_4_5_M_2;
mds_out[ offset_target + 45 ] = mr_Val_2_3_4_5_M_3;
mds_out[ offset_target + 46 ] = mr_Val_2_3_4_5_M_4;
mds_out[ offset_target + 47 ] = mr_Glu_1_2_3_4_5_M_0;
mds_out[ offset_target + 48 ] = mr_Glu_1_2_3_4_5_M_1;
mds_out[ offset_target + 49 ] = mr_Glu_1_2_3_4_5_M_2;
mds_out[ offset_target + 50 ] = mr_Glu_1_2_3_4_5_M_3;
mds_out[ offset_target + 51 ] = mr_Glu_1_2_3_4_5_M_4;
mds_out[ offset_target + 52 ] = mr_Glu_1_2_3_4_5_M_5;
mds_out[ offset_target + 53 ] = mr_Ile_2_3_4_5_6_M_0;
mds_out[ offset_target + 54 ] = mr_Ile_2_3_4_5_6_M_1;
mds_out[ offset_target + 55 ] = mr_Ile_2_3_4_5_6_M_2;
mds_out[ offset_target + 56 ] = mr_Ile_2_3_4_5_6_M_3;
mds_out[ offset_target + 57 ] = mr_Ile_2_3_4_5_6_M_4;
mds_out[ offset_target + 58 ] = mr_Ile_2_3_4_5_6_M_5;
mds_out[ offset_target + 59 ] = mr_Leu_2_3_4_5_6_M_0;
mds_out[ offset_target + 60 ] = mr_Leu_2_3_4_5_6_M_1;
mds_out[ offset_target + 61 ] = mr_Leu_2_3_4_5_6_M_2;
mds_out[ offset_target + 62 ] = mr_Leu_2_3_4_5_6_M_3;
mds_out[ offset_target + 63 ] = mr_Leu_2_3_4_5_6_M_4;
mds_out[ offset_target + 64 ] = mr_Leu_2_3_4_5_6_M_5;
mds_out[ offset_target + 65 ] = mr_Val_1_2_3_4_5_M_0;
mds_out[ offset_target + 66 ] = mr_Val_1_2_3_4_5_M_1;
mds_out[ offset_target + 67 ] = mr_Val_1_2_3_4_5_M_2;
mds_out[ offset_target + 68 ] = mr_Val_1_2_3_4_5_M_3;
mds_out[ offset_target + 69 ] = mr_Val_1_2_3_4_5_M_4;
mds_out[ offset_target + 70 ] = mr_Val_1_2_3_4_5_M_5;
mds_out[ offset_target + 71 ] = mr_Phe_2_3_4_5_6_7_8_9_M_0;
mds_out[ offset_target + 72 ] = mr_Phe_2_3_4_5_6_7_8_9_M_1;
mds_out[ offset_target + 73 ] = mr_Phe_2_3_4_5_6_7_8_9_M_2;
mds_out[ offset_target + 74 ] = mr_Phe_2_3_4_5_6_7_8_9_M_3;
mds_out[ offset_target + 75 ] = mr_Phe_2_3_4_5_6_7_8_9_M_4;
mds_out[ offset_target + 76 ] = mr_Phe_2_3_4_5_6_7_8_9_M_5;
mds_out[ offset_target + 77 ] = mr_Phe_2_3_4_5_6_7_8_9_M_6;
mds_out[ offset_target + 78 ] = mr_Phe_2_3_4_5_6_7_8_9_M_7;
mds_out[ offset_target + 79 ] = mr_Phe_2_3_4_5_6_7_8_9_M_8;
}
//---------------------------------------------------------------------------------------------------
}